
PID3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000087e4  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004dc  080089d0  080089d0  000189d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008eac  08008eac  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  08008eac  08008eac  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008eac  08008eac  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008eac  08008eac  00018eac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008eb0  08008eb0  00018eb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08008eb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000168  200001e4  08009098  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000034c  08009098  0002034c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cd33  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f03  00000000  00000000  0002cf40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c98  00000000  00000000  0002ee48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bc0  00000000  00000000  0002fae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a992  00000000  00000000  000306a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e38f  00000000  00000000  0004b032  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099e7d  00000000  00000000  000593c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f323e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ab4  00000000  00000000  000f3290  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001e4 	.word	0x200001e4
 8000204:	00000000 	.word	0x00000000
 8000208:	080089b4 	.word	0x080089b4

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200001e8 	.word	0x200001e8
 8000224:	080089b4 	.word	0x080089b4

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_fmul>:
 8000238:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800023c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000240:	bf1e      	ittt	ne
 8000242:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000246:	ea92 0f0c 	teqne	r2, ip
 800024a:	ea93 0f0c 	teqne	r3, ip
 800024e:	d06f      	beq.n	8000330 <__aeabi_fmul+0xf8>
 8000250:	441a      	add	r2, r3
 8000252:	ea80 0c01 	eor.w	ip, r0, r1
 8000256:	0240      	lsls	r0, r0, #9
 8000258:	bf18      	it	ne
 800025a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800025e:	d01e      	beq.n	800029e <__aeabi_fmul+0x66>
 8000260:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000264:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000268:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800026c:	fba0 3101 	umull	r3, r1, r0, r1
 8000270:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000274:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000278:	bf3e      	ittt	cc
 800027a:	0049      	lslcc	r1, r1, #1
 800027c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000280:	005b      	lslcc	r3, r3, #1
 8000282:	ea40 0001 	orr.w	r0, r0, r1
 8000286:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800028a:	2afd      	cmp	r2, #253	; 0xfd
 800028c:	d81d      	bhi.n	80002ca <__aeabi_fmul+0x92>
 800028e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000292:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000296:	bf08      	it	eq
 8000298:	f020 0001 	biceq.w	r0, r0, #1
 800029c:	4770      	bx	lr
 800029e:	f090 0f00 	teq	r0, #0
 80002a2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80002a6:	bf08      	it	eq
 80002a8:	0249      	lsleq	r1, r1, #9
 80002aa:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80002ae:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80002b2:	3a7f      	subs	r2, #127	; 0x7f
 80002b4:	bfc2      	ittt	gt
 80002b6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80002ba:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80002be:	4770      	bxgt	lr
 80002c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002c4:	f04f 0300 	mov.w	r3, #0
 80002c8:	3a01      	subs	r2, #1
 80002ca:	dc5d      	bgt.n	8000388 <__aeabi_fmul+0x150>
 80002cc:	f112 0f19 	cmn.w	r2, #25
 80002d0:	bfdc      	itt	le
 80002d2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80002d6:	4770      	bxle	lr
 80002d8:	f1c2 0200 	rsb	r2, r2, #0
 80002dc:	0041      	lsls	r1, r0, #1
 80002de:	fa21 f102 	lsr.w	r1, r1, r2
 80002e2:	f1c2 0220 	rsb	r2, r2, #32
 80002e6:	fa00 fc02 	lsl.w	ip, r0, r2
 80002ea:	ea5f 0031 	movs.w	r0, r1, rrx
 80002ee:	f140 0000 	adc.w	r0, r0, #0
 80002f2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80002f6:	bf08      	it	eq
 80002f8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80002fc:	4770      	bx	lr
 80002fe:	f092 0f00 	teq	r2, #0
 8000302:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000306:	bf02      	ittt	eq
 8000308:	0040      	lsleq	r0, r0, #1
 800030a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800030e:	3a01      	subeq	r2, #1
 8000310:	d0f9      	beq.n	8000306 <__aeabi_fmul+0xce>
 8000312:	ea40 000c 	orr.w	r0, r0, ip
 8000316:	f093 0f00 	teq	r3, #0
 800031a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800031e:	bf02      	ittt	eq
 8000320:	0049      	lsleq	r1, r1, #1
 8000322:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000326:	3b01      	subeq	r3, #1
 8000328:	d0f9      	beq.n	800031e <__aeabi_fmul+0xe6>
 800032a:	ea41 010c 	orr.w	r1, r1, ip
 800032e:	e78f      	b.n	8000250 <__aeabi_fmul+0x18>
 8000330:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000334:	ea92 0f0c 	teq	r2, ip
 8000338:	bf18      	it	ne
 800033a:	ea93 0f0c 	teqne	r3, ip
 800033e:	d00a      	beq.n	8000356 <__aeabi_fmul+0x11e>
 8000340:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000344:	bf18      	it	ne
 8000346:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800034a:	d1d8      	bne.n	80002fe <__aeabi_fmul+0xc6>
 800034c:	ea80 0001 	eor.w	r0, r0, r1
 8000350:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000354:	4770      	bx	lr
 8000356:	f090 0f00 	teq	r0, #0
 800035a:	bf17      	itett	ne
 800035c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000360:	4608      	moveq	r0, r1
 8000362:	f091 0f00 	teqne	r1, #0
 8000366:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800036a:	d014      	beq.n	8000396 <__aeabi_fmul+0x15e>
 800036c:	ea92 0f0c 	teq	r2, ip
 8000370:	d101      	bne.n	8000376 <__aeabi_fmul+0x13e>
 8000372:	0242      	lsls	r2, r0, #9
 8000374:	d10f      	bne.n	8000396 <__aeabi_fmul+0x15e>
 8000376:	ea93 0f0c 	teq	r3, ip
 800037a:	d103      	bne.n	8000384 <__aeabi_fmul+0x14c>
 800037c:	024b      	lsls	r3, r1, #9
 800037e:	bf18      	it	ne
 8000380:	4608      	movne	r0, r1
 8000382:	d108      	bne.n	8000396 <__aeabi_fmul+0x15e>
 8000384:	ea80 0001 	eor.w	r0, r0, r1
 8000388:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800038c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000390:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000394:	4770      	bx	lr
 8000396:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800039a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 800039e:	4770      	bx	lr

080003a0 <__aeabi_drsub>:
 80003a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003a4:	e002      	b.n	80003ac <__adddf3>
 80003a6:	bf00      	nop

080003a8 <__aeabi_dsub>:
 80003a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003ac <__adddf3>:
 80003ac:	b530      	push	{r4, r5, lr}
 80003ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003b6:	ea94 0f05 	teq	r4, r5
 80003ba:	bf08      	it	eq
 80003bc:	ea90 0f02 	teqeq	r0, r2
 80003c0:	bf1f      	itttt	ne
 80003c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d2:	f000 80e2 	beq.w	800059a <__adddf3+0x1ee>
 80003d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003de:	bfb8      	it	lt
 80003e0:	426d      	neglt	r5, r5
 80003e2:	dd0c      	ble.n	80003fe <__adddf3+0x52>
 80003e4:	442c      	add	r4, r5
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	ea82 0000 	eor.w	r0, r2, r0
 80003f2:	ea83 0101 	eor.w	r1, r3, r1
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	2d36      	cmp	r5, #54	; 0x36
 8000400:	bf88      	it	hi
 8000402:	bd30      	pophi	{r4, r5, pc}
 8000404:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000408:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800040c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000410:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000414:	d002      	beq.n	800041c <__adddf3+0x70>
 8000416:	4240      	negs	r0, r0
 8000418:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800041c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000420:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000424:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000428:	d002      	beq.n	8000430 <__adddf3+0x84>
 800042a:	4252      	negs	r2, r2
 800042c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000430:	ea94 0f05 	teq	r4, r5
 8000434:	f000 80a7 	beq.w	8000586 <__adddf3+0x1da>
 8000438:	f1a4 0401 	sub.w	r4, r4, #1
 800043c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000440:	db0d      	blt.n	800045e <__adddf3+0xb2>
 8000442:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000446:	fa22 f205 	lsr.w	r2, r2, r5
 800044a:	1880      	adds	r0, r0, r2
 800044c:	f141 0100 	adc.w	r1, r1, #0
 8000450:	fa03 f20e 	lsl.w	r2, r3, lr
 8000454:	1880      	adds	r0, r0, r2
 8000456:	fa43 f305 	asr.w	r3, r3, r5
 800045a:	4159      	adcs	r1, r3
 800045c:	e00e      	b.n	800047c <__adddf3+0xd0>
 800045e:	f1a5 0520 	sub.w	r5, r5, #32
 8000462:	f10e 0e20 	add.w	lr, lr, #32
 8000466:	2a01      	cmp	r2, #1
 8000468:	fa03 fc0e 	lsl.w	ip, r3, lr
 800046c:	bf28      	it	cs
 800046e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000472:	fa43 f305 	asr.w	r3, r3, r5
 8000476:	18c0      	adds	r0, r0, r3
 8000478:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800047c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000480:	d507      	bpl.n	8000492 <__adddf3+0xe6>
 8000482:	f04f 0e00 	mov.w	lr, #0
 8000486:	f1dc 0c00 	rsbs	ip, ip, #0
 800048a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800048e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000492:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000496:	d31b      	bcc.n	80004d0 <__adddf3+0x124>
 8000498:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800049c:	d30c      	bcc.n	80004b8 <__adddf3+0x10c>
 800049e:	0849      	lsrs	r1, r1, #1
 80004a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004a8:	f104 0401 	add.w	r4, r4, #1
 80004ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004b4:	f080 809a 	bcs.w	80005ec <__adddf3+0x240>
 80004b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004bc:	bf08      	it	eq
 80004be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c2:	f150 0000 	adcs.w	r0, r0, #0
 80004c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ca:	ea41 0105 	orr.w	r1, r1, r5
 80004ce:	bd30      	pop	{r4, r5, pc}
 80004d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d4:	4140      	adcs	r0, r0
 80004d6:	eb41 0101 	adc.w	r1, r1, r1
 80004da:	3c01      	subs	r4, #1
 80004dc:	bf28      	it	cs
 80004de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004e2:	d2e9      	bcs.n	80004b8 <__adddf3+0x10c>
 80004e4:	f091 0f00 	teq	r1, #0
 80004e8:	bf04      	itt	eq
 80004ea:	4601      	moveq	r1, r0
 80004ec:	2000      	moveq	r0, #0
 80004ee:	fab1 f381 	clz	r3, r1
 80004f2:	bf08      	it	eq
 80004f4:	3320      	addeq	r3, #32
 80004f6:	f1a3 030b 	sub.w	r3, r3, #11
 80004fa:	f1b3 0220 	subs.w	r2, r3, #32
 80004fe:	da0c      	bge.n	800051a <__adddf3+0x16e>
 8000500:	320c      	adds	r2, #12
 8000502:	dd08      	ble.n	8000516 <__adddf3+0x16a>
 8000504:	f102 0c14 	add.w	ip, r2, #20
 8000508:	f1c2 020c 	rsb	r2, r2, #12
 800050c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000510:	fa21 f102 	lsr.w	r1, r1, r2
 8000514:	e00c      	b.n	8000530 <__adddf3+0x184>
 8000516:	f102 0214 	add.w	r2, r2, #20
 800051a:	bfd8      	it	le
 800051c:	f1c2 0c20 	rsble	ip, r2, #32
 8000520:	fa01 f102 	lsl.w	r1, r1, r2
 8000524:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000528:	bfdc      	itt	le
 800052a:	ea41 010c 	orrle.w	r1, r1, ip
 800052e:	4090      	lslle	r0, r2
 8000530:	1ae4      	subs	r4, r4, r3
 8000532:	bfa2      	ittt	ge
 8000534:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000538:	4329      	orrge	r1, r5
 800053a:	bd30      	popge	{r4, r5, pc}
 800053c:	ea6f 0404 	mvn.w	r4, r4
 8000540:	3c1f      	subs	r4, #31
 8000542:	da1c      	bge.n	800057e <__adddf3+0x1d2>
 8000544:	340c      	adds	r4, #12
 8000546:	dc0e      	bgt.n	8000566 <__adddf3+0x1ba>
 8000548:	f104 0414 	add.w	r4, r4, #20
 800054c:	f1c4 0220 	rsb	r2, r4, #32
 8000550:	fa20 f004 	lsr.w	r0, r0, r4
 8000554:	fa01 f302 	lsl.w	r3, r1, r2
 8000558:	ea40 0003 	orr.w	r0, r0, r3
 800055c:	fa21 f304 	lsr.w	r3, r1, r4
 8000560:	ea45 0103 	orr.w	r1, r5, r3
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f1c4 040c 	rsb	r4, r4, #12
 800056a:	f1c4 0220 	rsb	r2, r4, #32
 800056e:	fa20 f002 	lsr.w	r0, r0, r2
 8000572:	fa01 f304 	lsl.w	r3, r1, r4
 8000576:	ea40 0003 	orr.w	r0, r0, r3
 800057a:	4629      	mov	r1, r5
 800057c:	bd30      	pop	{r4, r5, pc}
 800057e:	fa21 f004 	lsr.w	r0, r1, r4
 8000582:	4629      	mov	r1, r5
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	f094 0f00 	teq	r4, #0
 800058a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800058e:	bf06      	itte	eq
 8000590:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000594:	3401      	addeq	r4, #1
 8000596:	3d01      	subne	r5, #1
 8000598:	e74e      	b.n	8000438 <__adddf3+0x8c>
 800059a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800059e:	bf18      	it	ne
 80005a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a4:	d029      	beq.n	80005fa <__adddf3+0x24e>
 80005a6:	ea94 0f05 	teq	r4, r5
 80005aa:	bf08      	it	eq
 80005ac:	ea90 0f02 	teqeq	r0, r2
 80005b0:	d005      	beq.n	80005be <__adddf3+0x212>
 80005b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005b6:	bf04      	itt	eq
 80005b8:	4619      	moveq	r1, r3
 80005ba:	4610      	moveq	r0, r2
 80005bc:	bd30      	pop	{r4, r5, pc}
 80005be:	ea91 0f03 	teq	r1, r3
 80005c2:	bf1e      	ittt	ne
 80005c4:	2100      	movne	r1, #0
 80005c6:	2000      	movne	r0, #0
 80005c8:	bd30      	popne	{r4, r5, pc}
 80005ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ce:	d105      	bne.n	80005dc <__adddf3+0x230>
 80005d0:	0040      	lsls	r0, r0, #1
 80005d2:	4149      	adcs	r1, r1
 80005d4:	bf28      	it	cs
 80005d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd30      	pop	{r4, r5, pc}
 80005dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005e0:	bf3c      	itt	cc
 80005e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005e6:	bd30      	popcc	{r4, r5, pc}
 80005e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005f4:	f04f 0000 	mov.w	r0, #0
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005fe:	bf1a      	itte	ne
 8000600:	4619      	movne	r1, r3
 8000602:	4610      	movne	r0, r2
 8000604:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000608:	bf1c      	itt	ne
 800060a:	460b      	movne	r3, r1
 800060c:	4602      	movne	r2, r0
 800060e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000612:	bf06      	itte	eq
 8000614:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000618:	ea91 0f03 	teqeq	r1, r3
 800061c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	bf00      	nop

08000624 <__aeabi_ui2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000638:	f04f 0500 	mov.w	r5, #0
 800063c:	f04f 0100 	mov.w	r1, #0
 8000640:	e750      	b.n	80004e4 <__adddf3+0x138>
 8000642:	bf00      	nop

08000644 <__aeabi_i2d>:
 8000644:	f090 0f00 	teq	r0, #0
 8000648:	bf04      	itt	eq
 800064a:	2100      	moveq	r1, #0
 800064c:	4770      	bxeq	lr
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000654:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000658:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800065c:	bf48      	it	mi
 800065e:	4240      	negmi	r0, r0
 8000660:	f04f 0100 	mov.w	r1, #0
 8000664:	e73e      	b.n	80004e4 <__adddf3+0x138>
 8000666:	bf00      	nop

08000668 <__aeabi_f2d>:
 8000668:	0042      	lsls	r2, r0, #1
 800066a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800066e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000672:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000676:	bf1f      	itttt	ne
 8000678:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800067c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000680:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000684:	4770      	bxne	lr
 8000686:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800068a:	bf08      	it	eq
 800068c:	4770      	bxeq	lr
 800068e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000692:	bf04      	itt	eq
 8000694:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000698:	4770      	bxeq	lr
 800069a:	b530      	push	{r4, r5, lr}
 800069c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	e71c      	b.n	80004e4 <__adddf3+0x138>
 80006aa:	bf00      	nop

080006ac <__aeabi_ul2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f04f 0500 	mov.w	r5, #0
 80006ba:	e00a      	b.n	80006d2 <__aeabi_l2d+0x16>

080006bc <__aeabi_l2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ca:	d502      	bpl.n	80006d2 <__aeabi_l2d+0x16>
 80006cc:	4240      	negs	r0, r0
 80006ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006de:	f43f aed8 	beq.w	8000492 <__adddf3+0xe6>
 80006e2:	f04f 0203 	mov.w	r2, #3
 80006e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ea:	bf18      	it	ne
 80006ec:	3203      	addne	r2, #3
 80006ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f2:	bf18      	it	ne
 80006f4:	3203      	addne	r2, #3
 80006f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fa:	f1c2 0320 	rsb	r3, r2, #32
 80006fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000702:	fa20 f002 	lsr.w	r0, r0, r2
 8000706:	fa01 fe03 	lsl.w	lr, r1, r3
 800070a:	ea40 000e 	orr.w	r0, r0, lr
 800070e:	fa21 f102 	lsr.w	r1, r1, r2
 8000712:	4414      	add	r4, r2
 8000714:	e6bd      	b.n	8000492 <__adddf3+0xe6>
 8000716:	bf00      	nop

08000718 <__aeabi_dmul>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8de 	bleq	80008f4 <__aeabi_dmul+0x1dc>
 8000738:	442c      	add	r4, r5
 800073a:	ea81 0603 	eor.w	r6, r1, r3
 800073e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000742:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000746:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800074a:	bf18      	it	ne
 800074c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000750:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000754:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000758:	d038      	beq.n	80007cc <__aeabi_dmul+0xb4>
 800075a:	fba0 ce02 	umull	ip, lr, r0, r2
 800075e:	f04f 0500 	mov.w	r5, #0
 8000762:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000766:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800076a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800076e:	f04f 0600 	mov.w	r6, #0
 8000772:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000776:	f09c 0f00 	teq	ip, #0
 800077a:	bf18      	it	ne
 800077c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000780:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000784:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000788:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800078c:	d204      	bcs.n	8000798 <__aeabi_dmul+0x80>
 800078e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000792:	416d      	adcs	r5, r5
 8000794:	eb46 0606 	adc.w	r6, r6, r6
 8000798:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800079c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80007a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80007a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80007a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80007ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80007b0:	bf88      	it	hi
 80007b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80007b6:	d81e      	bhi.n	80007f6 <__aeabi_dmul+0xde>
 80007b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80007bc:	bf08      	it	eq
 80007be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80007c2:	f150 0000 	adcs.w	r0, r0, #0
 80007c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80007d0:	ea46 0101 	orr.w	r1, r6, r1
 80007d4:	ea40 0002 	orr.w	r0, r0, r2
 80007d8:	ea81 0103 	eor.w	r1, r1, r3
 80007dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007e0:	bfc2      	ittt	gt
 80007e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007ea:	bd70      	popgt	{r4, r5, r6, pc}
 80007ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007f0:	f04f 0e00 	mov.w	lr, #0
 80007f4:	3c01      	subs	r4, #1
 80007f6:	f300 80ab 	bgt.w	8000950 <__aeabi_dmul+0x238>
 80007fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80007fe:	bfde      	ittt	le
 8000800:	2000      	movle	r0, #0
 8000802:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000806:	bd70      	pople	{r4, r5, r6, pc}
 8000808:	f1c4 0400 	rsb	r4, r4, #0
 800080c:	3c20      	subs	r4, #32
 800080e:	da35      	bge.n	800087c <__aeabi_dmul+0x164>
 8000810:	340c      	adds	r4, #12
 8000812:	dc1b      	bgt.n	800084c <__aeabi_dmul+0x134>
 8000814:	f104 0414 	add.w	r4, r4, #20
 8000818:	f1c4 0520 	rsb	r5, r4, #32
 800081c:	fa00 f305 	lsl.w	r3, r0, r5
 8000820:	fa20 f004 	lsr.w	r0, r0, r4
 8000824:	fa01 f205 	lsl.w	r2, r1, r5
 8000828:	ea40 0002 	orr.w	r0, r0, r2
 800082c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000830:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000834:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000838:	fa21 f604 	lsr.w	r6, r1, r4
 800083c:	eb42 0106 	adc.w	r1, r2, r6
 8000840:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000844:	bf08      	it	eq
 8000846:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800084a:	bd70      	pop	{r4, r5, r6, pc}
 800084c:	f1c4 040c 	rsb	r4, r4, #12
 8000850:	f1c4 0520 	rsb	r5, r4, #32
 8000854:	fa00 f304 	lsl.w	r3, r0, r4
 8000858:	fa20 f005 	lsr.w	r0, r0, r5
 800085c:	fa01 f204 	lsl.w	r2, r1, r4
 8000860:	ea40 0002 	orr.w	r0, r0, r2
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000868:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800086c:	f141 0100 	adc.w	r1, r1, #0
 8000870:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000874:	bf08      	it	eq
 8000876:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800087a:	bd70      	pop	{r4, r5, r6, pc}
 800087c:	f1c4 0520 	rsb	r5, r4, #32
 8000880:	fa00 f205 	lsl.w	r2, r0, r5
 8000884:	ea4e 0e02 	orr.w	lr, lr, r2
 8000888:	fa20 f304 	lsr.w	r3, r0, r4
 800088c:	fa01 f205 	lsl.w	r2, r1, r5
 8000890:	ea43 0302 	orr.w	r3, r3, r2
 8000894:	fa21 f004 	lsr.w	r0, r1, r4
 8000898:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800089c:	fa21 f204 	lsr.w	r2, r1, r4
 80008a0:	ea20 0002 	bic.w	r0, r0, r2
 80008a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80008a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80008ac:	bf08      	it	eq
 80008ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80008b2:	bd70      	pop	{r4, r5, r6, pc}
 80008b4:	f094 0f00 	teq	r4, #0
 80008b8:	d10f      	bne.n	80008da <__aeabi_dmul+0x1c2>
 80008ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80008be:	0040      	lsls	r0, r0, #1
 80008c0:	eb41 0101 	adc.w	r1, r1, r1
 80008c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c8:	bf08      	it	eq
 80008ca:	3c01      	subeq	r4, #1
 80008cc:	d0f7      	beq.n	80008be <__aeabi_dmul+0x1a6>
 80008ce:	ea41 0106 	orr.w	r1, r1, r6
 80008d2:	f095 0f00 	teq	r5, #0
 80008d6:	bf18      	it	ne
 80008d8:	4770      	bxne	lr
 80008da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80008de:	0052      	lsls	r2, r2, #1
 80008e0:	eb43 0303 	adc.w	r3, r3, r3
 80008e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80008e8:	bf08      	it	eq
 80008ea:	3d01      	subeq	r5, #1
 80008ec:	d0f7      	beq.n	80008de <__aeabi_dmul+0x1c6>
 80008ee:	ea43 0306 	orr.w	r3, r3, r6
 80008f2:	4770      	bx	lr
 80008f4:	ea94 0f0c 	teq	r4, ip
 80008f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008fc:	bf18      	it	ne
 80008fe:	ea95 0f0c 	teqne	r5, ip
 8000902:	d00c      	beq.n	800091e <__aeabi_dmul+0x206>
 8000904:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000908:	bf18      	it	ne
 800090a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800090e:	d1d1      	bne.n	80008b4 <__aeabi_dmul+0x19c>
 8000910:	ea81 0103 	eor.w	r1, r1, r3
 8000914:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000918:	f04f 0000 	mov.w	r0, #0
 800091c:	bd70      	pop	{r4, r5, r6, pc}
 800091e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000922:	bf06      	itte	eq
 8000924:	4610      	moveq	r0, r2
 8000926:	4619      	moveq	r1, r3
 8000928:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800092c:	d019      	beq.n	8000962 <__aeabi_dmul+0x24a>
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	d102      	bne.n	800093a <__aeabi_dmul+0x222>
 8000934:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000938:	d113      	bne.n	8000962 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	d105      	bne.n	800094c <__aeabi_dmul+0x234>
 8000940:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000944:	bf1c      	itt	ne
 8000946:	4610      	movne	r0, r2
 8000948:	4619      	movne	r1, r3
 800094a:	d10a      	bne.n	8000962 <__aeabi_dmul+0x24a>
 800094c:	ea81 0103 	eor.w	r1, r1, r3
 8000950:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000954:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000958:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800095c:	f04f 0000 	mov.w	r0, #0
 8000960:	bd70      	pop	{r4, r5, r6, pc}
 8000962:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000966:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800096a:	bd70      	pop	{r4, r5, r6, pc}

0800096c <__aeabi_ddiv>:
 800096c:	b570      	push	{r4, r5, r6, lr}
 800096e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000972:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000976:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800097a:	bf1d      	ittte	ne
 800097c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000980:	ea94 0f0c 	teqne	r4, ip
 8000984:	ea95 0f0c 	teqne	r5, ip
 8000988:	f000 f8a7 	bleq	8000ada <__aeabi_ddiv+0x16e>
 800098c:	eba4 0405 	sub.w	r4, r4, r5
 8000990:	ea81 0e03 	eor.w	lr, r1, r3
 8000994:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000998:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800099c:	f000 8088 	beq.w	8000ab0 <__aeabi_ddiv+0x144>
 80009a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80009a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80009a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80009ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80009b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80009b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80009b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80009bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80009c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80009c4:	429d      	cmp	r5, r3
 80009c6:	bf08      	it	eq
 80009c8:	4296      	cmpeq	r6, r2
 80009ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80009ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80009d2:	d202      	bcs.n	80009da <__aeabi_ddiv+0x6e>
 80009d4:	085b      	lsrs	r3, r3, #1
 80009d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80009da:	1ab6      	subs	r6, r6, r2
 80009dc:	eb65 0503 	sbc.w	r5, r5, r3
 80009e0:	085b      	lsrs	r3, r3, #1
 80009e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80009ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80009ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80009f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009f6:	bf22      	ittt	cs
 80009f8:	1ab6      	subcs	r6, r6, r2
 80009fa:	4675      	movcs	r5, lr
 80009fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000a00:	085b      	lsrs	r3, r3, #1
 8000a02:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a06:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a0a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a0e:	bf22      	ittt	cs
 8000a10:	1ab6      	subcs	r6, r6, r2
 8000a12:	4675      	movcs	r5, lr
 8000a14:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a18:	085b      	lsrs	r3, r3, #1
 8000a1a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a1e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a22:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a26:	bf22      	ittt	cs
 8000a28:	1ab6      	subcs	r6, r6, r2
 8000a2a:	4675      	movcs	r5, lr
 8000a2c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a30:	085b      	lsrs	r3, r3, #1
 8000a32:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a36:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a3a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a3e:	bf22      	ittt	cs
 8000a40:	1ab6      	subcs	r6, r6, r2
 8000a42:	4675      	movcs	r5, lr
 8000a44:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a48:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a4c:	d018      	beq.n	8000a80 <__aeabi_ddiv+0x114>
 8000a4e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a52:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a56:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a5a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a5e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a62:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a66:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a6a:	d1c0      	bne.n	80009ee <__aeabi_ddiv+0x82>
 8000a6c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a70:	d10b      	bne.n	8000a8a <__aeabi_ddiv+0x11e>
 8000a72:	ea41 0100 	orr.w	r1, r1, r0
 8000a76:	f04f 0000 	mov.w	r0, #0
 8000a7a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a7e:	e7b6      	b.n	80009ee <__aeabi_ddiv+0x82>
 8000a80:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a84:	bf04      	itt	eq
 8000a86:	4301      	orreq	r1, r0
 8000a88:	2000      	moveq	r0, #0
 8000a8a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a8e:	bf88      	it	hi
 8000a90:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a94:	f63f aeaf 	bhi.w	80007f6 <__aeabi_dmul+0xde>
 8000a98:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a9c:	bf04      	itt	eq
 8000a9e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000aa2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000aa6:	f150 0000 	adcs.w	r0, r0, #0
 8000aaa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000aae:	bd70      	pop	{r4, r5, r6, pc}
 8000ab0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000ab4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000ab8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000abc:	bfc2      	ittt	gt
 8000abe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000ac2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000ac6:	bd70      	popgt	{r4, r5, r6, pc}
 8000ac8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000acc:	f04f 0e00 	mov.w	lr, #0
 8000ad0:	3c01      	subs	r4, #1
 8000ad2:	e690      	b.n	80007f6 <__aeabi_dmul+0xde>
 8000ad4:	ea45 0e06 	orr.w	lr, r5, r6
 8000ad8:	e68d      	b.n	80007f6 <__aeabi_dmul+0xde>
 8000ada:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000ade:	ea94 0f0c 	teq	r4, ip
 8000ae2:	bf08      	it	eq
 8000ae4:	ea95 0f0c 	teqeq	r5, ip
 8000ae8:	f43f af3b 	beq.w	8000962 <__aeabi_dmul+0x24a>
 8000aec:	ea94 0f0c 	teq	r4, ip
 8000af0:	d10a      	bne.n	8000b08 <__aeabi_ddiv+0x19c>
 8000af2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000af6:	f47f af34 	bne.w	8000962 <__aeabi_dmul+0x24a>
 8000afa:	ea95 0f0c 	teq	r5, ip
 8000afe:	f47f af25 	bne.w	800094c <__aeabi_dmul+0x234>
 8000b02:	4610      	mov	r0, r2
 8000b04:	4619      	mov	r1, r3
 8000b06:	e72c      	b.n	8000962 <__aeabi_dmul+0x24a>
 8000b08:	ea95 0f0c 	teq	r5, ip
 8000b0c:	d106      	bne.n	8000b1c <__aeabi_ddiv+0x1b0>
 8000b0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000b12:	f43f aefd 	beq.w	8000910 <__aeabi_dmul+0x1f8>
 8000b16:	4610      	mov	r0, r2
 8000b18:	4619      	mov	r1, r3
 8000b1a:	e722      	b.n	8000962 <__aeabi_dmul+0x24a>
 8000b1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000b20:	bf18      	it	ne
 8000b22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000b26:	f47f aec5 	bne.w	80008b4 <__aeabi_dmul+0x19c>
 8000b2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000b2e:	f47f af0d 	bne.w	800094c <__aeabi_dmul+0x234>
 8000b32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b36:	f47f aeeb 	bne.w	8000910 <__aeabi_dmul+0x1f8>
 8000b3a:	e712      	b.n	8000962 <__aeabi_dmul+0x24a>

08000b3c <__gedf2>:
 8000b3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000b40:	e006      	b.n	8000b50 <__cmpdf2+0x4>
 8000b42:	bf00      	nop

08000b44 <__ledf2>:
 8000b44:	f04f 0c01 	mov.w	ip, #1
 8000b48:	e002      	b.n	8000b50 <__cmpdf2+0x4>
 8000b4a:	bf00      	nop

08000b4c <__cmpdf2>:
 8000b4c:	f04f 0c01 	mov.w	ip, #1
 8000b50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	bf18      	it	ne
 8000b62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b66:	d01b      	beq.n	8000ba0 <__cmpdf2+0x54>
 8000b68:	b001      	add	sp, #4
 8000b6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b6e:	bf0c      	ite	eq
 8000b70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b74:	ea91 0f03 	teqne	r1, r3
 8000b78:	bf02      	ittt	eq
 8000b7a:	ea90 0f02 	teqeq	r0, r2
 8000b7e:	2000      	moveq	r0, #0
 8000b80:	4770      	bxeq	lr
 8000b82:	f110 0f00 	cmn.w	r0, #0
 8000b86:	ea91 0f03 	teq	r1, r3
 8000b8a:	bf58      	it	pl
 8000b8c:	4299      	cmppl	r1, r3
 8000b8e:	bf08      	it	eq
 8000b90:	4290      	cmpeq	r0, r2
 8000b92:	bf2c      	ite	cs
 8000b94:	17d8      	asrcs	r0, r3, #31
 8000b96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b9a:	f040 0001 	orr.w	r0, r0, #1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba8:	d102      	bne.n	8000bb0 <__cmpdf2+0x64>
 8000baa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000bae:	d107      	bne.n	8000bc0 <__cmpdf2+0x74>
 8000bb0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb8:	d1d6      	bne.n	8000b68 <__cmpdf2+0x1c>
 8000bba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bbe:	d0d3      	beq.n	8000b68 <__cmpdf2+0x1c>
 8000bc0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_cdrcmple>:
 8000bc8:	4684      	mov	ip, r0
 8000bca:	4610      	mov	r0, r2
 8000bcc:	4662      	mov	r2, ip
 8000bce:	468c      	mov	ip, r1
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4663      	mov	r3, ip
 8000bd4:	e000      	b.n	8000bd8 <__aeabi_cdcmpeq>
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_cdcmpeq>:
 8000bd8:	b501      	push	{r0, lr}
 8000bda:	f7ff ffb7 	bl	8000b4c <__cmpdf2>
 8000bde:	2800      	cmp	r0, #0
 8000be0:	bf48      	it	mi
 8000be2:	f110 0f00 	cmnmi.w	r0, #0
 8000be6:	bd01      	pop	{r0, pc}

08000be8 <__aeabi_dcmpeq>:
 8000be8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bec:	f7ff fff4 	bl	8000bd8 <__aeabi_cdcmpeq>
 8000bf0:	bf0c      	ite	eq
 8000bf2:	2001      	moveq	r0, #1
 8000bf4:	2000      	movne	r0, #0
 8000bf6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bfa:	bf00      	nop

08000bfc <__aeabi_dcmplt>:
 8000bfc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c00:	f7ff ffea 	bl	8000bd8 <__aeabi_cdcmpeq>
 8000c04:	bf34      	ite	cc
 8000c06:	2001      	movcc	r0, #1
 8000c08:	2000      	movcs	r0, #0
 8000c0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c0e:	bf00      	nop

08000c10 <__aeabi_dcmple>:
 8000c10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c14:	f7ff ffe0 	bl	8000bd8 <__aeabi_cdcmpeq>
 8000c18:	bf94      	ite	ls
 8000c1a:	2001      	movls	r0, #1
 8000c1c:	2000      	movhi	r0, #0
 8000c1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c22:	bf00      	nop

08000c24 <__aeabi_dcmpge>:
 8000c24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c28:	f7ff ffce 	bl	8000bc8 <__aeabi_cdrcmple>
 8000c2c:	bf94      	ite	ls
 8000c2e:	2001      	movls	r0, #1
 8000c30:	2000      	movhi	r0, #0
 8000c32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c36:	bf00      	nop

08000c38 <__aeabi_dcmpgt>:
 8000c38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c3c:	f7ff ffc4 	bl	8000bc8 <__aeabi_cdrcmple>
 8000c40:	bf34      	ite	cc
 8000c42:	2001      	movcc	r0, #1
 8000c44:	2000      	movcs	r0, #0
 8000c46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c4a:	bf00      	nop

08000c4c <__aeabi_dcmpun>:
 8000c4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c54:	d102      	bne.n	8000c5c <__aeabi_dcmpun+0x10>
 8000c56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c5a:	d10a      	bne.n	8000c72 <__aeabi_dcmpun+0x26>
 8000c5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c64:	d102      	bne.n	8000c6c <__aeabi_dcmpun+0x20>
 8000c66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c6a:	d102      	bne.n	8000c72 <__aeabi_dcmpun+0x26>
 8000c6c:	f04f 0000 	mov.w	r0, #0
 8000c70:	4770      	bx	lr
 8000c72:	f04f 0001 	mov.w	r0, #1
 8000c76:	4770      	bx	lr

08000c78 <__aeabi_d2iz>:
 8000c78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c80:	d215      	bcs.n	8000cae <__aeabi_d2iz+0x36>
 8000c82:	d511      	bpl.n	8000ca8 <__aeabi_d2iz+0x30>
 8000c84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c8c:	d912      	bls.n	8000cb4 <__aeabi_d2iz+0x3c>
 8000c8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ca2:	bf18      	it	ne
 8000ca4:	4240      	negne	r0, r0
 8000ca6:	4770      	bx	lr
 8000ca8:	f04f 0000 	mov.w	r0, #0
 8000cac:	4770      	bx	lr
 8000cae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000cb2:	d105      	bne.n	8000cc0 <__aeabi_d2iz+0x48>
 8000cb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000cb8:	bf08      	it	eq
 8000cba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000cbe:	4770      	bx	lr
 8000cc0:	f04f 0000 	mov.w	r0, #0
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_d2uiz>:
 8000cc8:	004a      	lsls	r2, r1, #1
 8000cca:	d211      	bcs.n	8000cf0 <__aeabi_d2uiz+0x28>
 8000ccc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000cd0:	d211      	bcs.n	8000cf6 <__aeabi_d2uiz+0x2e>
 8000cd2:	d50d      	bpl.n	8000cf0 <__aeabi_d2uiz+0x28>
 8000cd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000cd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000cdc:	d40e      	bmi.n	8000cfc <__aeabi_d2uiz+0x34>
 8000cde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ce2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ce6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000cea:	fa23 f002 	lsr.w	r0, r3, r2
 8000cee:	4770      	bx	lr
 8000cf0:	f04f 0000 	mov.w	r0, #0
 8000cf4:	4770      	bx	lr
 8000cf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000cfa:	d102      	bne.n	8000d02 <__aeabi_d2uiz+0x3a>
 8000cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000d00:	4770      	bx	lr
 8000d02:	f04f 0000 	mov.w	r0, #0
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2f>:
 8000d08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000d0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000d10:	bf24      	itt	cs
 8000d12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000d16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000d1a:	d90d      	bls.n	8000d38 <__aeabi_d2f+0x30>
 8000d1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000d24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000d28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000d2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000d30:	bf08      	it	eq
 8000d32:	f020 0001 	biceq.w	r0, r0, #1
 8000d36:	4770      	bx	lr
 8000d38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000d3c:	d121      	bne.n	8000d82 <__aeabi_d2f+0x7a>
 8000d3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000d42:	bfbc      	itt	lt
 8000d44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000d48:	4770      	bxlt	lr
 8000d4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000d4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000d52:	f1c2 0218 	rsb	r2, r2, #24
 8000d56:	f1c2 0c20 	rsb	ip, r2, #32
 8000d5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000d5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000d62:	bf18      	it	ne
 8000d64:	f040 0001 	orrne.w	r0, r0, #1
 8000d68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000d6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000d70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000d74:	ea40 000c 	orr.w	r0, r0, ip
 8000d78:	fa23 f302 	lsr.w	r3, r3, r2
 8000d7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000d80:	e7cc      	b.n	8000d1c <__aeabi_d2f+0x14>
 8000d82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000d86:	d107      	bne.n	8000d98 <__aeabi_d2f+0x90>
 8000d88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000d92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000d96:	4770      	bxne	lr
 8000d98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000d9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000da0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop

08000da8 <__aeabi_frsub>:
 8000da8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000dac:	e002      	b.n	8000db4 <__addsf3>
 8000dae:	bf00      	nop

08000db0 <__aeabi_fsub>:
 8000db0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000db4 <__addsf3>:
 8000db4:	0042      	lsls	r2, r0, #1
 8000db6:	bf1f      	itttt	ne
 8000db8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000dbc:	ea92 0f03 	teqne	r2, r3
 8000dc0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000dc4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dc8:	d06a      	beq.n	8000ea0 <__addsf3+0xec>
 8000dca:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000dce:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000dd2:	bfc1      	itttt	gt
 8000dd4:	18d2      	addgt	r2, r2, r3
 8000dd6:	4041      	eorgt	r1, r0
 8000dd8:	4048      	eorgt	r0, r1
 8000dda:	4041      	eorgt	r1, r0
 8000ddc:	bfb8      	it	lt
 8000dde:	425b      	neglt	r3, r3
 8000de0:	2b19      	cmp	r3, #25
 8000de2:	bf88      	it	hi
 8000de4:	4770      	bxhi	lr
 8000de6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000dea:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dee:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000df2:	bf18      	it	ne
 8000df4:	4240      	negne	r0, r0
 8000df6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000dfa:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000dfe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000e02:	bf18      	it	ne
 8000e04:	4249      	negne	r1, r1
 8000e06:	ea92 0f03 	teq	r2, r3
 8000e0a:	d03f      	beq.n	8000e8c <__addsf3+0xd8>
 8000e0c:	f1a2 0201 	sub.w	r2, r2, #1
 8000e10:	fa41 fc03 	asr.w	ip, r1, r3
 8000e14:	eb10 000c 	adds.w	r0, r0, ip
 8000e18:	f1c3 0320 	rsb	r3, r3, #32
 8000e1c:	fa01 f103 	lsl.w	r1, r1, r3
 8000e20:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000e24:	d502      	bpl.n	8000e2c <__addsf3+0x78>
 8000e26:	4249      	negs	r1, r1
 8000e28:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000e2c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000e30:	d313      	bcc.n	8000e5a <__addsf3+0xa6>
 8000e32:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000e36:	d306      	bcc.n	8000e46 <__addsf3+0x92>
 8000e38:	0840      	lsrs	r0, r0, #1
 8000e3a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000e3e:	f102 0201 	add.w	r2, r2, #1
 8000e42:	2afe      	cmp	r2, #254	; 0xfe
 8000e44:	d251      	bcs.n	8000eea <__addsf3+0x136>
 8000e46:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000e4a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e4e:	bf08      	it	eq
 8000e50:	f020 0001 	biceq.w	r0, r0, #1
 8000e54:	ea40 0003 	orr.w	r0, r0, r3
 8000e58:	4770      	bx	lr
 8000e5a:	0049      	lsls	r1, r1, #1
 8000e5c:	eb40 0000 	adc.w	r0, r0, r0
 8000e60:	3a01      	subs	r2, #1
 8000e62:	bf28      	it	cs
 8000e64:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000e68:	d2ed      	bcs.n	8000e46 <__addsf3+0x92>
 8000e6a:	fab0 fc80 	clz	ip, r0
 8000e6e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000e72:	ebb2 020c 	subs.w	r2, r2, ip
 8000e76:	fa00 f00c 	lsl.w	r0, r0, ip
 8000e7a:	bfaa      	itet	ge
 8000e7c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000e80:	4252      	neglt	r2, r2
 8000e82:	4318      	orrge	r0, r3
 8000e84:	bfbc      	itt	lt
 8000e86:	40d0      	lsrlt	r0, r2
 8000e88:	4318      	orrlt	r0, r3
 8000e8a:	4770      	bx	lr
 8000e8c:	f092 0f00 	teq	r2, #0
 8000e90:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000e94:	bf06      	itte	eq
 8000e96:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000e9a:	3201      	addeq	r2, #1
 8000e9c:	3b01      	subne	r3, #1
 8000e9e:	e7b5      	b.n	8000e0c <__addsf3+0x58>
 8000ea0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ea4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ea8:	bf18      	it	ne
 8000eaa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000eae:	d021      	beq.n	8000ef4 <__addsf3+0x140>
 8000eb0:	ea92 0f03 	teq	r2, r3
 8000eb4:	d004      	beq.n	8000ec0 <__addsf3+0x10c>
 8000eb6:	f092 0f00 	teq	r2, #0
 8000eba:	bf08      	it	eq
 8000ebc:	4608      	moveq	r0, r1
 8000ebe:	4770      	bx	lr
 8000ec0:	ea90 0f01 	teq	r0, r1
 8000ec4:	bf1c      	itt	ne
 8000ec6:	2000      	movne	r0, #0
 8000ec8:	4770      	bxne	lr
 8000eca:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ece:	d104      	bne.n	8000eda <__addsf3+0x126>
 8000ed0:	0040      	lsls	r0, r0, #1
 8000ed2:	bf28      	it	cs
 8000ed4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	4770      	bx	lr
 8000eda:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ede:	bf3c      	itt	cc
 8000ee0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ee4:	4770      	bxcc	lr
 8000ee6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000eea:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000eee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ef2:	4770      	bx	lr
 8000ef4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ef8:	bf16      	itet	ne
 8000efa:	4608      	movne	r0, r1
 8000efc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000f00:	4601      	movne	r1, r0
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	bf06      	itte	eq
 8000f06:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000f0a:	ea90 0f01 	teqeq	r0, r1
 8000f0e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000f12:	4770      	bx	lr

08000f14 <__aeabi_ui2f>:
 8000f14:	f04f 0300 	mov.w	r3, #0
 8000f18:	e004      	b.n	8000f24 <__aeabi_i2f+0x8>
 8000f1a:	bf00      	nop

08000f1c <__aeabi_i2f>:
 8000f1c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000f20:	bf48      	it	mi
 8000f22:	4240      	negmi	r0, r0
 8000f24:	ea5f 0c00 	movs.w	ip, r0
 8000f28:	bf08      	it	eq
 8000f2a:	4770      	bxeq	lr
 8000f2c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000f30:	4601      	mov	r1, r0
 8000f32:	f04f 0000 	mov.w	r0, #0
 8000f36:	e01c      	b.n	8000f72 <__aeabi_l2f+0x2a>

08000f38 <__aeabi_ul2f>:
 8000f38:	ea50 0201 	orrs.w	r2, r0, r1
 8000f3c:	bf08      	it	eq
 8000f3e:	4770      	bxeq	lr
 8000f40:	f04f 0300 	mov.w	r3, #0
 8000f44:	e00a      	b.n	8000f5c <__aeabi_l2f+0x14>
 8000f46:	bf00      	nop

08000f48 <__aeabi_l2f>:
 8000f48:	ea50 0201 	orrs.w	r2, r0, r1
 8000f4c:	bf08      	it	eq
 8000f4e:	4770      	bxeq	lr
 8000f50:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000f54:	d502      	bpl.n	8000f5c <__aeabi_l2f+0x14>
 8000f56:	4240      	negs	r0, r0
 8000f58:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f5c:	ea5f 0c01 	movs.w	ip, r1
 8000f60:	bf02      	ittt	eq
 8000f62:	4684      	moveq	ip, r0
 8000f64:	4601      	moveq	r1, r0
 8000f66:	2000      	moveq	r0, #0
 8000f68:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000f6c:	bf08      	it	eq
 8000f6e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000f72:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000f76:	fabc f28c 	clz	r2, ip
 8000f7a:	3a08      	subs	r2, #8
 8000f7c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000f80:	db10      	blt.n	8000fa4 <__aeabi_l2f+0x5c>
 8000f82:	fa01 fc02 	lsl.w	ip, r1, r2
 8000f86:	4463      	add	r3, ip
 8000f88:	fa00 fc02 	lsl.w	ip, r0, r2
 8000f8c:	f1c2 0220 	rsb	r2, r2, #32
 8000f90:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000f94:	fa20 f202 	lsr.w	r2, r0, r2
 8000f98:	eb43 0002 	adc.w	r0, r3, r2
 8000f9c:	bf08      	it	eq
 8000f9e:	f020 0001 	biceq.w	r0, r0, #1
 8000fa2:	4770      	bx	lr
 8000fa4:	f102 0220 	add.w	r2, r2, #32
 8000fa8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000fac:	f1c2 0220 	rsb	r2, r2, #32
 8000fb0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000fb4:	fa21 f202 	lsr.w	r2, r1, r2
 8000fb8:	eb43 0002 	adc.w	r0, r3, r2
 8000fbc:	bf08      	it	eq
 8000fbe:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000fc2:	4770      	bx	lr

08000fc4 <__gesf2>:
 8000fc4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fc8:	e006      	b.n	8000fd8 <__cmpsf2+0x4>
 8000fca:	bf00      	nop

08000fcc <__lesf2>:
 8000fcc:	f04f 0c01 	mov.w	ip, #1
 8000fd0:	e002      	b.n	8000fd8 <__cmpsf2+0x4>
 8000fd2:	bf00      	nop

08000fd4 <__cmpsf2>:
 8000fd4:	f04f 0c01 	mov.w	ip, #1
 8000fd8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fdc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fe0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fe4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fe8:	bf18      	it	ne
 8000fea:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fee:	d011      	beq.n	8001014 <__cmpsf2+0x40>
 8000ff0:	b001      	add	sp, #4
 8000ff2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000ff6:	bf18      	it	ne
 8000ff8:	ea90 0f01 	teqne	r0, r1
 8000ffc:	bf58      	it	pl
 8000ffe:	ebb2 0003 	subspl.w	r0, r2, r3
 8001002:	bf88      	it	hi
 8001004:	17c8      	asrhi	r0, r1, #31
 8001006:	bf38      	it	cc
 8001008:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800100c:	bf18      	it	ne
 800100e:	f040 0001 	orrne.w	r0, r0, #1
 8001012:	4770      	bx	lr
 8001014:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001018:	d102      	bne.n	8001020 <__cmpsf2+0x4c>
 800101a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800101e:	d105      	bne.n	800102c <__cmpsf2+0x58>
 8001020:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001024:	d1e4      	bne.n	8000ff0 <__cmpsf2+0x1c>
 8001026:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800102a:	d0e1      	beq.n	8000ff0 <__cmpsf2+0x1c>
 800102c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <__aeabi_cfrcmple>:
 8001034:	4684      	mov	ip, r0
 8001036:	4608      	mov	r0, r1
 8001038:	4661      	mov	r1, ip
 800103a:	e7ff      	b.n	800103c <__aeabi_cfcmpeq>

0800103c <__aeabi_cfcmpeq>:
 800103c:	b50f      	push	{r0, r1, r2, r3, lr}
 800103e:	f7ff ffc9 	bl	8000fd4 <__cmpsf2>
 8001042:	2800      	cmp	r0, #0
 8001044:	bf48      	it	mi
 8001046:	f110 0f00 	cmnmi.w	r0, #0
 800104a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800104c <__aeabi_fcmpeq>:
 800104c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001050:	f7ff fff4 	bl	800103c <__aeabi_cfcmpeq>
 8001054:	bf0c      	ite	eq
 8001056:	2001      	moveq	r0, #1
 8001058:	2000      	movne	r0, #0
 800105a:	f85d fb08 	ldr.w	pc, [sp], #8
 800105e:	bf00      	nop

08001060 <__aeabi_fcmplt>:
 8001060:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001064:	f7ff ffea 	bl	800103c <__aeabi_cfcmpeq>
 8001068:	bf34      	ite	cc
 800106a:	2001      	movcc	r0, #1
 800106c:	2000      	movcs	r0, #0
 800106e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001072:	bf00      	nop

08001074 <__aeabi_fcmple>:
 8001074:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001078:	f7ff ffe0 	bl	800103c <__aeabi_cfcmpeq>
 800107c:	bf94      	ite	ls
 800107e:	2001      	movls	r0, #1
 8001080:	2000      	movhi	r0, #0
 8001082:	f85d fb08 	ldr.w	pc, [sp], #8
 8001086:	bf00      	nop

08001088 <__aeabi_fcmpge>:
 8001088:	f84d ed08 	str.w	lr, [sp, #-8]!
 800108c:	f7ff ffd2 	bl	8001034 <__aeabi_cfrcmple>
 8001090:	bf94      	ite	ls
 8001092:	2001      	movls	r0, #1
 8001094:	2000      	movhi	r0, #0
 8001096:	f85d fb08 	ldr.w	pc, [sp], #8
 800109a:	bf00      	nop

0800109c <__aeabi_fcmpgt>:
 800109c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010a0:	f7ff ffc8 	bl	8001034 <__aeabi_cfrcmple>
 80010a4:	bf34      	ite	cc
 80010a6:	2001      	movcc	r0, #1
 80010a8:	2000      	movcs	r0, #0
 80010aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ae:	bf00      	nop

080010b0 <__aeabi_f2uiz>:
 80010b0:	0042      	lsls	r2, r0, #1
 80010b2:	d20e      	bcs.n	80010d2 <__aeabi_f2uiz+0x22>
 80010b4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010b8:	d30b      	bcc.n	80010d2 <__aeabi_f2uiz+0x22>
 80010ba:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010be:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010c2:	d409      	bmi.n	80010d8 <__aeabi_f2uiz+0x28>
 80010c4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010cc:	fa23 f002 	lsr.w	r0, r3, r2
 80010d0:	4770      	bx	lr
 80010d2:	f04f 0000 	mov.w	r0, #0
 80010d6:	4770      	bx	lr
 80010d8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010dc:	d101      	bne.n	80010e2 <__aeabi_f2uiz+0x32>
 80010de:	0242      	lsls	r2, r0, #9
 80010e0:	d102      	bne.n	80010e8 <__aeabi_f2uiz+0x38>
 80010e2:	f04f 30ff 	mov.w	r0, #4294967295
 80010e6:	4770      	bx	lr
 80010e8:	f04f 0000 	mov.w	r0, #0
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop

080010f0 <__aeabi_d2lz>:
 80010f0:	b538      	push	{r3, r4, r5, lr}
 80010f2:	4605      	mov	r5, r0
 80010f4:	460c      	mov	r4, r1
 80010f6:	2200      	movs	r2, #0
 80010f8:	2300      	movs	r3, #0
 80010fa:	4628      	mov	r0, r5
 80010fc:	4621      	mov	r1, r4
 80010fe:	f7ff fd7d 	bl	8000bfc <__aeabi_dcmplt>
 8001102:	b928      	cbnz	r0, 8001110 <__aeabi_d2lz+0x20>
 8001104:	4628      	mov	r0, r5
 8001106:	4621      	mov	r1, r4
 8001108:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800110c:	f000 b80a 	b.w	8001124 <__aeabi_d2ulz>
 8001110:	4628      	mov	r0, r5
 8001112:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8001116:	f000 f805 	bl	8001124 <__aeabi_d2ulz>
 800111a:	4240      	negs	r0, r0
 800111c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001120:	bd38      	pop	{r3, r4, r5, pc}
 8001122:	bf00      	nop

08001124 <__aeabi_d2ulz>:
 8001124:	b5d0      	push	{r4, r6, r7, lr}
 8001126:	2200      	movs	r2, #0
 8001128:	4b0b      	ldr	r3, [pc, #44]	; (8001158 <__aeabi_d2ulz+0x34>)
 800112a:	4606      	mov	r6, r0
 800112c:	460f      	mov	r7, r1
 800112e:	f7ff faf3 	bl	8000718 <__aeabi_dmul>
 8001132:	f7ff fdc9 	bl	8000cc8 <__aeabi_d2uiz>
 8001136:	4604      	mov	r4, r0
 8001138:	f7ff fa74 	bl	8000624 <__aeabi_ui2d>
 800113c:	2200      	movs	r2, #0
 800113e:	4b07      	ldr	r3, [pc, #28]	; (800115c <__aeabi_d2ulz+0x38>)
 8001140:	f7ff faea 	bl	8000718 <__aeabi_dmul>
 8001144:	4602      	mov	r2, r0
 8001146:	460b      	mov	r3, r1
 8001148:	4630      	mov	r0, r6
 800114a:	4639      	mov	r1, r7
 800114c:	f7ff f92c 	bl	80003a8 <__aeabi_dsub>
 8001150:	f7ff fdba 	bl	8000cc8 <__aeabi_d2uiz>
 8001154:	4621      	mov	r1, r4
 8001156:	bdd0      	pop	{r4, r6, r7, pc}
 8001158:	3df00000 	.word	0x3df00000
 800115c:	41f00000 	.word	0x41f00000

08001160 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001160:	b480      	push	{r7}
 8001162:	b085      	sub	sp, #20
 8001164:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001166:	4b14      	ldr	r3, [pc, #80]	; (80011b8 <MX_GPIO_Init+0x58>)
 8001168:	699b      	ldr	r3, [r3, #24]
 800116a:	4a13      	ldr	r2, [pc, #76]	; (80011b8 <MX_GPIO_Init+0x58>)
 800116c:	f043 0320 	orr.w	r3, r3, #32
 8001170:	6193      	str	r3, [r2, #24]
 8001172:	4b11      	ldr	r3, [pc, #68]	; (80011b8 <MX_GPIO_Init+0x58>)
 8001174:	699b      	ldr	r3, [r3, #24]
 8001176:	f003 0320 	and.w	r3, r3, #32
 800117a:	60fb      	str	r3, [r7, #12]
 800117c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800117e:	4b0e      	ldr	r3, [pc, #56]	; (80011b8 <MX_GPIO_Init+0x58>)
 8001180:	699b      	ldr	r3, [r3, #24]
 8001182:	4a0d      	ldr	r2, [pc, #52]	; (80011b8 <MX_GPIO_Init+0x58>)
 8001184:	f043 0304 	orr.w	r3, r3, #4
 8001188:	6193      	str	r3, [r2, #24]
 800118a:	4b0b      	ldr	r3, [pc, #44]	; (80011b8 <MX_GPIO_Init+0x58>)
 800118c:	699b      	ldr	r3, [r3, #24]
 800118e:	f003 0304 	and.w	r3, r3, #4
 8001192:	60bb      	str	r3, [r7, #8]
 8001194:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001196:	4b08      	ldr	r3, [pc, #32]	; (80011b8 <MX_GPIO_Init+0x58>)
 8001198:	699b      	ldr	r3, [r3, #24]
 800119a:	4a07      	ldr	r2, [pc, #28]	; (80011b8 <MX_GPIO_Init+0x58>)
 800119c:	f043 0308 	orr.w	r3, r3, #8
 80011a0:	6193      	str	r3, [r2, #24]
 80011a2:	4b05      	ldr	r3, [pc, #20]	; (80011b8 <MX_GPIO_Init+0x58>)
 80011a4:	699b      	ldr	r3, [r3, #24]
 80011a6:	f003 0308 	and.w	r3, r3, #8
 80011aa:	607b      	str	r3, [r7, #4]
 80011ac:	687b      	ldr	r3, [r7, #4]

}
 80011ae:	bf00      	nop
 80011b0:	3714      	adds	r7, #20
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bc80      	pop	{r7}
 80011b6:	4770      	bx	lr
 80011b8:	40021000 	.word	0x40021000

080011bc <pid>:
  float Ki;
  float Kd;}pidstr;
pidstr pidparm;//用于保存PID参数和用于计算PWM占空比的�?
float rset=3;//设置目标转�??
float pid(pidstr *a,float dr)//用于更新PWM的占空比
{
 80011bc:	b5b0      	push	{r4, r5, r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	6039      	str	r1, [r7, #0]
  a->sum = a->sum + dr;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	6839      	ldr	r1, [r7, #0]
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff fdf1 	bl	8000db4 <__addsf3>
 80011d2:	4603      	mov	r3, r0
 80011d4:	461a      	mov	r2, r3
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	601a      	str	r2, [r3, #0]
  float pwm = a->Kp * dr + a->Ki * a->sum + a->Kd * (dr - a->lr);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	689b      	ldr	r3, [r3, #8]
 80011de:	6839      	ldr	r1, [r7, #0]
 80011e0:	4618      	mov	r0, r3
 80011e2:	f7ff f829 	bl	8000238 <__aeabi_fmul>
 80011e6:	4603      	mov	r3, r0
 80011e8:	461c      	mov	r4, r3
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	68da      	ldr	r2, [r3, #12]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4619      	mov	r1, r3
 80011f4:	4610      	mov	r0, r2
 80011f6:	f7ff f81f 	bl	8000238 <__aeabi_fmul>
 80011fa:	4603      	mov	r3, r0
 80011fc:	4619      	mov	r1, r3
 80011fe:	4620      	mov	r0, r4
 8001200:	f7ff fdd8 	bl	8000db4 <__addsf3>
 8001204:	4603      	mov	r3, r0
 8001206:	461d      	mov	r5, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	691c      	ldr	r4, [r3, #16]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	4619      	mov	r1, r3
 8001212:	6838      	ldr	r0, [r7, #0]
 8001214:	f7ff fdcc 	bl	8000db0 <__aeabi_fsub>
 8001218:	4603      	mov	r3, r0
 800121a:	4619      	mov	r1, r3
 800121c:	4620      	mov	r0, r4
 800121e:	f7ff f80b 	bl	8000238 <__aeabi_fmul>
 8001222:	4603      	mov	r3, r0
 8001224:	4619      	mov	r1, r3
 8001226:	4628      	mov	r0, r5
 8001228:	f7ff fdc4 	bl	8000db4 <__addsf3>
 800122c:	4603      	mov	r3, r0
 800122e:	60fb      	str	r3, [r7, #12]
  a->lr = dr;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	683a      	ldr	r2, [r7, #0]
 8001234:	605a      	str	r2, [r3, #4]
  if(pwm >= PID_MAX){
 8001236:	490b      	ldr	r1, [pc, #44]	; (8001264 <pid+0xa8>)
 8001238:	68f8      	ldr	r0, [r7, #12]
 800123a:	f7ff ff25 	bl	8001088 <__aeabi_fcmpge>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <pid+0x8c>
    return PID_MAX;
 8001244:	4b07      	ldr	r3, [pc, #28]	; (8001264 <pid+0xa8>)
 8001246:	e009      	b.n	800125c <pid+0xa0>
  }
  else if(pwm <= PID_MIN)
 8001248:	4907      	ldr	r1, [pc, #28]	; (8001268 <pid+0xac>)
 800124a:	68f8      	ldr	r0, [r7, #12]
 800124c:	f7ff ff12 	bl	8001074 <__aeabi_fcmple>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <pid+0x9e>
  {
    return PID_MIN;
 8001256:	4b04      	ldr	r3, [pc, #16]	; (8001268 <pid+0xac>)
 8001258:	e000      	b.n	800125c <pid+0xa0>
  }
  else
  {
    return pwm;
 800125a:	68fb      	ldr	r3, [r7, #12]
  }
}
 800125c:	4618      	mov	r0, r3
 800125e:	3710      	adds	r7, #16
 8001260:	46bd      	mov	sp, r7
 8001262:	bdb0      	pop	{r4, r5, r7, pc}
 8001264:	447a0000 	.word	0x447a0000
 8001268:	c47a0000 	.word	0xc47a0000
 800126c:	00000000 	.word	0x00000000

08001270 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001270:	b5b0      	push	{r4, r5, r7, lr}
 8001272:	b088      	sub	sp, #32
 8001274:	af02      	add	r7, sp, #8
 8001276:	6078      	str	r0, [r7, #4]
 if(htim->Instance==TIM2)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001280:	d13c      	bne.n	80012fc <HAL_TIM_PeriodElapsedCallback+0x8c>
 {
  int cnt=__HAL_TIM_GetCounter(&htim3);
 8001282:	4b23      	ldr	r3, [pc, #140]	; (8001310 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001288:	617b      	str	r3, [r7, #20]
  __HAL_TIM_SetCounter(&htim3, 0);
 800128a:	4b21      	ldr	r3, [pc, #132]	; (8001310 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	2200      	movs	r2, #0
 8001290:	625a      	str	r2, [r3, #36]	; 0x24
  float rnow=cnt/10.8;
 8001292:	6978      	ldr	r0, [r7, #20]
 8001294:	f7ff f9d6 	bl	8000644 <__aeabi_i2d>
 8001298:	a31b      	add	r3, pc, #108	; (adr r3, 8001308 <HAL_TIM_PeriodElapsedCallback+0x98>)
 800129a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800129e:	f7ff fb65 	bl	800096c <__aeabi_ddiv>
 80012a2:	4602      	mov	r2, r0
 80012a4:	460b      	mov	r3, r1
 80012a6:	4610      	mov	r0, r2
 80012a8:	4619      	mov	r1, r3
 80012aa:	f7ff fd2d 	bl	8000d08 <__aeabi_d2f>
 80012ae:	4603      	mov	r3, r0
 80012b0:	613b      	str	r3, [r7, #16]
  float dr=rset-rnow;
 80012b2:	4b18      	ldr	r3, [pc, #96]	; (8001314 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	6939      	ldr	r1, [r7, #16]
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff fd79 	bl	8000db0 <__aeabi_fsub>
 80012be:	4603      	mov	r3, r0
 80012c0:	60fb      	str	r3, [r7, #12]
  float pwm=pid(&pidparm,dr);
 80012c2:	68f9      	ldr	r1, [r7, #12]
 80012c4:	4814      	ldr	r0, [pc, #80]	; (8001318 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80012c6:	f7ff ff79 	bl	80011bc <pid>
 80012ca:	60b8      	str	r0, [r7, #8]
  u1_printf("%f,%f\n",rnow,pwm);
 80012cc:	6938      	ldr	r0, [r7, #16]
 80012ce:	f7ff f9cb 	bl	8000668 <__aeabi_f2d>
 80012d2:	4604      	mov	r4, r0
 80012d4:	460d      	mov	r5, r1
 80012d6:	68b8      	ldr	r0, [r7, #8]
 80012d8:	f7ff f9c6 	bl	8000668 <__aeabi_f2d>
 80012dc:	4602      	mov	r2, r0
 80012de:	460b      	mov	r3, r1
 80012e0:	e9cd 2300 	strd	r2, r3, [sp]
 80012e4:	4622      	mov	r2, r4
 80012e6:	462b      	mov	r3, r5
 80012e8:	480c      	ldr	r0, [pc, #48]	; (800131c <HAL_TIM_PeriodElapsedCallback+0xac>)
 80012ea:	f000 fc5b 	bl	8001ba4 <u1_printf>
  __HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_1, pwm);
 80012ee:	4b0c      	ldr	r3, [pc, #48]	; (8001320 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80012f0:	681c      	ldr	r4, [r3, #0]
 80012f2:	68b8      	ldr	r0, [r7, #8]
 80012f4:	f7ff fedc 	bl	80010b0 <__aeabi_f2uiz>
 80012f8:	4603      	mov	r3, r0
 80012fa:	6363      	str	r3, [r4, #52]	; 0x34
  }
}
 80012fc:	bf00      	nop
 80012fe:	3718      	adds	r7, #24
 8001300:	46bd      	mov	sp, r7
 8001302:	bdb0      	pop	{r4, r5, r7, pc}
 8001304:	f3af 8000 	nop.w
 8001308:	9999999a 	.word	0x9999999a
 800130c:	40259999 	.word	0x40259999
 8001310:	200002a8 	.word	0x200002a8
 8001314:	20000000 	.word	0x20000000
 8001318:	20000200 	.word	0x20000200
 800131c:	080089d0 	.word	0x080089d0
 8001320:	20000218 	.word	0x20000218

08001324 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001328:	f000 fc8a 	bl	8001c40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800132c:	f000 f834 	bl	8001398 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001330:	f7ff ff16 	bl	8001160 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001334:	f000 f9a4 	bl	8001680 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001338:	f000 fa66 	bl	8001808 <MX_TIM2_Init>
  MX_TIM3_Init();
 800133c:	f000 fab0 	bl	80018a0 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8001340:	f000 fbac 	bl	8001a9c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2); // 使能定时�?2
 8001344:	480e      	ldr	r0, [pc, #56]	; (8001380 <main+0x5c>)
 8001346:	f001 fbdf 	bl	8002b08 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); // 使能定定时器1的�?�道1，设定为PWM输出
 800134a:	2100      	movs	r1, #0
 800134c:	480d      	ldr	r0, [pc, #52]	; (8001384 <main+0x60>)
 800134e:	f001 fc93 	bl	8002c78 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL); //使能编码器时�?3
 8001352:	213c      	movs	r1, #60	; 0x3c
 8001354:	480c      	ldr	r0, [pc, #48]	; (8001388 <main+0x64>)
 8001356:	f001 fdeb 	bl	8002f30 <HAL_TIM_Encoder_Start>

  pidparm.Kd=500;
 800135a:	4b0c      	ldr	r3, [pc, #48]	; (800138c <main+0x68>)
 800135c:	4a0c      	ldr	r2, [pc, #48]	; (8001390 <main+0x6c>)
 800135e:	611a      	str	r2, [r3, #16]
  pidparm.Ki=15;
 8001360:	4b0a      	ldr	r3, [pc, #40]	; (800138c <main+0x68>)
 8001362:	4a0c      	ldr	r2, [pc, #48]	; (8001394 <main+0x70>)
 8001364:	60da      	str	r2, [r3, #12]
  pidparm.Kp=500;
 8001366:	4b09      	ldr	r3, [pc, #36]	; (800138c <main+0x68>)
 8001368:	4a09      	ldr	r2, [pc, #36]	; (8001390 <main+0x6c>)
 800136a:	609a      	str	r2, [r3, #8]
  pidparm.lr=0;
 800136c:	4b07      	ldr	r3, [pc, #28]	; (800138c <main+0x68>)
 800136e:	f04f 0200 	mov.w	r2, #0
 8001372:	605a      	str	r2, [r3, #4]
  pidparm.sum=0;
 8001374:	4b05      	ldr	r3, [pc, #20]	; (800138c <main+0x68>)
 8001376:	f04f 0200 	mov.w	r2, #0
 800137a:	601a      	str	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800137c:	e7fe      	b.n	800137c <main+0x58>
 800137e:	bf00      	nop
 8001380:	20000260 	.word	0x20000260
 8001384:	20000218 	.word	0x20000218
 8001388:	200002a8 	.word	0x200002a8
 800138c:	20000200 	.word	0x20000200
 8001390:	43fa0000 	.word	0x43fa0000
 8001394:	41700000 	.word	0x41700000

08001398 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b090      	sub	sp, #64	; 0x40
 800139c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800139e:	f107 0318 	add.w	r3, r7, #24
 80013a2:	2228      	movs	r2, #40	; 0x28
 80013a4:	2100      	movs	r1, #0
 80013a6:	4618      	mov	r0, r3
 80013a8:	f002 feae 	bl	8004108 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013ac:	1d3b      	adds	r3, r7, #4
 80013ae:	2200      	movs	r2, #0
 80013b0:	601a      	str	r2, [r3, #0]
 80013b2:	605a      	str	r2, [r3, #4]
 80013b4:	609a      	str	r2, [r3, #8]
 80013b6:	60da      	str	r2, [r3, #12]
 80013b8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013ba:	2301      	movs	r3, #1
 80013bc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013c2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80013c4:	2300      	movs	r3, #0
 80013c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013c8:	2301      	movs	r3, #1
 80013ca:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013cc:	2302      	movs	r3, #2
 80013ce:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80013d6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80013da:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013dc:	f107 0318 	add.w	r3, r7, #24
 80013e0:	4618      	mov	r0, r3
 80013e2:	f000 ff31 	bl	8002248 <HAL_RCC_OscConfig>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80013ec:	f000 f819 	bl	8001422 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013f0:	230f      	movs	r3, #15
 80013f2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013f4:	2302      	movs	r3, #2
 80013f6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013f8:	2300      	movs	r3, #0
 80013fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001400:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001402:	2300      	movs	r3, #0
 8001404:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001406:	1d3b      	adds	r3, r7, #4
 8001408:	2102      	movs	r1, #2
 800140a:	4618      	mov	r0, r3
 800140c:	f001 f99e 	bl	800274c <HAL_RCC_ClockConfig>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001416:	f000 f804 	bl	8001422 <Error_Handler>
  }
}
 800141a:	bf00      	nop
 800141c:	3740      	adds	r7, #64	; 0x40
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}

08001422 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001422:	b480      	push	{r7}
 8001424:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001426:	b672      	cpsid	i
}
 8001428:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800142a:	e7fe      	b.n	800142a <Error_Handler+0x8>

0800142c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800142c:	b480      	push	{r7}
 800142e:	b085      	sub	sp, #20
 8001430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001432:	4b15      	ldr	r3, [pc, #84]	; (8001488 <HAL_MspInit+0x5c>)
 8001434:	699b      	ldr	r3, [r3, #24]
 8001436:	4a14      	ldr	r2, [pc, #80]	; (8001488 <HAL_MspInit+0x5c>)
 8001438:	f043 0301 	orr.w	r3, r3, #1
 800143c:	6193      	str	r3, [r2, #24]
 800143e:	4b12      	ldr	r3, [pc, #72]	; (8001488 <HAL_MspInit+0x5c>)
 8001440:	699b      	ldr	r3, [r3, #24]
 8001442:	f003 0301 	and.w	r3, r3, #1
 8001446:	60bb      	str	r3, [r7, #8]
 8001448:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800144a:	4b0f      	ldr	r3, [pc, #60]	; (8001488 <HAL_MspInit+0x5c>)
 800144c:	69db      	ldr	r3, [r3, #28]
 800144e:	4a0e      	ldr	r2, [pc, #56]	; (8001488 <HAL_MspInit+0x5c>)
 8001450:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001454:	61d3      	str	r3, [r2, #28]
 8001456:	4b0c      	ldr	r3, [pc, #48]	; (8001488 <HAL_MspInit+0x5c>)
 8001458:	69db      	ldr	r3, [r3, #28]
 800145a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800145e:	607b      	str	r3, [r7, #4]
 8001460:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001462:	4b0a      	ldr	r3, [pc, #40]	; (800148c <HAL_MspInit+0x60>)
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	60fb      	str	r3, [r7, #12]
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800146e:	60fb      	str	r3, [r7, #12]
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001476:	60fb      	str	r3, [r7, #12]
 8001478:	4a04      	ldr	r2, [pc, #16]	; (800148c <HAL_MspInit+0x60>)
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800147e:	bf00      	nop
 8001480:	3714      	adds	r7, #20
 8001482:	46bd      	mov	sp, r7
 8001484:	bc80      	pop	{r7}
 8001486:	4770      	bx	lr
 8001488:	40021000 	.word	0x40021000
 800148c:	40010000 	.word	0x40010000

08001490 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001494:	e7fe      	b.n	8001494 <NMI_Handler+0x4>

08001496 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001496:	b480      	push	{r7}
 8001498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800149a:	e7fe      	b.n	800149a <HardFault_Handler+0x4>

0800149c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014a0:	e7fe      	b.n	80014a0 <MemManage_Handler+0x4>

080014a2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014a2:	b480      	push	{r7}
 80014a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014a6:	e7fe      	b.n	80014a6 <BusFault_Handler+0x4>

080014a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014ac:	e7fe      	b.n	80014ac <UsageFault_Handler+0x4>

080014ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014ae:	b480      	push	{r7}
 80014b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014b2:	bf00      	nop
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bc80      	pop	{r7}
 80014b8:	4770      	bx	lr

080014ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014ba:	b480      	push	{r7}
 80014bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014be:	bf00      	nop
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bc80      	pop	{r7}
 80014c4:	4770      	bx	lr

080014c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014c6:	b480      	push	{r7}
 80014c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014ca:	bf00      	nop
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bc80      	pop	{r7}
 80014d0:	4770      	bx	lr

080014d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014d2:	b580      	push	{r7, lr}
 80014d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014d6:	f000 fbf9 	bl	8001ccc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014da:	bf00      	nop
 80014dc:	bd80      	pop	{r7, pc}
	...

080014e0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80014e4:	4802      	ldr	r0, [pc, #8]	; (80014f0 <TIM2_IRQHandler+0x10>)
 80014e6:	f001 fdb1 	bl	800304c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80014ea:	bf00      	nop
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	20000260 	.word	0x20000260

080014f4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  return 1;
 80014f8:	2301      	movs	r3, #1
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bc80      	pop	{r7}
 8001500:	4770      	bx	lr

08001502 <_kill>:

int _kill(int pid, int sig)
{
 8001502:	b580      	push	{r7, lr}
 8001504:	b082      	sub	sp, #8
 8001506:	af00      	add	r7, sp, #0
 8001508:	6078      	str	r0, [r7, #4]
 800150a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800150c:	f002 fdd2 	bl	80040b4 <__errno>
 8001510:	4603      	mov	r3, r0
 8001512:	2216      	movs	r2, #22
 8001514:	601a      	str	r2, [r3, #0]
  return -1;
 8001516:	f04f 33ff 	mov.w	r3, #4294967295
}
 800151a:	4618      	mov	r0, r3
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}

08001522 <_exit>:

void _exit (int status)
{
 8001522:	b580      	push	{r7, lr}
 8001524:	b082      	sub	sp, #8
 8001526:	af00      	add	r7, sp, #0
 8001528:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800152a:	f04f 31ff 	mov.w	r1, #4294967295
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	f7ff ffe7 	bl	8001502 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001534:	e7fe      	b.n	8001534 <_exit+0x12>

08001536 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001536:	b580      	push	{r7, lr}
 8001538:	b086      	sub	sp, #24
 800153a:	af00      	add	r7, sp, #0
 800153c:	60f8      	str	r0, [r7, #12]
 800153e:	60b9      	str	r1, [r7, #8]
 8001540:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001542:	2300      	movs	r3, #0
 8001544:	617b      	str	r3, [r7, #20]
 8001546:	e00a      	b.n	800155e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001548:	f3af 8000 	nop.w
 800154c:	4601      	mov	r1, r0
 800154e:	68bb      	ldr	r3, [r7, #8]
 8001550:	1c5a      	adds	r2, r3, #1
 8001552:	60ba      	str	r2, [r7, #8]
 8001554:	b2ca      	uxtb	r2, r1
 8001556:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	3301      	adds	r3, #1
 800155c:	617b      	str	r3, [r7, #20]
 800155e:	697a      	ldr	r2, [r7, #20]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	429a      	cmp	r2, r3
 8001564:	dbf0      	blt.n	8001548 <_read+0x12>
  }

  return len;
 8001566:	687b      	ldr	r3, [r7, #4]
}
 8001568:	4618      	mov	r0, r3
 800156a:	3718      	adds	r7, #24
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}

08001570 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b086      	sub	sp, #24
 8001574:	af00      	add	r7, sp, #0
 8001576:	60f8      	str	r0, [r7, #12]
 8001578:	60b9      	str	r1, [r7, #8]
 800157a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800157c:	2300      	movs	r3, #0
 800157e:	617b      	str	r3, [r7, #20]
 8001580:	e009      	b.n	8001596 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001582:	68bb      	ldr	r3, [r7, #8]
 8001584:	1c5a      	adds	r2, r3, #1
 8001586:	60ba      	str	r2, [r7, #8]
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	4618      	mov	r0, r3
 800158c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	3301      	adds	r3, #1
 8001594:	617b      	str	r3, [r7, #20]
 8001596:	697a      	ldr	r2, [r7, #20]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	429a      	cmp	r2, r3
 800159c:	dbf1      	blt.n	8001582 <_write+0x12>
  }
  return len;
 800159e:	687b      	ldr	r3, [r7, #4]
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	3718      	adds	r7, #24
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}

080015a8 <_close>:

int _close(int file)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80015b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	370c      	adds	r7, #12
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bc80      	pop	{r7}
 80015bc:	4770      	bx	lr

080015be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015be:	b480      	push	{r7}
 80015c0:	b083      	sub	sp, #12
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	6078      	str	r0, [r7, #4]
 80015c6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015ce:	605a      	str	r2, [r3, #4]
  return 0;
 80015d0:	2300      	movs	r3, #0
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	370c      	adds	r7, #12
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bc80      	pop	{r7}
 80015da:	4770      	bx	lr

080015dc <_isatty>:

int _isatty(int file)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80015e4:	2301      	movs	r3, #1
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	370c      	adds	r7, #12
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bc80      	pop	{r7}
 80015ee:	4770      	bx	lr

080015f0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b085      	sub	sp, #20
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	60f8      	str	r0, [r7, #12]
 80015f8:	60b9      	str	r1, [r7, #8]
 80015fa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80015fc:	2300      	movs	r3, #0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3714      	adds	r7, #20
 8001602:	46bd      	mov	sp, r7
 8001604:	bc80      	pop	{r7}
 8001606:	4770      	bx	lr

08001608 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b086      	sub	sp, #24
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001610:	4a14      	ldr	r2, [pc, #80]	; (8001664 <_sbrk+0x5c>)
 8001612:	4b15      	ldr	r3, [pc, #84]	; (8001668 <_sbrk+0x60>)
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800161c:	4b13      	ldr	r3, [pc, #76]	; (800166c <_sbrk+0x64>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d102      	bne.n	800162a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001624:	4b11      	ldr	r3, [pc, #68]	; (800166c <_sbrk+0x64>)
 8001626:	4a12      	ldr	r2, [pc, #72]	; (8001670 <_sbrk+0x68>)
 8001628:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800162a:	4b10      	ldr	r3, [pc, #64]	; (800166c <_sbrk+0x64>)
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	4413      	add	r3, r2
 8001632:	693a      	ldr	r2, [r7, #16]
 8001634:	429a      	cmp	r2, r3
 8001636:	d207      	bcs.n	8001648 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001638:	f002 fd3c 	bl	80040b4 <__errno>
 800163c:	4603      	mov	r3, r0
 800163e:	220c      	movs	r2, #12
 8001640:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001642:	f04f 33ff 	mov.w	r3, #4294967295
 8001646:	e009      	b.n	800165c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001648:	4b08      	ldr	r3, [pc, #32]	; (800166c <_sbrk+0x64>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800164e:	4b07      	ldr	r3, [pc, #28]	; (800166c <_sbrk+0x64>)
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	4413      	add	r3, r2
 8001656:	4a05      	ldr	r2, [pc, #20]	; (800166c <_sbrk+0x64>)
 8001658:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800165a:	68fb      	ldr	r3, [r7, #12]
}
 800165c:	4618      	mov	r0, r3
 800165e:	3718      	adds	r7, #24
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	2000c000 	.word	0x2000c000
 8001668:	00000400 	.word	0x00000400
 800166c:	20000214 	.word	0x20000214
 8001670:	20000350 	.word	0x20000350

08001674 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001678:	bf00      	nop
 800167a:	46bd      	mov	sp, r7
 800167c:	bc80      	pop	{r7}
 800167e:	4770      	bx	lr

08001680 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b096      	sub	sp, #88	; 0x58
 8001684:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001686:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800168a:	2200      	movs	r2, #0
 800168c:	601a      	str	r2, [r3, #0]
 800168e:	605a      	str	r2, [r3, #4]
 8001690:	609a      	str	r2, [r3, #8]
 8001692:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001694:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001698:	2200      	movs	r2, #0
 800169a:	601a      	str	r2, [r3, #0]
 800169c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800169e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016a2:	2200      	movs	r2, #0
 80016a4:	601a      	str	r2, [r3, #0]
 80016a6:	605a      	str	r2, [r3, #4]
 80016a8:	609a      	str	r2, [r3, #8]
 80016aa:	60da      	str	r2, [r3, #12]
 80016ac:	611a      	str	r2, [r3, #16]
 80016ae:	615a      	str	r2, [r3, #20]
 80016b0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80016b2:	1d3b      	adds	r3, r7, #4
 80016b4:	2220      	movs	r2, #32
 80016b6:	2100      	movs	r1, #0
 80016b8:	4618      	mov	r0, r3
 80016ba:	f002 fd25 	bl	8004108 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80016be:	4b50      	ldr	r3, [pc, #320]	; (8001800 <MX_TIM1_Init+0x180>)
 80016c0:	4a50      	ldr	r2, [pc, #320]	; (8001804 <MX_TIM1_Init+0x184>)
 80016c2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 80016c4:	4b4e      	ldr	r3, [pc, #312]	; (8001800 <MX_TIM1_Init+0x180>)
 80016c6:	2247      	movs	r2, #71	; 0x47
 80016c8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016ca:	4b4d      	ldr	r3, [pc, #308]	; (8001800 <MX_TIM1_Init+0x180>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 80016d0:	4b4b      	ldr	r3, [pc, #300]	; (8001800 <MX_TIM1_Init+0x180>)
 80016d2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80016d6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016d8:	4b49      	ldr	r3, [pc, #292]	; (8001800 <MX_TIM1_Init+0x180>)
 80016da:	2200      	movs	r2, #0
 80016dc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80016de:	4b48      	ldr	r3, [pc, #288]	; (8001800 <MX_TIM1_Init+0x180>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016e4:	4b46      	ldr	r3, [pc, #280]	; (8001800 <MX_TIM1_Init+0x180>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80016ea:	4845      	ldr	r0, [pc, #276]	; (8001800 <MX_TIM1_Init+0x180>)
 80016ec:	f001 f9bc 	bl	8002a68 <HAL_TIM_Base_Init>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80016f6:	f7ff fe94 	bl	8001422 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016fe:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001700:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001704:	4619      	mov	r1, r3
 8001706:	483e      	ldr	r0, [pc, #248]	; (8001800 <MX_TIM1_Init+0x180>)
 8001708:	f001 fe6a 	bl	80033e0 <HAL_TIM_ConfigClockSource>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001712:	f7ff fe86 	bl	8001422 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001716:	483a      	ldr	r0, [pc, #232]	; (8001800 <MX_TIM1_Init+0x180>)
 8001718:	f001 fa56 	bl	8002bc8 <HAL_TIM_PWM_Init>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001722:	f7ff fe7e 	bl	8001422 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001726:	2300      	movs	r3, #0
 8001728:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800172a:	2300      	movs	r3, #0
 800172c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800172e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001732:	4619      	mov	r1, r3
 8001734:	4832      	ldr	r0, [pc, #200]	; (8001800 <MX_TIM1_Init+0x180>)
 8001736:	f002 fa1f 	bl	8003b78 <HAL_TIMEx_MasterConfigSynchronization>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001740:	f7ff fe6f 	bl	8001422 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001744:	2360      	movs	r3, #96	; 0x60
 8001746:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001748:	2300      	movs	r3, #0
 800174a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800174c:	2300      	movs	r3, #0
 800174e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001750:	2300      	movs	r3, #0
 8001752:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001754:	2300      	movs	r3, #0
 8001756:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001758:	2300      	movs	r3, #0
 800175a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800175c:	2300      	movs	r3, #0
 800175e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001760:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001764:	2200      	movs	r2, #0
 8001766:	4619      	mov	r1, r3
 8001768:	4825      	ldr	r0, [pc, #148]	; (8001800 <MX_TIM1_Init+0x180>)
 800176a:	f001 fd77 	bl	800325c <HAL_TIM_PWM_ConfigChannel>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001774:	f7ff fe55 	bl	8001422 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001778:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800177c:	2204      	movs	r2, #4
 800177e:	4619      	mov	r1, r3
 8001780:	481f      	ldr	r0, [pc, #124]	; (8001800 <MX_TIM1_Init+0x180>)
 8001782:	f001 fd6b 	bl	800325c <HAL_TIM_PWM_ConfigChannel>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 800178c:	f7ff fe49 	bl	8001422 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001790:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001794:	2208      	movs	r2, #8
 8001796:	4619      	mov	r1, r3
 8001798:	4819      	ldr	r0, [pc, #100]	; (8001800 <MX_TIM1_Init+0x180>)
 800179a:	f001 fd5f 	bl	800325c <HAL_TIM_PWM_ConfigChannel>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80017a4:	f7ff fe3d 	bl	8001422 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80017a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017ac:	220c      	movs	r2, #12
 80017ae:	4619      	mov	r1, r3
 80017b0:	4813      	ldr	r0, [pc, #76]	; (8001800 <MX_TIM1_Init+0x180>)
 80017b2:	f001 fd53 	bl	800325c <HAL_TIM_PWM_ConfigChannel>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 80017bc:	f7ff fe31 	bl	8001422 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80017c0:	2300      	movs	r3, #0
 80017c2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80017c4:	2300      	movs	r3, #0
 80017c6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80017c8:	2300      	movs	r3, #0
 80017ca:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80017cc:	2300      	movs	r3, #0
 80017ce:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80017d0:	2300      	movs	r3, #0
 80017d2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80017d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017d8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80017da:	2300      	movs	r3, #0
 80017dc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80017de:	1d3b      	adds	r3, r7, #4
 80017e0:	4619      	mov	r1, r3
 80017e2:	4807      	ldr	r0, [pc, #28]	; (8001800 <MX_TIM1_Init+0x180>)
 80017e4:	f002 fa34 	bl	8003c50 <HAL_TIMEx_ConfigBreakDeadTime>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 80017ee:	f7ff fe18 	bl	8001422 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80017f2:	4803      	ldr	r0, [pc, #12]	; (8001800 <MX_TIM1_Init+0x180>)
 80017f4:	f000 f91e 	bl	8001a34 <HAL_TIM_MspPostInit>

}
 80017f8:	bf00      	nop
 80017fa:	3758      	adds	r7, #88	; 0x58
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	20000218 	.word	0x20000218
 8001804:	40012c00 	.word	0x40012c00

08001808 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b086      	sub	sp, #24
 800180c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800180e:	f107 0308 	add.w	r3, r7, #8
 8001812:	2200      	movs	r2, #0
 8001814:	601a      	str	r2, [r3, #0]
 8001816:	605a      	str	r2, [r3, #4]
 8001818:	609a      	str	r2, [r3, #8]
 800181a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800181c:	463b      	mov	r3, r7
 800181e:	2200      	movs	r2, #0
 8001820:	601a      	str	r2, [r3, #0]
 8001822:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001824:	4b1d      	ldr	r3, [pc, #116]	; (800189c <MX_TIM2_Init+0x94>)
 8001826:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800182a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 800182c:	4b1b      	ldr	r3, [pc, #108]	; (800189c <MX_TIM2_Init+0x94>)
 800182e:	2247      	movs	r2, #71	; 0x47
 8001830:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001832:	4b1a      	ldr	r3, [pc, #104]	; (800189c <MX_TIM2_Init+0x94>)
 8001834:	2200      	movs	r2, #0
 8001836:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8001838:	4b18      	ldr	r3, [pc, #96]	; (800189c <MX_TIM2_Init+0x94>)
 800183a:	f242 720f 	movw	r2, #9999	; 0x270f
 800183e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001840:	4b16      	ldr	r3, [pc, #88]	; (800189c <MX_TIM2_Init+0x94>)
 8001842:	2200      	movs	r2, #0
 8001844:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001846:	4b15      	ldr	r3, [pc, #84]	; (800189c <MX_TIM2_Init+0x94>)
 8001848:	2200      	movs	r2, #0
 800184a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800184c:	4813      	ldr	r0, [pc, #76]	; (800189c <MX_TIM2_Init+0x94>)
 800184e:	f001 f90b 	bl	8002a68 <HAL_TIM_Base_Init>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001858:	f7ff fde3 	bl	8001422 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800185c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001860:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001862:	f107 0308 	add.w	r3, r7, #8
 8001866:	4619      	mov	r1, r3
 8001868:	480c      	ldr	r0, [pc, #48]	; (800189c <MX_TIM2_Init+0x94>)
 800186a:	f001 fdb9 	bl	80033e0 <HAL_TIM_ConfigClockSource>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001874:	f7ff fdd5 	bl	8001422 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001878:	2300      	movs	r3, #0
 800187a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800187c:	2300      	movs	r3, #0
 800187e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001880:	463b      	mov	r3, r7
 8001882:	4619      	mov	r1, r3
 8001884:	4805      	ldr	r0, [pc, #20]	; (800189c <MX_TIM2_Init+0x94>)
 8001886:	f002 f977 	bl	8003b78 <HAL_TIMEx_MasterConfigSynchronization>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001890:	f7ff fdc7 	bl	8001422 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001894:	bf00      	nop
 8001896:	3718      	adds	r7, #24
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	20000260 	.word	0x20000260

080018a0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b08c      	sub	sp, #48	; 0x30
 80018a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80018a6:	f107 030c 	add.w	r3, r7, #12
 80018aa:	2224      	movs	r2, #36	; 0x24
 80018ac:	2100      	movs	r1, #0
 80018ae:	4618      	mov	r0, r3
 80018b0:	f002 fc2a 	bl	8004108 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018b4:	1d3b      	adds	r3, r7, #4
 80018b6:	2200      	movs	r2, #0
 80018b8:	601a      	str	r2, [r3, #0]
 80018ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80018bc:	4b20      	ldr	r3, [pc, #128]	; (8001940 <MX_TIM3_Init+0xa0>)
 80018be:	4a21      	ldr	r2, [pc, #132]	; (8001944 <MX_TIM3_Init+0xa4>)
 80018c0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80018c2:	4b1f      	ldr	r3, [pc, #124]	; (8001940 <MX_TIM3_Init+0xa0>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018c8:	4b1d      	ldr	r3, [pc, #116]	; (8001940 <MX_TIM3_Init+0xa0>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80018ce:	4b1c      	ldr	r3, [pc, #112]	; (8001940 <MX_TIM3_Init+0xa0>)
 80018d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018d4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018d6:	4b1a      	ldr	r3, [pc, #104]	; (8001940 <MX_TIM3_Init+0xa0>)
 80018d8:	2200      	movs	r2, #0
 80018da:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018dc:	4b18      	ldr	r3, [pc, #96]	; (8001940 <MX_TIM3_Init+0xa0>)
 80018de:	2200      	movs	r2, #0
 80018e0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80018e2:	2303      	movs	r3, #3
 80018e4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80018e6:	2300      	movs	r3, #0
 80018e8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80018ea:	2301      	movs	r3, #1
 80018ec:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80018ee:	2300      	movs	r3, #0
 80018f0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80018f2:	2300      	movs	r3, #0
 80018f4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80018f6:	2300      	movs	r3, #0
 80018f8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80018fa:	2301      	movs	r3, #1
 80018fc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80018fe:	2300      	movs	r3, #0
 8001900:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001902:	2300      	movs	r3, #0
 8001904:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001906:	f107 030c 	add.w	r3, r7, #12
 800190a:	4619      	mov	r1, r3
 800190c:	480c      	ldr	r0, [pc, #48]	; (8001940 <MX_TIM3_Init+0xa0>)
 800190e:	f001 fa6d 	bl	8002dec <HAL_TIM_Encoder_Init>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001918:	f7ff fd83 	bl	8001422 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800191c:	2300      	movs	r3, #0
 800191e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001920:	2300      	movs	r3, #0
 8001922:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001924:	1d3b      	adds	r3, r7, #4
 8001926:	4619      	mov	r1, r3
 8001928:	4805      	ldr	r0, [pc, #20]	; (8001940 <MX_TIM3_Init+0xa0>)
 800192a:	f002 f925 	bl	8003b78 <HAL_TIMEx_MasterConfigSynchronization>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001934:	f7ff fd75 	bl	8001422 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001938:	bf00      	nop
 800193a:	3730      	adds	r7, #48	; 0x30
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	200002a8 	.word	0x200002a8
 8001944:	40000400 	.word	0x40000400

08001948 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a16      	ldr	r2, [pc, #88]	; (80019b0 <HAL_TIM_Base_MspInit+0x68>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d10c      	bne.n	8001974 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800195a:	4b16      	ldr	r3, [pc, #88]	; (80019b4 <HAL_TIM_Base_MspInit+0x6c>)
 800195c:	699b      	ldr	r3, [r3, #24]
 800195e:	4a15      	ldr	r2, [pc, #84]	; (80019b4 <HAL_TIM_Base_MspInit+0x6c>)
 8001960:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001964:	6193      	str	r3, [r2, #24]
 8001966:	4b13      	ldr	r3, [pc, #76]	; (80019b4 <HAL_TIM_Base_MspInit+0x6c>)
 8001968:	699b      	ldr	r3, [r3, #24]
 800196a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800196e:	60fb      	str	r3, [r7, #12]
 8001970:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001972:	e018      	b.n	80019a6 <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM2)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800197c:	d113      	bne.n	80019a6 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800197e:	4b0d      	ldr	r3, [pc, #52]	; (80019b4 <HAL_TIM_Base_MspInit+0x6c>)
 8001980:	69db      	ldr	r3, [r3, #28]
 8001982:	4a0c      	ldr	r2, [pc, #48]	; (80019b4 <HAL_TIM_Base_MspInit+0x6c>)
 8001984:	f043 0301 	orr.w	r3, r3, #1
 8001988:	61d3      	str	r3, [r2, #28]
 800198a:	4b0a      	ldr	r3, [pc, #40]	; (80019b4 <HAL_TIM_Base_MspInit+0x6c>)
 800198c:	69db      	ldr	r3, [r3, #28]
 800198e:	f003 0301 	and.w	r3, r3, #1
 8001992:	60bb      	str	r3, [r7, #8]
 8001994:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001996:	2200      	movs	r2, #0
 8001998:	2100      	movs	r1, #0
 800199a:	201c      	movs	r0, #28
 800199c:	f000 fa89 	bl	8001eb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80019a0:	201c      	movs	r0, #28
 80019a2:	f000 faa2 	bl	8001eea <HAL_NVIC_EnableIRQ>
}
 80019a6:	bf00      	nop
 80019a8:	3710      	adds	r7, #16
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	40012c00 	.word	0x40012c00
 80019b4:	40021000 	.word	0x40021000

080019b8 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b088      	sub	sp, #32
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c0:	f107 0310 	add.w	r3, r7, #16
 80019c4:	2200      	movs	r2, #0
 80019c6:	601a      	str	r2, [r3, #0]
 80019c8:	605a      	str	r2, [r3, #4]
 80019ca:	609a      	str	r2, [r3, #8]
 80019cc:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM3)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a15      	ldr	r2, [pc, #84]	; (8001a28 <HAL_TIM_Encoder_MspInit+0x70>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d123      	bne.n	8001a20 <HAL_TIM_Encoder_MspInit+0x68>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80019d8:	4b14      	ldr	r3, [pc, #80]	; (8001a2c <HAL_TIM_Encoder_MspInit+0x74>)
 80019da:	69db      	ldr	r3, [r3, #28]
 80019dc:	4a13      	ldr	r2, [pc, #76]	; (8001a2c <HAL_TIM_Encoder_MspInit+0x74>)
 80019de:	f043 0302 	orr.w	r3, r3, #2
 80019e2:	61d3      	str	r3, [r2, #28]
 80019e4:	4b11      	ldr	r3, [pc, #68]	; (8001a2c <HAL_TIM_Encoder_MspInit+0x74>)
 80019e6:	69db      	ldr	r3, [r3, #28]
 80019e8:	f003 0302 	and.w	r3, r3, #2
 80019ec:	60fb      	str	r3, [r7, #12]
 80019ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019f0:	4b0e      	ldr	r3, [pc, #56]	; (8001a2c <HAL_TIM_Encoder_MspInit+0x74>)
 80019f2:	699b      	ldr	r3, [r3, #24]
 80019f4:	4a0d      	ldr	r2, [pc, #52]	; (8001a2c <HAL_TIM_Encoder_MspInit+0x74>)
 80019f6:	f043 0304 	orr.w	r3, r3, #4
 80019fa:	6193      	str	r3, [r2, #24]
 80019fc:	4b0b      	ldr	r3, [pc, #44]	; (8001a2c <HAL_TIM_Encoder_MspInit+0x74>)
 80019fe:	699b      	ldr	r3, [r3, #24]
 8001a00:	f003 0304 	and.w	r3, r3, #4
 8001a04:	60bb      	str	r3, [r7, #8]
 8001a06:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a08:	23c0      	movs	r3, #192	; 0xc0
 8001a0a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a10:	2300      	movs	r3, #0
 8001a12:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a14:	f107 0310 	add.w	r3, r7, #16
 8001a18:	4619      	mov	r1, r3
 8001a1a:	4805      	ldr	r0, [pc, #20]	; (8001a30 <HAL_TIM_Encoder_MspInit+0x78>)
 8001a1c:	f000 fa80 	bl	8001f20 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001a20:	bf00      	nop
 8001a22:	3720      	adds	r7, #32
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	40000400 	.word	0x40000400
 8001a2c:	40021000 	.word	0x40021000
 8001a30:	40010800 	.word	0x40010800

08001a34 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b088      	sub	sp, #32
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a3c:	f107 0310 	add.w	r3, r7, #16
 8001a40:	2200      	movs	r2, #0
 8001a42:	601a      	str	r2, [r3, #0]
 8001a44:	605a      	str	r2, [r3, #4]
 8001a46:	609a      	str	r2, [r3, #8]
 8001a48:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a10      	ldr	r2, [pc, #64]	; (8001a90 <HAL_TIM_MspPostInit+0x5c>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d118      	bne.n	8001a86 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a54:	4b0f      	ldr	r3, [pc, #60]	; (8001a94 <HAL_TIM_MspPostInit+0x60>)
 8001a56:	699b      	ldr	r3, [r3, #24]
 8001a58:	4a0e      	ldr	r2, [pc, #56]	; (8001a94 <HAL_TIM_MspPostInit+0x60>)
 8001a5a:	f043 0304 	orr.w	r3, r3, #4
 8001a5e:	6193      	str	r3, [r2, #24]
 8001a60:	4b0c      	ldr	r3, [pc, #48]	; (8001a94 <HAL_TIM_MspPostInit+0x60>)
 8001a62:	699b      	ldr	r3, [r3, #24]
 8001a64:	f003 0304 	and.w	r3, r3, #4
 8001a68:	60fb      	str	r3, [r7, #12]
 8001a6a:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8001a6c:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001a70:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a72:	2302      	movs	r3, #2
 8001a74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a76:	2302      	movs	r3, #2
 8001a78:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a7a:	f107 0310 	add.w	r3, r7, #16
 8001a7e:	4619      	mov	r1, r3
 8001a80:	4805      	ldr	r0, [pc, #20]	; (8001a98 <HAL_TIM_MspPostInit+0x64>)
 8001a82:	f000 fa4d 	bl	8001f20 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001a86:	bf00      	nop
 8001a88:	3720      	adds	r7, #32
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	40012c00 	.word	0x40012c00
 8001a94:	40021000 	.word	0x40021000
 8001a98:	40010800 	.word	0x40010800

08001a9c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001aa0:	4b11      	ldr	r3, [pc, #68]	; (8001ae8 <MX_USART1_UART_Init+0x4c>)
 8001aa2:	4a12      	ldr	r2, [pc, #72]	; (8001aec <MX_USART1_UART_Init+0x50>)
 8001aa4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001aa6:	4b10      	ldr	r3, [pc, #64]	; (8001ae8 <MX_USART1_UART_Init+0x4c>)
 8001aa8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001aac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001aae:	4b0e      	ldr	r3, [pc, #56]	; (8001ae8 <MX_USART1_UART_Init+0x4c>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ab4:	4b0c      	ldr	r3, [pc, #48]	; (8001ae8 <MX_USART1_UART_Init+0x4c>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001aba:	4b0b      	ldr	r3, [pc, #44]	; (8001ae8 <MX_USART1_UART_Init+0x4c>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ac0:	4b09      	ldr	r3, [pc, #36]	; (8001ae8 <MX_USART1_UART_Init+0x4c>)
 8001ac2:	220c      	movs	r2, #12
 8001ac4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ac6:	4b08      	ldr	r3, [pc, #32]	; (8001ae8 <MX_USART1_UART_Init+0x4c>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001acc:	4b06      	ldr	r3, [pc, #24]	; (8001ae8 <MX_USART1_UART_Init+0x4c>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ad2:	4805      	ldr	r0, [pc, #20]	; (8001ae8 <MX_USART1_UART_Init+0x4c>)
 8001ad4:	f002 f91f 	bl	8003d16 <HAL_UART_Init>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d001      	beq.n	8001ae2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001ade:	f7ff fca0 	bl	8001422 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001ae2:	bf00      	nop
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	200002f0 	.word	0x200002f0
 8001aec:	40013800 	.word	0x40013800

08001af0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b08a      	sub	sp, #40	; 0x28
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af8:	f107 0314 	add.w	r3, r7, #20
 8001afc:	2200      	movs	r2, #0
 8001afe:	601a      	str	r2, [r3, #0]
 8001b00:	605a      	str	r2, [r3, #4]
 8001b02:	609a      	str	r2, [r3, #8]
 8001b04:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a22      	ldr	r2, [pc, #136]	; (8001b94 <HAL_UART_MspInit+0xa4>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d13d      	bne.n	8001b8c <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b10:	4b21      	ldr	r3, [pc, #132]	; (8001b98 <HAL_UART_MspInit+0xa8>)
 8001b12:	699b      	ldr	r3, [r3, #24]
 8001b14:	4a20      	ldr	r2, [pc, #128]	; (8001b98 <HAL_UART_MspInit+0xa8>)
 8001b16:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b1a:	6193      	str	r3, [r2, #24]
 8001b1c:	4b1e      	ldr	r3, [pc, #120]	; (8001b98 <HAL_UART_MspInit+0xa8>)
 8001b1e:	699b      	ldr	r3, [r3, #24]
 8001b20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b24:	613b      	str	r3, [r7, #16]
 8001b26:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b28:	4b1b      	ldr	r3, [pc, #108]	; (8001b98 <HAL_UART_MspInit+0xa8>)
 8001b2a:	699b      	ldr	r3, [r3, #24]
 8001b2c:	4a1a      	ldr	r2, [pc, #104]	; (8001b98 <HAL_UART_MspInit+0xa8>)
 8001b2e:	f043 0308 	orr.w	r3, r3, #8
 8001b32:	6193      	str	r3, [r2, #24]
 8001b34:	4b18      	ldr	r3, [pc, #96]	; (8001b98 <HAL_UART_MspInit+0xa8>)
 8001b36:	699b      	ldr	r3, [r3, #24]
 8001b38:	f003 0308 	and.w	r3, r3, #8
 8001b3c:	60fb      	str	r3, [r7, #12]
 8001b3e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001b40:	2340      	movs	r3, #64	; 0x40
 8001b42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b44:	2302      	movs	r3, #2
 8001b46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b4c:	f107 0314 	add.w	r3, r7, #20
 8001b50:	4619      	mov	r1, r3
 8001b52:	4812      	ldr	r0, [pc, #72]	; (8001b9c <HAL_UART_MspInit+0xac>)
 8001b54:	f000 f9e4 	bl	8001f20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001b58:	2380      	movs	r3, #128	; 0x80
 8001b5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b60:	2300      	movs	r3, #0
 8001b62:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b64:	f107 0314 	add.w	r3, r7, #20
 8001b68:	4619      	mov	r1, r3
 8001b6a:	480c      	ldr	r0, [pc, #48]	; (8001b9c <HAL_UART_MspInit+0xac>)
 8001b6c:	f000 f9d8 	bl	8001f20 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8001b70:	4b0b      	ldr	r3, [pc, #44]	; (8001ba0 <HAL_UART_MspInit+0xb0>)
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	627b      	str	r3, [r7, #36]	; 0x24
 8001b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b78:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001b7c:	627b      	str	r3, [r7, #36]	; 0x24
 8001b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b80:	f043 0304 	orr.w	r3, r3, #4
 8001b84:	627b      	str	r3, [r7, #36]	; 0x24
 8001b86:	4a06      	ldr	r2, [pc, #24]	; (8001ba0 <HAL_UART_MspInit+0xb0>)
 8001b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8a:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001b8c:	bf00      	nop
 8001b8e:	3728      	adds	r7, #40	; 0x28
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	40013800 	.word	0x40013800
 8001b98:	40021000 	.word	0x40021000
 8001b9c:	40010c00 	.word	0x40010c00
 8001ba0:	40010000 	.word	0x40010000

08001ba4 <u1_printf>:
  /* USER CODE END USART1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void u1_printf(char* fmt, ...) {
 8001ba4:	b40f      	push	{r0, r1, r2, r3}
 8001ba6:	b580      	push	{r7, lr}
 8001ba8:	b0b4      	sub	sp, #208	; 0xd0
 8001baa:	af00      	add	r7, sp, #0
  uint16_t len;
  va_list ap;
  va_start(ap, fmt);
 8001bac:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001bb0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  uint8_t buf[200];
  vsprintf((char*)buf, fmt, ap);
 8001bb4:	463b      	mov	r3, r7
 8001bb6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8001bba:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f003 ffe0 	bl	8005b84 <vsiprintf>
  va_end(ap);
  len = strlen((char*)buf);
 8001bc4:	463b      	mov	r3, r7
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7fe fb2e 	bl	8000228 <strlen>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
  HAL_UART_Transmit(&huart1, buf, len, HAL_MAX_DELAY);
 8001bd2:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 8001bd6:	4639      	mov	r1, r7
 8001bd8:	f04f 33ff 	mov.w	r3, #4294967295
 8001bdc:	4804      	ldr	r0, [pc, #16]	; (8001bf0 <u1_printf+0x4c>)
 8001bde:	f002 f8ea 	bl	8003db6 <HAL_UART_Transmit>
}
 8001be2:	bf00      	nop
 8001be4:	37d0      	adds	r7, #208	; 0xd0
 8001be6:	46bd      	mov	sp, r7
 8001be8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001bec:	b004      	add	sp, #16
 8001bee:	4770      	bx	lr
 8001bf0:	200002f0 	.word	0x200002f0

08001bf4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001bf4:	f7ff fd3e 	bl	8001674 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bf8:	480b      	ldr	r0, [pc, #44]	; (8001c28 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001bfa:	490c      	ldr	r1, [pc, #48]	; (8001c2c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001bfc:	4a0c      	ldr	r2, [pc, #48]	; (8001c30 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001bfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c00:	e002      	b.n	8001c08 <LoopCopyDataInit>

08001c02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c06:	3304      	adds	r3, #4

08001c08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c0c:	d3f9      	bcc.n	8001c02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c0e:	4a09      	ldr	r2, [pc, #36]	; (8001c34 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001c10:	4c09      	ldr	r4, [pc, #36]	; (8001c38 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c14:	e001      	b.n	8001c1a <LoopFillZerobss>

08001c16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c18:	3204      	adds	r2, #4

08001c1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c1c:	d3fb      	bcc.n	8001c16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c1e:	f002 fa4f 	bl	80040c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c22:	f7ff fb7f 	bl	8001324 <main>
  bx lr
 8001c26:	4770      	bx	lr
  ldr r0, =_sdata
 8001c28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c2c:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001c30:	08008eb4 	.word	0x08008eb4
  ldr r2, =_sbss
 8001c34:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001c38:	2000034c 	.word	0x2000034c

08001c3c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c3c:	e7fe      	b.n	8001c3c <ADC1_2_IRQHandler>
	...

08001c40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c44:	4b08      	ldr	r3, [pc, #32]	; (8001c68 <HAL_Init+0x28>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a07      	ldr	r2, [pc, #28]	; (8001c68 <HAL_Init+0x28>)
 8001c4a:	f043 0310 	orr.w	r3, r3, #16
 8001c4e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c50:	2003      	movs	r0, #3
 8001c52:	f000 f923 	bl	8001e9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c56:	200f      	movs	r0, #15
 8001c58:	f000 f808 	bl	8001c6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c5c:	f7ff fbe6 	bl	800142c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c60:	2300      	movs	r3, #0
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	40022000 	.word	0x40022000

08001c6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c74:	4b12      	ldr	r3, [pc, #72]	; (8001cc0 <HAL_InitTick+0x54>)
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	4b12      	ldr	r3, [pc, #72]	; (8001cc4 <HAL_InitTick+0x58>)
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c82:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c86:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f000 f93b 	bl	8001f06 <HAL_SYSTICK_Config>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d001      	beq.n	8001c9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e00e      	b.n	8001cb8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2b0f      	cmp	r3, #15
 8001c9e:	d80a      	bhi.n	8001cb6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	6879      	ldr	r1, [r7, #4]
 8001ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ca8:	f000 f903 	bl	8001eb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cac:	4a06      	ldr	r2, [pc, #24]	; (8001cc8 <HAL_InitTick+0x5c>)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	e000      	b.n	8001cb8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3708      	adds	r7, #8
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	20000004 	.word	0x20000004
 8001cc4:	2000000c 	.word	0x2000000c
 8001cc8:	20000008 	.word	0x20000008

08001ccc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cd0:	4b05      	ldr	r3, [pc, #20]	; (8001ce8 <HAL_IncTick+0x1c>)
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	4b05      	ldr	r3, [pc, #20]	; (8001cec <HAL_IncTick+0x20>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4413      	add	r3, r2
 8001cdc:	4a03      	ldr	r2, [pc, #12]	; (8001cec <HAL_IncTick+0x20>)
 8001cde:	6013      	str	r3, [r2, #0]
}
 8001ce0:	bf00      	nop
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bc80      	pop	{r7}
 8001ce6:	4770      	bx	lr
 8001ce8:	2000000c 	.word	0x2000000c
 8001cec:	20000338 	.word	0x20000338

08001cf0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  return uwTick;
 8001cf4:	4b02      	ldr	r3, [pc, #8]	; (8001d00 <HAL_GetTick+0x10>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bc80      	pop	{r7}
 8001cfe:	4770      	bx	lr
 8001d00:	20000338 	.word	0x20000338

08001d04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b085      	sub	sp, #20
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	f003 0307 	and.w	r3, r3, #7
 8001d12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d14:	4b0c      	ldr	r3, [pc, #48]	; (8001d48 <__NVIC_SetPriorityGrouping+0x44>)
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d1a:	68ba      	ldr	r2, [r7, #8]
 8001d1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d20:	4013      	ands	r3, r2
 8001d22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d36:	4a04      	ldr	r2, [pc, #16]	; (8001d48 <__NVIC_SetPriorityGrouping+0x44>)
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	60d3      	str	r3, [r2, #12]
}
 8001d3c:	bf00      	nop
 8001d3e:	3714      	adds	r7, #20
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bc80      	pop	{r7}
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	e000ed00 	.word	0xe000ed00

08001d4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d50:	4b04      	ldr	r3, [pc, #16]	; (8001d64 <__NVIC_GetPriorityGrouping+0x18>)
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	0a1b      	lsrs	r3, r3, #8
 8001d56:	f003 0307 	and.w	r3, r3, #7
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bc80      	pop	{r7}
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	e000ed00 	.word	0xe000ed00

08001d68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	4603      	mov	r3, r0
 8001d70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	db0b      	blt.n	8001d92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d7a:	79fb      	ldrb	r3, [r7, #7]
 8001d7c:	f003 021f 	and.w	r2, r3, #31
 8001d80:	4906      	ldr	r1, [pc, #24]	; (8001d9c <__NVIC_EnableIRQ+0x34>)
 8001d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d86:	095b      	lsrs	r3, r3, #5
 8001d88:	2001      	movs	r0, #1
 8001d8a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d92:	bf00      	nop
 8001d94:	370c      	adds	r7, #12
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bc80      	pop	{r7}
 8001d9a:	4770      	bx	lr
 8001d9c:	e000e100 	.word	0xe000e100

08001da0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	4603      	mov	r3, r0
 8001da8:	6039      	str	r1, [r7, #0]
 8001daa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	db0a      	blt.n	8001dca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	b2da      	uxtb	r2, r3
 8001db8:	490c      	ldr	r1, [pc, #48]	; (8001dec <__NVIC_SetPriority+0x4c>)
 8001dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dbe:	0112      	lsls	r2, r2, #4
 8001dc0:	b2d2      	uxtb	r2, r2
 8001dc2:	440b      	add	r3, r1
 8001dc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dc8:	e00a      	b.n	8001de0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	b2da      	uxtb	r2, r3
 8001dce:	4908      	ldr	r1, [pc, #32]	; (8001df0 <__NVIC_SetPriority+0x50>)
 8001dd0:	79fb      	ldrb	r3, [r7, #7]
 8001dd2:	f003 030f 	and.w	r3, r3, #15
 8001dd6:	3b04      	subs	r3, #4
 8001dd8:	0112      	lsls	r2, r2, #4
 8001dda:	b2d2      	uxtb	r2, r2
 8001ddc:	440b      	add	r3, r1
 8001dde:	761a      	strb	r2, [r3, #24]
}
 8001de0:	bf00      	nop
 8001de2:	370c      	adds	r7, #12
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bc80      	pop	{r7}
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	e000e100 	.word	0xe000e100
 8001df0:	e000ed00 	.word	0xe000ed00

08001df4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b089      	sub	sp, #36	; 0x24
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	60f8      	str	r0, [r7, #12]
 8001dfc:	60b9      	str	r1, [r7, #8]
 8001dfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	f003 0307 	and.w	r3, r3, #7
 8001e06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	f1c3 0307 	rsb	r3, r3, #7
 8001e0e:	2b04      	cmp	r3, #4
 8001e10:	bf28      	it	cs
 8001e12:	2304      	movcs	r3, #4
 8001e14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	3304      	adds	r3, #4
 8001e1a:	2b06      	cmp	r3, #6
 8001e1c:	d902      	bls.n	8001e24 <NVIC_EncodePriority+0x30>
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	3b03      	subs	r3, #3
 8001e22:	e000      	b.n	8001e26 <NVIC_EncodePriority+0x32>
 8001e24:	2300      	movs	r3, #0
 8001e26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e28:	f04f 32ff 	mov.w	r2, #4294967295
 8001e2c:	69bb      	ldr	r3, [r7, #24]
 8001e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e32:	43da      	mvns	r2, r3
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	401a      	ands	r2, r3
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e3c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	fa01 f303 	lsl.w	r3, r1, r3
 8001e46:	43d9      	mvns	r1, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e4c:	4313      	orrs	r3, r2
         );
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3724      	adds	r7, #36	; 0x24
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bc80      	pop	{r7}
 8001e56:	4770      	bx	lr

08001e58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	3b01      	subs	r3, #1
 8001e64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e68:	d301      	bcc.n	8001e6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e00f      	b.n	8001e8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e6e:	4a0a      	ldr	r2, [pc, #40]	; (8001e98 <SysTick_Config+0x40>)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	3b01      	subs	r3, #1
 8001e74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e76:	210f      	movs	r1, #15
 8001e78:	f04f 30ff 	mov.w	r0, #4294967295
 8001e7c:	f7ff ff90 	bl	8001da0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e80:	4b05      	ldr	r3, [pc, #20]	; (8001e98 <SysTick_Config+0x40>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e86:	4b04      	ldr	r3, [pc, #16]	; (8001e98 <SysTick_Config+0x40>)
 8001e88:	2207      	movs	r2, #7
 8001e8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e8c:	2300      	movs	r3, #0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	e000e010 	.word	0xe000e010

08001e9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f7ff ff2d 	bl	8001d04 <__NVIC_SetPriorityGrouping>
}
 8001eaa:	bf00      	nop
 8001eac:	3708      	adds	r7, #8
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}

08001eb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001eb2:	b580      	push	{r7, lr}
 8001eb4:	b086      	sub	sp, #24
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	4603      	mov	r3, r0
 8001eba:	60b9      	str	r1, [r7, #8]
 8001ebc:	607a      	str	r2, [r7, #4]
 8001ebe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ec4:	f7ff ff42 	bl	8001d4c <__NVIC_GetPriorityGrouping>
 8001ec8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	68b9      	ldr	r1, [r7, #8]
 8001ece:	6978      	ldr	r0, [r7, #20]
 8001ed0:	f7ff ff90 	bl	8001df4 <NVIC_EncodePriority>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eda:	4611      	mov	r1, r2
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7ff ff5f 	bl	8001da0 <__NVIC_SetPriority>
}
 8001ee2:	bf00      	nop
 8001ee4:	3718      	adds	r7, #24
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}

08001eea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eea:	b580      	push	{r7, lr}
 8001eec:	b082      	sub	sp, #8
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ef4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f7ff ff35 	bl	8001d68 <__NVIC_EnableIRQ>
}
 8001efe:	bf00      	nop
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}

08001f06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f06:	b580      	push	{r7, lr}
 8001f08:	b082      	sub	sp, #8
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f7ff ffa2 	bl	8001e58 <SysTick_Config>
 8001f14:	4603      	mov	r3, r0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3708      	adds	r7, #8
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
	...

08001f20 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b08b      	sub	sp, #44	; 0x2c
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f32:	e179      	b.n	8002228 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001f34:	2201      	movs	r2, #1
 8001f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f38:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	69fa      	ldr	r2, [r7, #28]
 8001f44:	4013      	ands	r3, r2
 8001f46:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001f48:	69ba      	ldr	r2, [r7, #24]
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	f040 8168 	bne.w	8002222 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	4a96      	ldr	r2, [pc, #600]	; (80021b0 <HAL_GPIO_Init+0x290>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d05e      	beq.n	800201a <HAL_GPIO_Init+0xfa>
 8001f5c:	4a94      	ldr	r2, [pc, #592]	; (80021b0 <HAL_GPIO_Init+0x290>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d875      	bhi.n	800204e <HAL_GPIO_Init+0x12e>
 8001f62:	4a94      	ldr	r2, [pc, #592]	; (80021b4 <HAL_GPIO_Init+0x294>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d058      	beq.n	800201a <HAL_GPIO_Init+0xfa>
 8001f68:	4a92      	ldr	r2, [pc, #584]	; (80021b4 <HAL_GPIO_Init+0x294>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d86f      	bhi.n	800204e <HAL_GPIO_Init+0x12e>
 8001f6e:	4a92      	ldr	r2, [pc, #584]	; (80021b8 <HAL_GPIO_Init+0x298>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d052      	beq.n	800201a <HAL_GPIO_Init+0xfa>
 8001f74:	4a90      	ldr	r2, [pc, #576]	; (80021b8 <HAL_GPIO_Init+0x298>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d869      	bhi.n	800204e <HAL_GPIO_Init+0x12e>
 8001f7a:	4a90      	ldr	r2, [pc, #576]	; (80021bc <HAL_GPIO_Init+0x29c>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d04c      	beq.n	800201a <HAL_GPIO_Init+0xfa>
 8001f80:	4a8e      	ldr	r2, [pc, #568]	; (80021bc <HAL_GPIO_Init+0x29c>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d863      	bhi.n	800204e <HAL_GPIO_Init+0x12e>
 8001f86:	4a8e      	ldr	r2, [pc, #568]	; (80021c0 <HAL_GPIO_Init+0x2a0>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d046      	beq.n	800201a <HAL_GPIO_Init+0xfa>
 8001f8c:	4a8c      	ldr	r2, [pc, #560]	; (80021c0 <HAL_GPIO_Init+0x2a0>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d85d      	bhi.n	800204e <HAL_GPIO_Init+0x12e>
 8001f92:	2b12      	cmp	r3, #18
 8001f94:	d82a      	bhi.n	8001fec <HAL_GPIO_Init+0xcc>
 8001f96:	2b12      	cmp	r3, #18
 8001f98:	d859      	bhi.n	800204e <HAL_GPIO_Init+0x12e>
 8001f9a:	a201      	add	r2, pc, #4	; (adr r2, 8001fa0 <HAL_GPIO_Init+0x80>)
 8001f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fa0:	0800201b 	.word	0x0800201b
 8001fa4:	08001ff5 	.word	0x08001ff5
 8001fa8:	08002007 	.word	0x08002007
 8001fac:	08002049 	.word	0x08002049
 8001fb0:	0800204f 	.word	0x0800204f
 8001fb4:	0800204f 	.word	0x0800204f
 8001fb8:	0800204f 	.word	0x0800204f
 8001fbc:	0800204f 	.word	0x0800204f
 8001fc0:	0800204f 	.word	0x0800204f
 8001fc4:	0800204f 	.word	0x0800204f
 8001fc8:	0800204f 	.word	0x0800204f
 8001fcc:	0800204f 	.word	0x0800204f
 8001fd0:	0800204f 	.word	0x0800204f
 8001fd4:	0800204f 	.word	0x0800204f
 8001fd8:	0800204f 	.word	0x0800204f
 8001fdc:	0800204f 	.word	0x0800204f
 8001fe0:	0800204f 	.word	0x0800204f
 8001fe4:	08001ffd 	.word	0x08001ffd
 8001fe8:	08002011 	.word	0x08002011
 8001fec:	4a75      	ldr	r2, [pc, #468]	; (80021c4 <HAL_GPIO_Init+0x2a4>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d013      	beq.n	800201a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001ff2:	e02c      	b.n	800204e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	623b      	str	r3, [r7, #32]
          break;
 8001ffa:	e029      	b.n	8002050 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	3304      	adds	r3, #4
 8002002:	623b      	str	r3, [r7, #32]
          break;
 8002004:	e024      	b.n	8002050 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	68db      	ldr	r3, [r3, #12]
 800200a:	3308      	adds	r3, #8
 800200c:	623b      	str	r3, [r7, #32]
          break;
 800200e:	e01f      	b.n	8002050 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	330c      	adds	r3, #12
 8002016:	623b      	str	r3, [r7, #32]
          break;
 8002018:	e01a      	b.n	8002050 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d102      	bne.n	8002028 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002022:	2304      	movs	r3, #4
 8002024:	623b      	str	r3, [r7, #32]
          break;
 8002026:	e013      	b.n	8002050 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	2b01      	cmp	r3, #1
 800202e:	d105      	bne.n	800203c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002030:	2308      	movs	r3, #8
 8002032:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	69fa      	ldr	r2, [r7, #28]
 8002038:	611a      	str	r2, [r3, #16]
          break;
 800203a:	e009      	b.n	8002050 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800203c:	2308      	movs	r3, #8
 800203e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	69fa      	ldr	r2, [r7, #28]
 8002044:	615a      	str	r2, [r3, #20]
          break;
 8002046:	e003      	b.n	8002050 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002048:	2300      	movs	r3, #0
 800204a:	623b      	str	r3, [r7, #32]
          break;
 800204c:	e000      	b.n	8002050 <HAL_GPIO_Init+0x130>
          break;
 800204e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002050:	69bb      	ldr	r3, [r7, #24]
 8002052:	2bff      	cmp	r3, #255	; 0xff
 8002054:	d801      	bhi.n	800205a <HAL_GPIO_Init+0x13a>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	e001      	b.n	800205e <HAL_GPIO_Init+0x13e>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	3304      	adds	r3, #4
 800205e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002060:	69bb      	ldr	r3, [r7, #24]
 8002062:	2bff      	cmp	r3, #255	; 0xff
 8002064:	d802      	bhi.n	800206c <HAL_GPIO_Init+0x14c>
 8002066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	e002      	b.n	8002072 <HAL_GPIO_Init+0x152>
 800206c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206e:	3b08      	subs	r3, #8
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	210f      	movs	r1, #15
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	fa01 f303 	lsl.w	r3, r1, r3
 8002080:	43db      	mvns	r3, r3
 8002082:	401a      	ands	r2, r3
 8002084:	6a39      	ldr	r1, [r7, #32]
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	fa01 f303 	lsl.w	r3, r1, r3
 800208c:	431a      	orrs	r2, r3
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800209a:	2b00      	cmp	r3, #0
 800209c:	f000 80c1 	beq.w	8002222 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80020a0:	4b49      	ldr	r3, [pc, #292]	; (80021c8 <HAL_GPIO_Init+0x2a8>)
 80020a2:	699b      	ldr	r3, [r3, #24]
 80020a4:	4a48      	ldr	r2, [pc, #288]	; (80021c8 <HAL_GPIO_Init+0x2a8>)
 80020a6:	f043 0301 	orr.w	r3, r3, #1
 80020aa:	6193      	str	r3, [r2, #24]
 80020ac:	4b46      	ldr	r3, [pc, #280]	; (80021c8 <HAL_GPIO_Init+0x2a8>)
 80020ae:	699b      	ldr	r3, [r3, #24]
 80020b0:	f003 0301 	and.w	r3, r3, #1
 80020b4:	60bb      	str	r3, [r7, #8]
 80020b6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80020b8:	4a44      	ldr	r2, [pc, #272]	; (80021cc <HAL_GPIO_Init+0x2ac>)
 80020ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020bc:	089b      	lsrs	r3, r3, #2
 80020be:	3302      	adds	r3, #2
 80020c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020c4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80020c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c8:	f003 0303 	and.w	r3, r3, #3
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	220f      	movs	r2, #15
 80020d0:	fa02 f303 	lsl.w	r3, r2, r3
 80020d4:	43db      	mvns	r3, r3
 80020d6:	68fa      	ldr	r2, [r7, #12]
 80020d8:	4013      	ands	r3, r2
 80020da:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	4a3c      	ldr	r2, [pc, #240]	; (80021d0 <HAL_GPIO_Init+0x2b0>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d01f      	beq.n	8002124 <HAL_GPIO_Init+0x204>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	4a3b      	ldr	r2, [pc, #236]	; (80021d4 <HAL_GPIO_Init+0x2b4>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d019      	beq.n	8002120 <HAL_GPIO_Init+0x200>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	4a3a      	ldr	r2, [pc, #232]	; (80021d8 <HAL_GPIO_Init+0x2b8>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d013      	beq.n	800211c <HAL_GPIO_Init+0x1fc>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	4a39      	ldr	r2, [pc, #228]	; (80021dc <HAL_GPIO_Init+0x2bc>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d00d      	beq.n	8002118 <HAL_GPIO_Init+0x1f8>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	4a38      	ldr	r2, [pc, #224]	; (80021e0 <HAL_GPIO_Init+0x2c0>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d007      	beq.n	8002114 <HAL_GPIO_Init+0x1f4>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	4a37      	ldr	r2, [pc, #220]	; (80021e4 <HAL_GPIO_Init+0x2c4>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d101      	bne.n	8002110 <HAL_GPIO_Init+0x1f0>
 800210c:	2305      	movs	r3, #5
 800210e:	e00a      	b.n	8002126 <HAL_GPIO_Init+0x206>
 8002110:	2306      	movs	r3, #6
 8002112:	e008      	b.n	8002126 <HAL_GPIO_Init+0x206>
 8002114:	2304      	movs	r3, #4
 8002116:	e006      	b.n	8002126 <HAL_GPIO_Init+0x206>
 8002118:	2303      	movs	r3, #3
 800211a:	e004      	b.n	8002126 <HAL_GPIO_Init+0x206>
 800211c:	2302      	movs	r3, #2
 800211e:	e002      	b.n	8002126 <HAL_GPIO_Init+0x206>
 8002120:	2301      	movs	r3, #1
 8002122:	e000      	b.n	8002126 <HAL_GPIO_Init+0x206>
 8002124:	2300      	movs	r3, #0
 8002126:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002128:	f002 0203 	and.w	r2, r2, #3
 800212c:	0092      	lsls	r2, r2, #2
 800212e:	4093      	lsls	r3, r2
 8002130:	68fa      	ldr	r2, [r7, #12]
 8002132:	4313      	orrs	r3, r2
 8002134:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002136:	4925      	ldr	r1, [pc, #148]	; (80021cc <HAL_GPIO_Init+0x2ac>)
 8002138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213a:	089b      	lsrs	r3, r3, #2
 800213c:	3302      	adds	r3, #2
 800213e:	68fa      	ldr	r2, [r7, #12]
 8002140:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800214c:	2b00      	cmp	r3, #0
 800214e:	d006      	beq.n	800215e <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002150:	4b25      	ldr	r3, [pc, #148]	; (80021e8 <HAL_GPIO_Init+0x2c8>)
 8002152:	689a      	ldr	r2, [r3, #8]
 8002154:	4924      	ldr	r1, [pc, #144]	; (80021e8 <HAL_GPIO_Init+0x2c8>)
 8002156:	69bb      	ldr	r3, [r7, #24]
 8002158:	4313      	orrs	r3, r2
 800215a:	608b      	str	r3, [r1, #8]
 800215c:	e006      	b.n	800216c <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800215e:	4b22      	ldr	r3, [pc, #136]	; (80021e8 <HAL_GPIO_Init+0x2c8>)
 8002160:	689a      	ldr	r2, [r3, #8]
 8002162:	69bb      	ldr	r3, [r7, #24]
 8002164:	43db      	mvns	r3, r3
 8002166:	4920      	ldr	r1, [pc, #128]	; (80021e8 <HAL_GPIO_Init+0x2c8>)
 8002168:	4013      	ands	r3, r2
 800216a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002174:	2b00      	cmp	r3, #0
 8002176:	d006      	beq.n	8002186 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002178:	4b1b      	ldr	r3, [pc, #108]	; (80021e8 <HAL_GPIO_Init+0x2c8>)
 800217a:	68da      	ldr	r2, [r3, #12]
 800217c:	491a      	ldr	r1, [pc, #104]	; (80021e8 <HAL_GPIO_Init+0x2c8>)
 800217e:	69bb      	ldr	r3, [r7, #24]
 8002180:	4313      	orrs	r3, r2
 8002182:	60cb      	str	r3, [r1, #12]
 8002184:	e006      	b.n	8002194 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002186:	4b18      	ldr	r3, [pc, #96]	; (80021e8 <HAL_GPIO_Init+0x2c8>)
 8002188:	68da      	ldr	r2, [r3, #12]
 800218a:	69bb      	ldr	r3, [r7, #24]
 800218c:	43db      	mvns	r3, r3
 800218e:	4916      	ldr	r1, [pc, #88]	; (80021e8 <HAL_GPIO_Init+0x2c8>)
 8002190:	4013      	ands	r3, r2
 8002192:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800219c:	2b00      	cmp	r3, #0
 800219e:	d025      	beq.n	80021ec <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80021a0:	4b11      	ldr	r3, [pc, #68]	; (80021e8 <HAL_GPIO_Init+0x2c8>)
 80021a2:	685a      	ldr	r2, [r3, #4]
 80021a4:	4910      	ldr	r1, [pc, #64]	; (80021e8 <HAL_GPIO_Init+0x2c8>)
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	4313      	orrs	r3, r2
 80021aa:	604b      	str	r3, [r1, #4]
 80021ac:	e025      	b.n	80021fa <HAL_GPIO_Init+0x2da>
 80021ae:	bf00      	nop
 80021b0:	10320000 	.word	0x10320000
 80021b4:	10310000 	.word	0x10310000
 80021b8:	10220000 	.word	0x10220000
 80021bc:	10210000 	.word	0x10210000
 80021c0:	10120000 	.word	0x10120000
 80021c4:	10110000 	.word	0x10110000
 80021c8:	40021000 	.word	0x40021000
 80021cc:	40010000 	.word	0x40010000
 80021d0:	40010800 	.word	0x40010800
 80021d4:	40010c00 	.word	0x40010c00
 80021d8:	40011000 	.word	0x40011000
 80021dc:	40011400 	.word	0x40011400
 80021e0:	40011800 	.word	0x40011800
 80021e4:	40011c00 	.word	0x40011c00
 80021e8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80021ec:	4b15      	ldr	r3, [pc, #84]	; (8002244 <HAL_GPIO_Init+0x324>)
 80021ee:	685a      	ldr	r2, [r3, #4]
 80021f0:	69bb      	ldr	r3, [r7, #24]
 80021f2:	43db      	mvns	r3, r3
 80021f4:	4913      	ldr	r1, [pc, #76]	; (8002244 <HAL_GPIO_Init+0x324>)
 80021f6:	4013      	ands	r3, r2
 80021f8:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d006      	beq.n	8002214 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002206:	4b0f      	ldr	r3, [pc, #60]	; (8002244 <HAL_GPIO_Init+0x324>)
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	490e      	ldr	r1, [pc, #56]	; (8002244 <HAL_GPIO_Init+0x324>)
 800220c:	69bb      	ldr	r3, [r7, #24]
 800220e:	4313      	orrs	r3, r2
 8002210:	600b      	str	r3, [r1, #0]
 8002212:	e006      	b.n	8002222 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002214:	4b0b      	ldr	r3, [pc, #44]	; (8002244 <HAL_GPIO_Init+0x324>)
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	69bb      	ldr	r3, [r7, #24]
 800221a:	43db      	mvns	r3, r3
 800221c:	4909      	ldr	r1, [pc, #36]	; (8002244 <HAL_GPIO_Init+0x324>)
 800221e:	4013      	ands	r3, r2
 8002220:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002224:	3301      	adds	r3, #1
 8002226:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222e:	fa22 f303 	lsr.w	r3, r2, r3
 8002232:	2b00      	cmp	r3, #0
 8002234:	f47f ae7e 	bne.w	8001f34 <HAL_GPIO_Init+0x14>
  }
}
 8002238:	bf00      	nop
 800223a:	bf00      	nop
 800223c:	372c      	adds	r7, #44	; 0x2c
 800223e:	46bd      	mov	sp, r7
 8002240:	bc80      	pop	{r7}
 8002242:	4770      	bx	lr
 8002244:	40010400 	.word	0x40010400

08002248 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b086      	sub	sp, #24
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d101      	bne.n	800225a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e272      	b.n	8002740 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0301 	and.w	r3, r3, #1
 8002262:	2b00      	cmp	r3, #0
 8002264:	f000 8087 	beq.w	8002376 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002268:	4b92      	ldr	r3, [pc, #584]	; (80024b4 <HAL_RCC_OscConfig+0x26c>)
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f003 030c 	and.w	r3, r3, #12
 8002270:	2b04      	cmp	r3, #4
 8002272:	d00c      	beq.n	800228e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002274:	4b8f      	ldr	r3, [pc, #572]	; (80024b4 <HAL_RCC_OscConfig+0x26c>)
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f003 030c 	and.w	r3, r3, #12
 800227c:	2b08      	cmp	r3, #8
 800227e:	d112      	bne.n	80022a6 <HAL_RCC_OscConfig+0x5e>
 8002280:	4b8c      	ldr	r3, [pc, #560]	; (80024b4 <HAL_RCC_OscConfig+0x26c>)
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002288:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800228c:	d10b      	bne.n	80022a6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800228e:	4b89      	ldr	r3, [pc, #548]	; (80024b4 <HAL_RCC_OscConfig+0x26c>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d06c      	beq.n	8002374 <HAL_RCC_OscConfig+0x12c>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d168      	bne.n	8002374 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e24c      	b.n	8002740 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022ae:	d106      	bne.n	80022be <HAL_RCC_OscConfig+0x76>
 80022b0:	4b80      	ldr	r3, [pc, #512]	; (80024b4 <HAL_RCC_OscConfig+0x26c>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a7f      	ldr	r2, [pc, #508]	; (80024b4 <HAL_RCC_OscConfig+0x26c>)
 80022b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022ba:	6013      	str	r3, [r2, #0]
 80022bc:	e02e      	b.n	800231c <HAL_RCC_OscConfig+0xd4>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d10c      	bne.n	80022e0 <HAL_RCC_OscConfig+0x98>
 80022c6:	4b7b      	ldr	r3, [pc, #492]	; (80024b4 <HAL_RCC_OscConfig+0x26c>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a7a      	ldr	r2, [pc, #488]	; (80024b4 <HAL_RCC_OscConfig+0x26c>)
 80022cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022d0:	6013      	str	r3, [r2, #0]
 80022d2:	4b78      	ldr	r3, [pc, #480]	; (80024b4 <HAL_RCC_OscConfig+0x26c>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a77      	ldr	r2, [pc, #476]	; (80024b4 <HAL_RCC_OscConfig+0x26c>)
 80022d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022dc:	6013      	str	r3, [r2, #0]
 80022de:	e01d      	b.n	800231c <HAL_RCC_OscConfig+0xd4>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022e8:	d10c      	bne.n	8002304 <HAL_RCC_OscConfig+0xbc>
 80022ea:	4b72      	ldr	r3, [pc, #456]	; (80024b4 <HAL_RCC_OscConfig+0x26c>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a71      	ldr	r2, [pc, #452]	; (80024b4 <HAL_RCC_OscConfig+0x26c>)
 80022f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022f4:	6013      	str	r3, [r2, #0]
 80022f6:	4b6f      	ldr	r3, [pc, #444]	; (80024b4 <HAL_RCC_OscConfig+0x26c>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a6e      	ldr	r2, [pc, #440]	; (80024b4 <HAL_RCC_OscConfig+0x26c>)
 80022fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002300:	6013      	str	r3, [r2, #0]
 8002302:	e00b      	b.n	800231c <HAL_RCC_OscConfig+0xd4>
 8002304:	4b6b      	ldr	r3, [pc, #428]	; (80024b4 <HAL_RCC_OscConfig+0x26c>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a6a      	ldr	r2, [pc, #424]	; (80024b4 <HAL_RCC_OscConfig+0x26c>)
 800230a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800230e:	6013      	str	r3, [r2, #0]
 8002310:	4b68      	ldr	r3, [pc, #416]	; (80024b4 <HAL_RCC_OscConfig+0x26c>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a67      	ldr	r2, [pc, #412]	; (80024b4 <HAL_RCC_OscConfig+0x26c>)
 8002316:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800231a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d013      	beq.n	800234c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002324:	f7ff fce4 	bl	8001cf0 <HAL_GetTick>
 8002328:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800232a:	e008      	b.n	800233e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800232c:	f7ff fce0 	bl	8001cf0 <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	2b64      	cmp	r3, #100	; 0x64
 8002338:	d901      	bls.n	800233e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	e200      	b.n	8002740 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800233e:	4b5d      	ldr	r3, [pc, #372]	; (80024b4 <HAL_RCC_OscConfig+0x26c>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d0f0      	beq.n	800232c <HAL_RCC_OscConfig+0xe4>
 800234a:	e014      	b.n	8002376 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800234c:	f7ff fcd0 	bl	8001cf0 <HAL_GetTick>
 8002350:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002352:	e008      	b.n	8002366 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002354:	f7ff fccc 	bl	8001cf0 <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	2b64      	cmp	r3, #100	; 0x64
 8002360:	d901      	bls.n	8002366 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	e1ec      	b.n	8002740 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002366:	4b53      	ldr	r3, [pc, #332]	; (80024b4 <HAL_RCC_OscConfig+0x26c>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d1f0      	bne.n	8002354 <HAL_RCC_OscConfig+0x10c>
 8002372:	e000      	b.n	8002376 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002374:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0302 	and.w	r3, r3, #2
 800237e:	2b00      	cmp	r3, #0
 8002380:	d063      	beq.n	800244a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002382:	4b4c      	ldr	r3, [pc, #304]	; (80024b4 <HAL_RCC_OscConfig+0x26c>)
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	f003 030c 	and.w	r3, r3, #12
 800238a:	2b00      	cmp	r3, #0
 800238c:	d00b      	beq.n	80023a6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800238e:	4b49      	ldr	r3, [pc, #292]	; (80024b4 <HAL_RCC_OscConfig+0x26c>)
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	f003 030c 	and.w	r3, r3, #12
 8002396:	2b08      	cmp	r3, #8
 8002398:	d11c      	bne.n	80023d4 <HAL_RCC_OscConfig+0x18c>
 800239a:	4b46      	ldr	r3, [pc, #280]	; (80024b4 <HAL_RCC_OscConfig+0x26c>)
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d116      	bne.n	80023d4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023a6:	4b43      	ldr	r3, [pc, #268]	; (80024b4 <HAL_RCC_OscConfig+0x26c>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0302 	and.w	r3, r3, #2
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d005      	beq.n	80023be <HAL_RCC_OscConfig+0x176>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	691b      	ldr	r3, [r3, #16]
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d001      	beq.n	80023be <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e1c0      	b.n	8002740 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023be:	4b3d      	ldr	r3, [pc, #244]	; (80024b4 <HAL_RCC_OscConfig+0x26c>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	695b      	ldr	r3, [r3, #20]
 80023ca:	00db      	lsls	r3, r3, #3
 80023cc:	4939      	ldr	r1, [pc, #228]	; (80024b4 <HAL_RCC_OscConfig+0x26c>)
 80023ce:	4313      	orrs	r3, r2
 80023d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023d2:	e03a      	b.n	800244a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	691b      	ldr	r3, [r3, #16]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d020      	beq.n	800241e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023dc:	4b36      	ldr	r3, [pc, #216]	; (80024b8 <HAL_RCC_OscConfig+0x270>)
 80023de:	2201      	movs	r2, #1
 80023e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e2:	f7ff fc85 	bl	8001cf0 <HAL_GetTick>
 80023e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023e8:	e008      	b.n	80023fc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023ea:	f7ff fc81 	bl	8001cf0 <HAL_GetTick>
 80023ee:	4602      	mov	r2, r0
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	2b02      	cmp	r3, #2
 80023f6:	d901      	bls.n	80023fc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80023f8:	2303      	movs	r3, #3
 80023fa:	e1a1      	b.n	8002740 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023fc:	4b2d      	ldr	r3, [pc, #180]	; (80024b4 <HAL_RCC_OscConfig+0x26c>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 0302 	and.w	r3, r3, #2
 8002404:	2b00      	cmp	r3, #0
 8002406:	d0f0      	beq.n	80023ea <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002408:	4b2a      	ldr	r3, [pc, #168]	; (80024b4 <HAL_RCC_OscConfig+0x26c>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	695b      	ldr	r3, [r3, #20]
 8002414:	00db      	lsls	r3, r3, #3
 8002416:	4927      	ldr	r1, [pc, #156]	; (80024b4 <HAL_RCC_OscConfig+0x26c>)
 8002418:	4313      	orrs	r3, r2
 800241a:	600b      	str	r3, [r1, #0]
 800241c:	e015      	b.n	800244a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800241e:	4b26      	ldr	r3, [pc, #152]	; (80024b8 <HAL_RCC_OscConfig+0x270>)
 8002420:	2200      	movs	r2, #0
 8002422:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002424:	f7ff fc64 	bl	8001cf0 <HAL_GetTick>
 8002428:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800242a:	e008      	b.n	800243e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800242c:	f7ff fc60 	bl	8001cf0 <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	2b02      	cmp	r3, #2
 8002438:	d901      	bls.n	800243e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e180      	b.n	8002740 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800243e:	4b1d      	ldr	r3, [pc, #116]	; (80024b4 <HAL_RCC_OscConfig+0x26c>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0302 	and.w	r3, r3, #2
 8002446:	2b00      	cmp	r3, #0
 8002448:	d1f0      	bne.n	800242c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0308 	and.w	r3, r3, #8
 8002452:	2b00      	cmp	r3, #0
 8002454:	d03a      	beq.n	80024cc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	699b      	ldr	r3, [r3, #24]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d019      	beq.n	8002492 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800245e:	4b17      	ldr	r3, [pc, #92]	; (80024bc <HAL_RCC_OscConfig+0x274>)
 8002460:	2201      	movs	r2, #1
 8002462:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002464:	f7ff fc44 	bl	8001cf0 <HAL_GetTick>
 8002468:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800246a:	e008      	b.n	800247e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800246c:	f7ff fc40 	bl	8001cf0 <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	2b02      	cmp	r3, #2
 8002478:	d901      	bls.n	800247e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e160      	b.n	8002740 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800247e:	4b0d      	ldr	r3, [pc, #52]	; (80024b4 <HAL_RCC_OscConfig+0x26c>)
 8002480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002482:	f003 0302 	and.w	r3, r3, #2
 8002486:	2b00      	cmp	r3, #0
 8002488:	d0f0      	beq.n	800246c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800248a:	2001      	movs	r0, #1
 800248c:	f000 face 	bl	8002a2c <RCC_Delay>
 8002490:	e01c      	b.n	80024cc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002492:	4b0a      	ldr	r3, [pc, #40]	; (80024bc <HAL_RCC_OscConfig+0x274>)
 8002494:	2200      	movs	r2, #0
 8002496:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002498:	f7ff fc2a 	bl	8001cf0 <HAL_GetTick>
 800249c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800249e:	e00f      	b.n	80024c0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024a0:	f7ff fc26 	bl	8001cf0 <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d908      	bls.n	80024c0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	e146      	b.n	8002740 <HAL_RCC_OscConfig+0x4f8>
 80024b2:	bf00      	nop
 80024b4:	40021000 	.word	0x40021000
 80024b8:	42420000 	.word	0x42420000
 80024bc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024c0:	4b92      	ldr	r3, [pc, #584]	; (800270c <HAL_RCC_OscConfig+0x4c4>)
 80024c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c4:	f003 0302 	and.w	r3, r3, #2
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d1e9      	bne.n	80024a0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0304 	and.w	r3, r3, #4
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	f000 80a6 	beq.w	8002626 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024da:	2300      	movs	r3, #0
 80024dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024de:	4b8b      	ldr	r3, [pc, #556]	; (800270c <HAL_RCC_OscConfig+0x4c4>)
 80024e0:	69db      	ldr	r3, [r3, #28]
 80024e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d10d      	bne.n	8002506 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024ea:	4b88      	ldr	r3, [pc, #544]	; (800270c <HAL_RCC_OscConfig+0x4c4>)
 80024ec:	69db      	ldr	r3, [r3, #28]
 80024ee:	4a87      	ldr	r2, [pc, #540]	; (800270c <HAL_RCC_OscConfig+0x4c4>)
 80024f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024f4:	61d3      	str	r3, [r2, #28]
 80024f6:	4b85      	ldr	r3, [pc, #532]	; (800270c <HAL_RCC_OscConfig+0x4c4>)
 80024f8:	69db      	ldr	r3, [r3, #28]
 80024fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024fe:	60bb      	str	r3, [r7, #8]
 8002500:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002502:	2301      	movs	r3, #1
 8002504:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002506:	4b82      	ldr	r3, [pc, #520]	; (8002710 <HAL_RCC_OscConfig+0x4c8>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800250e:	2b00      	cmp	r3, #0
 8002510:	d118      	bne.n	8002544 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002512:	4b7f      	ldr	r3, [pc, #508]	; (8002710 <HAL_RCC_OscConfig+0x4c8>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a7e      	ldr	r2, [pc, #504]	; (8002710 <HAL_RCC_OscConfig+0x4c8>)
 8002518:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800251c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800251e:	f7ff fbe7 	bl	8001cf0 <HAL_GetTick>
 8002522:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002524:	e008      	b.n	8002538 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002526:	f7ff fbe3 	bl	8001cf0 <HAL_GetTick>
 800252a:	4602      	mov	r2, r0
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	2b64      	cmp	r3, #100	; 0x64
 8002532:	d901      	bls.n	8002538 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002534:	2303      	movs	r3, #3
 8002536:	e103      	b.n	8002740 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002538:	4b75      	ldr	r3, [pc, #468]	; (8002710 <HAL_RCC_OscConfig+0x4c8>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002540:	2b00      	cmp	r3, #0
 8002542:	d0f0      	beq.n	8002526 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	2b01      	cmp	r3, #1
 800254a:	d106      	bne.n	800255a <HAL_RCC_OscConfig+0x312>
 800254c:	4b6f      	ldr	r3, [pc, #444]	; (800270c <HAL_RCC_OscConfig+0x4c4>)
 800254e:	6a1b      	ldr	r3, [r3, #32]
 8002550:	4a6e      	ldr	r2, [pc, #440]	; (800270c <HAL_RCC_OscConfig+0x4c4>)
 8002552:	f043 0301 	orr.w	r3, r3, #1
 8002556:	6213      	str	r3, [r2, #32]
 8002558:	e02d      	b.n	80025b6 <HAL_RCC_OscConfig+0x36e>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d10c      	bne.n	800257c <HAL_RCC_OscConfig+0x334>
 8002562:	4b6a      	ldr	r3, [pc, #424]	; (800270c <HAL_RCC_OscConfig+0x4c4>)
 8002564:	6a1b      	ldr	r3, [r3, #32]
 8002566:	4a69      	ldr	r2, [pc, #420]	; (800270c <HAL_RCC_OscConfig+0x4c4>)
 8002568:	f023 0301 	bic.w	r3, r3, #1
 800256c:	6213      	str	r3, [r2, #32]
 800256e:	4b67      	ldr	r3, [pc, #412]	; (800270c <HAL_RCC_OscConfig+0x4c4>)
 8002570:	6a1b      	ldr	r3, [r3, #32]
 8002572:	4a66      	ldr	r2, [pc, #408]	; (800270c <HAL_RCC_OscConfig+0x4c4>)
 8002574:	f023 0304 	bic.w	r3, r3, #4
 8002578:	6213      	str	r3, [r2, #32]
 800257a:	e01c      	b.n	80025b6 <HAL_RCC_OscConfig+0x36e>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	2b05      	cmp	r3, #5
 8002582:	d10c      	bne.n	800259e <HAL_RCC_OscConfig+0x356>
 8002584:	4b61      	ldr	r3, [pc, #388]	; (800270c <HAL_RCC_OscConfig+0x4c4>)
 8002586:	6a1b      	ldr	r3, [r3, #32]
 8002588:	4a60      	ldr	r2, [pc, #384]	; (800270c <HAL_RCC_OscConfig+0x4c4>)
 800258a:	f043 0304 	orr.w	r3, r3, #4
 800258e:	6213      	str	r3, [r2, #32]
 8002590:	4b5e      	ldr	r3, [pc, #376]	; (800270c <HAL_RCC_OscConfig+0x4c4>)
 8002592:	6a1b      	ldr	r3, [r3, #32]
 8002594:	4a5d      	ldr	r2, [pc, #372]	; (800270c <HAL_RCC_OscConfig+0x4c4>)
 8002596:	f043 0301 	orr.w	r3, r3, #1
 800259a:	6213      	str	r3, [r2, #32]
 800259c:	e00b      	b.n	80025b6 <HAL_RCC_OscConfig+0x36e>
 800259e:	4b5b      	ldr	r3, [pc, #364]	; (800270c <HAL_RCC_OscConfig+0x4c4>)
 80025a0:	6a1b      	ldr	r3, [r3, #32]
 80025a2:	4a5a      	ldr	r2, [pc, #360]	; (800270c <HAL_RCC_OscConfig+0x4c4>)
 80025a4:	f023 0301 	bic.w	r3, r3, #1
 80025a8:	6213      	str	r3, [r2, #32]
 80025aa:	4b58      	ldr	r3, [pc, #352]	; (800270c <HAL_RCC_OscConfig+0x4c4>)
 80025ac:	6a1b      	ldr	r3, [r3, #32]
 80025ae:	4a57      	ldr	r2, [pc, #348]	; (800270c <HAL_RCC_OscConfig+0x4c4>)
 80025b0:	f023 0304 	bic.w	r3, r3, #4
 80025b4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d015      	beq.n	80025ea <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025be:	f7ff fb97 	bl	8001cf0 <HAL_GetTick>
 80025c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025c4:	e00a      	b.n	80025dc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025c6:	f7ff fb93 	bl	8001cf0 <HAL_GetTick>
 80025ca:	4602      	mov	r2, r0
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d901      	bls.n	80025dc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80025d8:	2303      	movs	r3, #3
 80025da:	e0b1      	b.n	8002740 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025dc:	4b4b      	ldr	r3, [pc, #300]	; (800270c <HAL_RCC_OscConfig+0x4c4>)
 80025de:	6a1b      	ldr	r3, [r3, #32]
 80025e0:	f003 0302 	and.w	r3, r3, #2
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d0ee      	beq.n	80025c6 <HAL_RCC_OscConfig+0x37e>
 80025e8:	e014      	b.n	8002614 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025ea:	f7ff fb81 	bl	8001cf0 <HAL_GetTick>
 80025ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025f0:	e00a      	b.n	8002608 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025f2:	f7ff fb7d 	bl	8001cf0 <HAL_GetTick>
 80025f6:	4602      	mov	r2, r0
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	1ad3      	subs	r3, r2, r3
 80025fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002600:	4293      	cmp	r3, r2
 8002602:	d901      	bls.n	8002608 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002604:	2303      	movs	r3, #3
 8002606:	e09b      	b.n	8002740 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002608:	4b40      	ldr	r3, [pc, #256]	; (800270c <HAL_RCC_OscConfig+0x4c4>)
 800260a:	6a1b      	ldr	r3, [r3, #32]
 800260c:	f003 0302 	and.w	r3, r3, #2
 8002610:	2b00      	cmp	r3, #0
 8002612:	d1ee      	bne.n	80025f2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002614:	7dfb      	ldrb	r3, [r7, #23]
 8002616:	2b01      	cmp	r3, #1
 8002618:	d105      	bne.n	8002626 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800261a:	4b3c      	ldr	r3, [pc, #240]	; (800270c <HAL_RCC_OscConfig+0x4c4>)
 800261c:	69db      	ldr	r3, [r3, #28]
 800261e:	4a3b      	ldr	r2, [pc, #236]	; (800270c <HAL_RCC_OscConfig+0x4c4>)
 8002620:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002624:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	69db      	ldr	r3, [r3, #28]
 800262a:	2b00      	cmp	r3, #0
 800262c:	f000 8087 	beq.w	800273e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002630:	4b36      	ldr	r3, [pc, #216]	; (800270c <HAL_RCC_OscConfig+0x4c4>)
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f003 030c 	and.w	r3, r3, #12
 8002638:	2b08      	cmp	r3, #8
 800263a:	d061      	beq.n	8002700 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	69db      	ldr	r3, [r3, #28]
 8002640:	2b02      	cmp	r3, #2
 8002642:	d146      	bne.n	80026d2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002644:	4b33      	ldr	r3, [pc, #204]	; (8002714 <HAL_RCC_OscConfig+0x4cc>)
 8002646:	2200      	movs	r2, #0
 8002648:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800264a:	f7ff fb51 	bl	8001cf0 <HAL_GetTick>
 800264e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002650:	e008      	b.n	8002664 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002652:	f7ff fb4d 	bl	8001cf0 <HAL_GetTick>
 8002656:	4602      	mov	r2, r0
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	2b02      	cmp	r3, #2
 800265e:	d901      	bls.n	8002664 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002660:	2303      	movs	r3, #3
 8002662:	e06d      	b.n	8002740 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002664:	4b29      	ldr	r3, [pc, #164]	; (800270c <HAL_RCC_OscConfig+0x4c4>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800266c:	2b00      	cmp	r3, #0
 800266e:	d1f0      	bne.n	8002652 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6a1b      	ldr	r3, [r3, #32]
 8002674:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002678:	d108      	bne.n	800268c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800267a:	4b24      	ldr	r3, [pc, #144]	; (800270c <HAL_RCC_OscConfig+0x4c4>)
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	4921      	ldr	r1, [pc, #132]	; (800270c <HAL_RCC_OscConfig+0x4c4>)
 8002688:	4313      	orrs	r3, r2
 800268a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800268c:	4b1f      	ldr	r3, [pc, #124]	; (800270c <HAL_RCC_OscConfig+0x4c4>)
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6a19      	ldr	r1, [r3, #32]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800269c:	430b      	orrs	r3, r1
 800269e:	491b      	ldr	r1, [pc, #108]	; (800270c <HAL_RCC_OscConfig+0x4c4>)
 80026a0:	4313      	orrs	r3, r2
 80026a2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026a4:	4b1b      	ldr	r3, [pc, #108]	; (8002714 <HAL_RCC_OscConfig+0x4cc>)
 80026a6:	2201      	movs	r2, #1
 80026a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026aa:	f7ff fb21 	bl	8001cf0 <HAL_GetTick>
 80026ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026b0:	e008      	b.n	80026c4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026b2:	f7ff fb1d 	bl	8001cf0 <HAL_GetTick>
 80026b6:	4602      	mov	r2, r0
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	2b02      	cmp	r3, #2
 80026be:	d901      	bls.n	80026c4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80026c0:	2303      	movs	r3, #3
 80026c2:	e03d      	b.n	8002740 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026c4:	4b11      	ldr	r3, [pc, #68]	; (800270c <HAL_RCC_OscConfig+0x4c4>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d0f0      	beq.n	80026b2 <HAL_RCC_OscConfig+0x46a>
 80026d0:	e035      	b.n	800273e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026d2:	4b10      	ldr	r3, [pc, #64]	; (8002714 <HAL_RCC_OscConfig+0x4cc>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026d8:	f7ff fb0a 	bl	8001cf0 <HAL_GetTick>
 80026dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026de:	e008      	b.n	80026f2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026e0:	f7ff fb06 	bl	8001cf0 <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d901      	bls.n	80026f2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	e026      	b.n	8002740 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026f2:	4b06      	ldr	r3, [pc, #24]	; (800270c <HAL_RCC_OscConfig+0x4c4>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d1f0      	bne.n	80026e0 <HAL_RCC_OscConfig+0x498>
 80026fe:	e01e      	b.n	800273e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	69db      	ldr	r3, [r3, #28]
 8002704:	2b01      	cmp	r3, #1
 8002706:	d107      	bne.n	8002718 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e019      	b.n	8002740 <HAL_RCC_OscConfig+0x4f8>
 800270c:	40021000 	.word	0x40021000
 8002710:	40007000 	.word	0x40007000
 8002714:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002718:	4b0b      	ldr	r3, [pc, #44]	; (8002748 <HAL_RCC_OscConfig+0x500>)
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6a1b      	ldr	r3, [r3, #32]
 8002728:	429a      	cmp	r2, r3
 800272a:	d106      	bne.n	800273a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002736:	429a      	cmp	r2, r3
 8002738:	d001      	beq.n	800273e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e000      	b.n	8002740 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800273e:	2300      	movs	r3, #0
}
 8002740:	4618      	mov	r0, r3
 8002742:	3718      	adds	r7, #24
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	40021000 	.word	0x40021000

0800274c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b084      	sub	sp, #16
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d101      	bne.n	8002760 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e0d0      	b.n	8002902 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002760:	4b6a      	ldr	r3, [pc, #424]	; (800290c <HAL_RCC_ClockConfig+0x1c0>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 0307 	and.w	r3, r3, #7
 8002768:	683a      	ldr	r2, [r7, #0]
 800276a:	429a      	cmp	r2, r3
 800276c:	d910      	bls.n	8002790 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800276e:	4b67      	ldr	r3, [pc, #412]	; (800290c <HAL_RCC_ClockConfig+0x1c0>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f023 0207 	bic.w	r2, r3, #7
 8002776:	4965      	ldr	r1, [pc, #404]	; (800290c <HAL_RCC_ClockConfig+0x1c0>)
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	4313      	orrs	r3, r2
 800277c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800277e:	4b63      	ldr	r3, [pc, #396]	; (800290c <HAL_RCC_ClockConfig+0x1c0>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 0307 	and.w	r3, r3, #7
 8002786:	683a      	ldr	r2, [r7, #0]
 8002788:	429a      	cmp	r2, r3
 800278a:	d001      	beq.n	8002790 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	e0b8      	b.n	8002902 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0302 	and.w	r3, r3, #2
 8002798:	2b00      	cmp	r3, #0
 800279a:	d020      	beq.n	80027de <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 0304 	and.w	r3, r3, #4
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d005      	beq.n	80027b4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027a8:	4b59      	ldr	r3, [pc, #356]	; (8002910 <HAL_RCC_ClockConfig+0x1c4>)
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	4a58      	ldr	r2, [pc, #352]	; (8002910 <HAL_RCC_ClockConfig+0x1c4>)
 80027ae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80027b2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0308 	and.w	r3, r3, #8
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d005      	beq.n	80027cc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027c0:	4b53      	ldr	r3, [pc, #332]	; (8002910 <HAL_RCC_ClockConfig+0x1c4>)
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	4a52      	ldr	r2, [pc, #328]	; (8002910 <HAL_RCC_ClockConfig+0x1c4>)
 80027c6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80027ca:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027cc:	4b50      	ldr	r3, [pc, #320]	; (8002910 <HAL_RCC_ClockConfig+0x1c4>)
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	494d      	ldr	r1, [pc, #308]	; (8002910 <HAL_RCC_ClockConfig+0x1c4>)
 80027da:	4313      	orrs	r3, r2
 80027dc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0301 	and.w	r3, r3, #1
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d040      	beq.n	800286c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d107      	bne.n	8002802 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027f2:	4b47      	ldr	r3, [pc, #284]	; (8002910 <HAL_RCC_ClockConfig+0x1c4>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d115      	bne.n	800282a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e07f      	b.n	8002902 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	2b02      	cmp	r3, #2
 8002808:	d107      	bne.n	800281a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800280a:	4b41      	ldr	r3, [pc, #260]	; (8002910 <HAL_RCC_ClockConfig+0x1c4>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d109      	bne.n	800282a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e073      	b.n	8002902 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800281a:	4b3d      	ldr	r3, [pc, #244]	; (8002910 <HAL_RCC_ClockConfig+0x1c4>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0302 	and.w	r3, r3, #2
 8002822:	2b00      	cmp	r3, #0
 8002824:	d101      	bne.n	800282a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e06b      	b.n	8002902 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800282a:	4b39      	ldr	r3, [pc, #228]	; (8002910 <HAL_RCC_ClockConfig+0x1c4>)
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	f023 0203 	bic.w	r2, r3, #3
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	4936      	ldr	r1, [pc, #216]	; (8002910 <HAL_RCC_ClockConfig+0x1c4>)
 8002838:	4313      	orrs	r3, r2
 800283a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800283c:	f7ff fa58 	bl	8001cf0 <HAL_GetTick>
 8002840:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002842:	e00a      	b.n	800285a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002844:	f7ff fa54 	bl	8001cf0 <HAL_GetTick>
 8002848:	4602      	mov	r2, r0
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002852:	4293      	cmp	r3, r2
 8002854:	d901      	bls.n	800285a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002856:	2303      	movs	r3, #3
 8002858:	e053      	b.n	8002902 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800285a:	4b2d      	ldr	r3, [pc, #180]	; (8002910 <HAL_RCC_ClockConfig+0x1c4>)
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	f003 020c 	and.w	r2, r3, #12
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	429a      	cmp	r2, r3
 800286a:	d1eb      	bne.n	8002844 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800286c:	4b27      	ldr	r3, [pc, #156]	; (800290c <HAL_RCC_ClockConfig+0x1c0>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 0307 	and.w	r3, r3, #7
 8002874:	683a      	ldr	r2, [r7, #0]
 8002876:	429a      	cmp	r2, r3
 8002878:	d210      	bcs.n	800289c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800287a:	4b24      	ldr	r3, [pc, #144]	; (800290c <HAL_RCC_ClockConfig+0x1c0>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f023 0207 	bic.w	r2, r3, #7
 8002882:	4922      	ldr	r1, [pc, #136]	; (800290c <HAL_RCC_ClockConfig+0x1c0>)
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	4313      	orrs	r3, r2
 8002888:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800288a:	4b20      	ldr	r3, [pc, #128]	; (800290c <HAL_RCC_ClockConfig+0x1c0>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0307 	and.w	r3, r3, #7
 8002892:	683a      	ldr	r2, [r7, #0]
 8002894:	429a      	cmp	r2, r3
 8002896:	d001      	beq.n	800289c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e032      	b.n	8002902 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0304 	and.w	r3, r3, #4
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d008      	beq.n	80028ba <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028a8:	4b19      	ldr	r3, [pc, #100]	; (8002910 <HAL_RCC_ClockConfig+0x1c4>)
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	4916      	ldr	r1, [pc, #88]	; (8002910 <HAL_RCC_ClockConfig+0x1c4>)
 80028b6:	4313      	orrs	r3, r2
 80028b8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 0308 	and.w	r3, r3, #8
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d009      	beq.n	80028da <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80028c6:	4b12      	ldr	r3, [pc, #72]	; (8002910 <HAL_RCC_ClockConfig+0x1c4>)
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	691b      	ldr	r3, [r3, #16]
 80028d2:	00db      	lsls	r3, r3, #3
 80028d4:	490e      	ldr	r1, [pc, #56]	; (8002910 <HAL_RCC_ClockConfig+0x1c4>)
 80028d6:	4313      	orrs	r3, r2
 80028d8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80028da:	f000 f821 	bl	8002920 <HAL_RCC_GetSysClockFreq>
 80028de:	4602      	mov	r2, r0
 80028e0:	4b0b      	ldr	r3, [pc, #44]	; (8002910 <HAL_RCC_ClockConfig+0x1c4>)
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	091b      	lsrs	r3, r3, #4
 80028e6:	f003 030f 	and.w	r3, r3, #15
 80028ea:	490a      	ldr	r1, [pc, #40]	; (8002914 <HAL_RCC_ClockConfig+0x1c8>)
 80028ec:	5ccb      	ldrb	r3, [r1, r3]
 80028ee:	fa22 f303 	lsr.w	r3, r2, r3
 80028f2:	4a09      	ldr	r2, [pc, #36]	; (8002918 <HAL_RCC_ClockConfig+0x1cc>)
 80028f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80028f6:	4b09      	ldr	r3, [pc, #36]	; (800291c <HAL_RCC_ClockConfig+0x1d0>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4618      	mov	r0, r3
 80028fc:	f7ff f9b6 	bl	8001c6c <HAL_InitTick>

  return HAL_OK;
 8002900:	2300      	movs	r3, #0
}
 8002902:	4618      	mov	r0, r3
 8002904:	3710      	adds	r7, #16
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	40022000 	.word	0x40022000
 8002910:	40021000 	.word	0x40021000
 8002914:	080089d8 	.word	0x080089d8
 8002918:	20000004 	.word	0x20000004
 800291c:	20000008 	.word	0x20000008

08002920 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002920:	b480      	push	{r7}
 8002922:	b087      	sub	sp, #28
 8002924:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002926:	2300      	movs	r3, #0
 8002928:	60fb      	str	r3, [r7, #12]
 800292a:	2300      	movs	r3, #0
 800292c:	60bb      	str	r3, [r7, #8]
 800292e:	2300      	movs	r3, #0
 8002930:	617b      	str	r3, [r7, #20]
 8002932:	2300      	movs	r3, #0
 8002934:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002936:	2300      	movs	r3, #0
 8002938:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800293a:	4b1e      	ldr	r3, [pc, #120]	; (80029b4 <HAL_RCC_GetSysClockFreq+0x94>)
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	f003 030c 	and.w	r3, r3, #12
 8002946:	2b04      	cmp	r3, #4
 8002948:	d002      	beq.n	8002950 <HAL_RCC_GetSysClockFreq+0x30>
 800294a:	2b08      	cmp	r3, #8
 800294c:	d003      	beq.n	8002956 <HAL_RCC_GetSysClockFreq+0x36>
 800294e:	e027      	b.n	80029a0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002950:	4b19      	ldr	r3, [pc, #100]	; (80029b8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002952:	613b      	str	r3, [r7, #16]
      break;
 8002954:	e027      	b.n	80029a6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	0c9b      	lsrs	r3, r3, #18
 800295a:	f003 030f 	and.w	r3, r3, #15
 800295e:	4a17      	ldr	r2, [pc, #92]	; (80029bc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002960:	5cd3      	ldrb	r3, [r2, r3]
 8002962:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d010      	beq.n	8002990 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800296e:	4b11      	ldr	r3, [pc, #68]	; (80029b4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	0c5b      	lsrs	r3, r3, #17
 8002974:	f003 0301 	and.w	r3, r3, #1
 8002978:	4a11      	ldr	r2, [pc, #68]	; (80029c0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800297a:	5cd3      	ldrb	r3, [r2, r3]
 800297c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4a0d      	ldr	r2, [pc, #52]	; (80029b8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002982:	fb03 f202 	mul.w	r2, r3, r2
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	fbb2 f3f3 	udiv	r3, r2, r3
 800298c:	617b      	str	r3, [r7, #20]
 800298e:	e004      	b.n	800299a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	4a0c      	ldr	r2, [pc, #48]	; (80029c4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002994:	fb02 f303 	mul.w	r3, r2, r3
 8002998:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	613b      	str	r3, [r7, #16]
      break;
 800299e:	e002      	b.n	80029a6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80029a0:	4b05      	ldr	r3, [pc, #20]	; (80029b8 <HAL_RCC_GetSysClockFreq+0x98>)
 80029a2:	613b      	str	r3, [r7, #16]
      break;
 80029a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029a6:	693b      	ldr	r3, [r7, #16]
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	371c      	adds	r7, #28
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bc80      	pop	{r7}
 80029b0:	4770      	bx	lr
 80029b2:	bf00      	nop
 80029b4:	40021000 	.word	0x40021000
 80029b8:	007a1200 	.word	0x007a1200
 80029bc:	080089f0 	.word	0x080089f0
 80029c0:	08008a00 	.word	0x08008a00
 80029c4:	003d0900 	.word	0x003d0900

080029c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029cc:	4b02      	ldr	r3, [pc, #8]	; (80029d8 <HAL_RCC_GetHCLKFreq+0x10>)
 80029ce:	681b      	ldr	r3, [r3, #0]
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bc80      	pop	{r7}
 80029d6:	4770      	bx	lr
 80029d8:	20000004 	.word	0x20000004

080029dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80029e0:	f7ff fff2 	bl	80029c8 <HAL_RCC_GetHCLKFreq>
 80029e4:	4602      	mov	r2, r0
 80029e6:	4b05      	ldr	r3, [pc, #20]	; (80029fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	0a1b      	lsrs	r3, r3, #8
 80029ec:	f003 0307 	and.w	r3, r3, #7
 80029f0:	4903      	ldr	r1, [pc, #12]	; (8002a00 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029f2:	5ccb      	ldrb	r3, [r1, r3]
 80029f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	40021000 	.word	0x40021000
 8002a00:	080089e8 	.word	0x080089e8

08002a04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a08:	f7ff ffde 	bl	80029c8 <HAL_RCC_GetHCLKFreq>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	4b05      	ldr	r3, [pc, #20]	; (8002a24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	0adb      	lsrs	r3, r3, #11
 8002a14:	f003 0307 	and.w	r3, r3, #7
 8002a18:	4903      	ldr	r1, [pc, #12]	; (8002a28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a1a:	5ccb      	ldrb	r3, [r1, r3]
 8002a1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	40021000 	.word	0x40021000
 8002a28:	080089e8 	.word	0x080089e8

08002a2c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b085      	sub	sp, #20
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002a34:	4b0a      	ldr	r3, [pc, #40]	; (8002a60 <RCC_Delay+0x34>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a0a      	ldr	r2, [pc, #40]	; (8002a64 <RCC_Delay+0x38>)
 8002a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a3e:	0a5b      	lsrs	r3, r3, #9
 8002a40:	687a      	ldr	r2, [r7, #4]
 8002a42:	fb02 f303 	mul.w	r3, r2, r3
 8002a46:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002a48:	bf00      	nop
  }
  while (Delay --);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	1e5a      	subs	r2, r3, #1
 8002a4e:	60fa      	str	r2, [r7, #12]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d1f9      	bne.n	8002a48 <RCC_Delay+0x1c>
}
 8002a54:	bf00      	nop
 8002a56:	bf00      	nop
 8002a58:	3714      	adds	r7, #20
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bc80      	pop	{r7}
 8002a5e:	4770      	bx	lr
 8002a60:	20000004 	.word	0x20000004
 8002a64:	10624dd3 	.word	0x10624dd3

08002a68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d101      	bne.n	8002a7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e041      	b.n	8002afe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d106      	bne.n	8002a94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f7fe ff5a 	bl	8001948 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2202      	movs	r2, #2
 8002a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	3304      	adds	r3, #4
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	4610      	mov	r0, r2
 8002aa8:	f000 fd86 	bl	80035b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2201      	movs	r2, #1
 8002ab0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2201      	movs	r2, #1
 8002af0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2201      	movs	r2, #1
 8002af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002afc:	2300      	movs	r3, #0
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3708      	adds	r7, #8
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
	...

08002b08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b085      	sub	sp, #20
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d001      	beq.n	8002b20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e044      	b.n	8002baa <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2202      	movs	r2, #2
 8002b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	68da      	ldr	r2, [r3, #12]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f042 0201 	orr.w	r2, r2, #1
 8002b36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a1d      	ldr	r2, [pc, #116]	; (8002bb4 <HAL_TIM_Base_Start_IT+0xac>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d018      	beq.n	8002b74 <HAL_TIM_Base_Start_IT+0x6c>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a1c      	ldr	r2, [pc, #112]	; (8002bb8 <HAL_TIM_Base_Start_IT+0xb0>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d013      	beq.n	8002b74 <HAL_TIM_Base_Start_IT+0x6c>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b54:	d00e      	beq.n	8002b74 <HAL_TIM_Base_Start_IT+0x6c>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a18      	ldr	r2, [pc, #96]	; (8002bbc <HAL_TIM_Base_Start_IT+0xb4>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d009      	beq.n	8002b74 <HAL_TIM_Base_Start_IT+0x6c>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a16      	ldr	r2, [pc, #88]	; (8002bc0 <HAL_TIM_Base_Start_IT+0xb8>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d004      	beq.n	8002b74 <HAL_TIM_Base_Start_IT+0x6c>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a15      	ldr	r2, [pc, #84]	; (8002bc4 <HAL_TIM_Base_Start_IT+0xbc>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d111      	bne.n	8002b98 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	f003 0307 	and.w	r3, r3, #7
 8002b7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2b06      	cmp	r3, #6
 8002b84:	d010      	beq.n	8002ba8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f042 0201 	orr.w	r2, r2, #1
 8002b94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b96:	e007      	b.n	8002ba8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f042 0201 	orr.w	r2, r2, #1
 8002ba6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ba8:	2300      	movs	r3, #0
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3714      	adds	r7, #20
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bc80      	pop	{r7}
 8002bb2:	4770      	bx	lr
 8002bb4:	40012c00 	.word	0x40012c00
 8002bb8:	40013400 	.word	0x40013400
 8002bbc:	40000400 	.word	0x40000400
 8002bc0:	40000800 	.word	0x40000800
 8002bc4:	40000c00 	.word	0x40000c00

08002bc8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b082      	sub	sp, #8
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d101      	bne.n	8002bda <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e041      	b.n	8002c5e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d106      	bne.n	8002bf4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f000 f839 	bl	8002c66 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2202      	movs	r2, #2
 8002bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	3304      	adds	r3, #4
 8002c04:	4619      	mov	r1, r3
 8002c06:	4610      	mov	r0, r2
 8002c08:	f000 fcd6 	bl	80035b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2201      	movs	r2, #1
 8002c18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2201      	movs	r2, #1
 8002c28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2201      	movs	r2, #1
 8002c38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2201      	movs	r2, #1
 8002c48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2201      	movs	r2, #1
 8002c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c5c:	2300      	movs	r3, #0
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3708      	adds	r7, #8
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}

08002c66 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002c66:	b480      	push	{r7}
 8002c68:	b083      	sub	sp, #12
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002c6e:	bf00      	nop
 8002c70:	370c      	adds	r7, #12
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bc80      	pop	{r7}
 8002c76:	4770      	bx	lr

08002c78 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b084      	sub	sp, #16
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d109      	bne.n	8002c9c <HAL_TIM_PWM_Start+0x24>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	bf14      	ite	ne
 8002c94:	2301      	movne	r3, #1
 8002c96:	2300      	moveq	r3, #0
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	e022      	b.n	8002ce2 <HAL_TIM_PWM_Start+0x6a>
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	2b04      	cmp	r3, #4
 8002ca0:	d109      	bne.n	8002cb6 <HAL_TIM_PWM_Start+0x3e>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	bf14      	ite	ne
 8002cae:	2301      	movne	r3, #1
 8002cb0:	2300      	moveq	r3, #0
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	e015      	b.n	8002ce2 <HAL_TIM_PWM_Start+0x6a>
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	2b08      	cmp	r3, #8
 8002cba:	d109      	bne.n	8002cd0 <HAL_TIM_PWM_Start+0x58>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	bf14      	ite	ne
 8002cc8:	2301      	movne	r3, #1
 8002cca:	2300      	moveq	r3, #0
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	e008      	b.n	8002ce2 <HAL_TIM_PWM_Start+0x6a>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	bf14      	ite	ne
 8002cdc:	2301      	movne	r3, #1
 8002cde:	2300      	moveq	r3, #0
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d001      	beq.n	8002cea <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e072      	b.n	8002dd0 <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d104      	bne.n	8002cfa <HAL_TIM_PWM_Start+0x82>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2202      	movs	r2, #2
 8002cf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002cf8:	e013      	b.n	8002d22 <HAL_TIM_PWM_Start+0xaa>
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	2b04      	cmp	r3, #4
 8002cfe:	d104      	bne.n	8002d0a <HAL_TIM_PWM_Start+0x92>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2202      	movs	r2, #2
 8002d04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d08:	e00b      	b.n	8002d22 <HAL_TIM_PWM_Start+0xaa>
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	2b08      	cmp	r3, #8
 8002d0e:	d104      	bne.n	8002d1a <HAL_TIM_PWM_Start+0xa2>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2202      	movs	r2, #2
 8002d14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d18:	e003      	b.n	8002d22 <HAL_TIM_PWM_Start+0xaa>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2202      	movs	r2, #2
 8002d1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	2201      	movs	r2, #1
 8002d28:	6839      	ldr	r1, [r7, #0]
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f000 ff00 	bl	8003b30 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a28      	ldr	r2, [pc, #160]	; (8002dd8 <HAL_TIM_PWM_Start+0x160>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d004      	beq.n	8002d44 <HAL_TIM_PWM_Start+0xcc>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a27      	ldr	r2, [pc, #156]	; (8002ddc <HAL_TIM_PWM_Start+0x164>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d101      	bne.n	8002d48 <HAL_TIM_PWM_Start+0xd0>
 8002d44:	2301      	movs	r3, #1
 8002d46:	e000      	b.n	8002d4a <HAL_TIM_PWM_Start+0xd2>
 8002d48:	2300      	movs	r3, #0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d007      	beq.n	8002d5e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d5c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a1d      	ldr	r2, [pc, #116]	; (8002dd8 <HAL_TIM_PWM_Start+0x160>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d018      	beq.n	8002d9a <HAL_TIM_PWM_Start+0x122>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a1b      	ldr	r2, [pc, #108]	; (8002ddc <HAL_TIM_PWM_Start+0x164>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d013      	beq.n	8002d9a <HAL_TIM_PWM_Start+0x122>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d7a:	d00e      	beq.n	8002d9a <HAL_TIM_PWM_Start+0x122>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a17      	ldr	r2, [pc, #92]	; (8002de0 <HAL_TIM_PWM_Start+0x168>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d009      	beq.n	8002d9a <HAL_TIM_PWM_Start+0x122>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a16      	ldr	r2, [pc, #88]	; (8002de4 <HAL_TIM_PWM_Start+0x16c>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d004      	beq.n	8002d9a <HAL_TIM_PWM_Start+0x122>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a14      	ldr	r2, [pc, #80]	; (8002de8 <HAL_TIM_PWM_Start+0x170>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d111      	bne.n	8002dbe <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	f003 0307 	and.w	r3, r3, #7
 8002da4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2b06      	cmp	r3, #6
 8002daa:	d010      	beq.n	8002dce <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f042 0201 	orr.w	r2, r2, #1
 8002dba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dbc:	e007      	b.n	8002dce <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f042 0201 	orr.w	r2, r2, #1
 8002dcc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002dce:	2300      	movs	r3, #0
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3710      	adds	r7, #16
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	40012c00 	.word	0x40012c00
 8002ddc:	40013400 	.word	0x40013400
 8002de0:	40000400 	.word	0x40000400
 8002de4:	40000800 	.word	0x40000800
 8002de8:	40000c00 	.word	0x40000c00

08002dec <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b086      	sub	sp, #24
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d101      	bne.n	8002e00 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e093      	b.n	8002f28 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d106      	bne.n	8002e1a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f7fe fdcf 	bl	80019b8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2202      	movs	r2, #2
 8002e1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	6812      	ldr	r2, [r2, #0]
 8002e2c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e30:	f023 0307 	bic.w	r3, r3, #7
 8002e34:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	3304      	adds	r3, #4
 8002e3e:	4619      	mov	r1, r3
 8002e40:	4610      	mov	r0, r2
 8002e42:	f000 fbb9 	bl	80035b8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	699b      	ldr	r3, [r3, #24]
 8002e54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	6a1b      	ldr	r3, [r3, #32]
 8002e5c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	697a      	ldr	r2, [r7, #20]
 8002e64:	4313      	orrs	r3, r2
 8002e66:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e6e:	f023 0303 	bic.w	r3, r3, #3
 8002e72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	689a      	ldr	r2, [r3, #8]
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	699b      	ldr	r3, [r3, #24]
 8002e7c:	021b      	lsls	r3, r3, #8
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	693a      	ldr	r2, [r7, #16]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002e8c:	f023 030c 	bic.w	r3, r3, #12
 8002e90:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002e98:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e9c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	68da      	ldr	r2, [r3, #12]
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	69db      	ldr	r3, [r3, #28]
 8002ea6:	021b      	lsls	r3, r3, #8
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	693a      	ldr	r2, [r7, #16]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	691b      	ldr	r3, [r3, #16]
 8002eb4:	011a      	lsls	r2, r3, #4
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	6a1b      	ldr	r3, [r3, #32]
 8002eba:	031b      	lsls	r3, r3, #12
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	693a      	ldr	r2, [r7, #16]
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002eca:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	685a      	ldr	r2, [r3, #4]
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	695b      	ldr	r3, [r3, #20]
 8002ed4:	011b      	lsls	r3, r3, #4
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	68fa      	ldr	r2, [r7, #12]
 8002eda:	4313      	orrs	r3, r2
 8002edc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	697a      	ldr	r2, [r7, #20]
 8002ee4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	693a      	ldr	r2, [r7, #16]
 8002eec:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	68fa      	ldr	r2, [r7, #12]
 8002ef4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2201      	movs	r2, #1
 8002efa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2201      	movs	r2, #1
 8002f02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2201      	movs	r2, #1
 8002f0a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2201      	movs	r2, #1
 8002f12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2201      	movs	r2, #1
 8002f1a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2201      	movs	r2, #1
 8002f22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f26:	2300      	movs	r3, #0
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3718      	adds	r7, #24
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}

08002f30 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b084      	sub	sp, #16
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
 8002f38:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f40:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002f48:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002f50:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002f58:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d110      	bne.n	8002f82 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002f60:	7bfb      	ldrb	r3, [r7, #15]
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d102      	bne.n	8002f6c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8002f66:	7b7b      	ldrb	r3, [r7, #13]
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d001      	beq.n	8002f70 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e069      	b.n	8003044 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2202      	movs	r2, #2
 8002f74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2202      	movs	r2, #2
 8002f7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f80:	e031      	b.n	8002fe6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	2b04      	cmp	r3, #4
 8002f86:	d110      	bne.n	8002faa <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002f88:	7bbb      	ldrb	r3, [r7, #14]
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d102      	bne.n	8002f94 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002f8e:	7b3b      	ldrb	r3, [r7, #12]
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d001      	beq.n	8002f98 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e055      	b.n	8003044 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2202      	movs	r2, #2
 8002f9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2202      	movs	r2, #2
 8002fa4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002fa8:	e01d      	b.n	8002fe6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002faa:	7bfb      	ldrb	r3, [r7, #15]
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d108      	bne.n	8002fc2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002fb0:	7bbb      	ldrb	r3, [r7, #14]
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d105      	bne.n	8002fc2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002fb6:	7b7b      	ldrb	r3, [r7, #13]
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d102      	bne.n	8002fc2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002fbc:	7b3b      	ldrb	r3, [r7, #12]
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d001      	beq.n	8002fc6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e03e      	b.n	8003044 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2202      	movs	r2, #2
 8002fca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2202      	movs	r2, #2
 8002fd2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2202      	movs	r2, #2
 8002fda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2202      	movs	r2, #2
 8002fe2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d003      	beq.n	8002ff4 <HAL_TIM_Encoder_Start+0xc4>
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	2b04      	cmp	r3, #4
 8002ff0:	d008      	beq.n	8003004 <HAL_TIM_Encoder_Start+0xd4>
 8002ff2:	e00f      	b.n	8003014 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	2100      	movs	r1, #0
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f000 fd97 	bl	8003b30 <TIM_CCxChannelCmd>
      break;
 8003002:	e016      	b.n	8003032 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	2201      	movs	r2, #1
 800300a:	2104      	movs	r1, #4
 800300c:	4618      	mov	r0, r3
 800300e:	f000 fd8f 	bl	8003b30 <TIM_CCxChannelCmd>
      break;
 8003012:	e00e      	b.n	8003032 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	2201      	movs	r2, #1
 800301a:	2100      	movs	r1, #0
 800301c:	4618      	mov	r0, r3
 800301e:	f000 fd87 	bl	8003b30 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	2201      	movs	r2, #1
 8003028:	2104      	movs	r1, #4
 800302a:	4618      	mov	r0, r3
 800302c:	f000 fd80 	bl	8003b30 <TIM_CCxChannelCmd>
      break;
 8003030:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f042 0201 	orr.w	r2, r2, #1
 8003040:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003042:	2300      	movs	r3, #0
}
 8003044:	4618      	mov	r0, r3
 8003046:	3710      	adds	r7, #16
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}

0800304c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b082      	sub	sp, #8
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	691b      	ldr	r3, [r3, #16]
 800305a:	f003 0302 	and.w	r3, r3, #2
 800305e:	2b02      	cmp	r3, #2
 8003060:	d122      	bne.n	80030a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	f003 0302 	and.w	r3, r3, #2
 800306c:	2b02      	cmp	r3, #2
 800306e:	d11b      	bne.n	80030a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f06f 0202 	mvn.w	r2, #2
 8003078:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2201      	movs	r2, #1
 800307e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	699b      	ldr	r3, [r3, #24]
 8003086:	f003 0303 	and.w	r3, r3, #3
 800308a:	2b00      	cmp	r3, #0
 800308c:	d003      	beq.n	8003096 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f000 fa76 	bl	8003580 <HAL_TIM_IC_CaptureCallback>
 8003094:	e005      	b.n	80030a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f000 fa69 	bl	800356e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	f000 fa78 	bl	8003592 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	691b      	ldr	r3, [r3, #16]
 80030ae:	f003 0304 	and.w	r3, r3, #4
 80030b2:	2b04      	cmp	r3, #4
 80030b4:	d122      	bne.n	80030fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	f003 0304 	and.w	r3, r3, #4
 80030c0:	2b04      	cmp	r3, #4
 80030c2:	d11b      	bne.n	80030fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f06f 0204 	mvn.w	r2, #4
 80030cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2202      	movs	r2, #2
 80030d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	699b      	ldr	r3, [r3, #24]
 80030da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d003      	beq.n	80030ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f000 fa4c 	bl	8003580 <HAL_TIM_IC_CaptureCallback>
 80030e8:	e005      	b.n	80030f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f000 fa3f 	bl	800356e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	f000 fa4e 	bl	8003592 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2200      	movs	r2, #0
 80030fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	691b      	ldr	r3, [r3, #16]
 8003102:	f003 0308 	and.w	r3, r3, #8
 8003106:	2b08      	cmp	r3, #8
 8003108:	d122      	bne.n	8003150 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	f003 0308 	and.w	r3, r3, #8
 8003114:	2b08      	cmp	r3, #8
 8003116:	d11b      	bne.n	8003150 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f06f 0208 	mvn.w	r2, #8
 8003120:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2204      	movs	r2, #4
 8003126:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	69db      	ldr	r3, [r3, #28]
 800312e:	f003 0303 	and.w	r3, r3, #3
 8003132:	2b00      	cmp	r3, #0
 8003134:	d003      	beq.n	800313e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f000 fa22 	bl	8003580 <HAL_TIM_IC_CaptureCallback>
 800313c:	e005      	b.n	800314a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f000 fa15 	bl	800356e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f000 fa24 	bl	8003592 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	691b      	ldr	r3, [r3, #16]
 8003156:	f003 0310 	and.w	r3, r3, #16
 800315a:	2b10      	cmp	r3, #16
 800315c:	d122      	bne.n	80031a4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	f003 0310 	and.w	r3, r3, #16
 8003168:	2b10      	cmp	r3, #16
 800316a:	d11b      	bne.n	80031a4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f06f 0210 	mvn.w	r2, #16
 8003174:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2208      	movs	r2, #8
 800317a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	69db      	ldr	r3, [r3, #28]
 8003182:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003186:	2b00      	cmp	r3, #0
 8003188:	d003      	beq.n	8003192 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f000 f9f8 	bl	8003580 <HAL_TIM_IC_CaptureCallback>
 8003190:	e005      	b.n	800319e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f000 f9eb 	bl	800356e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f000 f9fa 	bl	8003592 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2200      	movs	r2, #0
 80031a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	691b      	ldr	r3, [r3, #16]
 80031aa:	f003 0301 	and.w	r3, r3, #1
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d10e      	bne.n	80031d0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	f003 0301 	and.w	r3, r3, #1
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d107      	bne.n	80031d0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f06f 0201 	mvn.w	r2, #1
 80031c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f7fe f850 	bl	8001270 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	691b      	ldr	r3, [r3, #16]
 80031d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031da:	2b80      	cmp	r3, #128	; 0x80
 80031dc:	d10e      	bne.n	80031fc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031e8:	2b80      	cmp	r3, #128	; 0x80
 80031ea:	d107      	bne.n	80031fc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80031f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f000 fd84 	bl	8003d04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	691b      	ldr	r3, [r3, #16]
 8003202:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003206:	2b40      	cmp	r3, #64	; 0x40
 8003208:	d10e      	bne.n	8003228 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003214:	2b40      	cmp	r3, #64	; 0x40
 8003216:	d107      	bne.n	8003228 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003220:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f000 f9be 	bl	80035a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	691b      	ldr	r3, [r3, #16]
 800322e:	f003 0320 	and.w	r3, r3, #32
 8003232:	2b20      	cmp	r3, #32
 8003234:	d10e      	bne.n	8003254 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	f003 0320 	and.w	r3, r3, #32
 8003240:	2b20      	cmp	r3, #32
 8003242:	d107      	bne.n	8003254 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f06f 0220 	mvn.w	r2, #32
 800324c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f000 fd4f 	bl	8003cf2 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003254:	bf00      	nop
 8003256:	3708      	adds	r7, #8
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}

0800325c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b086      	sub	sp, #24
 8003260:	af00      	add	r7, sp, #0
 8003262:	60f8      	str	r0, [r7, #12]
 8003264:	60b9      	str	r1, [r7, #8]
 8003266:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003268:	2300      	movs	r3, #0
 800326a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003272:	2b01      	cmp	r3, #1
 8003274:	d101      	bne.n	800327a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003276:	2302      	movs	r3, #2
 8003278:	e0ae      	b.n	80033d8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2201      	movs	r2, #1
 800327e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2b0c      	cmp	r3, #12
 8003286:	f200 809f 	bhi.w	80033c8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800328a:	a201      	add	r2, pc, #4	; (adr r2, 8003290 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800328c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003290:	080032c5 	.word	0x080032c5
 8003294:	080033c9 	.word	0x080033c9
 8003298:	080033c9 	.word	0x080033c9
 800329c:	080033c9 	.word	0x080033c9
 80032a0:	08003305 	.word	0x08003305
 80032a4:	080033c9 	.word	0x080033c9
 80032a8:	080033c9 	.word	0x080033c9
 80032ac:	080033c9 	.word	0x080033c9
 80032b0:	08003347 	.word	0x08003347
 80032b4:	080033c9 	.word	0x080033c9
 80032b8:	080033c9 	.word	0x080033c9
 80032bc:	080033c9 	.word	0x080033c9
 80032c0:	08003387 	.word	0x08003387
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	68b9      	ldr	r1, [r7, #8]
 80032ca:	4618      	mov	r0, r3
 80032cc:	f000 f9ee 	bl	80036ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	699a      	ldr	r2, [r3, #24]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f042 0208 	orr.w	r2, r2, #8
 80032de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	699a      	ldr	r2, [r3, #24]
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f022 0204 	bic.w	r2, r2, #4
 80032ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	6999      	ldr	r1, [r3, #24]
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	691a      	ldr	r2, [r3, #16]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	430a      	orrs	r2, r1
 8003300:	619a      	str	r2, [r3, #24]
      break;
 8003302:	e064      	b.n	80033ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	68b9      	ldr	r1, [r7, #8]
 800330a:	4618      	mov	r0, r3
 800330c:	f000 fa3e 	bl	800378c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	699a      	ldr	r2, [r3, #24]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800331e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	699a      	ldr	r2, [r3, #24]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800332e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	6999      	ldr	r1, [r3, #24]
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	691b      	ldr	r3, [r3, #16]
 800333a:	021a      	lsls	r2, r3, #8
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	430a      	orrs	r2, r1
 8003342:	619a      	str	r2, [r3, #24]
      break;
 8003344:	e043      	b.n	80033ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	68b9      	ldr	r1, [r7, #8]
 800334c:	4618      	mov	r0, r3
 800334e:	f000 fa91 	bl	8003874 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	69da      	ldr	r2, [r3, #28]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f042 0208 	orr.w	r2, r2, #8
 8003360:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	69da      	ldr	r2, [r3, #28]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f022 0204 	bic.w	r2, r2, #4
 8003370:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	69d9      	ldr	r1, [r3, #28]
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	691a      	ldr	r2, [r3, #16]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	430a      	orrs	r2, r1
 8003382:	61da      	str	r2, [r3, #28]
      break;
 8003384:	e023      	b.n	80033ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	68b9      	ldr	r1, [r7, #8]
 800338c:	4618      	mov	r0, r3
 800338e:	f000 fae5 	bl	800395c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	69da      	ldr	r2, [r3, #28]
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	69da      	ldr	r2, [r3, #28]
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	69d9      	ldr	r1, [r3, #28]
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	691b      	ldr	r3, [r3, #16]
 80033bc:	021a      	lsls	r2, r3, #8
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	430a      	orrs	r2, r1
 80033c4:	61da      	str	r2, [r3, #28]
      break;
 80033c6:	e002      	b.n	80033ce <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	75fb      	strb	r3, [r7, #23]
      break;
 80033cc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2200      	movs	r2, #0
 80033d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80033d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3718      	adds	r7, #24
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}

080033e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b084      	sub	sp, #16
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
 80033e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033ea:	2300      	movs	r3, #0
 80033ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d101      	bne.n	80033fc <HAL_TIM_ConfigClockSource+0x1c>
 80033f8:	2302      	movs	r3, #2
 80033fa:	e0b4      	b.n	8003566 <HAL_TIM_ConfigClockSource+0x186>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2201      	movs	r2, #1
 8003400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2202      	movs	r2, #2
 8003408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800341a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003422:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	68ba      	ldr	r2, [r7, #8]
 800342a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003434:	d03e      	beq.n	80034b4 <HAL_TIM_ConfigClockSource+0xd4>
 8003436:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800343a:	f200 8087 	bhi.w	800354c <HAL_TIM_ConfigClockSource+0x16c>
 800343e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003442:	f000 8086 	beq.w	8003552 <HAL_TIM_ConfigClockSource+0x172>
 8003446:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800344a:	d87f      	bhi.n	800354c <HAL_TIM_ConfigClockSource+0x16c>
 800344c:	2b70      	cmp	r3, #112	; 0x70
 800344e:	d01a      	beq.n	8003486 <HAL_TIM_ConfigClockSource+0xa6>
 8003450:	2b70      	cmp	r3, #112	; 0x70
 8003452:	d87b      	bhi.n	800354c <HAL_TIM_ConfigClockSource+0x16c>
 8003454:	2b60      	cmp	r3, #96	; 0x60
 8003456:	d050      	beq.n	80034fa <HAL_TIM_ConfigClockSource+0x11a>
 8003458:	2b60      	cmp	r3, #96	; 0x60
 800345a:	d877      	bhi.n	800354c <HAL_TIM_ConfigClockSource+0x16c>
 800345c:	2b50      	cmp	r3, #80	; 0x50
 800345e:	d03c      	beq.n	80034da <HAL_TIM_ConfigClockSource+0xfa>
 8003460:	2b50      	cmp	r3, #80	; 0x50
 8003462:	d873      	bhi.n	800354c <HAL_TIM_ConfigClockSource+0x16c>
 8003464:	2b40      	cmp	r3, #64	; 0x40
 8003466:	d058      	beq.n	800351a <HAL_TIM_ConfigClockSource+0x13a>
 8003468:	2b40      	cmp	r3, #64	; 0x40
 800346a:	d86f      	bhi.n	800354c <HAL_TIM_ConfigClockSource+0x16c>
 800346c:	2b30      	cmp	r3, #48	; 0x30
 800346e:	d064      	beq.n	800353a <HAL_TIM_ConfigClockSource+0x15a>
 8003470:	2b30      	cmp	r3, #48	; 0x30
 8003472:	d86b      	bhi.n	800354c <HAL_TIM_ConfigClockSource+0x16c>
 8003474:	2b20      	cmp	r3, #32
 8003476:	d060      	beq.n	800353a <HAL_TIM_ConfigClockSource+0x15a>
 8003478:	2b20      	cmp	r3, #32
 800347a:	d867      	bhi.n	800354c <HAL_TIM_ConfigClockSource+0x16c>
 800347c:	2b00      	cmp	r3, #0
 800347e:	d05c      	beq.n	800353a <HAL_TIM_ConfigClockSource+0x15a>
 8003480:	2b10      	cmp	r3, #16
 8003482:	d05a      	beq.n	800353a <HAL_TIM_ConfigClockSource+0x15a>
 8003484:	e062      	b.n	800354c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6818      	ldr	r0, [r3, #0]
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	6899      	ldr	r1, [r3, #8]
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	685a      	ldr	r2, [r3, #4]
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	68db      	ldr	r3, [r3, #12]
 8003496:	f000 fb2c 	bl	8003af2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80034a8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	68ba      	ldr	r2, [r7, #8]
 80034b0:	609a      	str	r2, [r3, #8]
      break;
 80034b2:	e04f      	b.n	8003554 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6818      	ldr	r0, [r3, #0]
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	6899      	ldr	r1, [r3, #8]
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	685a      	ldr	r2, [r3, #4]
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	f000 fb15 	bl	8003af2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	689a      	ldr	r2, [r3, #8]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80034d6:	609a      	str	r2, [r3, #8]
      break;
 80034d8:	e03c      	b.n	8003554 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6818      	ldr	r0, [r3, #0]
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	6859      	ldr	r1, [r3, #4]
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	68db      	ldr	r3, [r3, #12]
 80034e6:	461a      	mov	r2, r3
 80034e8:	f000 fa8c 	bl	8003a04 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	2150      	movs	r1, #80	; 0x50
 80034f2:	4618      	mov	r0, r3
 80034f4:	f000 fae3 	bl	8003abe <TIM_ITRx_SetConfig>
      break;
 80034f8:	e02c      	b.n	8003554 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6818      	ldr	r0, [r3, #0]
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	6859      	ldr	r1, [r3, #4]
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	68db      	ldr	r3, [r3, #12]
 8003506:	461a      	mov	r2, r3
 8003508:	f000 faaa 	bl	8003a60 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	2160      	movs	r1, #96	; 0x60
 8003512:	4618      	mov	r0, r3
 8003514:	f000 fad3 	bl	8003abe <TIM_ITRx_SetConfig>
      break;
 8003518:	e01c      	b.n	8003554 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6818      	ldr	r0, [r3, #0]
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	6859      	ldr	r1, [r3, #4]
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	68db      	ldr	r3, [r3, #12]
 8003526:	461a      	mov	r2, r3
 8003528:	f000 fa6c 	bl	8003a04 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	2140      	movs	r1, #64	; 0x40
 8003532:	4618      	mov	r0, r3
 8003534:	f000 fac3 	bl	8003abe <TIM_ITRx_SetConfig>
      break;
 8003538:	e00c      	b.n	8003554 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4619      	mov	r1, r3
 8003544:	4610      	mov	r0, r2
 8003546:	f000 faba 	bl	8003abe <TIM_ITRx_SetConfig>
      break;
 800354a:	e003      	b.n	8003554 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	73fb      	strb	r3, [r7, #15]
      break;
 8003550:	e000      	b.n	8003554 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003552:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2201      	movs	r2, #1
 8003558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2200      	movs	r2, #0
 8003560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003564:	7bfb      	ldrb	r3, [r7, #15]
}
 8003566:	4618      	mov	r0, r3
 8003568:	3710      	adds	r7, #16
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}

0800356e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800356e:	b480      	push	{r7}
 8003570:	b083      	sub	sp, #12
 8003572:	af00      	add	r7, sp, #0
 8003574:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003576:	bf00      	nop
 8003578:	370c      	adds	r7, #12
 800357a:	46bd      	mov	sp, r7
 800357c:	bc80      	pop	{r7}
 800357e:	4770      	bx	lr

08003580 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003580:	b480      	push	{r7}
 8003582:	b083      	sub	sp, #12
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003588:	bf00      	nop
 800358a:	370c      	adds	r7, #12
 800358c:	46bd      	mov	sp, r7
 800358e:	bc80      	pop	{r7}
 8003590:	4770      	bx	lr

08003592 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003592:	b480      	push	{r7}
 8003594:	b083      	sub	sp, #12
 8003596:	af00      	add	r7, sp, #0
 8003598:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800359a:	bf00      	nop
 800359c:	370c      	adds	r7, #12
 800359e:	46bd      	mov	sp, r7
 80035a0:	bc80      	pop	{r7}
 80035a2:	4770      	bx	lr

080035a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b083      	sub	sp, #12
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80035ac:	bf00      	nop
 80035ae:	370c      	adds	r7, #12
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bc80      	pop	{r7}
 80035b4:	4770      	bx	lr
	...

080035b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b085      	sub	sp, #20
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	4a33      	ldr	r2, [pc, #204]	; (8003698 <TIM_Base_SetConfig+0xe0>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d013      	beq.n	80035f8 <TIM_Base_SetConfig+0x40>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	4a32      	ldr	r2, [pc, #200]	; (800369c <TIM_Base_SetConfig+0xe4>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d00f      	beq.n	80035f8 <TIM_Base_SetConfig+0x40>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035de:	d00b      	beq.n	80035f8 <TIM_Base_SetConfig+0x40>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	4a2f      	ldr	r2, [pc, #188]	; (80036a0 <TIM_Base_SetConfig+0xe8>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d007      	beq.n	80035f8 <TIM_Base_SetConfig+0x40>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	4a2e      	ldr	r2, [pc, #184]	; (80036a4 <TIM_Base_SetConfig+0xec>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d003      	beq.n	80035f8 <TIM_Base_SetConfig+0x40>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	4a2d      	ldr	r2, [pc, #180]	; (80036a8 <TIM_Base_SetConfig+0xf0>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d108      	bne.n	800360a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	68fa      	ldr	r2, [r7, #12]
 8003606:	4313      	orrs	r3, r2
 8003608:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4a22      	ldr	r2, [pc, #136]	; (8003698 <TIM_Base_SetConfig+0xe0>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d013      	beq.n	800363a <TIM_Base_SetConfig+0x82>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4a21      	ldr	r2, [pc, #132]	; (800369c <TIM_Base_SetConfig+0xe4>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d00f      	beq.n	800363a <TIM_Base_SetConfig+0x82>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003620:	d00b      	beq.n	800363a <TIM_Base_SetConfig+0x82>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	4a1e      	ldr	r2, [pc, #120]	; (80036a0 <TIM_Base_SetConfig+0xe8>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d007      	beq.n	800363a <TIM_Base_SetConfig+0x82>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	4a1d      	ldr	r2, [pc, #116]	; (80036a4 <TIM_Base_SetConfig+0xec>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d003      	beq.n	800363a <TIM_Base_SetConfig+0x82>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	4a1c      	ldr	r2, [pc, #112]	; (80036a8 <TIM_Base_SetConfig+0xf0>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d108      	bne.n	800364c <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003640:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	68fa      	ldr	r2, [r7, #12]
 8003648:	4313      	orrs	r3, r2
 800364a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	695b      	ldr	r3, [r3, #20]
 8003656:	4313      	orrs	r3, r2
 8003658:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	68fa      	ldr	r2, [r7, #12]
 800365e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	689a      	ldr	r2, [r3, #8]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	4a09      	ldr	r2, [pc, #36]	; (8003698 <TIM_Base_SetConfig+0xe0>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d003      	beq.n	8003680 <TIM_Base_SetConfig+0xc8>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	4a08      	ldr	r2, [pc, #32]	; (800369c <TIM_Base_SetConfig+0xe4>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d103      	bne.n	8003688 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	691a      	ldr	r2, [r3, #16]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2201      	movs	r2, #1
 800368c:	615a      	str	r2, [r3, #20]
}
 800368e:	bf00      	nop
 8003690:	3714      	adds	r7, #20
 8003692:	46bd      	mov	sp, r7
 8003694:	bc80      	pop	{r7}
 8003696:	4770      	bx	lr
 8003698:	40012c00 	.word	0x40012c00
 800369c:	40013400 	.word	0x40013400
 80036a0:	40000400 	.word	0x40000400
 80036a4:	40000800 	.word	0x40000800
 80036a8:	40000c00 	.word	0x40000c00

080036ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b087      	sub	sp, #28
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
 80036b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6a1b      	ldr	r3, [r3, #32]
 80036ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6a1b      	ldr	r3, [r3, #32]
 80036c0:	f023 0201 	bic.w	r2, r3, #1
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	699b      	ldr	r3, [r3, #24]
 80036d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f023 0303 	bic.w	r3, r3, #3
 80036e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	68fa      	ldr	r2, [r7, #12]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	f023 0302 	bic.w	r3, r3, #2
 80036f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	697a      	ldr	r2, [r7, #20]
 80036fc:	4313      	orrs	r3, r2
 80036fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	4a20      	ldr	r2, [pc, #128]	; (8003784 <TIM_OC1_SetConfig+0xd8>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d003      	beq.n	8003710 <TIM_OC1_SetConfig+0x64>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	4a1f      	ldr	r2, [pc, #124]	; (8003788 <TIM_OC1_SetConfig+0xdc>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d10c      	bne.n	800372a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	f023 0308 	bic.w	r3, r3, #8
 8003716:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	697a      	ldr	r2, [r7, #20]
 800371e:	4313      	orrs	r3, r2
 8003720:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	f023 0304 	bic.w	r3, r3, #4
 8003728:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	4a15      	ldr	r2, [pc, #84]	; (8003784 <TIM_OC1_SetConfig+0xd8>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d003      	beq.n	800373a <TIM_OC1_SetConfig+0x8e>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	4a14      	ldr	r2, [pc, #80]	; (8003788 <TIM_OC1_SetConfig+0xdc>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d111      	bne.n	800375e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003740:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003748:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	695b      	ldr	r3, [r3, #20]
 800374e:	693a      	ldr	r2, [r7, #16]
 8003750:	4313      	orrs	r3, r2
 8003752:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	699b      	ldr	r3, [r3, #24]
 8003758:	693a      	ldr	r2, [r7, #16]
 800375a:	4313      	orrs	r3, r2
 800375c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	693a      	ldr	r2, [r7, #16]
 8003762:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	68fa      	ldr	r2, [r7, #12]
 8003768:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	685a      	ldr	r2, [r3, #4]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	697a      	ldr	r2, [r7, #20]
 8003776:	621a      	str	r2, [r3, #32]
}
 8003778:	bf00      	nop
 800377a:	371c      	adds	r7, #28
 800377c:	46bd      	mov	sp, r7
 800377e:	bc80      	pop	{r7}
 8003780:	4770      	bx	lr
 8003782:	bf00      	nop
 8003784:	40012c00 	.word	0x40012c00
 8003788:	40013400 	.word	0x40013400

0800378c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800378c:	b480      	push	{r7}
 800378e:	b087      	sub	sp, #28
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
 8003794:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6a1b      	ldr	r3, [r3, #32]
 800379a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6a1b      	ldr	r3, [r3, #32]
 80037a0:	f023 0210 	bic.w	r2, r3, #16
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	699b      	ldr	r3, [r3, #24]
 80037b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	021b      	lsls	r3, r3, #8
 80037ca:	68fa      	ldr	r2, [r7, #12]
 80037cc:	4313      	orrs	r3, r2
 80037ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	f023 0320 	bic.w	r3, r3, #32
 80037d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	011b      	lsls	r3, r3, #4
 80037de:	697a      	ldr	r2, [r7, #20]
 80037e0:	4313      	orrs	r3, r2
 80037e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	4a21      	ldr	r2, [pc, #132]	; (800386c <TIM_OC2_SetConfig+0xe0>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d003      	beq.n	80037f4 <TIM_OC2_SetConfig+0x68>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	4a20      	ldr	r2, [pc, #128]	; (8003870 <TIM_OC2_SetConfig+0xe4>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d10d      	bne.n	8003810 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	011b      	lsls	r3, r3, #4
 8003802:	697a      	ldr	r2, [r7, #20]
 8003804:	4313      	orrs	r3, r2
 8003806:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800380e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	4a16      	ldr	r2, [pc, #88]	; (800386c <TIM_OC2_SetConfig+0xe0>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d003      	beq.n	8003820 <TIM_OC2_SetConfig+0x94>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	4a15      	ldr	r2, [pc, #84]	; (8003870 <TIM_OC2_SetConfig+0xe4>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d113      	bne.n	8003848 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003826:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800382e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	695b      	ldr	r3, [r3, #20]
 8003834:	009b      	lsls	r3, r3, #2
 8003836:	693a      	ldr	r2, [r7, #16]
 8003838:	4313      	orrs	r3, r2
 800383a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	699b      	ldr	r3, [r3, #24]
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	693a      	ldr	r2, [r7, #16]
 8003844:	4313      	orrs	r3, r2
 8003846:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	693a      	ldr	r2, [r7, #16]
 800384c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	68fa      	ldr	r2, [r7, #12]
 8003852:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	685a      	ldr	r2, [r3, #4]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	697a      	ldr	r2, [r7, #20]
 8003860:	621a      	str	r2, [r3, #32]
}
 8003862:	bf00      	nop
 8003864:	371c      	adds	r7, #28
 8003866:	46bd      	mov	sp, r7
 8003868:	bc80      	pop	{r7}
 800386a:	4770      	bx	lr
 800386c:	40012c00 	.word	0x40012c00
 8003870:	40013400 	.word	0x40013400

08003874 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003874:	b480      	push	{r7}
 8003876:	b087      	sub	sp, #28
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6a1b      	ldr	r3, [r3, #32]
 8003882:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6a1b      	ldr	r3, [r3, #32]
 8003888:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	69db      	ldr	r3, [r3, #28]
 800389a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f023 0303 	bic.w	r3, r3, #3
 80038aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	68fa      	ldr	r2, [r7, #12]
 80038b2:	4313      	orrs	r3, r2
 80038b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80038bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	021b      	lsls	r3, r3, #8
 80038c4:	697a      	ldr	r2, [r7, #20]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a21      	ldr	r2, [pc, #132]	; (8003954 <TIM_OC3_SetConfig+0xe0>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d003      	beq.n	80038da <TIM_OC3_SetConfig+0x66>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a20      	ldr	r2, [pc, #128]	; (8003958 <TIM_OC3_SetConfig+0xe4>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d10d      	bne.n	80038f6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80038e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	68db      	ldr	r3, [r3, #12]
 80038e6:	021b      	lsls	r3, r3, #8
 80038e8:	697a      	ldr	r2, [r7, #20]
 80038ea:	4313      	orrs	r3, r2
 80038ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80038f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	4a16      	ldr	r2, [pc, #88]	; (8003954 <TIM_OC3_SetConfig+0xe0>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d003      	beq.n	8003906 <TIM_OC3_SetConfig+0x92>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	4a15      	ldr	r2, [pc, #84]	; (8003958 <TIM_OC3_SetConfig+0xe4>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d113      	bne.n	800392e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800390c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003914:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	695b      	ldr	r3, [r3, #20]
 800391a:	011b      	lsls	r3, r3, #4
 800391c:	693a      	ldr	r2, [r7, #16]
 800391e:	4313      	orrs	r3, r2
 8003920:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	699b      	ldr	r3, [r3, #24]
 8003926:	011b      	lsls	r3, r3, #4
 8003928:	693a      	ldr	r2, [r7, #16]
 800392a:	4313      	orrs	r3, r2
 800392c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	693a      	ldr	r2, [r7, #16]
 8003932:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	68fa      	ldr	r2, [r7, #12]
 8003938:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	685a      	ldr	r2, [r3, #4]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	697a      	ldr	r2, [r7, #20]
 8003946:	621a      	str	r2, [r3, #32]
}
 8003948:	bf00      	nop
 800394a:	371c      	adds	r7, #28
 800394c:	46bd      	mov	sp, r7
 800394e:	bc80      	pop	{r7}
 8003950:	4770      	bx	lr
 8003952:	bf00      	nop
 8003954:	40012c00 	.word	0x40012c00
 8003958:	40013400 	.word	0x40013400

0800395c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800395c:	b480      	push	{r7}
 800395e:	b087      	sub	sp, #28
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6a1b      	ldr	r3, [r3, #32]
 800396a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6a1b      	ldr	r3, [r3, #32]
 8003970:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	69db      	ldr	r3, [r3, #28]
 8003982:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800398a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003992:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	021b      	lsls	r3, r3, #8
 800399a:	68fa      	ldr	r2, [r7, #12]
 800399c:	4313      	orrs	r3, r2
 800399e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80039a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	031b      	lsls	r3, r3, #12
 80039ae:	693a      	ldr	r2, [r7, #16]
 80039b0:	4313      	orrs	r3, r2
 80039b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	4a11      	ldr	r2, [pc, #68]	; (80039fc <TIM_OC4_SetConfig+0xa0>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d003      	beq.n	80039c4 <TIM_OC4_SetConfig+0x68>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	4a10      	ldr	r2, [pc, #64]	; (8003a00 <TIM_OC4_SetConfig+0xa4>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d109      	bne.n	80039d8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80039ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	695b      	ldr	r3, [r3, #20]
 80039d0:	019b      	lsls	r3, r3, #6
 80039d2:	697a      	ldr	r2, [r7, #20]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	697a      	ldr	r2, [r7, #20]
 80039dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	68fa      	ldr	r2, [r7, #12]
 80039e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	685a      	ldr	r2, [r3, #4]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	693a      	ldr	r2, [r7, #16]
 80039f0:	621a      	str	r2, [r3, #32]
}
 80039f2:	bf00      	nop
 80039f4:	371c      	adds	r7, #28
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bc80      	pop	{r7}
 80039fa:	4770      	bx	lr
 80039fc:	40012c00 	.word	0x40012c00
 8003a00:	40013400 	.word	0x40013400

08003a04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b087      	sub	sp, #28
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	60f8      	str	r0, [r7, #12]
 8003a0c:	60b9      	str	r1, [r7, #8]
 8003a0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	6a1b      	ldr	r3, [r3, #32]
 8003a14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	6a1b      	ldr	r3, [r3, #32]
 8003a1a:	f023 0201 	bic.w	r2, r3, #1
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	699b      	ldr	r3, [r3, #24]
 8003a26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	011b      	lsls	r3, r3, #4
 8003a34:	693a      	ldr	r2, [r7, #16]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	f023 030a 	bic.w	r3, r3, #10
 8003a40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003a42:	697a      	ldr	r2, [r7, #20]
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	693a      	ldr	r2, [r7, #16]
 8003a4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	697a      	ldr	r2, [r7, #20]
 8003a54:	621a      	str	r2, [r3, #32]
}
 8003a56:	bf00      	nop
 8003a58:	371c      	adds	r7, #28
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bc80      	pop	{r7}
 8003a5e:	4770      	bx	lr

08003a60 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b087      	sub	sp, #28
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	60f8      	str	r0, [r7, #12]
 8003a68:	60b9      	str	r1, [r7, #8]
 8003a6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	6a1b      	ldr	r3, [r3, #32]
 8003a70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6a1b      	ldr	r3, [r3, #32]
 8003a76:	f023 0210 	bic.w	r2, r3, #16
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	699b      	ldr	r3, [r3, #24]
 8003a82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	031b      	lsls	r3, r3, #12
 8003a90:	693a      	ldr	r2, [r7, #16]
 8003a92:	4313      	orrs	r3, r2
 8003a94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003a9c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	011b      	lsls	r3, r3, #4
 8003aa2:	697a      	ldr	r2, [r7, #20]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	693a      	ldr	r2, [r7, #16]
 8003aac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	697a      	ldr	r2, [r7, #20]
 8003ab2:	621a      	str	r2, [r3, #32]
}
 8003ab4:	bf00      	nop
 8003ab6:	371c      	adds	r7, #28
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bc80      	pop	{r7}
 8003abc:	4770      	bx	lr

08003abe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003abe:	b480      	push	{r7}
 8003ac0:	b085      	sub	sp, #20
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	6078      	str	r0, [r7, #4]
 8003ac6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ad4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ad6:	683a      	ldr	r2, [r7, #0]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	4313      	orrs	r3, r2
 8003adc:	f043 0307 	orr.w	r3, r3, #7
 8003ae0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	68fa      	ldr	r2, [r7, #12]
 8003ae6:	609a      	str	r2, [r3, #8]
}
 8003ae8:	bf00      	nop
 8003aea:	3714      	adds	r7, #20
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bc80      	pop	{r7}
 8003af0:	4770      	bx	lr

08003af2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003af2:	b480      	push	{r7}
 8003af4:	b087      	sub	sp, #28
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	60f8      	str	r0, [r7, #12]
 8003afa:	60b9      	str	r1, [r7, #8]
 8003afc:	607a      	str	r2, [r7, #4]
 8003afe:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b0c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	021a      	lsls	r2, r3, #8
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	431a      	orrs	r2, r3
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	697a      	ldr	r2, [r7, #20]
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	697a      	ldr	r2, [r7, #20]
 8003b24:	609a      	str	r2, [r3, #8]
}
 8003b26:	bf00      	nop
 8003b28:	371c      	adds	r7, #28
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bc80      	pop	{r7}
 8003b2e:	4770      	bx	lr

08003b30 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b087      	sub	sp, #28
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	60f8      	str	r0, [r7, #12]
 8003b38:	60b9      	str	r1, [r7, #8]
 8003b3a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	f003 031f 	and.w	r3, r3, #31
 8003b42:	2201      	movs	r2, #1
 8003b44:	fa02 f303 	lsl.w	r3, r2, r3
 8003b48:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	6a1a      	ldr	r2, [r3, #32]
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	43db      	mvns	r3, r3
 8003b52:	401a      	ands	r2, r3
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	6a1a      	ldr	r2, [r3, #32]
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	f003 031f 	and.w	r3, r3, #31
 8003b62:	6879      	ldr	r1, [r7, #4]
 8003b64:	fa01 f303 	lsl.w	r3, r1, r3
 8003b68:	431a      	orrs	r2, r3
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	621a      	str	r2, [r3, #32]
}
 8003b6e:	bf00      	nop
 8003b70:	371c      	adds	r7, #28
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bc80      	pop	{r7}
 8003b76:	4770      	bx	lr

08003b78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b085      	sub	sp, #20
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d101      	bne.n	8003b90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b8c:	2302      	movs	r3, #2
 8003b8e:	e050      	b.n	8003c32 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2201      	movs	r2, #1
 8003b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2202      	movs	r2, #2
 8003b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bb6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	68fa      	ldr	r2, [r7, #12]
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	68fa      	ldr	r2, [r7, #12]
 8003bc8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a1b      	ldr	r2, [pc, #108]	; (8003c3c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d018      	beq.n	8003c06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a19      	ldr	r2, [pc, #100]	; (8003c40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d013      	beq.n	8003c06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003be6:	d00e      	beq.n	8003c06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a15      	ldr	r2, [pc, #84]	; (8003c44 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d009      	beq.n	8003c06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a14      	ldr	r2, [pc, #80]	; (8003c48 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d004      	beq.n	8003c06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a12      	ldr	r2, [pc, #72]	; (8003c4c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d10c      	bne.n	8003c20 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c0c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	68ba      	ldr	r2, [r7, #8]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	68ba      	ldr	r2, [r7, #8]
 8003c1e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2201      	movs	r2, #1
 8003c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c30:	2300      	movs	r3, #0
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3714      	adds	r7, #20
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bc80      	pop	{r7}
 8003c3a:	4770      	bx	lr
 8003c3c:	40012c00 	.word	0x40012c00
 8003c40:	40013400 	.word	0x40013400
 8003c44:	40000400 	.word	0x40000400
 8003c48:	40000800 	.word	0x40000800
 8003c4c:	40000c00 	.word	0x40000c00

08003c50 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b085      	sub	sp, #20
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
 8003c58:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d101      	bne.n	8003c6c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003c68:	2302      	movs	r3, #2
 8003c6a:	e03d      	b.n	8003ce8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	691b      	ldr	r3, [r3, #16]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	695b      	ldr	r3, [r3, #20]
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	69db      	ldr	r3, [r3, #28]
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	68fa      	ldr	r2, [r7, #12]
 8003cdc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ce6:	2300      	movs	r3, #0
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	3714      	adds	r7, #20
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bc80      	pop	{r7}
 8003cf0:	4770      	bx	lr

08003cf2 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003cf2:	b480      	push	{r7}
 8003cf4:	b083      	sub	sp, #12
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003cfa:	bf00      	nop
 8003cfc:	370c      	adds	r7, #12
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bc80      	pop	{r7}
 8003d02:	4770      	bx	lr

08003d04 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b083      	sub	sp, #12
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d0c:	bf00      	nop
 8003d0e:	370c      	adds	r7, #12
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bc80      	pop	{r7}
 8003d14:	4770      	bx	lr

08003d16 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d16:	b580      	push	{r7, lr}
 8003d18:	b082      	sub	sp, #8
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d101      	bne.n	8003d28 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	e042      	b.n	8003dae <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d2e:	b2db      	uxtb	r3, r3
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d106      	bne.n	8003d42 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	f7fd fed7 	bl	8001af0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2224      	movs	r2, #36	; 0x24
 8003d46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	68da      	ldr	r2, [r3, #12]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d58:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f000 f91c 	bl	8003f98 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	691a      	ldr	r2, [r3, #16]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d6e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	695a      	ldr	r2, [r3, #20]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d7e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	68da      	ldr	r2, [r3, #12]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d8e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2200      	movs	r2, #0
 8003d94:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2220      	movs	r2, #32
 8003d9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2220      	movs	r2, #32
 8003da2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2200      	movs	r2, #0
 8003daa:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003dac:	2300      	movs	r3, #0
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3708      	adds	r7, #8
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}

08003db6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003db6:	b580      	push	{r7, lr}
 8003db8:	b08a      	sub	sp, #40	; 0x28
 8003dba:	af02      	add	r7, sp, #8
 8003dbc:	60f8      	str	r0, [r7, #12]
 8003dbe:	60b9      	str	r1, [r7, #8]
 8003dc0:	603b      	str	r3, [r7, #0]
 8003dc2:	4613      	mov	r3, r2
 8003dc4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	2b20      	cmp	r3, #32
 8003dd4:	d16d      	bne.n	8003eb2 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d002      	beq.n	8003de2 <HAL_UART_Transmit+0x2c>
 8003ddc:	88fb      	ldrh	r3, [r7, #6]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d101      	bne.n	8003de6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e066      	b.n	8003eb4 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2200      	movs	r2, #0
 8003dea:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2221      	movs	r2, #33	; 0x21
 8003df0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003df4:	f7fd ff7c 	bl	8001cf0 <HAL_GetTick>
 8003df8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	88fa      	ldrh	r2, [r7, #6]
 8003dfe:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	88fa      	ldrh	r2, [r7, #6]
 8003e04:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e0e:	d108      	bne.n	8003e22 <HAL_UART_Transmit+0x6c>
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	691b      	ldr	r3, [r3, #16]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d104      	bne.n	8003e22 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	61bb      	str	r3, [r7, #24]
 8003e20:	e003      	b.n	8003e2a <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e26:	2300      	movs	r3, #0
 8003e28:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003e2a:	e02a      	b.n	8003e82 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	9300      	str	r3, [sp, #0]
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	2200      	movs	r2, #0
 8003e34:	2180      	movs	r1, #128	; 0x80
 8003e36:	68f8      	ldr	r0, [r7, #12]
 8003e38:	f000 f840 	bl	8003ebc <UART_WaitOnFlagUntilTimeout>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d001      	beq.n	8003e46 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003e42:	2303      	movs	r3, #3
 8003e44:	e036      	b.n	8003eb4 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003e46:	69fb      	ldr	r3, [r7, #28]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d10b      	bne.n	8003e64 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e4c:	69bb      	ldr	r3, [r7, #24]
 8003e4e:	881b      	ldrh	r3, [r3, #0]
 8003e50:	461a      	mov	r2, r3
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e5a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003e5c:	69bb      	ldr	r3, [r7, #24]
 8003e5e:	3302      	adds	r3, #2
 8003e60:	61bb      	str	r3, [r7, #24]
 8003e62:	e007      	b.n	8003e74 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e64:	69fb      	ldr	r3, [r7, #28]
 8003e66:	781a      	ldrb	r2, [r3, #0]
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003e6e:	69fb      	ldr	r3, [r7, #28]
 8003e70:	3301      	adds	r3, #1
 8003e72:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e78:	b29b      	uxth	r3, r3
 8003e7a:	3b01      	subs	r3, #1
 8003e7c:	b29a      	uxth	r2, r3
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d1cf      	bne.n	8003e2c <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	9300      	str	r3, [sp, #0]
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	2200      	movs	r2, #0
 8003e94:	2140      	movs	r1, #64	; 0x40
 8003e96:	68f8      	ldr	r0, [r7, #12]
 8003e98:	f000 f810 	bl	8003ebc <UART_WaitOnFlagUntilTimeout>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d001      	beq.n	8003ea6 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003ea2:	2303      	movs	r3, #3
 8003ea4:	e006      	b.n	8003eb4 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2220      	movs	r2, #32
 8003eaa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	e000      	b.n	8003eb4 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003eb2:	2302      	movs	r3, #2
  }
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3720      	adds	r7, #32
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}

08003ebc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b090      	sub	sp, #64	; 0x40
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	60f8      	str	r0, [r7, #12]
 8003ec4:	60b9      	str	r1, [r7, #8]
 8003ec6:	603b      	str	r3, [r7, #0]
 8003ec8:	4613      	mov	r3, r2
 8003eca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ecc:	e050      	b.n	8003f70 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ece:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ed4:	d04c      	beq.n	8003f70 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003ed6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d007      	beq.n	8003eec <UART_WaitOnFlagUntilTimeout+0x30>
 8003edc:	f7fd ff08 	bl	8001cf0 <HAL_GetTick>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d241      	bcs.n	8003f70 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	330c      	adds	r3, #12
 8003ef2:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ef6:	e853 3f00 	ldrex	r3, [r3]
 8003efa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003f02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	330c      	adds	r3, #12
 8003f0a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003f0c:	637a      	str	r2, [r7, #52]	; 0x34
 8003f0e:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f10:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f14:	e841 2300 	strex	r3, r2, [r1]
 8003f18:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d1e5      	bne.n	8003eec <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	3314      	adds	r3, #20
 8003f26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	e853 3f00 	ldrex	r3, [r3]
 8003f2e:	613b      	str	r3, [r7, #16]
   return(result);
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	f023 0301 	bic.w	r3, r3, #1
 8003f36:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	3314      	adds	r3, #20
 8003f3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f40:	623a      	str	r2, [r7, #32]
 8003f42:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f44:	69f9      	ldr	r1, [r7, #28]
 8003f46:	6a3a      	ldr	r2, [r7, #32]
 8003f48:	e841 2300 	strex	r3, r2, [r1]
 8003f4c:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f4e:	69bb      	ldr	r3, [r7, #24]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d1e5      	bne.n	8003f20 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2220      	movs	r2, #32
 8003f58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2220      	movs	r2, #32
 8003f60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2200      	movs	r2, #0
 8003f68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003f6c:	2303      	movs	r3, #3
 8003f6e:	e00f      	b.n	8003f90 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	4013      	ands	r3, r2
 8003f7a:	68ba      	ldr	r2, [r7, #8]
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	bf0c      	ite	eq
 8003f80:	2301      	moveq	r3, #1
 8003f82:	2300      	movne	r3, #0
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	461a      	mov	r2, r3
 8003f88:	79fb      	ldrb	r3, [r7, #7]
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d09f      	beq.n	8003ece <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003f8e:	2300      	movs	r3, #0
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	3740      	adds	r7, #64	; 0x40
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}

08003f98 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b084      	sub	sp, #16
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	691b      	ldr	r3, [r3, #16]
 8003fa6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	68da      	ldr	r2, [r3, #12]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	430a      	orrs	r2, r1
 8003fb4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	689a      	ldr	r2, [r3, #8]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	691b      	ldr	r3, [r3, #16]
 8003fbe:	431a      	orrs	r2, r3
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	695b      	ldr	r3, [r3, #20]
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	68db      	ldr	r3, [r3, #12]
 8003fce:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003fd2:	f023 030c 	bic.w	r3, r3, #12
 8003fd6:	687a      	ldr	r2, [r7, #4]
 8003fd8:	6812      	ldr	r2, [r2, #0]
 8003fda:	68b9      	ldr	r1, [r7, #8]
 8003fdc:	430b      	orrs	r3, r1
 8003fde:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	695b      	ldr	r3, [r3, #20]
 8003fe6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	699a      	ldr	r2, [r3, #24]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	430a      	orrs	r2, r1
 8003ff4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a2c      	ldr	r2, [pc, #176]	; (80040ac <UART_SetConfig+0x114>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d103      	bne.n	8004008 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004000:	f7fe fd00 	bl	8002a04 <HAL_RCC_GetPCLK2Freq>
 8004004:	60f8      	str	r0, [r7, #12]
 8004006:	e002      	b.n	800400e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004008:	f7fe fce8 	bl	80029dc <HAL_RCC_GetPCLK1Freq>
 800400c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800400e:	68fa      	ldr	r2, [r7, #12]
 8004010:	4613      	mov	r3, r2
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	4413      	add	r3, r2
 8004016:	009a      	lsls	r2, r3, #2
 8004018:	441a      	add	r2, r3
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	009b      	lsls	r3, r3, #2
 8004020:	fbb2 f3f3 	udiv	r3, r2, r3
 8004024:	4a22      	ldr	r2, [pc, #136]	; (80040b0 <UART_SetConfig+0x118>)
 8004026:	fba2 2303 	umull	r2, r3, r2, r3
 800402a:	095b      	lsrs	r3, r3, #5
 800402c:	0119      	lsls	r1, r3, #4
 800402e:	68fa      	ldr	r2, [r7, #12]
 8004030:	4613      	mov	r3, r2
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	4413      	add	r3, r2
 8004036:	009a      	lsls	r2, r3, #2
 8004038:	441a      	add	r2, r3
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	009b      	lsls	r3, r3, #2
 8004040:	fbb2 f2f3 	udiv	r2, r2, r3
 8004044:	4b1a      	ldr	r3, [pc, #104]	; (80040b0 <UART_SetConfig+0x118>)
 8004046:	fba3 0302 	umull	r0, r3, r3, r2
 800404a:	095b      	lsrs	r3, r3, #5
 800404c:	2064      	movs	r0, #100	; 0x64
 800404e:	fb00 f303 	mul.w	r3, r0, r3
 8004052:	1ad3      	subs	r3, r2, r3
 8004054:	011b      	lsls	r3, r3, #4
 8004056:	3332      	adds	r3, #50	; 0x32
 8004058:	4a15      	ldr	r2, [pc, #84]	; (80040b0 <UART_SetConfig+0x118>)
 800405a:	fba2 2303 	umull	r2, r3, r2, r3
 800405e:	095b      	lsrs	r3, r3, #5
 8004060:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004064:	4419      	add	r1, r3
 8004066:	68fa      	ldr	r2, [r7, #12]
 8004068:	4613      	mov	r3, r2
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	4413      	add	r3, r2
 800406e:	009a      	lsls	r2, r3, #2
 8004070:	441a      	add	r2, r3
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	009b      	lsls	r3, r3, #2
 8004078:	fbb2 f2f3 	udiv	r2, r2, r3
 800407c:	4b0c      	ldr	r3, [pc, #48]	; (80040b0 <UART_SetConfig+0x118>)
 800407e:	fba3 0302 	umull	r0, r3, r3, r2
 8004082:	095b      	lsrs	r3, r3, #5
 8004084:	2064      	movs	r0, #100	; 0x64
 8004086:	fb00 f303 	mul.w	r3, r0, r3
 800408a:	1ad3      	subs	r3, r2, r3
 800408c:	011b      	lsls	r3, r3, #4
 800408e:	3332      	adds	r3, #50	; 0x32
 8004090:	4a07      	ldr	r2, [pc, #28]	; (80040b0 <UART_SetConfig+0x118>)
 8004092:	fba2 2303 	umull	r2, r3, r2, r3
 8004096:	095b      	lsrs	r3, r3, #5
 8004098:	f003 020f 	and.w	r2, r3, #15
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	440a      	add	r2, r1
 80040a2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80040a4:	bf00      	nop
 80040a6:	3710      	adds	r7, #16
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}
 80040ac:	40013800 	.word	0x40013800
 80040b0:	51eb851f 	.word	0x51eb851f

080040b4 <__errno>:
 80040b4:	4b01      	ldr	r3, [pc, #4]	; (80040bc <__errno+0x8>)
 80040b6:	6818      	ldr	r0, [r3, #0]
 80040b8:	4770      	bx	lr
 80040ba:	bf00      	nop
 80040bc:	20000010 	.word	0x20000010

080040c0 <__libc_init_array>:
 80040c0:	b570      	push	{r4, r5, r6, lr}
 80040c2:	2600      	movs	r6, #0
 80040c4:	4d0c      	ldr	r5, [pc, #48]	; (80040f8 <__libc_init_array+0x38>)
 80040c6:	4c0d      	ldr	r4, [pc, #52]	; (80040fc <__libc_init_array+0x3c>)
 80040c8:	1b64      	subs	r4, r4, r5
 80040ca:	10a4      	asrs	r4, r4, #2
 80040cc:	42a6      	cmp	r6, r4
 80040ce:	d109      	bne.n	80040e4 <__libc_init_array+0x24>
 80040d0:	f004 fc70 	bl	80089b4 <_init>
 80040d4:	2600      	movs	r6, #0
 80040d6:	4d0a      	ldr	r5, [pc, #40]	; (8004100 <__libc_init_array+0x40>)
 80040d8:	4c0a      	ldr	r4, [pc, #40]	; (8004104 <__libc_init_array+0x44>)
 80040da:	1b64      	subs	r4, r4, r5
 80040dc:	10a4      	asrs	r4, r4, #2
 80040de:	42a6      	cmp	r6, r4
 80040e0:	d105      	bne.n	80040ee <__libc_init_array+0x2e>
 80040e2:	bd70      	pop	{r4, r5, r6, pc}
 80040e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80040e8:	4798      	blx	r3
 80040ea:	3601      	adds	r6, #1
 80040ec:	e7ee      	b.n	80040cc <__libc_init_array+0xc>
 80040ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80040f2:	4798      	blx	r3
 80040f4:	3601      	adds	r6, #1
 80040f6:	e7f2      	b.n	80040de <__libc_init_array+0x1e>
 80040f8:	08008eac 	.word	0x08008eac
 80040fc:	08008eac 	.word	0x08008eac
 8004100:	08008eac 	.word	0x08008eac
 8004104:	08008eb0 	.word	0x08008eb0

08004108 <memset>:
 8004108:	4603      	mov	r3, r0
 800410a:	4402      	add	r2, r0
 800410c:	4293      	cmp	r3, r2
 800410e:	d100      	bne.n	8004112 <memset+0xa>
 8004110:	4770      	bx	lr
 8004112:	f803 1b01 	strb.w	r1, [r3], #1
 8004116:	e7f9      	b.n	800410c <memset+0x4>

08004118 <__cvt>:
 8004118:	2b00      	cmp	r3, #0
 800411a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800411e:	461f      	mov	r7, r3
 8004120:	bfbb      	ittet	lt
 8004122:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004126:	461f      	movlt	r7, r3
 8004128:	2300      	movge	r3, #0
 800412a:	232d      	movlt	r3, #45	; 0x2d
 800412c:	b088      	sub	sp, #32
 800412e:	4614      	mov	r4, r2
 8004130:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004132:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004134:	7013      	strb	r3, [r2, #0]
 8004136:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004138:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800413c:	f023 0820 	bic.w	r8, r3, #32
 8004140:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004144:	d005      	beq.n	8004152 <__cvt+0x3a>
 8004146:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800414a:	d100      	bne.n	800414e <__cvt+0x36>
 800414c:	3501      	adds	r5, #1
 800414e:	2302      	movs	r3, #2
 8004150:	e000      	b.n	8004154 <__cvt+0x3c>
 8004152:	2303      	movs	r3, #3
 8004154:	aa07      	add	r2, sp, #28
 8004156:	9204      	str	r2, [sp, #16]
 8004158:	aa06      	add	r2, sp, #24
 800415a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800415e:	e9cd 3500 	strd	r3, r5, [sp]
 8004162:	4622      	mov	r2, r4
 8004164:	463b      	mov	r3, r7
 8004166:	f001 fda3 	bl	8005cb0 <_dtoa_r>
 800416a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800416e:	4606      	mov	r6, r0
 8004170:	d102      	bne.n	8004178 <__cvt+0x60>
 8004172:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004174:	07db      	lsls	r3, r3, #31
 8004176:	d522      	bpl.n	80041be <__cvt+0xa6>
 8004178:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800417c:	eb06 0905 	add.w	r9, r6, r5
 8004180:	d110      	bne.n	80041a4 <__cvt+0x8c>
 8004182:	7833      	ldrb	r3, [r6, #0]
 8004184:	2b30      	cmp	r3, #48	; 0x30
 8004186:	d10a      	bne.n	800419e <__cvt+0x86>
 8004188:	2200      	movs	r2, #0
 800418a:	2300      	movs	r3, #0
 800418c:	4620      	mov	r0, r4
 800418e:	4639      	mov	r1, r7
 8004190:	f7fc fd2a 	bl	8000be8 <__aeabi_dcmpeq>
 8004194:	b918      	cbnz	r0, 800419e <__cvt+0x86>
 8004196:	f1c5 0501 	rsb	r5, r5, #1
 800419a:	f8ca 5000 	str.w	r5, [sl]
 800419e:	f8da 3000 	ldr.w	r3, [sl]
 80041a2:	4499      	add	r9, r3
 80041a4:	2200      	movs	r2, #0
 80041a6:	2300      	movs	r3, #0
 80041a8:	4620      	mov	r0, r4
 80041aa:	4639      	mov	r1, r7
 80041ac:	f7fc fd1c 	bl	8000be8 <__aeabi_dcmpeq>
 80041b0:	b108      	cbz	r0, 80041b6 <__cvt+0x9e>
 80041b2:	f8cd 901c 	str.w	r9, [sp, #28]
 80041b6:	2230      	movs	r2, #48	; 0x30
 80041b8:	9b07      	ldr	r3, [sp, #28]
 80041ba:	454b      	cmp	r3, r9
 80041bc:	d307      	bcc.n	80041ce <__cvt+0xb6>
 80041be:	4630      	mov	r0, r6
 80041c0:	9b07      	ldr	r3, [sp, #28]
 80041c2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80041c4:	1b9b      	subs	r3, r3, r6
 80041c6:	6013      	str	r3, [r2, #0]
 80041c8:	b008      	add	sp, #32
 80041ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041ce:	1c59      	adds	r1, r3, #1
 80041d0:	9107      	str	r1, [sp, #28]
 80041d2:	701a      	strb	r2, [r3, #0]
 80041d4:	e7f0      	b.n	80041b8 <__cvt+0xa0>

080041d6 <__exponent>:
 80041d6:	4603      	mov	r3, r0
 80041d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80041da:	2900      	cmp	r1, #0
 80041dc:	f803 2b02 	strb.w	r2, [r3], #2
 80041e0:	bfb6      	itet	lt
 80041e2:	222d      	movlt	r2, #45	; 0x2d
 80041e4:	222b      	movge	r2, #43	; 0x2b
 80041e6:	4249      	neglt	r1, r1
 80041e8:	2909      	cmp	r1, #9
 80041ea:	7042      	strb	r2, [r0, #1]
 80041ec:	dd2b      	ble.n	8004246 <__exponent+0x70>
 80041ee:	f10d 0407 	add.w	r4, sp, #7
 80041f2:	46a4      	mov	ip, r4
 80041f4:	270a      	movs	r7, #10
 80041f6:	fb91 f6f7 	sdiv	r6, r1, r7
 80041fa:	460a      	mov	r2, r1
 80041fc:	46a6      	mov	lr, r4
 80041fe:	fb07 1516 	mls	r5, r7, r6, r1
 8004202:	2a63      	cmp	r2, #99	; 0x63
 8004204:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8004208:	4631      	mov	r1, r6
 800420a:	f104 34ff 	add.w	r4, r4, #4294967295
 800420e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004212:	dcf0      	bgt.n	80041f6 <__exponent+0x20>
 8004214:	3130      	adds	r1, #48	; 0x30
 8004216:	f1ae 0502 	sub.w	r5, lr, #2
 800421a:	f804 1c01 	strb.w	r1, [r4, #-1]
 800421e:	4629      	mov	r1, r5
 8004220:	1c44      	adds	r4, r0, #1
 8004222:	4561      	cmp	r1, ip
 8004224:	d30a      	bcc.n	800423c <__exponent+0x66>
 8004226:	f10d 0209 	add.w	r2, sp, #9
 800422a:	eba2 020e 	sub.w	r2, r2, lr
 800422e:	4565      	cmp	r5, ip
 8004230:	bf88      	it	hi
 8004232:	2200      	movhi	r2, #0
 8004234:	4413      	add	r3, r2
 8004236:	1a18      	subs	r0, r3, r0
 8004238:	b003      	add	sp, #12
 800423a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800423c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004240:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004244:	e7ed      	b.n	8004222 <__exponent+0x4c>
 8004246:	2330      	movs	r3, #48	; 0x30
 8004248:	3130      	adds	r1, #48	; 0x30
 800424a:	7083      	strb	r3, [r0, #2]
 800424c:	70c1      	strb	r1, [r0, #3]
 800424e:	1d03      	adds	r3, r0, #4
 8004250:	e7f1      	b.n	8004236 <__exponent+0x60>
	...

08004254 <_printf_float>:
 8004254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004258:	b091      	sub	sp, #68	; 0x44
 800425a:	460c      	mov	r4, r1
 800425c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004260:	4616      	mov	r6, r2
 8004262:	461f      	mov	r7, r3
 8004264:	4605      	mov	r5, r0
 8004266:	f002 fe77 	bl	8006f58 <_localeconv_r>
 800426a:	6803      	ldr	r3, [r0, #0]
 800426c:	4618      	mov	r0, r3
 800426e:	9309      	str	r3, [sp, #36]	; 0x24
 8004270:	f7fb ffda 	bl	8000228 <strlen>
 8004274:	2300      	movs	r3, #0
 8004276:	930e      	str	r3, [sp, #56]	; 0x38
 8004278:	f8d8 3000 	ldr.w	r3, [r8]
 800427c:	900a      	str	r0, [sp, #40]	; 0x28
 800427e:	3307      	adds	r3, #7
 8004280:	f023 0307 	bic.w	r3, r3, #7
 8004284:	f103 0208 	add.w	r2, r3, #8
 8004288:	f894 9018 	ldrb.w	r9, [r4, #24]
 800428c:	f8d4 b000 	ldr.w	fp, [r4]
 8004290:	f8c8 2000 	str.w	r2, [r8]
 8004294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004298:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800429c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80042a0:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80042a4:	930b      	str	r3, [sp, #44]	; 0x2c
 80042a6:	f04f 32ff 	mov.w	r2, #4294967295
 80042aa:	4640      	mov	r0, r8
 80042ac:	4b9c      	ldr	r3, [pc, #624]	; (8004520 <_printf_float+0x2cc>)
 80042ae:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80042b0:	f7fc fccc 	bl	8000c4c <__aeabi_dcmpun>
 80042b4:	bb70      	cbnz	r0, 8004314 <_printf_float+0xc0>
 80042b6:	f04f 32ff 	mov.w	r2, #4294967295
 80042ba:	4640      	mov	r0, r8
 80042bc:	4b98      	ldr	r3, [pc, #608]	; (8004520 <_printf_float+0x2cc>)
 80042be:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80042c0:	f7fc fca6 	bl	8000c10 <__aeabi_dcmple>
 80042c4:	bb30      	cbnz	r0, 8004314 <_printf_float+0xc0>
 80042c6:	2200      	movs	r2, #0
 80042c8:	2300      	movs	r3, #0
 80042ca:	4640      	mov	r0, r8
 80042cc:	4651      	mov	r1, sl
 80042ce:	f7fc fc95 	bl	8000bfc <__aeabi_dcmplt>
 80042d2:	b110      	cbz	r0, 80042da <_printf_float+0x86>
 80042d4:	232d      	movs	r3, #45	; 0x2d
 80042d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042da:	4b92      	ldr	r3, [pc, #584]	; (8004524 <_printf_float+0x2d0>)
 80042dc:	4892      	ldr	r0, [pc, #584]	; (8004528 <_printf_float+0x2d4>)
 80042de:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80042e2:	bf94      	ite	ls
 80042e4:	4698      	movls	r8, r3
 80042e6:	4680      	movhi	r8, r0
 80042e8:	2303      	movs	r3, #3
 80042ea:	f04f 0a00 	mov.w	sl, #0
 80042ee:	6123      	str	r3, [r4, #16]
 80042f0:	f02b 0304 	bic.w	r3, fp, #4
 80042f4:	6023      	str	r3, [r4, #0]
 80042f6:	4633      	mov	r3, r6
 80042f8:	4621      	mov	r1, r4
 80042fa:	4628      	mov	r0, r5
 80042fc:	9700      	str	r7, [sp, #0]
 80042fe:	aa0f      	add	r2, sp, #60	; 0x3c
 8004300:	f000 f9d4 	bl	80046ac <_printf_common>
 8004304:	3001      	adds	r0, #1
 8004306:	f040 8090 	bne.w	800442a <_printf_float+0x1d6>
 800430a:	f04f 30ff 	mov.w	r0, #4294967295
 800430e:	b011      	add	sp, #68	; 0x44
 8004310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004314:	4642      	mov	r2, r8
 8004316:	4653      	mov	r3, sl
 8004318:	4640      	mov	r0, r8
 800431a:	4651      	mov	r1, sl
 800431c:	f7fc fc96 	bl	8000c4c <__aeabi_dcmpun>
 8004320:	b148      	cbz	r0, 8004336 <_printf_float+0xe2>
 8004322:	f1ba 0f00 	cmp.w	sl, #0
 8004326:	bfb8      	it	lt
 8004328:	232d      	movlt	r3, #45	; 0x2d
 800432a:	4880      	ldr	r0, [pc, #512]	; (800452c <_printf_float+0x2d8>)
 800432c:	bfb8      	it	lt
 800432e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004332:	4b7f      	ldr	r3, [pc, #508]	; (8004530 <_printf_float+0x2dc>)
 8004334:	e7d3      	b.n	80042de <_printf_float+0x8a>
 8004336:	6863      	ldr	r3, [r4, #4]
 8004338:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800433c:	1c5a      	adds	r2, r3, #1
 800433e:	d142      	bne.n	80043c6 <_printf_float+0x172>
 8004340:	2306      	movs	r3, #6
 8004342:	6063      	str	r3, [r4, #4]
 8004344:	2200      	movs	r2, #0
 8004346:	9206      	str	r2, [sp, #24]
 8004348:	aa0e      	add	r2, sp, #56	; 0x38
 800434a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800434e:	aa0d      	add	r2, sp, #52	; 0x34
 8004350:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004354:	9203      	str	r2, [sp, #12]
 8004356:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800435a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800435e:	6023      	str	r3, [r4, #0]
 8004360:	6863      	ldr	r3, [r4, #4]
 8004362:	4642      	mov	r2, r8
 8004364:	9300      	str	r3, [sp, #0]
 8004366:	4628      	mov	r0, r5
 8004368:	4653      	mov	r3, sl
 800436a:	910b      	str	r1, [sp, #44]	; 0x2c
 800436c:	f7ff fed4 	bl	8004118 <__cvt>
 8004370:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004372:	4680      	mov	r8, r0
 8004374:	2947      	cmp	r1, #71	; 0x47
 8004376:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004378:	d108      	bne.n	800438c <_printf_float+0x138>
 800437a:	1cc8      	adds	r0, r1, #3
 800437c:	db02      	blt.n	8004384 <_printf_float+0x130>
 800437e:	6863      	ldr	r3, [r4, #4]
 8004380:	4299      	cmp	r1, r3
 8004382:	dd40      	ble.n	8004406 <_printf_float+0x1b2>
 8004384:	f1a9 0902 	sub.w	r9, r9, #2
 8004388:	fa5f f989 	uxtb.w	r9, r9
 800438c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004390:	d81f      	bhi.n	80043d2 <_printf_float+0x17e>
 8004392:	464a      	mov	r2, r9
 8004394:	3901      	subs	r1, #1
 8004396:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800439a:	910d      	str	r1, [sp, #52]	; 0x34
 800439c:	f7ff ff1b 	bl	80041d6 <__exponent>
 80043a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80043a2:	4682      	mov	sl, r0
 80043a4:	1813      	adds	r3, r2, r0
 80043a6:	2a01      	cmp	r2, #1
 80043a8:	6123      	str	r3, [r4, #16]
 80043aa:	dc02      	bgt.n	80043b2 <_printf_float+0x15e>
 80043ac:	6822      	ldr	r2, [r4, #0]
 80043ae:	07d2      	lsls	r2, r2, #31
 80043b0:	d501      	bpl.n	80043b6 <_printf_float+0x162>
 80043b2:	3301      	adds	r3, #1
 80043b4:	6123      	str	r3, [r4, #16]
 80043b6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d09b      	beq.n	80042f6 <_printf_float+0xa2>
 80043be:	232d      	movs	r3, #45	; 0x2d
 80043c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80043c4:	e797      	b.n	80042f6 <_printf_float+0xa2>
 80043c6:	2947      	cmp	r1, #71	; 0x47
 80043c8:	d1bc      	bne.n	8004344 <_printf_float+0xf0>
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d1ba      	bne.n	8004344 <_printf_float+0xf0>
 80043ce:	2301      	movs	r3, #1
 80043d0:	e7b7      	b.n	8004342 <_printf_float+0xee>
 80043d2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80043d6:	d118      	bne.n	800440a <_printf_float+0x1b6>
 80043d8:	2900      	cmp	r1, #0
 80043da:	6863      	ldr	r3, [r4, #4]
 80043dc:	dd0b      	ble.n	80043f6 <_printf_float+0x1a2>
 80043de:	6121      	str	r1, [r4, #16]
 80043e0:	b913      	cbnz	r3, 80043e8 <_printf_float+0x194>
 80043e2:	6822      	ldr	r2, [r4, #0]
 80043e4:	07d0      	lsls	r0, r2, #31
 80043e6:	d502      	bpl.n	80043ee <_printf_float+0x19a>
 80043e8:	3301      	adds	r3, #1
 80043ea:	440b      	add	r3, r1
 80043ec:	6123      	str	r3, [r4, #16]
 80043ee:	f04f 0a00 	mov.w	sl, #0
 80043f2:	65a1      	str	r1, [r4, #88]	; 0x58
 80043f4:	e7df      	b.n	80043b6 <_printf_float+0x162>
 80043f6:	b913      	cbnz	r3, 80043fe <_printf_float+0x1aa>
 80043f8:	6822      	ldr	r2, [r4, #0]
 80043fa:	07d2      	lsls	r2, r2, #31
 80043fc:	d501      	bpl.n	8004402 <_printf_float+0x1ae>
 80043fe:	3302      	adds	r3, #2
 8004400:	e7f4      	b.n	80043ec <_printf_float+0x198>
 8004402:	2301      	movs	r3, #1
 8004404:	e7f2      	b.n	80043ec <_printf_float+0x198>
 8004406:	f04f 0967 	mov.w	r9, #103	; 0x67
 800440a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800440c:	4299      	cmp	r1, r3
 800440e:	db05      	blt.n	800441c <_printf_float+0x1c8>
 8004410:	6823      	ldr	r3, [r4, #0]
 8004412:	6121      	str	r1, [r4, #16]
 8004414:	07d8      	lsls	r0, r3, #31
 8004416:	d5ea      	bpl.n	80043ee <_printf_float+0x19a>
 8004418:	1c4b      	adds	r3, r1, #1
 800441a:	e7e7      	b.n	80043ec <_printf_float+0x198>
 800441c:	2900      	cmp	r1, #0
 800441e:	bfcc      	ite	gt
 8004420:	2201      	movgt	r2, #1
 8004422:	f1c1 0202 	rsble	r2, r1, #2
 8004426:	4413      	add	r3, r2
 8004428:	e7e0      	b.n	80043ec <_printf_float+0x198>
 800442a:	6823      	ldr	r3, [r4, #0]
 800442c:	055a      	lsls	r2, r3, #21
 800442e:	d407      	bmi.n	8004440 <_printf_float+0x1ec>
 8004430:	6923      	ldr	r3, [r4, #16]
 8004432:	4642      	mov	r2, r8
 8004434:	4631      	mov	r1, r6
 8004436:	4628      	mov	r0, r5
 8004438:	47b8      	blx	r7
 800443a:	3001      	adds	r0, #1
 800443c:	d12b      	bne.n	8004496 <_printf_float+0x242>
 800443e:	e764      	b.n	800430a <_printf_float+0xb6>
 8004440:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004444:	f240 80dd 	bls.w	8004602 <_printf_float+0x3ae>
 8004448:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800444c:	2200      	movs	r2, #0
 800444e:	2300      	movs	r3, #0
 8004450:	f7fc fbca 	bl	8000be8 <__aeabi_dcmpeq>
 8004454:	2800      	cmp	r0, #0
 8004456:	d033      	beq.n	80044c0 <_printf_float+0x26c>
 8004458:	2301      	movs	r3, #1
 800445a:	4631      	mov	r1, r6
 800445c:	4628      	mov	r0, r5
 800445e:	4a35      	ldr	r2, [pc, #212]	; (8004534 <_printf_float+0x2e0>)
 8004460:	47b8      	blx	r7
 8004462:	3001      	adds	r0, #1
 8004464:	f43f af51 	beq.w	800430a <_printf_float+0xb6>
 8004468:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800446c:	429a      	cmp	r2, r3
 800446e:	db02      	blt.n	8004476 <_printf_float+0x222>
 8004470:	6823      	ldr	r3, [r4, #0]
 8004472:	07d8      	lsls	r0, r3, #31
 8004474:	d50f      	bpl.n	8004496 <_printf_float+0x242>
 8004476:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800447a:	4631      	mov	r1, r6
 800447c:	4628      	mov	r0, r5
 800447e:	47b8      	blx	r7
 8004480:	3001      	adds	r0, #1
 8004482:	f43f af42 	beq.w	800430a <_printf_float+0xb6>
 8004486:	f04f 0800 	mov.w	r8, #0
 800448a:	f104 091a 	add.w	r9, r4, #26
 800448e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004490:	3b01      	subs	r3, #1
 8004492:	4543      	cmp	r3, r8
 8004494:	dc09      	bgt.n	80044aa <_printf_float+0x256>
 8004496:	6823      	ldr	r3, [r4, #0]
 8004498:	079b      	lsls	r3, r3, #30
 800449a:	f100 8102 	bmi.w	80046a2 <_printf_float+0x44e>
 800449e:	68e0      	ldr	r0, [r4, #12]
 80044a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80044a2:	4298      	cmp	r0, r3
 80044a4:	bfb8      	it	lt
 80044a6:	4618      	movlt	r0, r3
 80044a8:	e731      	b.n	800430e <_printf_float+0xba>
 80044aa:	2301      	movs	r3, #1
 80044ac:	464a      	mov	r2, r9
 80044ae:	4631      	mov	r1, r6
 80044b0:	4628      	mov	r0, r5
 80044b2:	47b8      	blx	r7
 80044b4:	3001      	adds	r0, #1
 80044b6:	f43f af28 	beq.w	800430a <_printf_float+0xb6>
 80044ba:	f108 0801 	add.w	r8, r8, #1
 80044be:	e7e6      	b.n	800448e <_printf_float+0x23a>
 80044c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	dc38      	bgt.n	8004538 <_printf_float+0x2e4>
 80044c6:	2301      	movs	r3, #1
 80044c8:	4631      	mov	r1, r6
 80044ca:	4628      	mov	r0, r5
 80044cc:	4a19      	ldr	r2, [pc, #100]	; (8004534 <_printf_float+0x2e0>)
 80044ce:	47b8      	blx	r7
 80044d0:	3001      	adds	r0, #1
 80044d2:	f43f af1a 	beq.w	800430a <_printf_float+0xb6>
 80044d6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80044da:	4313      	orrs	r3, r2
 80044dc:	d102      	bne.n	80044e4 <_printf_float+0x290>
 80044de:	6823      	ldr	r3, [r4, #0]
 80044e0:	07d9      	lsls	r1, r3, #31
 80044e2:	d5d8      	bpl.n	8004496 <_printf_float+0x242>
 80044e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80044e8:	4631      	mov	r1, r6
 80044ea:	4628      	mov	r0, r5
 80044ec:	47b8      	blx	r7
 80044ee:	3001      	adds	r0, #1
 80044f0:	f43f af0b 	beq.w	800430a <_printf_float+0xb6>
 80044f4:	f04f 0900 	mov.w	r9, #0
 80044f8:	f104 0a1a 	add.w	sl, r4, #26
 80044fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80044fe:	425b      	negs	r3, r3
 8004500:	454b      	cmp	r3, r9
 8004502:	dc01      	bgt.n	8004508 <_printf_float+0x2b4>
 8004504:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004506:	e794      	b.n	8004432 <_printf_float+0x1de>
 8004508:	2301      	movs	r3, #1
 800450a:	4652      	mov	r2, sl
 800450c:	4631      	mov	r1, r6
 800450e:	4628      	mov	r0, r5
 8004510:	47b8      	blx	r7
 8004512:	3001      	adds	r0, #1
 8004514:	f43f aef9 	beq.w	800430a <_printf_float+0xb6>
 8004518:	f109 0901 	add.w	r9, r9, #1
 800451c:	e7ee      	b.n	80044fc <_printf_float+0x2a8>
 800451e:	bf00      	nop
 8004520:	7fefffff 	.word	0x7fefffff
 8004524:	08008a08 	.word	0x08008a08
 8004528:	08008a0c 	.word	0x08008a0c
 800452c:	08008a14 	.word	0x08008a14
 8004530:	08008a10 	.word	0x08008a10
 8004534:	08008a18 	.word	0x08008a18
 8004538:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800453a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800453c:	429a      	cmp	r2, r3
 800453e:	bfa8      	it	ge
 8004540:	461a      	movge	r2, r3
 8004542:	2a00      	cmp	r2, #0
 8004544:	4691      	mov	r9, r2
 8004546:	dc37      	bgt.n	80045b8 <_printf_float+0x364>
 8004548:	f04f 0b00 	mov.w	fp, #0
 800454c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004550:	f104 021a 	add.w	r2, r4, #26
 8004554:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004558:	ebaa 0309 	sub.w	r3, sl, r9
 800455c:	455b      	cmp	r3, fp
 800455e:	dc33      	bgt.n	80045c8 <_printf_float+0x374>
 8004560:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004564:	429a      	cmp	r2, r3
 8004566:	db3b      	blt.n	80045e0 <_printf_float+0x38c>
 8004568:	6823      	ldr	r3, [r4, #0]
 800456a:	07da      	lsls	r2, r3, #31
 800456c:	d438      	bmi.n	80045e0 <_printf_float+0x38c>
 800456e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004570:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004572:	eba3 020a 	sub.w	r2, r3, sl
 8004576:	eba3 0901 	sub.w	r9, r3, r1
 800457a:	4591      	cmp	r9, r2
 800457c:	bfa8      	it	ge
 800457e:	4691      	movge	r9, r2
 8004580:	f1b9 0f00 	cmp.w	r9, #0
 8004584:	dc34      	bgt.n	80045f0 <_printf_float+0x39c>
 8004586:	f04f 0800 	mov.w	r8, #0
 800458a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800458e:	f104 0a1a 	add.w	sl, r4, #26
 8004592:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004596:	1a9b      	subs	r3, r3, r2
 8004598:	eba3 0309 	sub.w	r3, r3, r9
 800459c:	4543      	cmp	r3, r8
 800459e:	f77f af7a 	ble.w	8004496 <_printf_float+0x242>
 80045a2:	2301      	movs	r3, #1
 80045a4:	4652      	mov	r2, sl
 80045a6:	4631      	mov	r1, r6
 80045a8:	4628      	mov	r0, r5
 80045aa:	47b8      	blx	r7
 80045ac:	3001      	adds	r0, #1
 80045ae:	f43f aeac 	beq.w	800430a <_printf_float+0xb6>
 80045b2:	f108 0801 	add.w	r8, r8, #1
 80045b6:	e7ec      	b.n	8004592 <_printf_float+0x33e>
 80045b8:	4613      	mov	r3, r2
 80045ba:	4631      	mov	r1, r6
 80045bc:	4642      	mov	r2, r8
 80045be:	4628      	mov	r0, r5
 80045c0:	47b8      	blx	r7
 80045c2:	3001      	adds	r0, #1
 80045c4:	d1c0      	bne.n	8004548 <_printf_float+0x2f4>
 80045c6:	e6a0      	b.n	800430a <_printf_float+0xb6>
 80045c8:	2301      	movs	r3, #1
 80045ca:	4631      	mov	r1, r6
 80045cc:	4628      	mov	r0, r5
 80045ce:	920b      	str	r2, [sp, #44]	; 0x2c
 80045d0:	47b8      	blx	r7
 80045d2:	3001      	adds	r0, #1
 80045d4:	f43f ae99 	beq.w	800430a <_printf_float+0xb6>
 80045d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80045da:	f10b 0b01 	add.w	fp, fp, #1
 80045de:	e7b9      	b.n	8004554 <_printf_float+0x300>
 80045e0:	4631      	mov	r1, r6
 80045e2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80045e6:	4628      	mov	r0, r5
 80045e8:	47b8      	blx	r7
 80045ea:	3001      	adds	r0, #1
 80045ec:	d1bf      	bne.n	800456e <_printf_float+0x31a>
 80045ee:	e68c      	b.n	800430a <_printf_float+0xb6>
 80045f0:	464b      	mov	r3, r9
 80045f2:	4631      	mov	r1, r6
 80045f4:	4628      	mov	r0, r5
 80045f6:	eb08 020a 	add.w	r2, r8, sl
 80045fa:	47b8      	blx	r7
 80045fc:	3001      	adds	r0, #1
 80045fe:	d1c2      	bne.n	8004586 <_printf_float+0x332>
 8004600:	e683      	b.n	800430a <_printf_float+0xb6>
 8004602:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004604:	2a01      	cmp	r2, #1
 8004606:	dc01      	bgt.n	800460c <_printf_float+0x3b8>
 8004608:	07db      	lsls	r3, r3, #31
 800460a:	d537      	bpl.n	800467c <_printf_float+0x428>
 800460c:	2301      	movs	r3, #1
 800460e:	4642      	mov	r2, r8
 8004610:	4631      	mov	r1, r6
 8004612:	4628      	mov	r0, r5
 8004614:	47b8      	blx	r7
 8004616:	3001      	adds	r0, #1
 8004618:	f43f ae77 	beq.w	800430a <_printf_float+0xb6>
 800461c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004620:	4631      	mov	r1, r6
 8004622:	4628      	mov	r0, r5
 8004624:	47b8      	blx	r7
 8004626:	3001      	adds	r0, #1
 8004628:	f43f ae6f 	beq.w	800430a <_printf_float+0xb6>
 800462c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004630:	2200      	movs	r2, #0
 8004632:	2300      	movs	r3, #0
 8004634:	f7fc fad8 	bl	8000be8 <__aeabi_dcmpeq>
 8004638:	b9d8      	cbnz	r0, 8004672 <_printf_float+0x41e>
 800463a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800463c:	f108 0201 	add.w	r2, r8, #1
 8004640:	3b01      	subs	r3, #1
 8004642:	4631      	mov	r1, r6
 8004644:	4628      	mov	r0, r5
 8004646:	47b8      	blx	r7
 8004648:	3001      	adds	r0, #1
 800464a:	d10e      	bne.n	800466a <_printf_float+0x416>
 800464c:	e65d      	b.n	800430a <_printf_float+0xb6>
 800464e:	2301      	movs	r3, #1
 8004650:	464a      	mov	r2, r9
 8004652:	4631      	mov	r1, r6
 8004654:	4628      	mov	r0, r5
 8004656:	47b8      	blx	r7
 8004658:	3001      	adds	r0, #1
 800465a:	f43f ae56 	beq.w	800430a <_printf_float+0xb6>
 800465e:	f108 0801 	add.w	r8, r8, #1
 8004662:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004664:	3b01      	subs	r3, #1
 8004666:	4543      	cmp	r3, r8
 8004668:	dcf1      	bgt.n	800464e <_printf_float+0x3fa>
 800466a:	4653      	mov	r3, sl
 800466c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004670:	e6e0      	b.n	8004434 <_printf_float+0x1e0>
 8004672:	f04f 0800 	mov.w	r8, #0
 8004676:	f104 091a 	add.w	r9, r4, #26
 800467a:	e7f2      	b.n	8004662 <_printf_float+0x40e>
 800467c:	2301      	movs	r3, #1
 800467e:	4642      	mov	r2, r8
 8004680:	e7df      	b.n	8004642 <_printf_float+0x3ee>
 8004682:	2301      	movs	r3, #1
 8004684:	464a      	mov	r2, r9
 8004686:	4631      	mov	r1, r6
 8004688:	4628      	mov	r0, r5
 800468a:	47b8      	blx	r7
 800468c:	3001      	adds	r0, #1
 800468e:	f43f ae3c 	beq.w	800430a <_printf_float+0xb6>
 8004692:	f108 0801 	add.w	r8, r8, #1
 8004696:	68e3      	ldr	r3, [r4, #12]
 8004698:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800469a:	1a5b      	subs	r3, r3, r1
 800469c:	4543      	cmp	r3, r8
 800469e:	dcf0      	bgt.n	8004682 <_printf_float+0x42e>
 80046a0:	e6fd      	b.n	800449e <_printf_float+0x24a>
 80046a2:	f04f 0800 	mov.w	r8, #0
 80046a6:	f104 0919 	add.w	r9, r4, #25
 80046aa:	e7f4      	b.n	8004696 <_printf_float+0x442>

080046ac <_printf_common>:
 80046ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046b0:	4616      	mov	r6, r2
 80046b2:	4699      	mov	r9, r3
 80046b4:	688a      	ldr	r2, [r1, #8]
 80046b6:	690b      	ldr	r3, [r1, #16]
 80046b8:	4607      	mov	r7, r0
 80046ba:	4293      	cmp	r3, r2
 80046bc:	bfb8      	it	lt
 80046be:	4613      	movlt	r3, r2
 80046c0:	6033      	str	r3, [r6, #0]
 80046c2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80046c6:	460c      	mov	r4, r1
 80046c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80046cc:	b10a      	cbz	r2, 80046d2 <_printf_common+0x26>
 80046ce:	3301      	adds	r3, #1
 80046d0:	6033      	str	r3, [r6, #0]
 80046d2:	6823      	ldr	r3, [r4, #0]
 80046d4:	0699      	lsls	r1, r3, #26
 80046d6:	bf42      	ittt	mi
 80046d8:	6833      	ldrmi	r3, [r6, #0]
 80046da:	3302      	addmi	r3, #2
 80046dc:	6033      	strmi	r3, [r6, #0]
 80046de:	6825      	ldr	r5, [r4, #0]
 80046e0:	f015 0506 	ands.w	r5, r5, #6
 80046e4:	d106      	bne.n	80046f4 <_printf_common+0x48>
 80046e6:	f104 0a19 	add.w	sl, r4, #25
 80046ea:	68e3      	ldr	r3, [r4, #12]
 80046ec:	6832      	ldr	r2, [r6, #0]
 80046ee:	1a9b      	subs	r3, r3, r2
 80046f0:	42ab      	cmp	r3, r5
 80046f2:	dc28      	bgt.n	8004746 <_printf_common+0x9a>
 80046f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80046f8:	1e13      	subs	r3, r2, #0
 80046fa:	6822      	ldr	r2, [r4, #0]
 80046fc:	bf18      	it	ne
 80046fe:	2301      	movne	r3, #1
 8004700:	0692      	lsls	r2, r2, #26
 8004702:	d42d      	bmi.n	8004760 <_printf_common+0xb4>
 8004704:	4649      	mov	r1, r9
 8004706:	4638      	mov	r0, r7
 8004708:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800470c:	47c0      	blx	r8
 800470e:	3001      	adds	r0, #1
 8004710:	d020      	beq.n	8004754 <_printf_common+0xa8>
 8004712:	6823      	ldr	r3, [r4, #0]
 8004714:	68e5      	ldr	r5, [r4, #12]
 8004716:	f003 0306 	and.w	r3, r3, #6
 800471a:	2b04      	cmp	r3, #4
 800471c:	bf18      	it	ne
 800471e:	2500      	movne	r5, #0
 8004720:	6832      	ldr	r2, [r6, #0]
 8004722:	f04f 0600 	mov.w	r6, #0
 8004726:	68a3      	ldr	r3, [r4, #8]
 8004728:	bf08      	it	eq
 800472a:	1aad      	subeq	r5, r5, r2
 800472c:	6922      	ldr	r2, [r4, #16]
 800472e:	bf08      	it	eq
 8004730:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004734:	4293      	cmp	r3, r2
 8004736:	bfc4      	itt	gt
 8004738:	1a9b      	subgt	r3, r3, r2
 800473a:	18ed      	addgt	r5, r5, r3
 800473c:	341a      	adds	r4, #26
 800473e:	42b5      	cmp	r5, r6
 8004740:	d11a      	bne.n	8004778 <_printf_common+0xcc>
 8004742:	2000      	movs	r0, #0
 8004744:	e008      	b.n	8004758 <_printf_common+0xac>
 8004746:	2301      	movs	r3, #1
 8004748:	4652      	mov	r2, sl
 800474a:	4649      	mov	r1, r9
 800474c:	4638      	mov	r0, r7
 800474e:	47c0      	blx	r8
 8004750:	3001      	adds	r0, #1
 8004752:	d103      	bne.n	800475c <_printf_common+0xb0>
 8004754:	f04f 30ff 	mov.w	r0, #4294967295
 8004758:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800475c:	3501      	adds	r5, #1
 800475e:	e7c4      	b.n	80046ea <_printf_common+0x3e>
 8004760:	2030      	movs	r0, #48	; 0x30
 8004762:	18e1      	adds	r1, r4, r3
 8004764:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004768:	1c5a      	adds	r2, r3, #1
 800476a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800476e:	4422      	add	r2, r4
 8004770:	3302      	adds	r3, #2
 8004772:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004776:	e7c5      	b.n	8004704 <_printf_common+0x58>
 8004778:	2301      	movs	r3, #1
 800477a:	4622      	mov	r2, r4
 800477c:	4649      	mov	r1, r9
 800477e:	4638      	mov	r0, r7
 8004780:	47c0      	blx	r8
 8004782:	3001      	adds	r0, #1
 8004784:	d0e6      	beq.n	8004754 <_printf_common+0xa8>
 8004786:	3601      	adds	r6, #1
 8004788:	e7d9      	b.n	800473e <_printf_common+0x92>
	...

0800478c <_printf_i>:
 800478c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004790:	7e0f      	ldrb	r7, [r1, #24]
 8004792:	4691      	mov	r9, r2
 8004794:	2f78      	cmp	r7, #120	; 0x78
 8004796:	4680      	mov	r8, r0
 8004798:	460c      	mov	r4, r1
 800479a:	469a      	mov	sl, r3
 800479c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800479e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80047a2:	d807      	bhi.n	80047b4 <_printf_i+0x28>
 80047a4:	2f62      	cmp	r7, #98	; 0x62
 80047a6:	d80a      	bhi.n	80047be <_printf_i+0x32>
 80047a8:	2f00      	cmp	r7, #0
 80047aa:	f000 80d9 	beq.w	8004960 <_printf_i+0x1d4>
 80047ae:	2f58      	cmp	r7, #88	; 0x58
 80047b0:	f000 80a4 	beq.w	80048fc <_printf_i+0x170>
 80047b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80047b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80047bc:	e03a      	b.n	8004834 <_printf_i+0xa8>
 80047be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80047c2:	2b15      	cmp	r3, #21
 80047c4:	d8f6      	bhi.n	80047b4 <_printf_i+0x28>
 80047c6:	a101      	add	r1, pc, #4	; (adr r1, 80047cc <_printf_i+0x40>)
 80047c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80047cc:	08004825 	.word	0x08004825
 80047d0:	08004839 	.word	0x08004839
 80047d4:	080047b5 	.word	0x080047b5
 80047d8:	080047b5 	.word	0x080047b5
 80047dc:	080047b5 	.word	0x080047b5
 80047e0:	080047b5 	.word	0x080047b5
 80047e4:	08004839 	.word	0x08004839
 80047e8:	080047b5 	.word	0x080047b5
 80047ec:	080047b5 	.word	0x080047b5
 80047f0:	080047b5 	.word	0x080047b5
 80047f4:	080047b5 	.word	0x080047b5
 80047f8:	08004947 	.word	0x08004947
 80047fc:	08004869 	.word	0x08004869
 8004800:	08004929 	.word	0x08004929
 8004804:	080047b5 	.word	0x080047b5
 8004808:	080047b5 	.word	0x080047b5
 800480c:	08004969 	.word	0x08004969
 8004810:	080047b5 	.word	0x080047b5
 8004814:	08004869 	.word	0x08004869
 8004818:	080047b5 	.word	0x080047b5
 800481c:	080047b5 	.word	0x080047b5
 8004820:	08004931 	.word	0x08004931
 8004824:	682b      	ldr	r3, [r5, #0]
 8004826:	1d1a      	adds	r2, r3, #4
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	602a      	str	r2, [r5, #0]
 800482c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004830:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004834:	2301      	movs	r3, #1
 8004836:	e0a4      	b.n	8004982 <_printf_i+0x1f6>
 8004838:	6820      	ldr	r0, [r4, #0]
 800483a:	6829      	ldr	r1, [r5, #0]
 800483c:	0606      	lsls	r6, r0, #24
 800483e:	f101 0304 	add.w	r3, r1, #4
 8004842:	d50a      	bpl.n	800485a <_printf_i+0xce>
 8004844:	680e      	ldr	r6, [r1, #0]
 8004846:	602b      	str	r3, [r5, #0]
 8004848:	2e00      	cmp	r6, #0
 800484a:	da03      	bge.n	8004854 <_printf_i+0xc8>
 800484c:	232d      	movs	r3, #45	; 0x2d
 800484e:	4276      	negs	r6, r6
 8004850:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004854:	230a      	movs	r3, #10
 8004856:	485e      	ldr	r0, [pc, #376]	; (80049d0 <_printf_i+0x244>)
 8004858:	e019      	b.n	800488e <_printf_i+0x102>
 800485a:	680e      	ldr	r6, [r1, #0]
 800485c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004860:	602b      	str	r3, [r5, #0]
 8004862:	bf18      	it	ne
 8004864:	b236      	sxthne	r6, r6
 8004866:	e7ef      	b.n	8004848 <_printf_i+0xbc>
 8004868:	682b      	ldr	r3, [r5, #0]
 800486a:	6820      	ldr	r0, [r4, #0]
 800486c:	1d19      	adds	r1, r3, #4
 800486e:	6029      	str	r1, [r5, #0]
 8004870:	0601      	lsls	r1, r0, #24
 8004872:	d501      	bpl.n	8004878 <_printf_i+0xec>
 8004874:	681e      	ldr	r6, [r3, #0]
 8004876:	e002      	b.n	800487e <_printf_i+0xf2>
 8004878:	0646      	lsls	r6, r0, #25
 800487a:	d5fb      	bpl.n	8004874 <_printf_i+0xe8>
 800487c:	881e      	ldrh	r6, [r3, #0]
 800487e:	2f6f      	cmp	r7, #111	; 0x6f
 8004880:	bf0c      	ite	eq
 8004882:	2308      	moveq	r3, #8
 8004884:	230a      	movne	r3, #10
 8004886:	4852      	ldr	r0, [pc, #328]	; (80049d0 <_printf_i+0x244>)
 8004888:	2100      	movs	r1, #0
 800488a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800488e:	6865      	ldr	r5, [r4, #4]
 8004890:	2d00      	cmp	r5, #0
 8004892:	bfa8      	it	ge
 8004894:	6821      	ldrge	r1, [r4, #0]
 8004896:	60a5      	str	r5, [r4, #8]
 8004898:	bfa4      	itt	ge
 800489a:	f021 0104 	bicge.w	r1, r1, #4
 800489e:	6021      	strge	r1, [r4, #0]
 80048a0:	b90e      	cbnz	r6, 80048a6 <_printf_i+0x11a>
 80048a2:	2d00      	cmp	r5, #0
 80048a4:	d04d      	beq.n	8004942 <_printf_i+0x1b6>
 80048a6:	4615      	mov	r5, r2
 80048a8:	fbb6 f1f3 	udiv	r1, r6, r3
 80048ac:	fb03 6711 	mls	r7, r3, r1, r6
 80048b0:	5dc7      	ldrb	r7, [r0, r7]
 80048b2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80048b6:	4637      	mov	r7, r6
 80048b8:	42bb      	cmp	r3, r7
 80048ba:	460e      	mov	r6, r1
 80048bc:	d9f4      	bls.n	80048a8 <_printf_i+0x11c>
 80048be:	2b08      	cmp	r3, #8
 80048c0:	d10b      	bne.n	80048da <_printf_i+0x14e>
 80048c2:	6823      	ldr	r3, [r4, #0]
 80048c4:	07de      	lsls	r6, r3, #31
 80048c6:	d508      	bpl.n	80048da <_printf_i+0x14e>
 80048c8:	6923      	ldr	r3, [r4, #16]
 80048ca:	6861      	ldr	r1, [r4, #4]
 80048cc:	4299      	cmp	r1, r3
 80048ce:	bfde      	ittt	le
 80048d0:	2330      	movle	r3, #48	; 0x30
 80048d2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80048d6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80048da:	1b52      	subs	r2, r2, r5
 80048dc:	6122      	str	r2, [r4, #16]
 80048de:	464b      	mov	r3, r9
 80048e0:	4621      	mov	r1, r4
 80048e2:	4640      	mov	r0, r8
 80048e4:	f8cd a000 	str.w	sl, [sp]
 80048e8:	aa03      	add	r2, sp, #12
 80048ea:	f7ff fedf 	bl	80046ac <_printf_common>
 80048ee:	3001      	adds	r0, #1
 80048f0:	d14c      	bne.n	800498c <_printf_i+0x200>
 80048f2:	f04f 30ff 	mov.w	r0, #4294967295
 80048f6:	b004      	add	sp, #16
 80048f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048fc:	4834      	ldr	r0, [pc, #208]	; (80049d0 <_printf_i+0x244>)
 80048fe:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004902:	6829      	ldr	r1, [r5, #0]
 8004904:	6823      	ldr	r3, [r4, #0]
 8004906:	f851 6b04 	ldr.w	r6, [r1], #4
 800490a:	6029      	str	r1, [r5, #0]
 800490c:	061d      	lsls	r5, r3, #24
 800490e:	d514      	bpl.n	800493a <_printf_i+0x1ae>
 8004910:	07df      	lsls	r7, r3, #31
 8004912:	bf44      	itt	mi
 8004914:	f043 0320 	orrmi.w	r3, r3, #32
 8004918:	6023      	strmi	r3, [r4, #0]
 800491a:	b91e      	cbnz	r6, 8004924 <_printf_i+0x198>
 800491c:	6823      	ldr	r3, [r4, #0]
 800491e:	f023 0320 	bic.w	r3, r3, #32
 8004922:	6023      	str	r3, [r4, #0]
 8004924:	2310      	movs	r3, #16
 8004926:	e7af      	b.n	8004888 <_printf_i+0xfc>
 8004928:	6823      	ldr	r3, [r4, #0]
 800492a:	f043 0320 	orr.w	r3, r3, #32
 800492e:	6023      	str	r3, [r4, #0]
 8004930:	2378      	movs	r3, #120	; 0x78
 8004932:	4828      	ldr	r0, [pc, #160]	; (80049d4 <_printf_i+0x248>)
 8004934:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004938:	e7e3      	b.n	8004902 <_printf_i+0x176>
 800493a:	0659      	lsls	r1, r3, #25
 800493c:	bf48      	it	mi
 800493e:	b2b6      	uxthmi	r6, r6
 8004940:	e7e6      	b.n	8004910 <_printf_i+0x184>
 8004942:	4615      	mov	r5, r2
 8004944:	e7bb      	b.n	80048be <_printf_i+0x132>
 8004946:	682b      	ldr	r3, [r5, #0]
 8004948:	6826      	ldr	r6, [r4, #0]
 800494a:	1d18      	adds	r0, r3, #4
 800494c:	6961      	ldr	r1, [r4, #20]
 800494e:	6028      	str	r0, [r5, #0]
 8004950:	0635      	lsls	r5, r6, #24
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	d501      	bpl.n	800495a <_printf_i+0x1ce>
 8004956:	6019      	str	r1, [r3, #0]
 8004958:	e002      	b.n	8004960 <_printf_i+0x1d4>
 800495a:	0670      	lsls	r0, r6, #25
 800495c:	d5fb      	bpl.n	8004956 <_printf_i+0x1ca>
 800495e:	8019      	strh	r1, [r3, #0]
 8004960:	2300      	movs	r3, #0
 8004962:	4615      	mov	r5, r2
 8004964:	6123      	str	r3, [r4, #16]
 8004966:	e7ba      	b.n	80048de <_printf_i+0x152>
 8004968:	682b      	ldr	r3, [r5, #0]
 800496a:	2100      	movs	r1, #0
 800496c:	1d1a      	adds	r2, r3, #4
 800496e:	602a      	str	r2, [r5, #0]
 8004970:	681d      	ldr	r5, [r3, #0]
 8004972:	6862      	ldr	r2, [r4, #4]
 8004974:	4628      	mov	r0, r5
 8004976:	f002 fb0d 	bl	8006f94 <memchr>
 800497a:	b108      	cbz	r0, 8004980 <_printf_i+0x1f4>
 800497c:	1b40      	subs	r0, r0, r5
 800497e:	6060      	str	r0, [r4, #4]
 8004980:	6863      	ldr	r3, [r4, #4]
 8004982:	6123      	str	r3, [r4, #16]
 8004984:	2300      	movs	r3, #0
 8004986:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800498a:	e7a8      	b.n	80048de <_printf_i+0x152>
 800498c:	462a      	mov	r2, r5
 800498e:	4649      	mov	r1, r9
 8004990:	4640      	mov	r0, r8
 8004992:	6923      	ldr	r3, [r4, #16]
 8004994:	47d0      	blx	sl
 8004996:	3001      	adds	r0, #1
 8004998:	d0ab      	beq.n	80048f2 <_printf_i+0x166>
 800499a:	6823      	ldr	r3, [r4, #0]
 800499c:	079b      	lsls	r3, r3, #30
 800499e:	d413      	bmi.n	80049c8 <_printf_i+0x23c>
 80049a0:	68e0      	ldr	r0, [r4, #12]
 80049a2:	9b03      	ldr	r3, [sp, #12]
 80049a4:	4298      	cmp	r0, r3
 80049a6:	bfb8      	it	lt
 80049a8:	4618      	movlt	r0, r3
 80049aa:	e7a4      	b.n	80048f6 <_printf_i+0x16a>
 80049ac:	2301      	movs	r3, #1
 80049ae:	4632      	mov	r2, r6
 80049b0:	4649      	mov	r1, r9
 80049b2:	4640      	mov	r0, r8
 80049b4:	47d0      	blx	sl
 80049b6:	3001      	adds	r0, #1
 80049b8:	d09b      	beq.n	80048f2 <_printf_i+0x166>
 80049ba:	3501      	adds	r5, #1
 80049bc:	68e3      	ldr	r3, [r4, #12]
 80049be:	9903      	ldr	r1, [sp, #12]
 80049c0:	1a5b      	subs	r3, r3, r1
 80049c2:	42ab      	cmp	r3, r5
 80049c4:	dcf2      	bgt.n	80049ac <_printf_i+0x220>
 80049c6:	e7eb      	b.n	80049a0 <_printf_i+0x214>
 80049c8:	2500      	movs	r5, #0
 80049ca:	f104 0619 	add.w	r6, r4, #25
 80049ce:	e7f5      	b.n	80049bc <_printf_i+0x230>
 80049d0:	08008a1a 	.word	0x08008a1a
 80049d4:	08008a2b 	.word	0x08008a2b

080049d8 <_scanf_float>:
 80049d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049dc:	b087      	sub	sp, #28
 80049de:	9303      	str	r3, [sp, #12]
 80049e0:	688b      	ldr	r3, [r1, #8]
 80049e2:	4617      	mov	r7, r2
 80049e4:	1e5a      	subs	r2, r3, #1
 80049e6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80049ea:	bf85      	ittet	hi
 80049ec:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80049f0:	195b      	addhi	r3, r3, r5
 80049f2:	2300      	movls	r3, #0
 80049f4:	9302      	strhi	r3, [sp, #8]
 80049f6:	bf88      	it	hi
 80049f8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80049fc:	468b      	mov	fp, r1
 80049fe:	f04f 0500 	mov.w	r5, #0
 8004a02:	bf8c      	ite	hi
 8004a04:	608b      	strhi	r3, [r1, #8]
 8004a06:	9302      	strls	r3, [sp, #8]
 8004a08:	680b      	ldr	r3, [r1, #0]
 8004a0a:	4680      	mov	r8, r0
 8004a0c:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8004a10:	f84b 3b1c 	str.w	r3, [fp], #28
 8004a14:	460c      	mov	r4, r1
 8004a16:	465e      	mov	r6, fp
 8004a18:	46aa      	mov	sl, r5
 8004a1a:	46a9      	mov	r9, r5
 8004a1c:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004a20:	9501      	str	r5, [sp, #4]
 8004a22:	68a2      	ldr	r2, [r4, #8]
 8004a24:	b152      	cbz	r2, 8004a3c <_scanf_float+0x64>
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	781b      	ldrb	r3, [r3, #0]
 8004a2a:	2b4e      	cmp	r3, #78	; 0x4e
 8004a2c:	d864      	bhi.n	8004af8 <_scanf_float+0x120>
 8004a2e:	2b40      	cmp	r3, #64	; 0x40
 8004a30:	d83c      	bhi.n	8004aac <_scanf_float+0xd4>
 8004a32:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8004a36:	b2c8      	uxtb	r0, r1
 8004a38:	280e      	cmp	r0, #14
 8004a3a:	d93a      	bls.n	8004ab2 <_scanf_float+0xda>
 8004a3c:	f1b9 0f00 	cmp.w	r9, #0
 8004a40:	d003      	beq.n	8004a4a <_scanf_float+0x72>
 8004a42:	6823      	ldr	r3, [r4, #0]
 8004a44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a48:	6023      	str	r3, [r4, #0]
 8004a4a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004a4e:	f1ba 0f01 	cmp.w	sl, #1
 8004a52:	f200 8113 	bhi.w	8004c7c <_scanf_float+0x2a4>
 8004a56:	455e      	cmp	r6, fp
 8004a58:	f200 8105 	bhi.w	8004c66 <_scanf_float+0x28e>
 8004a5c:	2501      	movs	r5, #1
 8004a5e:	4628      	mov	r0, r5
 8004a60:	b007      	add	sp, #28
 8004a62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a66:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8004a6a:	2a0d      	cmp	r2, #13
 8004a6c:	d8e6      	bhi.n	8004a3c <_scanf_float+0x64>
 8004a6e:	a101      	add	r1, pc, #4	; (adr r1, 8004a74 <_scanf_float+0x9c>)
 8004a70:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004a74:	08004bb3 	.word	0x08004bb3
 8004a78:	08004a3d 	.word	0x08004a3d
 8004a7c:	08004a3d 	.word	0x08004a3d
 8004a80:	08004a3d 	.word	0x08004a3d
 8004a84:	08004c13 	.word	0x08004c13
 8004a88:	08004beb 	.word	0x08004beb
 8004a8c:	08004a3d 	.word	0x08004a3d
 8004a90:	08004a3d 	.word	0x08004a3d
 8004a94:	08004bc1 	.word	0x08004bc1
 8004a98:	08004a3d 	.word	0x08004a3d
 8004a9c:	08004a3d 	.word	0x08004a3d
 8004aa0:	08004a3d 	.word	0x08004a3d
 8004aa4:	08004a3d 	.word	0x08004a3d
 8004aa8:	08004b79 	.word	0x08004b79
 8004aac:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8004ab0:	e7db      	b.n	8004a6a <_scanf_float+0x92>
 8004ab2:	290e      	cmp	r1, #14
 8004ab4:	d8c2      	bhi.n	8004a3c <_scanf_float+0x64>
 8004ab6:	a001      	add	r0, pc, #4	; (adr r0, 8004abc <_scanf_float+0xe4>)
 8004ab8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004abc:	08004b6b 	.word	0x08004b6b
 8004ac0:	08004a3d 	.word	0x08004a3d
 8004ac4:	08004b6b 	.word	0x08004b6b
 8004ac8:	08004bff 	.word	0x08004bff
 8004acc:	08004a3d 	.word	0x08004a3d
 8004ad0:	08004b19 	.word	0x08004b19
 8004ad4:	08004b55 	.word	0x08004b55
 8004ad8:	08004b55 	.word	0x08004b55
 8004adc:	08004b55 	.word	0x08004b55
 8004ae0:	08004b55 	.word	0x08004b55
 8004ae4:	08004b55 	.word	0x08004b55
 8004ae8:	08004b55 	.word	0x08004b55
 8004aec:	08004b55 	.word	0x08004b55
 8004af0:	08004b55 	.word	0x08004b55
 8004af4:	08004b55 	.word	0x08004b55
 8004af8:	2b6e      	cmp	r3, #110	; 0x6e
 8004afa:	d809      	bhi.n	8004b10 <_scanf_float+0x138>
 8004afc:	2b60      	cmp	r3, #96	; 0x60
 8004afe:	d8b2      	bhi.n	8004a66 <_scanf_float+0x8e>
 8004b00:	2b54      	cmp	r3, #84	; 0x54
 8004b02:	d077      	beq.n	8004bf4 <_scanf_float+0x21c>
 8004b04:	2b59      	cmp	r3, #89	; 0x59
 8004b06:	d199      	bne.n	8004a3c <_scanf_float+0x64>
 8004b08:	2d07      	cmp	r5, #7
 8004b0a:	d197      	bne.n	8004a3c <_scanf_float+0x64>
 8004b0c:	2508      	movs	r5, #8
 8004b0e:	e029      	b.n	8004b64 <_scanf_float+0x18c>
 8004b10:	2b74      	cmp	r3, #116	; 0x74
 8004b12:	d06f      	beq.n	8004bf4 <_scanf_float+0x21c>
 8004b14:	2b79      	cmp	r3, #121	; 0x79
 8004b16:	e7f6      	b.n	8004b06 <_scanf_float+0x12e>
 8004b18:	6821      	ldr	r1, [r4, #0]
 8004b1a:	05c8      	lsls	r0, r1, #23
 8004b1c:	d51a      	bpl.n	8004b54 <_scanf_float+0x17c>
 8004b1e:	9b02      	ldr	r3, [sp, #8]
 8004b20:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8004b24:	6021      	str	r1, [r4, #0]
 8004b26:	f109 0901 	add.w	r9, r9, #1
 8004b2a:	b11b      	cbz	r3, 8004b34 <_scanf_float+0x15c>
 8004b2c:	3b01      	subs	r3, #1
 8004b2e:	3201      	adds	r2, #1
 8004b30:	9302      	str	r3, [sp, #8]
 8004b32:	60a2      	str	r2, [r4, #8]
 8004b34:	68a3      	ldr	r3, [r4, #8]
 8004b36:	3b01      	subs	r3, #1
 8004b38:	60a3      	str	r3, [r4, #8]
 8004b3a:	6923      	ldr	r3, [r4, #16]
 8004b3c:	3301      	adds	r3, #1
 8004b3e:	6123      	str	r3, [r4, #16]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	3b01      	subs	r3, #1
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	607b      	str	r3, [r7, #4]
 8004b48:	f340 8084 	ble.w	8004c54 <_scanf_float+0x27c>
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	3301      	adds	r3, #1
 8004b50:	603b      	str	r3, [r7, #0]
 8004b52:	e766      	b.n	8004a22 <_scanf_float+0x4a>
 8004b54:	eb1a 0f05 	cmn.w	sl, r5
 8004b58:	f47f af70 	bne.w	8004a3c <_scanf_float+0x64>
 8004b5c:	6822      	ldr	r2, [r4, #0]
 8004b5e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8004b62:	6022      	str	r2, [r4, #0]
 8004b64:	f806 3b01 	strb.w	r3, [r6], #1
 8004b68:	e7e4      	b.n	8004b34 <_scanf_float+0x15c>
 8004b6a:	6822      	ldr	r2, [r4, #0]
 8004b6c:	0610      	lsls	r0, r2, #24
 8004b6e:	f57f af65 	bpl.w	8004a3c <_scanf_float+0x64>
 8004b72:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b76:	e7f4      	b.n	8004b62 <_scanf_float+0x18a>
 8004b78:	f1ba 0f00 	cmp.w	sl, #0
 8004b7c:	d10e      	bne.n	8004b9c <_scanf_float+0x1c4>
 8004b7e:	f1b9 0f00 	cmp.w	r9, #0
 8004b82:	d10e      	bne.n	8004ba2 <_scanf_float+0x1ca>
 8004b84:	6822      	ldr	r2, [r4, #0]
 8004b86:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004b8a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004b8e:	d108      	bne.n	8004ba2 <_scanf_float+0x1ca>
 8004b90:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004b94:	f04f 0a01 	mov.w	sl, #1
 8004b98:	6022      	str	r2, [r4, #0]
 8004b9a:	e7e3      	b.n	8004b64 <_scanf_float+0x18c>
 8004b9c:	f1ba 0f02 	cmp.w	sl, #2
 8004ba0:	d055      	beq.n	8004c4e <_scanf_float+0x276>
 8004ba2:	2d01      	cmp	r5, #1
 8004ba4:	d002      	beq.n	8004bac <_scanf_float+0x1d4>
 8004ba6:	2d04      	cmp	r5, #4
 8004ba8:	f47f af48 	bne.w	8004a3c <_scanf_float+0x64>
 8004bac:	3501      	adds	r5, #1
 8004bae:	b2ed      	uxtb	r5, r5
 8004bb0:	e7d8      	b.n	8004b64 <_scanf_float+0x18c>
 8004bb2:	f1ba 0f01 	cmp.w	sl, #1
 8004bb6:	f47f af41 	bne.w	8004a3c <_scanf_float+0x64>
 8004bba:	f04f 0a02 	mov.w	sl, #2
 8004bbe:	e7d1      	b.n	8004b64 <_scanf_float+0x18c>
 8004bc0:	b97d      	cbnz	r5, 8004be2 <_scanf_float+0x20a>
 8004bc2:	f1b9 0f00 	cmp.w	r9, #0
 8004bc6:	f47f af3c 	bne.w	8004a42 <_scanf_float+0x6a>
 8004bca:	6822      	ldr	r2, [r4, #0]
 8004bcc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004bd0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004bd4:	f47f af39 	bne.w	8004a4a <_scanf_float+0x72>
 8004bd8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004bdc:	2501      	movs	r5, #1
 8004bde:	6022      	str	r2, [r4, #0]
 8004be0:	e7c0      	b.n	8004b64 <_scanf_float+0x18c>
 8004be2:	2d03      	cmp	r5, #3
 8004be4:	d0e2      	beq.n	8004bac <_scanf_float+0x1d4>
 8004be6:	2d05      	cmp	r5, #5
 8004be8:	e7de      	b.n	8004ba8 <_scanf_float+0x1d0>
 8004bea:	2d02      	cmp	r5, #2
 8004bec:	f47f af26 	bne.w	8004a3c <_scanf_float+0x64>
 8004bf0:	2503      	movs	r5, #3
 8004bf2:	e7b7      	b.n	8004b64 <_scanf_float+0x18c>
 8004bf4:	2d06      	cmp	r5, #6
 8004bf6:	f47f af21 	bne.w	8004a3c <_scanf_float+0x64>
 8004bfa:	2507      	movs	r5, #7
 8004bfc:	e7b2      	b.n	8004b64 <_scanf_float+0x18c>
 8004bfe:	6822      	ldr	r2, [r4, #0]
 8004c00:	0591      	lsls	r1, r2, #22
 8004c02:	f57f af1b 	bpl.w	8004a3c <_scanf_float+0x64>
 8004c06:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8004c0a:	6022      	str	r2, [r4, #0]
 8004c0c:	f8cd 9004 	str.w	r9, [sp, #4]
 8004c10:	e7a8      	b.n	8004b64 <_scanf_float+0x18c>
 8004c12:	6822      	ldr	r2, [r4, #0]
 8004c14:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8004c18:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8004c1c:	d006      	beq.n	8004c2c <_scanf_float+0x254>
 8004c1e:	0550      	lsls	r0, r2, #21
 8004c20:	f57f af0c 	bpl.w	8004a3c <_scanf_float+0x64>
 8004c24:	f1b9 0f00 	cmp.w	r9, #0
 8004c28:	f43f af0f 	beq.w	8004a4a <_scanf_float+0x72>
 8004c2c:	0591      	lsls	r1, r2, #22
 8004c2e:	bf58      	it	pl
 8004c30:	9901      	ldrpl	r1, [sp, #4]
 8004c32:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004c36:	bf58      	it	pl
 8004c38:	eba9 0101 	subpl.w	r1, r9, r1
 8004c3c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8004c40:	f04f 0900 	mov.w	r9, #0
 8004c44:	bf58      	it	pl
 8004c46:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8004c4a:	6022      	str	r2, [r4, #0]
 8004c4c:	e78a      	b.n	8004b64 <_scanf_float+0x18c>
 8004c4e:	f04f 0a03 	mov.w	sl, #3
 8004c52:	e787      	b.n	8004b64 <_scanf_float+0x18c>
 8004c54:	4639      	mov	r1, r7
 8004c56:	4640      	mov	r0, r8
 8004c58:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004c5c:	4798      	blx	r3
 8004c5e:	2800      	cmp	r0, #0
 8004c60:	f43f aedf 	beq.w	8004a22 <_scanf_float+0x4a>
 8004c64:	e6ea      	b.n	8004a3c <_scanf_float+0x64>
 8004c66:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004c6a:	463a      	mov	r2, r7
 8004c6c:	4640      	mov	r0, r8
 8004c6e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004c72:	4798      	blx	r3
 8004c74:	6923      	ldr	r3, [r4, #16]
 8004c76:	3b01      	subs	r3, #1
 8004c78:	6123      	str	r3, [r4, #16]
 8004c7a:	e6ec      	b.n	8004a56 <_scanf_float+0x7e>
 8004c7c:	1e6b      	subs	r3, r5, #1
 8004c7e:	2b06      	cmp	r3, #6
 8004c80:	d825      	bhi.n	8004cce <_scanf_float+0x2f6>
 8004c82:	2d02      	cmp	r5, #2
 8004c84:	d836      	bhi.n	8004cf4 <_scanf_float+0x31c>
 8004c86:	455e      	cmp	r6, fp
 8004c88:	f67f aee8 	bls.w	8004a5c <_scanf_float+0x84>
 8004c8c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004c90:	463a      	mov	r2, r7
 8004c92:	4640      	mov	r0, r8
 8004c94:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004c98:	4798      	blx	r3
 8004c9a:	6923      	ldr	r3, [r4, #16]
 8004c9c:	3b01      	subs	r3, #1
 8004c9e:	6123      	str	r3, [r4, #16]
 8004ca0:	e7f1      	b.n	8004c86 <_scanf_float+0x2ae>
 8004ca2:	9802      	ldr	r0, [sp, #8]
 8004ca4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004ca8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8004cac:	463a      	mov	r2, r7
 8004cae:	9002      	str	r0, [sp, #8]
 8004cb0:	4640      	mov	r0, r8
 8004cb2:	4798      	blx	r3
 8004cb4:	6923      	ldr	r3, [r4, #16]
 8004cb6:	3b01      	subs	r3, #1
 8004cb8:	6123      	str	r3, [r4, #16]
 8004cba:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004cbe:	fa5f fa8a 	uxtb.w	sl, sl
 8004cc2:	f1ba 0f02 	cmp.w	sl, #2
 8004cc6:	d1ec      	bne.n	8004ca2 <_scanf_float+0x2ca>
 8004cc8:	3d03      	subs	r5, #3
 8004cca:	b2ed      	uxtb	r5, r5
 8004ccc:	1b76      	subs	r6, r6, r5
 8004cce:	6823      	ldr	r3, [r4, #0]
 8004cd0:	05da      	lsls	r2, r3, #23
 8004cd2:	d52f      	bpl.n	8004d34 <_scanf_float+0x35c>
 8004cd4:	055b      	lsls	r3, r3, #21
 8004cd6:	d510      	bpl.n	8004cfa <_scanf_float+0x322>
 8004cd8:	455e      	cmp	r6, fp
 8004cda:	f67f aebf 	bls.w	8004a5c <_scanf_float+0x84>
 8004cde:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004ce2:	463a      	mov	r2, r7
 8004ce4:	4640      	mov	r0, r8
 8004ce6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004cea:	4798      	blx	r3
 8004cec:	6923      	ldr	r3, [r4, #16]
 8004cee:	3b01      	subs	r3, #1
 8004cf0:	6123      	str	r3, [r4, #16]
 8004cf2:	e7f1      	b.n	8004cd8 <_scanf_float+0x300>
 8004cf4:	46aa      	mov	sl, r5
 8004cf6:	9602      	str	r6, [sp, #8]
 8004cf8:	e7df      	b.n	8004cba <_scanf_float+0x2e2>
 8004cfa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8004cfe:	6923      	ldr	r3, [r4, #16]
 8004d00:	2965      	cmp	r1, #101	; 0x65
 8004d02:	f103 33ff 	add.w	r3, r3, #4294967295
 8004d06:	f106 35ff 	add.w	r5, r6, #4294967295
 8004d0a:	6123      	str	r3, [r4, #16]
 8004d0c:	d00c      	beq.n	8004d28 <_scanf_float+0x350>
 8004d0e:	2945      	cmp	r1, #69	; 0x45
 8004d10:	d00a      	beq.n	8004d28 <_scanf_float+0x350>
 8004d12:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004d16:	463a      	mov	r2, r7
 8004d18:	4640      	mov	r0, r8
 8004d1a:	4798      	blx	r3
 8004d1c:	6923      	ldr	r3, [r4, #16]
 8004d1e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8004d22:	3b01      	subs	r3, #1
 8004d24:	1eb5      	subs	r5, r6, #2
 8004d26:	6123      	str	r3, [r4, #16]
 8004d28:	463a      	mov	r2, r7
 8004d2a:	4640      	mov	r0, r8
 8004d2c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004d30:	4798      	blx	r3
 8004d32:	462e      	mov	r6, r5
 8004d34:	6825      	ldr	r5, [r4, #0]
 8004d36:	f015 0510 	ands.w	r5, r5, #16
 8004d3a:	d155      	bne.n	8004de8 <_scanf_float+0x410>
 8004d3c:	7035      	strb	r5, [r6, #0]
 8004d3e:	6823      	ldr	r3, [r4, #0]
 8004d40:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004d44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d48:	d11b      	bne.n	8004d82 <_scanf_float+0x3aa>
 8004d4a:	9b01      	ldr	r3, [sp, #4]
 8004d4c:	454b      	cmp	r3, r9
 8004d4e:	eba3 0209 	sub.w	r2, r3, r9
 8004d52:	d123      	bne.n	8004d9c <_scanf_float+0x3c4>
 8004d54:	2200      	movs	r2, #0
 8004d56:	4659      	mov	r1, fp
 8004d58:	4640      	mov	r0, r8
 8004d5a:	f000 fe79 	bl	8005a50 <_strtod_r>
 8004d5e:	6822      	ldr	r2, [r4, #0]
 8004d60:	9b03      	ldr	r3, [sp, #12]
 8004d62:	f012 0f02 	tst.w	r2, #2
 8004d66:	4606      	mov	r6, r0
 8004d68:	460f      	mov	r7, r1
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	d021      	beq.n	8004db2 <_scanf_float+0x3da>
 8004d6e:	1d1a      	adds	r2, r3, #4
 8004d70:	9903      	ldr	r1, [sp, #12]
 8004d72:	600a      	str	r2, [r1, #0]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	e9c3 6700 	strd	r6, r7, [r3]
 8004d7a:	68e3      	ldr	r3, [r4, #12]
 8004d7c:	3301      	adds	r3, #1
 8004d7e:	60e3      	str	r3, [r4, #12]
 8004d80:	e66d      	b.n	8004a5e <_scanf_float+0x86>
 8004d82:	9b04      	ldr	r3, [sp, #16]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d0e5      	beq.n	8004d54 <_scanf_float+0x37c>
 8004d88:	9905      	ldr	r1, [sp, #20]
 8004d8a:	230a      	movs	r3, #10
 8004d8c:	462a      	mov	r2, r5
 8004d8e:	4640      	mov	r0, r8
 8004d90:	3101      	adds	r1, #1
 8004d92:	f000 fedf 	bl	8005b54 <_strtol_r>
 8004d96:	9b04      	ldr	r3, [sp, #16]
 8004d98:	9e05      	ldr	r6, [sp, #20]
 8004d9a:	1ac2      	subs	r2, r0, r3
 8004d9c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8004da0:	429e      	cmp	r6, r3
 8004da2:	bf28      	it	cs
 8004da4:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8004da8:	4630      	mov	r0, r6
 8004daa:	4910      	ldr	r1, [pc, #64]	; (8004dec <_scanf_float+0x414>)
 8004dac:	f000 f826 	bl	8004dfc <siprintf>
 8004db0:	e7d0      	b.n	8004d54 <_scanf_float+0x37c>
 8004db2:	f012 0f04 	tst.w	r2, #4
 8004db6:	f103 0204 	add.w	r2, r3, #4
 8004dba:	d1d9      	bne.n	8004d70 <_scanf_float+0x398>
 8004dbc:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8004dc0:	f8cc 2000 	str.w	r2, [ip]
 8004dc4:	f8d3 8000 	ldr.w	r8, [r3]
 8004dc8:	4602      	mov	r2, r0
 8004dca:	460b      	mov	r3, r1
 8004dcc:	f7fb ff3e 	bl	8000c4c <__aeabi_dcmpun>
 8004dd0:	b128      	cbz	r0, 8004dde <_scanf_float+0x406>
 8004dd2:	4807      	ldr	r0, [pc, #28]	; (8004df0 <_scanf_float+0x418>)
 8004dd4:	f000 f80e 	bl	8004df4 <nanf>
 8004dd8:	f8c8 0000 	str.w	r0, [r8]
 8004ddc:	e7cd      	b.n	8004d7a <_scanf_float+0x3a2>
 8004dde:	4630      	mov	r0, r6
 8004de0:	4639      	mov	r1, r7
 8004de2:	f7fb ff91 	bl	8000d08 <__aeabi_d2f>
 8004de6:	e7f7      	b.n	8004dd8 <_scanf_float+0x400>
 8004de8:	2500      	movs	r5, #0
 8004dea:	e638      	b.n	8004a5e <_scanf_float+0x86>
 8004dec:	08008a3c 	.word	0x08008a3c
 8004df0:	08008e48 	.word	0x08008e48

08004df4 <nanf>:
 8004df4:	4800      	ldr	r0, [pc, #0]	; (8004df8 <nanf+0x4>)
 8004df6:	4770      	bx	lr
 8004df8:	7fc00000 	.word	0x7fc00000

08004dfc <siprintf>:
 8004dfc:	b40e      	push	{r1, r2, r3}
 8004dfe:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004e02:	b500      	push	{lr}
 8004e04:	b09c      	sub	sp, #112	; 0x70
 8004e06:	ab1d      	add	r3, sp, #116	; 0x74
 8004e08:	9002      	str	r0, [sp, #8]
 8004e0a:	9006      	str	r0, [sp, #24]
 8004e0c:	9107      	str	r1, [sp, #28]
 8004e0e:	9104      	str	r1, [sp, #16]
 8004e10:	4808      	ldr	r0, [pc, #32]	; (8004e34 <siprintf+0x38>)
 8004e12:	4909      	ldr	r1, [pc, #36]	; (8004e38 <siprintf+0x3c>)
 8004e14:	f853 2b04 	ldr.w	r2, [r3], #4
 8004e18:	9105      	str	r1, [sp, #20]
 8004e1a:	6800      	ldr	r0, [r0, #0]
 8004e1c:	a902      	add	r1, sp, #8
 8004e1e:	9301      	str	r3, [sp, #4]
 8004e20:	f002 fed8 	bl	8007bd4 <_svfiprintf_r>
 8004e24:	2200      	movs	r2, #0
 8004e26:	9b02      	ldr	r3, [sp, #8]
 8004e28:	701a      	strb	r2, [r3, #0]
 8004e2a:	b01c      	add	sp, #112	; 0x70
 8004e2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004e30:	b003      	add	sp, #12
 8004e32:	4770      	bx	lr
 8004e34:	20000010 	.word	0x20000010
 8004e38:	ffff0208 	.word	0xffff0208

08004e3c <sulp>:
 8004e3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e40:	460f      	mov	r7, r1
 8004e42:	4690      	mov	r8, r2
 8004e44:	f002 fc32 	bl	80076ac <__ulp>
 8004e48:	4604      	mov	r4, r0
 8004e4a:	460d      	mov	r5, r1
 8004e4c:	f1b8 0f00 	cmp.w	r8, #0
 8004e50:	d011      	beq.n	8004e76 <sulp+0x3a>
 8004e52:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8004e56:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	dd0b      	ble.n	8004e76 <sulp+0x3a>
 8004e5e:	2400      	movs	r4, #0
 8004e60:	051b      	lsls	r3, r3, #20
 8004e62:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8004e66:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8004e6a:	4622      	mov	r2, r4
 8004e6c:	462b      	mov	r3, r5
 8004e6e:	f7fb fc53 	bl	8000718 <__aeabi_dmul>
 8004e72:	4604      	mov	r4, r0
 8004e74:	460d      	mov	r5, r1
 8004e76:	4620      	mov	r0, r4
 8004e78:	4629      	mov	r1, r5
 8004e7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08004e80 <_strtod_l>:
 8004e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e84:	469b      	mov	fp, r3
 8004e86:	2300      	movs	r3, #0
 8004e88:	b09f      	sub	sp, #124	; 0x7c
 8004e8a:	931a      	str	r3, [sp, #104]	; 0x68
 8004e8c:	4b9e      	ldr	r3, [pc, #632]	; (8005108 <_strtod_l+0x288>)
 8004e8e:	4682      	mov	sl, r0
 8004e90:	681f      	ldr	r7, [r3, #0]
 8004e92:	460e      	mov	r6, r1
 8004e94:	4638      	mov	r0, r7
 8004e96:	9215      	str	r2, [sp, #84]	; 0x54
 8004e98:	f7fb f9c6 	bl	8000228 <strlen>
 8004e9c:	f04f 0800 	mov.w	r8, #0
 8004ea0:	4604      	mov	r4, r0
 8004ea2:	f04f 0900 	mov.w	r9, #0
 8004ea6:	9619      	str	r6, [sp, #100]	; 0x64
 8004ea8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004eaa:	781a      	ldrb	r2, [r3, #0]
 8004eac:	2a2b      	cmp	r2, #43	; 0x2b
 8004eae:	d04c      	beq.n	8004f4a <_strtod_l+0xca>
 8004eb0:	d83a      	bhi.n	8004f28 <_strtod_l+0xa8>
 8004eb2:	2a0d      	cmp	r2, #13
 8004eb4:	d833      	bhi.n	8004f1e <_strtod_l+0x9e>
 8004eb6:	2a08      	cmp	r2, #8
 8004eb8:	d833      	bhi.n	8004f22 <_strtod_l+0xa2>
 8004eba:	2a00      	cmp	r2, #0
 8004ebc:	d03d      	beq.n	8004f3a <_strtod_l+0xba>
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	930a      	str	r3, [sp, #40]	; 0x28
 8004ec2:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8004ec4:	782b      	ldrb	r3, [r5, #0]
 8004ec6:	2b30      	cmp	r3, #48	; 0x30
 8004ec8:	f040 80aa 	bne.w	8005020 <_strtod_l+0x1a0>
 8004ecc:	786b      	ldrb	r3, [r5, #1]
 8004ece:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8004ed2:	2b58      	cmp	r3, #88	; 0x58
 8004ed4:	d166      	bne.n	8004fa4 <_strtod_l+0x124>
 8004ed6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ed8:	4650      	mov	r0, sl
 8004eda:	9301      	str	r3, [sp, #4]
 8004edc:	ab1a      	add	r3, sp, #104	; 0x68
 8004ede:	9300      	str	r3, [sp, #0]
 8004ee0:	4a8a      	ldr	r2, [pc, #552]	; (800510c <_strtod_l+0x28c>)
 8004ee2:	f8cd b008 	str.w	fp, [sp, #8]
 8004ee6:	ab1b      	add	r3, sp, #108	; 0x6c
 8004ee8:	a919      	add	r1, sp, #100	; 0x64
 8004eea:	f001 fd37 	bl	800695c <__gethex>
 8004eee:	f010 0607 	ands.w	r6, r0, #7
 8004ef2:	4604      	mov	r4, r0
 8004ef4:	d005      	beq.n	8004f02 <_strtod_l+0x82>
 8004ef6:	2e06      	cmp	r6, #6
 8004ef8:	d129      	bne.n	8004f4e <_strtod_l+0xce>
 8004efa:	2300      	movs	r3, #0
 8004efc:	3501      	adds	r5, #1
 8004efe:	9519      	str	r5, [sp, #100]	; 0x64
 8004f00:	930a      	str	r3, [sp, #40]	; 0x28
 8004f02:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	f040 858a 	bne.w	8005a1e <_strtod_l+0xb9e>
 8004f0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f0c:	b1d3      	cbz	r3, 8004f44 <_strtod_l+0xc4>
 8004f0e:	4642      	mov	r2, r8
 8004f10:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8004f14:	4610      	mov	r0, r2
 8004f16:	4619      	mov	r1, r3
 8004f18:	b01f      	add	sp, #124	; 0x7c
 8004f1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f1e:	2a20      	cmp	r2, #32
 8004f20:	d1cd      	bne.n	8004ebe <_strtod_l+0x3e>
 8004f22:	3301      	adds	r3, #1
 8004f24:	9319      	str	r3, [sp, #100]	; 0x64
 8004f26:	e7bf      	b.n	8004ea8 <_strtod_l+0x28>
 8004f28:	2a2d      	cmp	r2, #45	; 0x2d
 8004f2a:	d1c8      	bne.n	8004ebe <_strtod_l+0x3e>
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	920a      	str	r2, [sp, #40]	; 0x28
 8004f30:	1c5a      	adds	r2, r3, #1
 8004f32:	9219      	str	r2, [sp, #100]	; 0x64
 8004f34:	785b      	ldrb	r3, [r3, #1]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d1c3      	bne.n	8004ec2 <_strtod_l+0x42>
 8004f3a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004f3c:	9619      	str	r6, [sp, #100]	; 0x64
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	f040 856b 	bne.w	8005a1a <_strtod_l+0xb9a>
 8004f44:	4642      	mov	r2, r8
 8004f46:	464b      	mov	r3, r9
 8004f48:	e7e4      	b.n	8004f14 <_strtod_l+0x94>
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	e7ef      	b.n	8004f2e <_strtod_l+0xae>
 8004f4e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8004f50:	b13a      	cbz	r2, 8004f62 <_strtod_l+0xe2>
 8004f52:	2135      	movs	r1, #53	; 0x35
 8004f54:	a81c      	add	r0, sp, #112	; 0x70
 8004f56:	f002 fcad 	bl	80078b4 <__copybits>
 8004f5a:	4650      	mov	r0, sl
 8004f5c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004f5e:	f002 f875 	bl	800704c <_Bfree>
 8004f62:	3e01      	subs	r6, #1
 8004f64:	2e04      	cmp	r6, #4
 8004f66:	d806      	bhi.n	8004f76 <_strtod_l+0xf6>
 8004f68:	e8df f006 	tbb	[pc, r6]
 8004f6c:	1714030a 	.word	0x1714030a
 8004f70:	0a          	.byte	0x0a
 8004f71:	00          	.byte	0x00
 8004f72:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8004f76:	0721      	lsls	r1, r4, #28
 8004f78:	d5c3      	bpl.n	8004f02 <_strtod_l+0x82>
 8004f7a:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8004f7e:	e7c0      	b.n	8004f02 <_strtod_l+0x82>
 8004f80:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8004f82:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8004f86:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8004f8a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004f8e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8004f92:	e7f0      	b.n	8004f76 <_strtod_l+0xf6>
 8004f94:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8005110 <_strtod_l+0x290>
 8004f98:	e7ed      	b.n	8004f76 <_strtod_l+0xf6>
 8004f9a:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8004f9e:	f04f 38ff 	mov.w	r8, #4294967295
 8004fa2:	e7e8      	b.n	8004f76 <_strtod_l+0xf6>
 8004fa4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004fa6:	1c5a      	adds	r2, r3, #1
 8004fa8:	9219      	str	r2, [sp, #100]	; 0x64
 8004faa:	785b      	ldrb	r3, [r3, #1]
 8004fac:	2b30      	cmp	r3, #48	; 0x30
 8004fae:	d0f9      	beq.n	8004fa4 <_strtod_l+0x124>
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d0a6      	beq.n	8004f02 <_strtod_l+0x82>
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	9307      	str	r3, [sp, #28]
 8004fb8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004fba:	220a      	movs	r2, #10
 8004fbc:	9308      	str	r3, [sp, #32]
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	469b      	mov	fp, r3
 8004fc2:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8004fc6:	9819      	ldr	r0, [sp, #100]	; 0x64
 8004fc8:	7805      	ldrb	r5, [r0, #0]
 8004fca:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8004fce:	b2d9      	uxtb	r1, r3
 8004fd0:	2909      	cmp	r1, #9
 8004fd2:	d927      	bls.n	8005024 <_strtod_l+0x1a4>
 8004fd4:	4622      	mov	r2, r4
 8004fd6:	4639      	mov	r1, r7
 8004fd8:	f002 ff12 	bl	8007e00 <strncmp>
 8004fdc:	2800      	cmp	r0, #0
 8004fde:	d033      	beq.n	8005048 <_strtod_l+0x1c8>
 8004fe0:	2000      	movs	r0, #0
 8004fe2:	462a      	mov	r2, r5
 8004fe4:	465c      	mov	r4, fp
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	9004      	str	r0, [sp, #16]
 8004fea:	2a65      	cmp	r2, #101	; 0x65
 8004fec:	d001      	beq.n	8004ff2 <_strtod_l+0x172>
 8004fee:	2a45      	cmp	r2, #69	; 0x45
 8004ff0:	d114      	bne.n	800501c <_strtod_l+0x19c>
 8004ff2:	b91c      	cbnz	r4, 8004ffc <_strtod_l+0x17c>
 8004ff4:	9a07      	ldr	r2, [sp, #28]
 8004ff6:	4302      	orrs	r2, r0
 8004ff8:	d09f      	beq.n	8004f3a <_strtod_l+0xba>
 8004ffa:	2400      	movs	r4, #0
 8004ffc:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8004ffe:	1c72      	adds	r2, r6, #1
 8005000:	9219      	str	r2, [sp, #100]	; 0x64
 8005002:	7872      	ldrb	r2, [r6, #1]
 8005004:	2a2b      	cmp	r2, #43	; 0x2b
 8005006:	d079      	beq.n	80050fc <_strtod_l+0x27c>
 8005008:	2a2d      	cmp	r2, #45	; 0x2d
 800500a:	f000 8083 	beq.w	8005114 <_strtod_l+0x294>
 800500e:	2700      	movs	r7, #0
 8005010:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8005014:	2909      	cmp	r1, #9
 8005016:	f240 8083 	bls.w	8005120 <_strtod_l+0x2a0>
 800501a:	9619      	str	r6, [sp, #100]	; 0x64
 800501c:	2500      	movs	r5, #0
 800501e:	e09f      	b.n	8005160 <_strtod_l+0x2e0>
 8005020:	2300      	movs	r3, #0
 8005022:	e7c8      	b.n	8004fb6 <_strtod_l+0x136>
 8005024:	f1bb 0f08 	cmp.w	fp, #8
 8005028:	bfd5      	itete	le
 800502a:	9906      	ldrle	r1, [sp, #24]
 800502c:	9905      	ldrgt	r1, [sp, #20]
 800502e:	fb02 3301 	mlale	r3, r2, r1, r3
 8005032:	fb02 3301 	mlagt	r3, r2, r1, r3
 8005036:	f100 0001 	add.w	r0, r0, #1
 800503a:	bfd4      	ite	le
 800503c:	9306      	strle	r3, [sp, #24]
 800503e:	9305      	strgt	r3, [sp, #20]
 8005040:	f10b 0b01 	add.w	fp, fp, #1
 8005044:	9019      	str	r0, [sp, #100]	; 0x64
 8005046:	e7be      	b.n	8004fc6 <_strtod_l+0x146>
 8005048:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800504a:	191a      	adds	r2, r3, r4
 800504c:	9219      	str	r2, [sp, #100]	; 0x64
 800504e:	5d1a      	ldrb	r2, [r3, r4]
 8005050:	f1bb 0f00 	cmp.w	fp, #0
 8005054:	d036      	beq.n	80050c4 <_strtod_l+0x244>
 8005056:	465c      	mov	r4, fp
 8005058:	9004      	str	r0, [sp, #16]
 800505a:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800505e:	2b09      	cmp	r3, #9
 8005060:	d912      	bls.n	8005088 <_strtod_l+0x208>
 8005062:	2301      	movs	r3, #1
 8005064:	e7c1      	b.n	8004fea <_strtod_l+0x16a>
 8005066:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005068:	3001      	adds	r0, #1
 800506a:	1c5a      	adds	r2, r3, #1
 800506c:	9219      	str	r2, [sp, #100]	; 0x64
 800506e:	785a      	ldrb	r2, [r3, #1]
 8005070:	2a30      	cmp	r2, #48	; 0x30
 8005072:	d0f8      	beq.n	8005066 <_strtod_l+0x1e6>
 8005074:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8005078:	2b08      	cmp	r3, #8
 800507a:	f200 84d5 	bhi.w	8005a28 <_strtod_l+0xba8>
 800507e:	9004      	str	r0, [sp, #16]
 8005080:	2000      	movs	r0, #0
 8005082:	4604      	mov	r4, r0
 8005084:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005086:	9308      	str	r3, [sp, #32]
 8005088:	3a30      	subs	r2, #48	; 0x30
 800508a:	f100 0301 	add.w	r3, r0, #1
 800508e:	d013      	beq.n	80050b8 <_strtod_l+0x238>
 8005090:	9904      	ldr	r1, [sp, #16]
 8005092:	1905      	adds	r5, r0, r4
 8005094:	4419      	add	r1, r3
 8005096:	9104      	str	r1, [sp, #16]
 8005098:	4623      	mov	r3, r4
 800509a:	210a      	movs	r1, #10
 800509c:	42ab      	cmp	r3, r5
 800509e:	d113      	bne.n	80050c8 <_strtod_l+0x248>
 80050a0:	1823      	adds	r3, r4, r0
 80050a2:	2b08      	cmp	r3, #8
 80050a4:	f104 0401 	add.w	r4, r4, #1
 80050a8:	4404      	add	r4, r0
 80050aa:	dc1b      	bgt.n	80050e4 <_strtod_l+0x264>
 80050ac:	230a      	movs	r3, #10
 80050ae:	9906      	ldr	r1, [sp, #24]
 80050b0:	fb03 2301 	mla	r3, r3, r1, r2
 80050b4:	9306      	str	r3, [sp, #24]
 80050b6:	2300      	movs	r3, #0
 80050b8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80050ba:	4618      	mov	r0, r3
 80050bc:	1c51      	adds	r1, r2, #1
 80050be:	9119      	str	r1, [sp, #100]	; 0x64
 80050c0:	7852      	ldrb	r2, [r2, #1]
 80050c2:	e7ca      	b.n	800505a <_strtod_l+0x1da>
 80050c4:	4658      	mov	r0, fp
 80050c6:	e7d3      	b.n	8005070 <_strtod_l+0x1f0>
 80050c8:	2b08      	cmp	r3, #8
 80050ca:	dc04      	bgt.n	80050d6 <_strtod_l+0x256>
 80050cc:	9f06      	ldr	r7, [sp, #24]
 80050ce:	434f      	muls	r7, r1
 80050d0:	9706      	str	r7, [sp, #24]
 80050d2:	3301      	adds	r3, #1
 80050d4:	e7e2      	b.n	800509c <_strtod_l+0x21c>
 80050d6:	1c5f      	adds	r7, r3, #1
 80050d8:	2f10      	cmp	r7, #16
 80050da:	bfde      	ittt	le
 80050dc:	9f05      	ldrle	r7, [sp, #20]
 80050de:	434f      	mulle	r7, r1
 80050e0:	9705      	strle	r7, [sp, #20]
 80050e2:	e7f6      	b.n	80050d2 <_strtod_l+0x252>
 80050e4:	2c10      	cmp	r4, #16
 80050e6:	bfdf      	itttt	le
 80050e8:	230a      	movle	r3, #10
 80050ea:	9905      	ldrle	r1, [sp, #20]
 80050ec:	fb03 2301 	mlale	r3, r3, r1, r2
 80050f0:	9305      	strle	r3, [sp, #20]
 80050f2:	e7e0      	b.n	80050b6 <_strtod_l+0x236>
 80050f4:	2300      	movs	r3, #0
 80050f6:	9304      	str	r3, [sp, #16]
 80050f8:	2301      	movs	r3, #1
 80050fa:	e77b      	b.n	8004ff4 <_strtod_l+0x174>
 80050fc:	2700      	movs	r7, #0
 80050fe:	1cb2      	adds	r2, r6, #2
 8005100:	9219      	str	r2, [sp, #100]	; 0x64
 8005102:	78b2      	ldrb	r2, [r6, #2]
 8005104:	e784      	b.n	8005010 <_strtod_l+0x190>
 8005106:	bf00      	nop
 8005108:	08008c90 	.word	0x08008c90
 800510c:	08008a44 	.word	0x08008a44
 8005110:	7ff00000 	.word	0x7ff00000
 8005114:	2701      	movs	r7, #1
 8005116:	e7f2      	b.n	80050fe <_strtod_l+0x27e>
 8005118:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800511a:	1c51      	adds	r1, r2, #1
 800511c:	9119      	str	r1, [sp, #100]	; 0x64
 800511e:	7852      	ldrb	r2, [r2, #1]
 8005120:	2a30      	cmp	r2, #48	; 0x30
 8005122:	d0f9      	beq.n	8005118 <_strtod_l+0x298>
 8005124:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8005128:	2908      	cmp	r1, #8
 800512a:	f63f af77 	bhi.w	800501c <_strtod_l+0x19c>
 800512e:	f04f 0e0a 	mov.w	lr, #10
 8005132:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8005136:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005138:	9209      	str	r2, [sp, #36]	; 0x24
 800513a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800513c:	1c51      	adds	r1, r2, #1
 800513e:	9119      	str	r1, [sp, #100]	; 0x64
 8005140:	7852      	ldrb	r2, [r2, #1]
 8005142:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8005146:	2d09      	cmp	r5, #9
 8005148:	d935      	bls.n	80051b6 <_strtod_l+0x336>
 800514a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800514c:	1b49      	subs	r1, r1, r5
 800514e:	2908      	cmp	r1, #8
 8005150:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8005154:	dc02      	bgt.n	800515c <_strtod_l+0x2dc>
 8005156:	4565      	cmp	r5, ip
 8005158:	bfa8      	it	ge
 800515a:	4665      	movge	r5, ip
 800515c:	b107      	cbz	r7, 8005160 <_strtod_l+0x2e0>
 800515e:	426d      	negs	r5, r5
 8005160:	2c00      	cmp	r4, #0
 8005162:	d14c      	bne.n	80051fe <_strtod_l+0x37e>
 8005164:	9907      	ldr	r1, [sp, #28]
 8005166:	4301      	orrs	r1, r0
 8005168:	f47f aecb 	bne.w	8004f02 <_strtod_l+0x82>
 800516c:	2b00      	cmp	r3, #0
 800516e:	f47f aee4 	bne.w	8004f3a <_strtod_l+0xba>
 8005172:	2a69      	cmp	r2, #105	; 0x69
 8005174:	d026      	beq.n	80051c4 <_strtod_l+0x344>
 8005176:	dc23      	bgt.n	80051c0 <_strtod_l+0x340>
 8005178:	2a49      	cmp	r2, #73	; 0x49
 800517a:	d023      	beq.n	80051c4 <_strtod_l+0x344>
 800517c:	2a4e      	cmp	r2, #78	; 0x4e
 800517e:	f47f aedc 	bne.w	8004f3a <_strtod_l+0xba>
 8005182:	499d      	ldr	r1, [pc, #628]	; (80053f8 <_strtod_l+0x578>)
 8005184:	a819      	add	r0, sp, #100	; 0x64
 8005186:	f001 fe37 	bl	8006df8 <__match>
 800518a:	2800      	cmp	r0, #0
 800518c:	f43f aed5 	beq.w	8004f3a <_strtod_l+0xba>
 8005190:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005192:	781b      	ldrb	r3, [r3, #0]
 8005194:	2b28      	cmp	r3, #40	; 0x28
 8005196:	d12c      	bne.n	80051f2 <_strtod_l+0x372>
 8005198:	4998      	ldr	r1, [pc, #608]	; (80053fc <_strtod_l+0x57c>)
 800519a:	aa1c      	add	r2, sp, #112	; 0x70
 800519c:	a819      	add	r0, sp, #100	; 0x64
 800519e:	f001 fe3f 	bl	8006e20 <__hexnan>
 80051a2:	2805      	cmp	r0, #5
 80051a4:	d125      	bne.n	80051f2 <_strtod_l+0x372>
 80051a6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80051a8:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 80051ac:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80051b0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80051b4:	e6a5      	b.n	8004f02 <_strtod_l+0x82>
 80051b6:	fb0e 2c0c 	mla	ip, lr, ip, r2
 80051ba:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 80051be:	e7bc      	b.n	800513a <_strtod_l+0x2ba>
 80051c0:	2a6e      	cmp	r2, #110	; 0x6e
 80051c2:	e7dc      	b.n	800517e <_strtod_l+0x2fe>
 80051c4:	498e      	ldr	r1, [pc, #568]	; (8005400 <_strtod_l+0x580>)
 80051c6:	a819      	add	r0, sp, #100	; 0x64
 80051c8:	f001 fe16 	bl	8006df8 <__match>
 80051cc:	2800      	cmp	r0, #0
 80051ce:	f43f aeb4 	beq.w	8004f3a <_strtod_l+0xba>
 80051d2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80051d4:	498b      	ldr	r1, [pc, #556]	; (8005404 <_strtod_l+0x584>)
 80051d6:	3b01      	subs	r3, #1
 80051d8:	a819      	add	r0, sp, #100	; 0x64
 80051da:	9319      	str	r3, [sp, #100]	; 0x64
 80051dc:	f001 fe0c 	bl	8006df8 <__match>
 80051e0:	b910      	cbnz	r0, 80051e8 <_strtod_l+0x368>
 80051e2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80051e4:	3301      	adds	r3, #1
 80051e6:	9319      	str	r3, [sp, #100]	; 0x64
 80051e8:	f04f 0800 	mov.w	r8, #0
 80051ec:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8005408 <_strtod_l+0x588>
 80051f0:	e687      	b.n	8004f02 <_strtod_l+0x82>
 80051f2:	4886      	ldr	r0, [pc, #536]	; (800540c <_strtod_l+0x58c>)
 80051f4:	f002 fdee 	bl	8007dd4 <nan>
 80051f8:	4680      	mov	r8, r0
 80051fa:	4689      	mov	r9, r1
 80051fc:	e681      	b.n	8004f02 <_strtod_l+0x82>
 80051fe:	9b04      	ldr	r3, [sp, #16]
 8005200:	f1bb 0f00 	cmp.w	fp, #0
 8005204:	bf08      	it	eq
 8005206:	46a3      	moveq	fp, r4
 8005208:	1aeb      	subs	r3, r5, r3
 800520a:	2c10      	cmp	r4, #16
 800520c:	9806      	ldr	r0, [sp, #24]
 800520e:	4626      	mov	r6, r4
 8005210:	9307      	str	r3, [sp, #28]
 8005212:	bfa8      	it	ge
 8005214:	2610      	movge	r6, #16
 8005216:	f7fb fa05 	bl	8000624 <__aeabi_ui2d>
 800521a:	2c09      	cmp	r4, #9
 800521c:	4680      	mov	r8, r0
 800521e:	4689      	mov	r9, r1
 8005220:	dd13      	ble.n	800524a <_strtod_l+0x3ca>
 8005222:	4b7b      	ldr	r3, [pc, #492]	; (8005410 <_strtod_l+0x590>)
 8005224:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005228:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800522c:	f7fb fa74 	bl	8000718 <__aeabi_dmul>
 8005230:	4680      	mov	r8, r0
 8005232:	9805      	ldr	r0, [sp, #20]
 8005234:	4689      	mov	r9, r1
 8005236:	f7fb f9f5 	bl	8000624 <__aeabi_ui2d>
 800523a:	4602      	mov	r2, r0
 800523c:	460b      	mov	r3, r1
 800523e:	4640      	mov	r0, r8
 8005240:	4649      	mov	r1, r9
 8005242:	f7fb f8b3 	bl	80003ac <__adddf3>
 8005246:	4680      	mov	r8, r0
 8005248:	4689      	mov	r9, r1
 800524a:	2c0f      	cmp	r4, #15
 800524c:	dc36      	bgt.n	80052bc <_strtod_l+0x43c>
 800524e:	9b07      	ldr	r3, [sp, #28]
 8005250:	2b00      	cmp	r3, #0
 8005252:	f43f ae56 	beq.w	8004f02 <_strtod_l+0x82>
 8005256:	dd22      	ble.n	800529e <_strtod_l+0x41e>
 8005258:	2b16      	cmp	r3, #22
 800525a:	dc09      	bgt.n	8005270 <_strtod_l+0x3f0>
 800525c:	496c      	ldr	r1, [pc, #432]	; (8005410 <_strtod_l+0x590>)
 800525e:	4642      	mov	r2, r8
 8005260:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005264:	464b      	mov	r3, r9
 8005266:	e9d1 0100 	ldrd	r0, r1, [r1]
 800526a:	f7fb fa55 	bl	8000718 <__aeabi_dmul>
 800526e:	e7c3      	b.n	80051f8 <_strtod_l+0x378>
 8005270:	9a07      	ldr	r2, [sp, #28]
 8005272:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8005276:	4293      	cmp	r3, r2
 8005278:	db20      	blt.n	80052bc <_strtod_l+0x43c>
 800527a:	4d65      	ldr	r5, [pc, #404]	; (8005410 <_strtod_l+0x590>)
 800527c:	f1c4 040f 	rsb	r4, r4, #15
 8005280:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8005284:	4642      	mov	r2, r8
 8005286:	e9d1 0100 	ldrd	r0, r1, [r1]
 800528a:	464b      	mov	r3, r9
 800528c:	f7fb fa44 	bl	8000718 <__aeabi_dmul>
 8005290:	9b07      	ldr	r3, [sp, #28]
 8005292:	1b1c      	subs	r4, r3, r4
 8005294:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8005298:	e9d5 2300 	ldrd	r2, r3, [r5]
 800529c:	e7e5      	b.n	800526a <_strtod_l+0x3ea>
 800529e:	9b07      	ldr	r3, [sp, #28]
 80052a0:	3316      	adds	r3, #22
 80052a2:	db0b      	blt.n	80052bc <_strtod_l+0x43c>
 80052a4:	9b04      	ldr	r3, [sp, #16]
 80052a6:	4640      	mov	r0, r8
 80052a8:	1b5d      	subs	r5, r3, r5
 80052aa:	4b59      	ldr	r3, [pc, #356]	; (8005410 <_strtod_l+0x590>)
 80052ac:	4649      	mov	r1, r9
 80052ae:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80052b2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80052b6:	f7fb fb59 	bl	800096c <__aeabi_ddiv>
 80052ba:	e79d      	b.n	80051f8 <_strtod_l+0x378>
 80052bc:	9b07      	ldr	r3, [sp, #28]
 80052be:	1ba6      	subs	r6, r4, r6
 80052c0:	441e      	add	r6, r3
 80052c2:	2e00      	cmp	r6, #0
 80052c4:	dd74      	ble.n	80053b0 <_strtod_l+0x530>
 80052c6:	f016 030f 	ands.w	r3, r6, #15
 80052ca:	d00a      	beq.n	80052e2 <_strtod_l+0x462>
 80052cc:	4950      	ldr	r1, [pc, #320]	; (8005410 <_strtod_l+0x590>)
 80052ce:	4642      	mov	r2, r8
 80052d0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80052d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80052d8:	464b      	mov	r3, r9
 80052da:	f7fb fa1d 	bl	8000718 <__aeabi_dmul>
 80052de:	4680      	mov	r8, r0
 80052e0:	4689      	mov	r9, r1
 80052e2:	f036 060f 	bics.w	r6, r6, #15
 80052e6:	d052      	beq.n	800538e <_strtod_l+0x50e>
 80052e8:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 80052ec:	dd27      	ble.n	800533e <_strtod_l+0x4be>
 80052ee:	f04f 0b00 	mov.w	fp, #0
 80052f2:	f8cd b010 	str.w	fp, [sp, #16]
 80052f6:	f8cd b020 	str.w	fp, [sp, #32]
 80052fa:	f8cd b018 	str.w	fp, [sp, #24]
 80052fe:	2322      	movs	r3, #34	; 0x22
 8005300:	f04f 0800 	mov.w	r8, #0
 8005304:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8005408 <_strtod_l+0x588>
 8005308:	f8ca 3000 	str.w	r3, [sl]
 800530c:	9b08      	ldr	r3, [sp, #32]
 800530e:	2b00      	cmp	r3, #0
 8005310:	f43f adf7 	beq.w	8004f02 <_strtod_l+0x82>
 8005314:	4650      	mov	r0, sl
 8005316:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005318:	f001 fe98 	bl	800704c <_Bfree>
 800531c:	4650      	mov	r0, sl
 800531e:	9906      	ldr	r1, [sp, #24]
 8005320:	f001 fe94 	bl	800704c <_Bfree>
 8005324:	4650      	mov	r0, sl
 8005326:	9904      	ldr	r1, [sp, #16]
 8005328:	f001 fe90 	bl	800704c <_Bfree>
 800532c:	4650      	mov	r0, sl
 800532e:	9908      	ldr	r1, [sp, #32]
 8005330:	f001 fe8c 	bl	800704c <_Bfree>
 8005334:	4659      	mov	r1, fp
 8005336:	4650      	mov	r0, sl
 8005338:	f001 fe88 	bl	800704c <_Bfree>
 800533c:	e5e1      	b.n	8004f02 <_strtod_l+0x82>
 800533e:	4b35      	ldr	r3, [pc, #212]	; (8005414 <_strtod_l+0x594>)
 8005340:	4640      	mov	r0, r8
 8005342:	9305      	str	r3, [sp, #20]
 8005344:	2300      	movs	r3, #0
 8005346:	4649      	mov	r1, r9
 8005348:	461f      	mov	r7, r3
 800534a:	1136      	asrs	r6, r6, #4
 800534c:	2e01      	cmp	r6, #1
 800534e:	dc21      	bgt.n	8005394 <_strtod_l+0x514>
 8005350:	b10b      	cbz	r3, 8005356 <_strtod_l+0x4d6>
 8005352:	4680      	mov	r8, r0
 8005354:	4689      	mov	r9, r1
 8005356:	4b2f      	ldr	r3, [pc, #188]	; (8005414 <_strtod_l+0x594>)
 8005358:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800535c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8005360:	4642      	mov	r2, r8
 8005362:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005366:	464b      	mov	r3, r9
 8005368:	f7fb f9d6 	bl	8000718 <__aeabi_dmul>
 800536c:	4b26      	ldr	r3, [pc, #152]	; (8005408 <_strtod_l+0x588>)
 800536e:	460a      	mov	r2, r1
 8005370:	400b      	ands	r3, r1
 8005372:	4929      	ldr	r1, [pc, #164]	; (8005418 <_strtod_l+0x598>)
 8005374:	4680      	mov	r8, r0
 8005376:	428b      	cmp	r3, r1
 8005378:	d8b9      	bhi.n	80052ee <_strtod_l+0x46e>
 800537a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800537e:	428b      	cmp	r3, r1
 8005380:	bf86      	itte	hi
 8005382:	f04f 38ff 	movhi.w	r8, #4294967295
 8005386:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 800541c <_strtod_l+0x59c>
 800538a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800538e:	2300      	movs	r3, #0
 8005390:	9305      	str	r3, [sp, #20]
 8005392:	e07f      	b.n	8005494 <_strtod_l+0x614>
 8005394:	07f2      	lsls	r2, r6, #31
 8005396:	d505      	bpl.n	80053a4 <_strtod_l+0x524>
 8005398:	9b05      	ldr	r3, [sp, #20]
 800539a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800539e:	f7fb f9bb 	bl	8000718 <__aeabi_dmul>
 80053a2:	2301      	movs	r3, #1
 80053a4:	9a05      	ldr	r2, [sp, #20]
 80053a6:	3701      	adds	r7, #1
 80053a8:	3208      	adds	r2, #8
 80053aa:	1076      	asrs	r6, r6, #1
 80053ac:	9205      	str	r2, [sp, #20]
 80053ae:	e7cd      	b.n	800534c <_strtod_l+0x4cc>
 80053b0:	d0ed      	beq.n	800538e <_strtod_l+0x50e>
 80053b2:	4276      	negs	r6, r6
 80053b4:	f016 020f 	ands.w	r2, r6, #15
 80053b8:	d00a      	beq.n	80053d0 <_strtod_l+0x550>
 80053ba:	4b15      	ldr	r3, [pc, #84]	; (8005410 <_strtod_l+0x590>)
 80053bc:	4640      	mov	r0, r8
 80053be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80053c2:	4649      	mov	r1, r9
 80053c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053c8:	f7fb fad0 	bl	800096c <__aeabi_ddiv>
 80053cc:	4680      	mov	r8, r0
 80053ce:	4689      	mov	r9, r1
 80053d0:	1136      	asrs	r6, r6, #4
 80053d2:	d0dc      	beq.n	800538e <_strtod_l+0x50e>
 80053d4:	2e1f      	cmp	r6, #31
 80053d6:	dd23      	ble.n	8005420 <_strtod_l+0x5a0>
 80053d8:	f04f 0b00 	mov.w	fp, #0
 80053dc:	f8cd b010 	str.w	fp, [sp, #16]
 80053e0:	f8cd b020 	str.w	fp, [sp, #32]
 80053e4:	f8cd b018 	str.w	fp, [sp, #24]
 80053e8:	2322      	movs	r3, #34	; 0x22
 80053ea:	f04f 0800 	mov.w	r8, #0
 80053ee:	f04f 0900 	mov.w	r9, #0
 80053f2:	f8ca 3000 	str.w	r3, [sl]
 80053f6:	e789      	b.n	800530c <_strtod_l+0x48c>
 80053f8:	08008a15 	.word	0x08008a15
 80053fc:	08008a58 	.word	0x08008a58
 8005400:	08008a0d 	.word	0x08008a0d
 8005404:	08008b9c 	.word	0x08008b9c
 8005408:	7ff00000 	.word	0x7ff00000
 800540c:	08008e48 	.word	0x08008e48
 8005410:	08008d28 	.word	0x08008d28
 8005414:	08008d00 	.word	0x08008d00
 8005418:	7ca00000 	.word	0x7ca00000
 800541c:	7fefffff 	.word	0x7fefffff
 8005420:	f016 0310 	ands.w	r3, r6, #16
 8005424:	bf18      	it	ne
 8005426:	236a      	movne	r3, #106	; 0x6a
 8005428:	4640      	mov	r0, r8
 800542a:	9305      	str	r3, [sp, #20]
 800542c:	4649      	mov	r1, r9
 800542e:	2300      	movs	r3, #0
 8005430:	4fb0      	ldr	r7, [pc, #704]	; (80056f4 <_strtod_l+0x874>)
 8005432:	07f2      	lsls	r2, r6, #31
 8005434:	d504      	bpl.n	8005440 <_strtod_l+0x5c0>
 8005436:	e9d7 2300 	ldrd	r2, r3, [r7]
 800543a:	f7fb f96d 	bl	8000718 <__aeabi_dmul>
 800543e:	2301      	movs	r3, #1
 8005440:	1076      	asrs	r6, r6, #1
 8005442:	f107 0708 	add.w	r7, r7, #8
 8005446:	d1f4      	bne.n	8005432 <_strtod_l+0x5b2>
 8005448:	b10b      	cbz	r3, 800544e <_strtod_l+0x5ce>
 800544a:	4680      	mov	r8, r0
 800544c:	4689      	mov	r9, r1
 800544e:	9b05      	ldr	r3, [sp, #20]
 8005450:	b1c3      	cbz	r3, 8005484 <_strtod_l+0x604>
 8005452:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8005456:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800545a:	2b00      	cmp	r3, #0
 800545c:	4649      	mov	r1, r9
 800545e:	dd11      	ble.n	8005484 <_strtod_l+0x604>
 8005460:	2b1f      	cmp	r3, #31
 8005462:	f340 8127 	ble.w	80056b4 <_strtod_l+0x834>
 8005466:	2b34      	cmp	r3, #52	; 0x34
 8005468:	bfd8      	it	le
 800546a:	f04f 33ff 	movle.w	r3, #4294967295
 800546e:	f04f 0800 	mov.w	r8, #0
 8005472:	bfcf      	iteee	gt
 8005474:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8005478:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800547c:	fa03 f202 	lslle.w	r2, r3, r2
 8005480:	ea02 0901 	andle.w	r9, r2, r1
 8005484:	2200      	movs	r2, #0
 8005486:	2300      	movs	r3, #0
 8005488:	4640      	mov	r0, r8
 800548a:	4649      	mov	r1, r9
 800548c:	f7fb fbac 	bl	8000be8 <__aeabi_dcmpeq>
 8005490:	2800      	cmp	r0, #0
 8005492:	d1a1      	bne.n	80053d8 <_strtod_l+0x558>
 8005494:	9b06      	ldr	r3, [sp, #24]
 8005496:	465a      	mov	r2, fp
 8005498:	9300      	str	r3, [sp, #0]
 800549a:	4650      	mov	r0, sl
 800549c:	4623      	mov	r3, r4
 800549e:	9908      	ldr	r1, [sp, #32]
 80054a0:	f001 fe3c 	bl	800711c <__s2b>
 80054a4:	9008      	str	r0, [sp, #32]
 80054a6:	2800      	cmp	r0, #0
 80054a8:	f43f af21 	beq.w	80052ee <_strtod_l+0x46e>
 80054ac:	9b04      	ldr	r3, [sp, #16]
 80054ae:	f04f 0b00 	mov.w	fp, #0
 80054b2:	1b5d      	subs	r5, r3, r5
 80054b4:	9b07      	ldr	r3, [sp, #28]
 80054b6:	f8cd b010 	str.w	fp, [sp, #16]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	bfb4      	ite	lt
 80054be:	462b      	movlt	r3, r5
 80054c0:	2300      	movge	r3, #0
 80054c2:	930e      	str	r3, [sp, #56]	; 0x38
 80054c4:	9b07      	ldr	r3, [sp, #28]
 80054c6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80054ca:	9314      	str	r3, [sp, #80]	; 0x50
 80054cc:	9b08      	ldr	r3, [sp, #32]
 80054ce:	4650      	mov	r0, sl
 80054d0:	6859      	ldr	r1, [r3, #4]
 80054d2:	f001 fd7b 	bl	8006fcc <_Balloc>
 80054d6:	9006      	str	r0, [sp, #24]
 80054d8:	2800      	cmp	r0, #0
 80054da:	f43f af10 	beq.w	80052fe <_strtod_l+0x47e>
 80054de:	9b08      	ldr	r3, [sp, #32]
 80054e0:	300c      	adds	r0, #12
 80054e2:	691a      	ldr	r2, [r3, #16]
 80054e4:	f103 010c 	add.w	r1, r3, #12
 80054e8:	3202      	adds	r2, #2
 80054ea:	0092      	lsls	r2, r2, #2
 80054ec:	f001 fd60 	bl	8006fb0 <memcpy>
 80054f0:	ab1c      	add	r3, sp, #112	; 0x70
 80054f2:	9301      	str	r3, [sp, #4]
 80054f4:	ab1b      	add	r3, sp, #108	; 0x6c
 80054f6:	9300      	str	r3, [sp, #0]
 80054f8:	4642      	mov	r2, r8
 80054fa:	464b      	mov	r3, r9
 80054fc:	4650      	mov	r0, sl
 80054fe:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8005502:	f002 f94d 	bl	80077a0 <__d2b>
 8005506:	901a      	str	r0, [sp, #104]	; 0x68
 8005508:	2800      	cmp	r0, #0
 800550a:	f43f aef8 	beq.w	80052fe <_strtod_l+0x47e>
 800550e:	2101      	movs	r1, #1
 8005510:	4650      	mov	r0, sl
 8005512:	f001 fe9b 	bl	800724c <__i2b>
 8005516:	4603      	mov	r3, r0
 8005518:	9004      	str	r0, [sp, #16]
 800551a:	2800      	cmp	r0, #0
 800551c:	f43f aeef 	beq.w	80052fe <_strtod_l+0x47e>
 8005520:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8005522:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8005524:	2d00      	cmp	r5, #0
 8005526:	bfab      	itete	ge
 8005528:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800552a:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 800552c:	18ee      	addge	r6, r5, r3
 800552e:	1b5c      	sublt	r4, r3, r5
 8005530:	9b05      	ldr	r3, [sp, #20]
 8005532:	bfa8      	it	ge
 8005534:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 8005536:	eba5 0503 	sub.w	r5, r5, r3
 800553a:	4415      	add	r5, r2
 800553c:	4b6e      	ldr	r3, [pc, #440]	; (80056f8 <_strtod_l+0x878>)
 800553e:	f105 35ff 	add.w	r5, r5, #4294967295
 8005542:	bfb8      	it	lt
 8005544:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8005546:	429d      	cmp	r5, r3
 8005548:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800554c:	f280 80c4 	bge.w	80056d8 <_strtod_l+0x858>
 8005550:	1b5b      	subs	r3, r3, r5
 8005552:	2b1f      	cmp	r3, #31
 8005554:	f04f 0701 	mov.w	r7, #1
 8005558:	eba2 0203 	sub.w	r2, r2, r3
 800555c:	f300 80b1 	bgt.w	80056c2 <_strtod_l+0x842>
 8005560:	2500      	movs	r5, #0
 8005562:	fa07 f303 	lsl.w	r3, r7, r3
 8005566:	930f      	str	r3, [sp, #60]	; 0x3c
 8005568:	18b7      	adds	r7, r6, r2
 800556a:	9b05      	ldr	r3, [sp, #20]
 800556c:	42be      	cmp	r6, r7
 800556e:	4414      	add	r4, r2
 8005570:	441c      	add	r4, r3
 8005572:	4633      	mov	r3, r6
 8005574:	bfa8      	it	ge
 8005576:	463b      	movge	r3, r7
 8005578:	42a3      	cmp	r3, r4
 800557a:	bfa8      	it	ge
 800557c:	4623      	movge	r3, r4
 800557e:	2b00      	cmp	r3, #0
 8005580:	bfc2      	ittt	gt
 8005582:	1aff      	subgt	r7, r7, r3
 8005584:	1ae4      	subgt	r4, r4, r3
 8005586:	1af6      	subgt	r6, r6, r3
 8005588:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800558a:	2b00      	cmp	r3, #0
 800558c:	dd17      	ble.n	80055be <_strtod_l+0x73e>
 800558e:	461a      	mov	r2, r3
 8005590:	4650      	mov	r0, sl
 8005592:	9904      	ldr	r1, [sp, #16]
 8005594:	f001 ff18 	bl	80073c8 <__pow5mult>
 8005598:	9004      	str	r0, [sp, #16]
 800559a:	2800      	cmp	r0, #0
 800559c:	f43f aeaf 	beq.w	80052fe <_strtod_l+0x47e>
 80055a0:	4601      	mov	r1, r0
 80055a2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80055a4:	4650      	mov	r0, sl
 80055a6:	f001 fe67 	bl	8007278 <__multiply>
 80055aa:	9009      	str	r0, [sp, #36]	; 0x24
 80055ac:	2800      	cmp	r0, #0
 80055ae:	f43f aea6 	beq.w	80052fe <_strtod_l+0x47e>
 80055b2:	4650      	mov	r0, sl
 80055b4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80055b6:	f001 fd49 	bl	800704c <_Bfree>
 80055ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055bc:	931a      	str	r3, [sp, #104]	; 0x68
 80055be:	2f00      	cmp	r7, #0
 80055c0:	f300 808e 	bgt.w	80056e0 <_strtod_l+0x860>
 80055c4:	9b07      	ldr	r3, [sp, #28]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	dd08      	ble.n	80055dc <_strtod_l+0x75c>
 80055ca:	4650      	mov	r0, sl
 80055cc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80055ce:	9906      	ldr	r1, [sp, #24]
 80055d0:	f001 fefa 	bl	80073c8 <__pow5mult>
 80055d4:	9006      	str	r0, [sp, #24]
 80055d6:	2800      	cmp	r0, #0
 80055d8:	f43f ae91 	beq.w	80052fe <_strtod_l+0x47e>
 80055dc:	2c00      	cmp	r4, #0
 80055de:	dd08      	ble.n	80055f2 <_strtod_l+0x772>
 80055e0:	4622      	mov	r2, r4
 80055e2:	4650      	mov	r0, sl
 80055e4:	9906      	ldr	r1, [sp, #24]
 80055e6:	f001 ff49 	bl	800747c <__lshift>
 80055ea:	9006      	str	r0, [sp, #24]
 80055ec:	2800      	cmp	r0, #0
 80055ee:	f43f ae86 	beq.w	80052fe <_strtod_l+0x47e>
 80055f2:	2e00      	cmp	r6, #0
 80055f4:	dd08      	ble.n	8005608 <_strtod_l+0x788>
 80055f6:	4632      	mov	r2, r6
 80055f8:	4650      	mov	r0, sl
 80055fa:	9904      	ldr	r1, [sp, #16]
 80055fc:	f001 ff3e 	bl	800747c <__lshift>
 8005600:	9004      	str	r0, [sp, #16]
 8005602:	2800      	cmp	r0, #0
 8005604:	f43f ae7b 	beq.w	80052fe <_strtod_l+0x47e>
 8005608:	4650      	mov	r0, sl
 800560a:	9a06      	ldr	r2, [sp, #24]
 800560c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800560e:	f001 ffc1 	bl	8007594 <__mdiff>
 8005612:	4683      	mov	fp, r0
 8005614:	2800      	cmp	r0, #0
 8005616:	f43f ae72 	beq.w	80052fe <_strtod_l+0x47e>
 800561a:	2400      	movs	r4, #0
 800561c:	68c3      	ldr	r3, [r0, #12]
 800561e:	9904      	ldr	r1, [sp, #16]
 8005620:	60c4      	str	r4, [r0, #12]
 8005622:	930b      	str	r3, [sp, #44]	; 0x2c
 8005624:	f001 ff9a 	bl	800755c <__mcmp>
 8005628:	42a0      	cmp	r0, r4
 800562a:	da6b      	bge.n	8005704 <_strtod_l+0x884>
 800562c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800562e:	ea53 0308 	orrs.w	r3, r3, r8
 8005632:	f040 8091 	bne.w	8005758 <_strtod_l+0x8d8>
 8005636:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800563a:	2b00      	cmp	r3, #0
 800563c:	f040 808c 	bne.w	8005758 <_strtod_l+0x8d8>
 8005640:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005644:	0d1b      	lsrs	r3, r3, #20
 8005646:	051b      	lsls	r3, r3, #20
 8005648:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800564c:	f240 8084 	bls.w	8005758 <_strtod_l+0x8d8>
 8005650:	f8db 3014 	ldr.w	r3, [fp, #20]
 8005654:	b91b      	cbnz	r3, 800565e <_strtod_l+0x7de>
 8005656:	f8db 3010 	ldr.w	r3, [fp, #16]
 800565a:	2b01      	cmp	r3, #1
 800565c:	dd7c      	ble.n	8005758 <_strtod_l+0x8d8>
 800565e:	4659      	mov	r1, fp
 8005660:	2201      	movs	r2, #1
 8005662:	4650      	mov	r0, sl
 8005664:	f001 ff0a 	bl	800747c <__lshift>
 8005668:	9904      	ldr	r1, [sp, #16]
 800566a:	4683      	mov	fp, r0
 800566c:	f001 ff76 	bl	800755c <__mcmp>
 8005670:	2800      	cmp	r0, #0
 8005672:	dd71      	ble.n	8005758 <_strtod_l+0x8d8>
 8005674:	9905      	ldr	r1, [sp, #20]
 8005676:	464b      	mov	r3, r9
 8005678:	4a20      	ldr	r2, [pc, #128]	; (80056fc <_strtod_l+0x87c>)
 800567a:	2900      	cmp	r1, #0
 800567c:	f000 808c 	beq.w	8005798 <_strtod_l+0x918>
 8005680:	ea02 0109 	and.w	r1, r2, r9
 8005684:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8005688:	f300 8086 	bgt.w	8005798 <_strtod_l+0x918>
 800568c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8005690:	f77f aeaa 	ble.w	80053e8 <_strtod_l+0x568>
 8005694:	4640      	mov	r0, r8
 8005696:	4649      	mov	r1, r9
 8005698:	4b19      	ldr	r3, [pc, #100]	; (8005700 <_strtod_l+0x880>)
 800569a:	2200      	movs	r2, #0
 800569c:	f7fb f83c 	bl	8000718 <__aeabi_dmul>
 80056a0:	460b      	mov	r3, r1
 80056a2:	4303      	orrs	r3, r0
 80056a4:	bf08      	it	eq
 80056a6:	2322      	moveq	r3, #34	; 0x22
 80056a8:	4680      	mov	r8, r0
 80056aa:	4689      	mov	r9, r1
 80056ac:	bf08      	it	eq
 80056ae:	f8ca 3000 	streq.w	r3, [sl]
 80056b2:	e62f      	b.n	8005314 <_strtod_l+0x494>
 80056b4:	f04f 32ff 	mov.w	r2, #4294967295
 80056b8:	fa02 f303 	lsl.w	r3, r2, r3
 80056bc:	ea03 0808 	and.w	r8, r3, r8
 80056c0:	e6e0      	b.n	8005484 <_strtod_l+0x604>
 80056c2:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 80056c6:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 80056ca:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 80056ce:	35e2      	adds	r5, #226	; 0xe2
 80056d0:	fa07 f505 	lsl.w	r5, r7, r5
 80056d4:	970f      	str	r7, [sp, #60]	; 0x3c
 80056d6:	e747      	b.n	8005568 <_strtod_l+0x6e8>
 80056d8:	2301      	movs	r3, #1
 80056da:	2500      	movs	r5, #0
 80056dc:	930f      	str	r3, [sp, #60]	; 0x3c
 80056de:	e743      	b.n	8005568 <_strtod_l+0x6e8>
 80056e0:	463a      	mov	r2, r7
 80056e2:	4650      	mov	r0, sl
 80056e4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80056e6:	f001 fec9 	bl	800747c <__lshift>
 80056ea:	901a      	str	r0, [sp, #104]	; 0x68
 80056ec:	2800      	cmp	r0, #0
 80056ee:	f47f af69 	bne.w	80055c4 <_strtod_l+0x744>
 80056f2:	e604      	b.n	80052fe <_strtod_l+0x47e>
 80056f4:	08008a70 	.word	0x08008a70
 80056f8:	fffffc02 	.word	0xfffffc02
 80056fc:	7ff00000 	.word	0x7ff00000
 8005700:	39500000 	.word	0x39500000
 8005704:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8005708:	d165      	bne.n	80057d6 <_strtod_l+0x956>
 800570a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800570c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005710:	b35a      	cbz	r2, 800576a <_strtod_l+0x8ea>
 8005712:	4a99      	ldr	r2, [pc, #612]	; (8005978 <_strtod_l+0xaf8>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d12b      	bne.n	8005770 <_strtod_l+0x8f0>
 8005718:	9b05      	ldr	r3, [sp, #20]
 800571a:	4641      	mov	r1, r8
 800571c:	b303      	cbz	r3, 8005760 <_strtod_l+0x8e0>
 800571e:	464a      	mov	r2, r9
 8005720:	4b96      	ldr	r3, [pc, #600]	; (800597c <_strtod_l+0xafc>)
 8005722:	4013      	ands	r3, r2
 8005724:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005728:	f04f 32ff 	mov.w	r2, #4294967295
 800572c:	d81b      	bhi.n	8005766 <_strtod_l+0x8e6>
 800572e:	0d1b      	lsrs	r3, r3, #20
 8005730:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005734:	fa02 f303 	lsl.w	r3, r2, r3
 8005738:	4299      	cmp	r1, r3
 800573a:	d119      	bne.n	8005770 <_strtod_l+0x8f0>
 800573c:	4b90      	ldr	r3, [pc, #576]	; (8005980 <_strtod_l+0xb00>)
 800573e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005740:	429a      	cmp	r2, r3
 8005742:	d102      	bne.n	800574a <_strtod_l+0x8ca>
 8005744:	3101      	adds	r1, #1
 8005746:	f43f adda 	beq.w	80052fe <_strtod_l+0x47e>
 800574a:	f04f 0800 	mov.w	r8, #0
 800574e:	4b8b      	ldr	r3, [pc, #556]	; (800597c <_strtod_l+0xafc>)
 8005750:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005752:	401a      	ands	r2, r3
 8005754:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8005758:	9b05      	ldr	r3, [sp, #20]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d19a      	bne.n	8005694 <_strtod_l+0x814>
 800575e:	e5d9      	b.n	8005314 <_strtod_l+0x494>
 8005760:	f04f 33ff 	mov.w	r3, #4294967295
 8005764:	e7e8      	b.n	8005738 <_strtod_l+0x8b8>
 8005766:	4613      	mov	r3, r2
 8005768:	e7e6      	b.n	8005738 <_strtod_l+0x8b8>
 800576a:	ea53 0308 	orrs.w	r3, r3, r8
 800576e:	d081      	beq.n	8005674 <_strtod_l+0x7f4>
 8005770:	b1e5      	cbz	r5, 80057ac <_strtod_l+0x92c>
 8005772:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005774:	421d      	tst	r5, r3
 8005776:	d0ef      	beq.n	8005758 <_strtod_l+0x8d8>
 8005778:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800577a:	4640      	mov	r0, r8
 800577c:	4649      	mov	r1, r9
 800577e:	9a05      	ldr	r2, [sp, #20]
 8005780:	b1c3      	cbz	r3, 80057b4 <_strtod_l+0x934>
 8005782:	f7ff fb5b 	bl	8004e3c <sulp>
 8005786:	4602      	mov	r2, r0
 8005788:	460b      	mov	r3, r1
 800578a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800578e:	f7fa fe0d 	bl	80003ac <__adddf3>
 8005792:	4680      	mov	r8, r0
 8005794:	4689      	mov	r9, r1
 8005796:	e7df      	b.n	8005758 <_strtod_l+0x8d8>
 8005798:	4013      	ands	r3, r2
 800579a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800579e:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80057a2:	f04f 38ff 	mov.w	r8, #4294967295
 80057a6:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80057aa:	e7d5      	b.n	8005758 <_strtod_l+0x8d8>
 80057ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80057ae:	ea13 0f08 	tst.w	r3, r8
 80057b2:	e7e0      	b.n	8005776 <_strtod_l+0x8f6>
 80057b4:	f7ff fb42 	bl	8004e3c <sulp>
 80057b8:	4602      	mov	r2, r0
 80057ba:	460b      	mov	r3, r1
 80057bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80057c0:	f7fa fdf2 	bl	80003a8 <__aeabi_dsub>
 80057c4:	2200      	movs	r2, #0
 80057c6:	2300      	movs	r3, #0
 80057c8:	4680      	mov	r8, r0
 80057ca:	4689      	mov	r9, r1
 80057cc:	f7fb fa0c 	bl	8000be8 <__aeabi_dcmpeq>
 80057d0:	2800      	cmp	r0, #0
 80057d2:	d0c1      	beq.n	8005758 <_strtod_l+0x8d8>
 80057d4:	e608      	b.n	80053e8 <_strtod_l+0x568>
 80057d6:	4658      	mov	r0, fp
 80057d8:	9904      	ldr	r1, [sp, #16]
 80057da:	f002 f83d 	bl	8007858 <__ratio>
 80057de:	2200      	movs	r2, #0
 80057e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80057e4:	4606      	mov	r6, r0
 80057e6:	460f      	mov	r7, r1
 80057e8:	f7fb fa12 	bl	8000c10 <__aeabi_dcmple>
 80057ec:	2800      	cmp	r0, #0
 80057ee:	d070      	beq.n	80058d2 <_strtod_l+0xa52>
 80057f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d042      	beq.n	800587c <_strtod_l+0x9fc>
 80057f6:	2600      	movs	r6, #0
 80057f8:	4f62      	ldr	r7, [pc, #392]	; (8005984 <_strtod_l+0xb04>)
 80057fa:	4d62      	ldr	r5, [pc, #392]	; (8005984 <_strtod_l+0xb04>)
 80057fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057fe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005802:	0d1b      	lsrs	r3, r3, #20
 8005804:	051b      	lsls	r3, r3, #20
 8005806:	930f      	str	r3, [sp, #60]	; 0x3c
 8005808:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800580a:	4b5f      	ldr	r3, [pc, #380]	; (8005988 <_strtod_l+0xb08>)
 800580c:	429a      	cmp	r2, r3
 800580e:	f040 80c3 	bne.w	8005998 <_strtod_l+0xb18>
 8005812:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005814:	4640      	mov	r0, r8
 8005816:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800581a:	4649      	mov	r1, r9
 800581c:	f001 ff46 	bl	80076ac <__ulp>
 8005820:	4602      	mov	r2, r0
 8005822:	460b      	mov	r3, r1
 8005824:	4630      	mov	r0, r6
 8005826:	4639      	mov	r1, r7
 8005828:	f7fa ff76 	bl	8000718 <__aeabi_dmul>
 800582c:	4642      	mov	r2, r8
 800582e:	464b      	mov	r3, r9
 8005830:	f7fa fdbc 	bl	80003ac <__adddf3>
 8005834:	460b      	mov	r3, r1
 8005836:	4951      	ldr	r1, [pc, #324]	; (800597c <_strtod_l+0xafc>)
 8005838:	4a54      	ldr	r2, [pc, #336]	; (800598c <_strtod_l+0xb0c>)
 800583a:	4019      	ands	r1, r3
 800583c:	4291      	cmp	r1, r2
 800583e:	4680      	mov	r8, r0
 8005840:	d95d      	bls.n	80058fe <_strtod_l+0xa7e>
 8005842:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005844:	4b4e      	ldr	r3, [pc, #312]	; (8005980 <_strtod_l+0xb00>)
 8005846:	429a      	cmp	r2, r3
 8005848:	d103      	bne.n	8005852 <_strtod_l+0x9d2>
 800584a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800584c:	3301      	adds	r3, #1
 800584e:	f43f ad56 	beq.w	80052fe <_strtod_l+0x47e>
 8005852:	f04f 38ff 	mov.w	r8, #4294967295
 8005856:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8005980 <_strtod_l+0xb00>
 800585a:	4650      	mov	r0, sl
 800585c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800585e:	f001 fbf5 	bl	800704c <_Bfree>
 8005862:	4650      	mov	r0, sl
 8005864:	9906      	ldr	r1, [sp, #24]
 8005866:	f001 fbf1 	bl	800704c <_Bfree>
 800586a:	4650      	mov	r0, sl
 800586c:	9904      	ldr	r1, [sp, #16]
 800586e:	f001 fbed 	bl	800704c <_Bfree>
 8005872:	4659      	mov	r1, fp
 8005874:	4650      	mov	r0, sl
 8005876:	f001 fbe9 	bl	800704c <_Bfree>
 800587a:	e627      	b.n	80054cc <_strtod_l+0x64c>
 800587c:	f1b8 0f00 	cmp.w	r8, #0
 8005880:	d119      	bne.n	80058b6 <_strtod_l+0xa36>
 8005882:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005884:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005888:	b9e3      	cbnz	r3, 80058c4 <_strtod_l+0xa44>
 800588a:	2200      	movs	r2, #0
 800588c:	4630      	mov	r0, r6
 800588e:	4639      	mov	r1, r7
 8005890:	4b3c      	ldr	r3, [pc, #240]	; (8005984 <_strtod_l+0xb04>)
 8005892:	f7fb f9b3 	bl	8000bfc <__aeabi_dcmplt>
 8005896:	b9c8      	cbnz	r0, 80058cc <_strtod_l+0xa4c>
 8005898:	2200      	movs	r2, #0
 800589a:	4630      	mov	r0, r6
 800589c:	4639      	mov	r1, r7
 800589e:	4b3c      	ldr	r3, [pc, #240]	; (8005990 <_strtod_l+0xb10>)
 80058a0:	f7fa ff3a 	bl	8000718 <__aeabi_dmul>
 80058a4:	4604      	mov	r4, r0
 80058a6:	460d      	mov	r5, r1
 80058a8:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80058ac:	9416      	str	r4, [sp, #88]	; 0x58
 80058ae:	9317      	str	r3, [sp, #92]	; 0x5c
 80058b0:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 80058b4:	e7a2      	b.n	80057fc <_strtod_l+0x97c>
 80058b6:	f1b8 0f01 	cmp.w	r8, #1
 80058ba:	d103      	bne.n	80058c4 <_strtod_l+0xa44>
 80058bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058be:	2b00      	cmp	r3, #0
 80058c0:	f43f ad92 	beq.w	80053e8 <_strtod_l+0x568>
 80058c4:	2600      	movs	r6, #0
 80058c6:	2400      	movs	r4, #0
 80058c8:	4f32      	ldr	r7, [pc, #200]	; (8005994 <_strtod_l+0xb14>)
 80058ca:	e796      	b.n	80057fa <_strtod_l+0x97a>
 80058cc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80058ce:	4d30      	ldr	r5, [pc, #192]	; (8005990 <_strtod_l+0xb10>)
 80058d0:	e7ea      	b.n	80058a8 <_strtod_l+0xa28>
 80058d2:	4b2f      	ldr	r3, [pc, #188]	; (8005990 <_strtod_l+0xb10>)
 80058d4:	2200      	movs	r2, #0
 80058d6:	4630      	mov	r0, r6
 80058d8:	4639      	mov	r1, r7
 80058da:	f7fa ff1d 	bl	8000718 <__aeabi_dmul>
 80058de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80058e0:	4604      	mov	r4, r0
 80058e2:	460d      	mov	r5, r1
 80058e4:	b933      	cbnz	r3, 80058f4 <_strtod_l+0xa74>
 80058e6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80058ea:	9010      	str	r0, [sp, #64]	; 0x40
 80058ec:	9311      	str	r3, [sp, #68]	; 0x44
 80058ee:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80058f2:	e783      	b.n	80057fc <_strtod_l+0x97c>
 80058f4:	4602      	mov	r2, r0
 80058f6:	460b      	mov	r3, r1
 80058f8:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80058fc:	e7f7      	b.n	80058ee <_strtod_l+0xa6e>
 80058fe:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8005902:	9b05      	ldr	r3, [sp, #20]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d1a8      	bne.n	800585a <_strtod_l+0x9da>
 8005908:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800590c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800590e:	0d1b      	lsrs	r3, r3, #20
 8005910:	051b      	lsls	r3, r3, #20
 8005912:	429a      	cmp	r2, r3
 8005914:	d1a1      	bne.n	800585a <_strtod_l+0x9da>
 8005916:	4620      	mov	r0, r4
 8005918:	4629      	mov	r1, r5
 800591a:	f7fb fbe9 	bl	80010f0 <__aeabi_d2lz>
 800591e:	f7fa fecd 	bl	80006bc <__aeabi_l2d>
 8005922:	4602      	mov	r2, r0
 8005924:	460b      	mov	r3, r1
 8005926:	4620      	mov	r0, r4
 8005928:	4629      	mov	r1, r5
 800592a:	f7fa fd3d 	bl	80003a8 <__aeabi_dsub>
 800592e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005930:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005934:	ea43 0308 	orr.w	r3, r3, r8
 8005938:	4313      	orrs	r3, r2
 800593a:	4604      	mov	r4, r0
 800593c:	460d      	mov	r5, r1
 800593e:	d066      	beq.n	8005a0e <_strtod_l+0xb8e>
 8005940:	a309      	add	r3, pc, #36	; (adr r3, 8005968 <_strtod_l+0xae8>)
 8005942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005946:	f7fb f959 	bl	8000bfc <__aeabi_dcmplt>
 800594a:	2800      	cmp	r0, #0
 800594c:	f47f ace2 	bne.w	8005314 <_strtod_l+0x494>
 8005950:	a307      	add	r3, pc, #28	; (adr r3, 8005970 <_strtod_l+0xaf0>)
 8005952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005956:	4620      	mov	r0, r4
 8005958:	4629      	mov	r1, r5
 800595a:	f7fb f96d 	bl	8000c38 <__aeabi_dcmpgt>
 800595e:	2800      	cmp	r0, #0
 8005960:	f43f af7b 	beq.w	800585a <_strtod_l+0x9da>
 8005964:	e4d6      	b.n	8005314 <_strtod_l+0x494>
 8005966:	bf00      	nop
 8005968:	94a03595 	.word	0x94a03595
 800596c:	3fdfffff 	.word	0x3fdfffff
 8005970:	35afe535 	.word	0x35afe535
 8005974:	3fe00000 	.word	0x3fe00000
 8005978:	000fffff 	.word	0x000fffff
 800597c:	7ff00000 	.word	0x7ff00000
 8005980:	7fefffff 	.word	0x7fefffff
 8005984:	3ff00000 	.word	0x3ff00000
 8005988:	7fe00000 	.word	0x7fe00000
 800598c:	7c9fffff 	.word	0x7c9fffff
 8005990:	3fe00000 	.word	0x3fe00000
 8005994:	bff00000 	.word	0xbff00000
 8005998:	9b05      	ldr	r3, [sp, #20]
 800599a:	b313      	cbz	r3, 80059e2 <_strtod_l+0xb62>
 800599c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800599e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80059a2:	d81e      	bhi.n	80059e2 <_strtod_l+0xb62>
 80059a4:	a326      	add	r3, pc, #152	; (adr r3, 8005a40 <_strtod_l+0xbc0>)
 80059a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059aa:	4620      	mov	r0, r4
 80059ac:	4629      	mov	r1, r5
 80059ae:	f7fb f92f 	bl	8000c10 <__aeabi_dcmple>
 80059b2:	b190      	cbz	r0, 80059da <_strtod_l+0xb5a>
 80059b4:	4629      	mov	r1, r5
 80059b6:	4620      	mov	r0, r4
 80059b8:	f7fb f986 	bl	8000cc8 <__aeabi_d2uiz>
 80059bc:	2801      	cmp	r0, #1
 80059be:	bf38      	it	cc
 80059c0:	2001      	movcc	r0, #1
 80059c2:	f7fa fe2f 	bl	8000624 <__aeabi_ui2d>
 80059c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80059c8:	4604      	mov	r4, r0
 80059ca:	460d      	mov	r5, r1
 80059cc:	b9d3      	cbnz	r3, 8005a04 <_strtod_l+0xb84>
 80059ce:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80059d2:	9012      	str	r0, [sp, #72]	; 0x48
 80059d4:	9313      	str	r3, [sp, #76]	; 0x4c
 80059d6:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 80059da:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80059dc:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 80059e0:	1a9f      	subs	r7, r3, r2
 80059e2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80059e6:	f001 fe61 	bl	80076ac <__ulp>
 80059ea:	4602      	mov	r2, r0
 80059ec:	460b      	mov	r3, r1
 80059ee:	4630      	mov	r0, r6
 80059f0:	4639      	mov	r1, r7
 80059f2:	f7fa fe91 	bl	8000718 <__aeabi_dmul>
 80059f6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80059fa:	f7fa fcd7 	bl	80003ac <__adddf3>
 80059fe:	4680      	mov	r8, r0
 8005a00:	4689      	mov	r9, r1
 8005a02:	e77e      	b.n	8005902 <_strtod_l+0xa82>
 8005a04:	4602      	mov	r2, r0
 8005a06:	460b      	mov	r3, r1
 8005a08:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8005a0c:	e7e3      	b.n	80059d6 <_strtod_l+0xb56>
 8005a0e:	a30e      	add	r3, pc, #56	; (adr r3, 8005a48 <_strtod_l+0xbc8>)
 8005a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a14:	f7fb f8f2 	bl	8000bfc <__aeabi_dcmplt>
 8005a18:	e7a1      	b.n	800595e <_strtod_l+0xade>
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	930a      	str	r3, [sp, #40]	; 0x28
 8005a1e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005a20:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005a22:	6013      	str	r3, [r2, #0]
 8005a24:	f7ff ba71 	b.w	8004f0a <_strtod_l+0x8a>
 8005a28:	2a65      	cmp	r2, #101	; 0x65
 8005a2a:	f43f ab63 	beq.w	80050f4 <_strtod_l+0x274>
 8005a2e:	2a45      	cmp	r2, #69	; 0x45
 8005a30:	f43f ab60 	beq.w	80050f4 <_strtod_l+0x274>
 8005a34:	2301      	movs	r3, #1
 8005a36:	f7ff bb95 	b.w	8005164 <_strtod_l+0x2e4>
 8005a3a:	bf00      	nop
 8005a3c:	f3af 8000 	nop.w
 8005a40:	ffc00000 	.word	0xffc00000
 8005a44:	41dfffff 	.word	0x41dfffff
 8005a48:	94a03595 	.word	0x94a03595
 8005a4c:	3fcfffff 	.word	0x3fcfffff

08005a50 <_strtod_r>:
 8005a50:	4b01      	ldr	r3, [pc, #4]	; (8005a58 <_strtod_r+0x8>)
 8005a52:	f7ff ba15 	b.w	8004e80 <_strtod_l>
 8005a56:	bf00      	nop
 8005a58:	20000078 	.word	0x20000078

08005a5c <_strtol_l.constprop.0>:
 8005a5c:	2b01      	cmp	r3, #1
 8005a5e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a62:	4680      	mov	r8, r0
 8005a64:	d001      	beq.n	8005a6a <_strtol_l.constprop.0+0xe>
 8005a66:	2b24      	cmp	r3, #36	; 0x24
 8005a68:	d906      	bls.n	8005a78 <_strtol_l.constprop.0+0x1c>
 8005a6a:	f7fe fb23 	bl	80040b4 <__errno>
 8005a6e:	2316      	movs	r3, #22
 8005a70:	6003      	str	r3, [r0, #0]
 8005a72:	2000      	movs	r0, #0
 8005a74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a78:	460d      	mov	r5, r1
 8005a7a:	4f35      	ldr	r7, [pc, #212]	; (8005b50 <_strtol_l.constprop.0+0xf4>)
 8005a7c:	4628      	mov	r0, r5
 8005a7e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005a82:	5de6      	ldrb	r6, [r4, r7]
 8005a84:	f016 0608 	ands.w	r6, r6, #8
 8005a88:	d1f8      	bne.n	8005a7c <_strtol_l.constprop.0+0x20>
 8005a8a:	2c2d      	cmp	r4, #45	; 0x2d
 8005a8c:	d12f      	bne.n	8005aee <_strtol_l.constprop.0+0x92>
 8005a8e:	2601      	movs	r6, #1
 8005a90:	782c      	ldrb	r4, [r5, #0]
 8005a92:	1c85      	adds	r5, r0, #2
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d057      	beq.n	8005b48 <_strtol_l.constprop.0+0xec>
 8005a98:	2b10      	cmp	r3, #16
 8005a9a:	d109      	bne.n	8005ab0 <_strtol_l.constprop.0+0x54>
 8005a9c:	2c30      	cmp	r4, #48	; 0x30
 8005a9e:	d107      	bne.n	8005ab0 <_strtol_l.constprop.0+0x54>
 8005aa0:	7828      	ldrb	r0, [r5, #0]
 8005aa2:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8005aa6:	2858      	cmp	r0, #88	; 0x58
 8005aa8:	d149      	bne.n	8005b3e <_strtol_l.constprop.0+0xe2>
 8005aaa:	2310      	movs	r3, #16
 8005aac:	786c      	ldrb	r4, [r5, #1]
 8005aae:	3502      	adds	r5, #2
 8005ab0:	2700      	movs	r7, #0
 8005ab2:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8005ab6:	f10e 3eff 	add.w	lr, lr, #4294967295
 8005aba:	fbbe f9f3 	udiv	r9, lr, r3
 8005abe:	4638      	mov	r0, r7
 8005ac0:	fb03 ea19 	mls	sl, r3, r9, lr
 8005ac4:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8005ac8:	f1bc 0f09 	cmp.w	ip, #9
 8005acc:	d814      	bhi.n	8005af8 <_strtol_l.constprop.0+0x9c>
 8005ace:	4664      	mov	r4, ip
 8005ad0:	42a3      	cmp	r3, r4
 8005ad2:	dd22      	ble.n	8005b1a <_strtol_l.constprop.0+0xbe>
 8005ad4:	2f00      	cmp	r7, #0
 8005ad6:	db1d      	blt.n	8005b14 <_strtol_l.constprop.0+0xb8>
 8005ad8:	4581      	cmp	r9, r0
 8005ada:	d31b      	bcc.n	8005b14 <_strtol_l.constprop.0+0xb8>
 8005adc:	d101      	bne.n	8005ae2 <_strtol_l.constprop.0+0x86>
 8005ade:	45a2      	cmp	sl, r4
 8005ae0:	db18      	blt.n	8005b14 <_strtol_l.constprop.0+0xb8>
 8005ae2:	2701      	movs	r7, #1
 8005ae4:	fb00 4003 	mla	r0, r0, r3, r4
 8005ae8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005aec:	e7ea      	b.n	8005ac4 <_strtol_l.constprop.0+0x68>
 8005aee:	2c2b      	cmp	r4, #43	; 0x2b
 8005af0:	bf04      	itt	eq
 8005af2:	782c      	ldrbeq	r4, [r5, #0]
 8005af4:	1c85      	addeq	r5, r0, #2
 8005af6:	e7cd      	b.n	8005a94 <_strtol_l.constprop.0+0x38>
 8005af8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8005afc:	f1bc 0f19 	cmp.w	ip, #25
 8005b00:	d801      	bhi.n	8005b06 <_strtol_l.constprop.0+0xaa>
 8005b02:	3c37      	subs	r4, #55	; 0x37
 8005b04:	e7e4      	b.n	8005ad0 <_strtol_l.constprop.0+0x74>
 8005b06:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8005b0a:	f1bc 0f19 	cmp.w	ip, #25
 8005b0e:	d804      	bhi.n	8005b1a <_strtol_l.constprop.0+0xbe>
 8005b10:	3c57      	subs	r4, #87	; 0x57
 8005b12:	e7dd      	b.n	8005ad0 <_strtol_l.constprop.0+0x74>
 8005b14:	f04f 37ff 	mov.w	r7, #4294967295
 8005b18:	e7e6      	b.n	8005ae8 <_strtol_l.constprop.0+0x8c>
 8005b1a:	2f00      	cmp	r7, #0
 8005b1c:	da07      	bge.n	8005b2e <_strtol_l.constprop.0+0xd2>
 8005b1e:	2322      	movs	r3, #34	; 0x22
 8005b20:	4670      	mov	r0, lr
 8005b22:	f8c8 3000 	str.w	r3, [r8]
 8005b26:	2a00      	cmp	r2, #0
 8005b28:	d0a4      	beq.n	8005a74 <_strtol_l.constprop.0+0x18>
 8005b2a:	1e69      	subs	r1, r5, #1
 8005b2c:	e005      	b.n	8005b3a <_strtol_l.constprop.0+0xde>
 8005b2e:	b106      	cbz	r6, 8005b32 <_strtol_l.constprop.0+0xd6>
 8005b30:	4240      	negs	r0, r0
 8005b32:	2a00      	cmp	r2, #0
 8005b34:	d09e      	beq.n	8005a74 <_strtol_l.constprop.0+0x18>
 8005b36:	2f00      	cmp	r7, #0
 8005b38:	d1f7      	bne.n	8005b2a <_strtol_l.constprop.0+0xce>
 8005b3a:	6011      	str	r1, [r2, #0]
 8005b3c:	e79a      	b.n	8005a74 <_strtol_l.constprop.0+0x18>
 8005b3e:	2430      	movs	r4, #48	; 0x30
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d1b5      	bne.n	8005ab0 <_strtol_l.constprop.0+0x54>
 8005b44:	2308      	movs	r3, #8
 8005b46:	e7b3      	b.n	8005ab0 <_strtol_l.constprop.0+0x54>
 8005b48:	2c30      	cmp	r4, #48	; 0x30
 8005b4a:	d0a9      	beq.n	8005aa0 <_strtol_l.constprop.0+0x44>
 8005b4c:	230a      	movs	r3, #10
 8005b4e:	e7af      	b.n	8005ab0 <_strtol_l.constprop.0+0x54>
 8005b50:	08008a99 	.word	0x08008a99

08005b54 <_strtol_r>:
 8005b54:	f7ff bf82 	b.w	8005a5c <_strtol_l.constprop.0>

08005b58 <_vsiprintf_r>:
 8005b58:	b500      	push	{lr}
 8005b5a:	b09b      	sub	sp, #108	; 0x6c
 8005b5c:	9100      	str	r1, [sp, #0]
 8005b5e:	9104      	str	r1, [sp, #16]
 8005b60:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005b64:	9105      	str	r1, [sp, #20]
 8005b66:	9102      	str	r1, [sp, #8]
 8005b68:	4905      	ldr	r1, [pc, #20]	; (8005b80 <_vsiprintf_r+0x28>)
 8005b6a:	9103      	str	r1, [sp, #12]
 8005b6c:	4669      	mov	r1, sp
 8005b6e:	f002 f831 	bl	8007bd4 <_svfiprintf_r>
 8005b72:	2200      	movs	r2, #0
 8005b74:	9b00      	ldr	r3, [sp, #0]
 8005b76:	701a      	strb	r2, [r3, #0]
 8005b78:	b01b      	add	sp, #108	; 0x6c
 8005b7a:	f85d fb04 	ldr.w	pc, [sp], #4
 8005b7e:	bf00      	nop
 8005b80:	ffff0208 	.word	0xffff0208

08005b84 <vsiprintf>:
 8005b84:	4613      	mov	r3, r2
 8005b86:	460a      	mov	r2, r1
 8005b88:	4601      	mov	r1, r0
 8005b8a:	4802      	ldr	r0, [pc, #8]	; (8005b94 <vsiprintf+0x10>)
 8005b8c:	6800      	ldr	r0, [r0, #0]
 8005b8e:	f7ff bfe3 	b.w	8005b58 <_vsiprintf_r>
 8005b92:	bf00      	nop
 8005b94:	20000010 	.word	0x20000010

08005b98 <quorem>:
 8005b98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b9c:	6903      	ldr	r3, [r0, #16]
 8005b9e:	690c      	ldr	r4, [r1, #16]
 8005ba0:	4607      	mov	r7, r0
 8005ba2:	42a3      	cmp	r3, r4
 8005ba4:	f2c0 8082 	blt.w	8005cac <quorem+0x114>
 8005ba8:	3c01      	subs	r4, #1
 8005baa:	f100 0514 	add.w	r5, r0, #20
 8005bae:	f101 0814 	add.w	r8, r1, #20
 8005bb2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005bb6:	9301      	str	r3, [sp, #4]
 8005bb8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005bbc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005bc0:	3301      	adds	r3, #1
 8005bc2:	429a      	cmp	r2, r3
 8005bc4:	fbb2 f6f3 	udiv	r6, r2, r3
 8005bc8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005bcc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005bd0:	d331      	bcc.n	8005c36 <quorem+0x9e>
 8005bd2:	f04f 0e00 	mov.w	lr, #0
 8005bd6:	4640      	mov	r0, r8
 8005bd8:	46ac      	mov	ip, r5
 8005bda:	46f2      	mov	sl, lr
 8005bdc:	f850 2b04 	ldr.w	r2, [r0], #4
 8005be0:	b293      	uxth	r3, r2
 8005be2:	fb06 e303 	mla	r3, r6, r3, lr
 8005be6:	0c12      	lsrs	r2, r2, #16
 8005be8:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005bec:	b29b      	uxth	r3, r3
 8005bee:	fb06 e202 	mla	r2, r6, r2, lr
 8005bf2:	ebaa 0303 	sub.w	r3, sl, r3
 8005bf6:	f8dc a000 	ldr.w	sl, [ip]
 8005bfa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005bfe:	fa1f fa8a 	uxth.w	sl, sl
 8005c02:	4453      	add	r3, sl
 8005c04:	f8dc a000 	ldr.w	sl, [ip]
 8005c08:	b292      	uxth	r2, r2
 8005c0a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005c0e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005c12:	b29b      	uxth	r3, r3
 8005c14:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005c18:	4581      	cmp	r9, r0
 8005c1a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005c1e:	f84c 3b04 	str.w	r3, [ip], #4
 8005c22:	d2db      	bcs.n	8005bdc <quorem+0x44>
 8005c24:	f855 300b 	ldr.w	r3, [r5, fp]
 8005c28:	b92b      	cbnz	r3, 8005c36 <quorem+0x9e>
 8005c2a:	9b01      	ldr	r3, [sp, #4]
 8005c2c:	3b04      	subs	r3, #4
 8005c2e:	429d      	cmp	r5, r3
 8005c30:	461a      	mov	r2, r3
 8005c32:	d32f      	bcc.n	8005c94 <quorem+0xfc>
 8005c34:	613c      	str	r4, [r7, #16]
 8005c36:	4638      	mov	r0, r7
 8005c38:	f001 fc90 	bl	800755c <__mcmp>
 8005c3c:	2800      	cmp	r0, #0
 8005c3e:	db25      	blt.n	8005c8c <quorem+0xf4>
 8005c40:	4628      	mov	r0, r5
 8005c42:	f04f 0c00 	mov.w	ip, #0
 8005c46:	3601      	adds	r6, #1
 8005c48:	f858 1b04 	ldr.w	r1, [r8], #4
 8005c4c:	f8d0 e000 	ldr.w	lr, [r0]
 8005c50:	b28b      	uxth	r3, r1
 8005c52:	ebac 0303 	sub.w	r3, ip, r3
 8005c56:	fa1f f28e 	uxth.w	r2, lr
 8005c5a:	4413      	add	r3, r2
 8005c5c:	0c0a      	lsrs	r2, r1, #16
 8005c5e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005c62:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005c66:	b29b      	uxth	r3, r3
 8005c68:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005c6c:	45c1      	cmp	r9, r8
 8005c6e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005c72:	f840 3b04 	str.w	r3, [r0], #4
 8005c76:	d2e7      	bcs.n	8005c48 <quorem+0xb0>
 8005c78:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005c7c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005c80:	b922      	cbnz	r2, 8005c8c <quorem+0xf4>
 8005c82:	3b04      	subs	r3, #4
 8005c84:	429d      	cmp	r5, r3
 8005c86:	461a      	mov	r2, r3
 8005c88:	d30a      	bcc.n	8005ca0 <quorem+0x108>
 8005c8a:	613c      	str	r4, [r7, #16]
 8005c8c:	4630      	mov	r0, r6
 8005c8e:	b003      	add	sp, #12
 8005c90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c94:	6812      	ldr	r2, [r2, #0]
 8005c96:	3b04      	subs	r3, #4
 8005c98:	2a00      	cmp	r2, #0
 8005c9a:	d1cb      	bne.n	8005c34 <quorem+0x9c>
 8005c9c:	3c01      	subs	r4, #1
 8005c9e:	e7c6      	b.n	8005c2e <quorem+0x96>
 8005ca0:	6812      	ldr	r2, [r2, #0]
 8005ca2:	3b04      	subs	r3, #4
 8005ca4:	2a00      	cmp	r2, #0
 8005ca6:	d1f0      	bne.n	8005c8a <quorem+0xf2>
 8005ca8:	3c01      	subs	r4, #1
 8005caa:	e7eb      	b.n	8005c84 <quorem+0xec>
 8005cac:	2000      	movs	r0, #0
 8005cae:	e7ee      	b.n	8005c8e <quorem+0xf6>

08005cb0 <_dtoa_r>:
 8005cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cb4:	4616      	mov	r6, r2
 8005cb6:	461f      	mov	r7, r3
 8005cb8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005cba:	b099      	sub	sp, #100	; 0x64
 8005cbc:	4605      	mov	r5, r0
 8005cbe:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005cc2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8005cc6:	b974      	cbnz	r4, 8005ce6 <_dtoa_r+0x36>
 8005cc8:	2010      	movs	r0, #16
 8005cca:	f001 f949 	bl	8006f60 <malloc>
 8005cce:	4602      	mov	r2, r0
 8005cd0:	6268      	str	r0, [r5, #36]	; 0x24
 8005cd2:	b920      	cbnz	r0, 8005cde <_dtoa_r+0x2e>
 8005cd4:	21ea      	movs	r1, #234	; 0xea
 8005cd6:	4ba8      	ldr	r3, [pc, #672]	; (8005f78 <_dtoa_r+0x2c8>)
 8005cd8:	48a8      	ldr	r0, [pc, #672]	; (8005f7c <_dtoa_r+0x2cc>)
 8005cda:	f002 f8b3 	bl	8007e44 <__assert_func>
 8005cde:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005ce2:	6004      	str	r4, [r0, #0]
 8005ce4:	60c4      	str	r4, [r0, #12]
 8005ce6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005ce8:	6819      	ldr	r1, [r3, #0]
 8005cea:	b151      	cbz	r1, 8005d02 <_dtoa_r+0x52>
 8005cec:	685a      	ldr	r2, [r3, #4]
 8005cee:	2301      	movs	r3, #1
 8005cf0:	4093      	lsls	r3, r2
 8005cf2:	604a      	str	r2, [r1, #4]
 8005cf4:	608b      	str	r3, [r1, #8]
 8005cf6:	4628      	mov	r0, r5
 8005cf8:	f001 f9a8 	bl	800704c <_Bfree>
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005d00:	601a      	str	r2, [r3, #0]
 8005d02:	1e3b      	subs	r3, r7, #0
 8005d04:	bfaf      	iteee	ge
 8005d06:	2300      	movge	r3, #0
 8005d08:	2201      	movlt	r2, #1
 8005d0a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005d0e:	9305      	strlt	r3, [sp, #20]
 8005d10:	bfa8      	it	ge
 8005d12:	f8c8 3000 	strge.w	r3, [r8]
 8005d16:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8005d1a:	4b99      	ldr	r3, [pc, #612]	; (8005f80 <_dtoa_r+0x2d0>)
 8005d1c:	bfb8      	it	lt
 8005d1e:	f8c8 2000 	strlt.w	r2, [r8]
 8005d22:	ea33 0309 	bics.w	r3, r3, r9
 8005d26:	d119      	bne.n	8005d5c <_dtoa_r+0xac>
 8005d28:	f242 730f 	movw	r3, #9999	; 0x270f
 8005d2c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005d2e:	6013      	str	r3, [r2, #0]
 8005d30:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005d34:	4333      	orrs	r3, r6
 8005d36:	f000 857f 	beq.w	8006838 <_dtoa_r+0xb88>
 8005d3a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005d3c:	b953      	cbnz	r3, 8005d54 <_dtoa_r+0xa4>
 8005d3e:	4b91      	ldr	r3, [pc, #580]	; (8005f84 <_dtoa_r+0x2d4>)
 8005d40:	e022      	b.n	8005d88 <_dtoa_r+0xd8>
 8005d42:	4b91      	ldr	r3, [pc, #580]	; (8005f88 <_dtoa_r+0x2d8>)
 8005d44:	9303      	str	r3, [sp, #12]
 8005d46:	3308      	adds	r3, #8
 8005d48:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005d4a:	6013      	str	r3, [r2, #0]
 8005d4c:	9803      	ldr	r0, [sp, #12]
 8005d4e:	b019      	add	sp, #100	; 0x64
 8005d50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d54:	4b8b      	ldr	r3, [pc, #556]	; (8005f84 <_dtoa_r+0x2d4>)
 8005d56:	9303      	str	r3, [sp, #12]
 8005d58:	3303      	adds	r3, #3
 8005d5a:	e7f5      	b.n	8005d48 <_dtoa_r+0x98>
 8005d5c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005d60:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8005d64:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005d68:	2200      	movs	r2, #0
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	f7fa ff3c 	bl	8000be8 <__aeabi_dcmpeq>
 8005d70:	4680      	mov	r8, r0
 8005d72:	b158      	cbz	r0, 8005d8c <_dtoa_r+0xdc>
 8005d74:	2301      	movs	r3, #1
 8005d76:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005d78:	6013      	str	r3, [r2, #0]
 8005d7a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	f000 8558 	beq.w	8006832 <_dtoa_r+0xb82>
 8005d82:	4882      	ldr	r0, [pc, #520]	; (8005f8c <_dtoa_r+0x2dc>)
 8005d84:	6018      	str	r0, [r3, #0]
 8005d86:	1e43      	subs	r3, r0, #1
 8005d88:	9303      	str	r3, [sp, #12]
 8005d8a:	e7df      	b.n	8005d4c <_dtoa_r+0x9c>
 8005d8c:	ab16      	add	r3, sp, #88	; 0x58
 8005d8e:	9301      	str	r3, [sp, #4]
 8005d90:	ab17      	add	r3, sp, #92	; 0x5c
 8005d92:	9300      	str	r3, [sp, #0]
 8005d94:	4628      	mov	r0, r5
 8005d96:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005d9a:	f001 fd01 	bl	80077a0 <__d2b>
 8005d9e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005da2:	4683      	mov	fp, r0
 8005da4:	2c00      	cmp	r4, #0
 8005da6:	d07f      	beq.n	8005ea8 <_dtoa_r+0x1f8>
 8005da8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005dac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005dae:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8005db2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005db6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8005dba:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8005dbe:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	4b72      	ldr	r3, [pc, #456]	; (8005f90 <_dtoa_r+0x2e0>)
 8005dc6:	f7fa faef 	bl	80003a8 <__aeabi_dsub>
 8005dca:	a365      	add	r3, pc, #404	; (adr r3, 8005f60 <_dtoa_r+0x2b0>)
 8005dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dd0:	f7fa fca2 	bl	8000718 <__aeabi_dmul>
 8005dd4:	a364      	add	r3, pc, #400	; (adr r3, 8005f68 <_dtoa_r+0x2b8>)
 8005dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dda:	f7fa fae7 	bl	80003ac <__adddf3>
 8005dde:	4606      	mov	r6, r0
 8005de0:	4620      	mov	r0, r4
 8005de2:	460f      	mov	r7, r1
 8005de4:	f7fa fc2e 	bl	8000644 <__aeabi_i2d>
 8005de8:	a361      	add	r3, pc, #388	; (adr r3, 8005f70 <_dtoa_r+0x2c0>)
 8005dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dee:	f7fa fc93 	bl	8000718 <__aeabi_dmul>
 8005df2:	4602      	mov	r2, r0
 8005df4:	460b      	mov	r3, r1
 8005df6:	4630      	mov	r0, r6
 8005df8:	4639      	mov	r1, r7
 8005dfa:	f7fa fad7 	bl	80003ac <__adddf3>
 8005dfe:	4606      	mov	r6, r0
 8005e00:	460f      	mov	r7, r1
 8005e02:	f7fa ff39 	bl	8000c78 <__aeabi_d2iz>
 8005e06:	2200      	movs	r2, #0
 8005e08:	4682      	mov	sl, r0
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	4630      	mov	r0, r6
 8005e0e:	4639      	mov	r1, r7
 8005e10:	f7fa fef4 	bl	8000bfc <__aeabi_dcmplt>
 8005e14:	b148      	cbz	r0, 8005e2a <_dtoa_r+0x17a>
 8005e16:	4650      	mov	r0, sl
 8005e18:	f7fa fc14 	bl	8000644 <__aeabi_i2d>
 8005e1c:	4632      	mov	r2, r6
 8005e1e:	463b      	mov	r3, r7
 8005e20:	f7fa fee2 	bl	8000be8 <__aeabi_dcmpeq>
 8005e24:	b908      	cbnz	r0, 8005e2a <_dtoa_r+0x17a>
 8005e26:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005e2a:	f1ba 0f16 	cmp.w	sl, #22
 8005e2e:	d858      	bhi.n	8005ee2 <_dtoa_r+0x232>
 8005e30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005e34:	4b57      	ldr	r3, [pc, #348]	; (8005f94 <_dtoa_r+0x2e4>)
 8005e36:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e3e:	f7fa fedd 	bl	8000bfc <__aeabi_dcmplt>
 8005e42:	2800      	cmp	r0, #0
 8005e44:	d04f      	beq.n	8005ee6 <_dtoa_r+0x236>
 8005e46:	2300      	movs	r3, #0
 8005e48:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005e4c:	930f      	str	r3, [sp, #60]	; 0x3c
 8005e4e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005e50:	1b1c      	subs	r4, r3, r4
 8005e52:	1e63      	subs	r3, r4, #1
 8005e54:	9309      	str	r3, [sp, #36]	; 0x24
 8005e56:	bf49      	itett	mi
 8005e58:	f1c4 0301 	rsbmi	r3, r4, #1
 8005e5c:	2300      	movpl	r3, #0
 8005e5e:	9306      	strmi	r3, [sp, #24]
 8005e60:	2300      	movmi	r3, #0
 8005e62:	bf54      	ite	pl
 8005e64:	9306      	strpl	r3, [sp, #24]
 8005e66:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005e68:	f1ba 0f00 	cmp.w	sl, #0
 8005e6c:	db3d      	blt.n	8005eea <_dtoa_r+0x23a>
 8005e6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e70:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8005e74:	4453      	add	r3, sl
 8005e76:	9309      	str	r3, [sp, #36]	; 0x24
 8005e78:	2300      	movs	r3, #0
 8005e7a:	930a      	str	r3, [sp, #40]	; 0x28
 8005e7c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005e7e:	2b09      	cmp	r3, #9
 8005e80:	f200 808c 	bhi.w	8005f9c <_dtoa_r+0x2ec>
 8005e84:	2b05      	cmp	r3, #5
 8005e86:	bfc4      	itt	gt
 8005e88:	3b04      	subgt	r3, #4
 8005e8a:	9322      	strgt	r3, [sp, #136]	; 0x88
 8005e8c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005e8e:	bfc8      	it	gt
 8005e90:	2400      	movgt	r4, #0
 8005e92:	f1a3 0302 	sub.w	r3, r3, #2
 8005e96:	bfd8      	it	le
 8005e98:	2401      	movle	r4, #1
 8005e9a:	2b03      	cmp	r3, #3
 8005e9c:	f200 808a 	bhi.w	8005fb4 <_dtoa_r+0x304>
 8005ea0:	e8df f003 	tbb	[pc, r3]
 8005ea4:	5b4d4f2d 	.word	0x5b4d4f2d
 8005ea8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8005eac:	441c      	add	r4, r3
 8005eae:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8005eb2:	2b20      	cmp	r3, #32
 8005eb4:	bfc3      	ittte	gt
 8005eb6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005eba:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8005ebe:	fa09 f303 	lslgt.w	r3, r9, r3
 8005ec2:	f1c3 0320 	rsble	r3, r3, #32
 8005ec6:	bfc6      	itte	gt
 8005ec8:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005ecc:	4318      	orrgt	r0, r3
 8005ece:	fa06 f003 	lslle.w	r0, r6, r3
 8005ed2:	f7fa fba7 	bl	8000624 <__aeabi_ui2d>
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8005edc:	3c01      	subs	r4, #1
 8005ede:	9313      	str	r3, [sp, #76]	; 0x4c
 8005ee0:	e76f      	b.n	8005dc2 <_dtoa_r+0x112>
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	e7b2      	b.n	8005e4c <_dtoa_r+0x19c>
 8005ee6:	900f      	str	r0, [sp, #60]	; 0x3c
 8005ee8:	e7b1      	b.n	8005e4e <_dtoa_r+0x19e>
 8005eea:	9b06      	ldr	r3, [sp, #24]
 8005eec:	eba3 030a 	sub.w	r3, r3, sl
 8005ef0:	9306      	str	r3, [sp, #24]
 8005ef2:	f1ca 0300 	rsb	r3, sl, #0
 8005ef6:	930a      	str	r3, [sp, #40]	; 0x28
 8005ef8:	2300      	movs	r3, #0
 8005efa:	930e      	str	r3, [sp, #56]	; 0x38
 8005efc:	e7be      	b.n	8005e7c <_dtoa_r+0x1cc>
 8005efe:	2300      	movs	r3, #0
 8005f00:	930b      	str	r3, [sp, #44]	; 0x2c
 8005f02:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	dc58      	bgt.n	8005fba <_dtoa_r+0x30a>
 8005f08:	f04f 0901 	mov.w	r9, #1
 8005f0c:	464b      	mov	r3, r9
 8005f0e:	f8cd 9020 	str.w	r9, [sp, #32]
 8005f12:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8005f16:	2200      	movs	r2, #0
 8005f18:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8005f1a:	6042      	str	r2, [r0, #4]
 8005f1c:	2204      	movs	r2, #4
 8005f1e:	f102 0614 	add.w	r6, r2, #20
 8005f22:	429e      	cmp	r6, r3
 8005f24:	6841      	ldr	r1, [r0, #4]
 8005f26:	d94e      	bls.n	8005fc6 <_dtoa_r+0x316>
 8005f28:	4628      	mov	r0, r5
 8005f2a:	f001 f84f 	bl	8006fcc <_Balloc>
 8005f2e:	9003      	str	r0, [sp, #12]
 8005f30:	2800      	cmp	r0, #0
 8005f32:	d14c      	bne.n	8005fce <_dtoa_r+0x31e>
 8005f34:	4602      	mov	r2, r0
 8005f36:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005f3a:	4b17      	ldr	r3, [pc, #92]	; (8005f98 <_dtoa_r+0x2e8>)
 8005f3c:	e6cc      	b.n	8005cd8 <_dtoa_r+0x28>
 8005f3e:	2301      	movs	r3, #1
 8005f40:	e7de      	b.n	8005f00 <_dtoa_r+0x250>
 8005f42:	2300      	movs	r3, #0
 8005f44:	930b      	str	r3, [sp, #44]	; 0x2c
 8005f46:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005f48:	eb0a 0903 	add.w	r9, sl, r3
 8005f4c:	f109 0301 	add.w	r3, r9, #1
 8005f50:	2b01      	cmp	r3, #1
 8005f52:	9308      	str	r3, [sp, #32]
 8005f54:	bfb8      	it	lt
 8005f56:	2301      	movlt	r3, #1
 8005f58:	e7dd      	b.n	8005f16 <_dtoa_r+0x266>
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	e7f2      	b.n	8005f44 <_dtoa_r+0x294>
 8005f5e:	bf00      	nop
 8005f60:	636f4361 	.word	0x636f4361
 8005f64:	3fd287a7 	.word	0x3fd287a7
 8005f68:	8b60c8b3 	.word	0x8b60c8b3
 8005f6c:	3fc68a28 	.word	0x3fc68a28
 8005f70:	509f79fb 	.word	0x509f79fb
 8005f74:	3fd34413 	.word	0x3fd34413
 8005f78:	08008ba6 	.word	0x08008ba6
 8005f7c:	08008bbd 	.word	0x08008bbd
 8005f80:	7ff00000 	.word	0x7ff00000
 8005f84:	08008ba2 	.word	0x08008ba2
 8005f88:	08008b99 	.word	0x08008b99
 8005f8c:	08008a19 	.word	0x08008a19
 8005f90:	3ff80000 	.word	0x3ff80000
 8005f94:	08008d28 	.word	0x08008d28
 8005f98:	08008c18 	.word	0x08008c18
 8005f9c:	2401      	movs	r4, #1
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	940b      	str	r4, [sp, #44]	; 0x2c
 8005fa2:	9322      	str	r3, [sp, #136]	; 0x88
 8005fa4:	f04f 39ff 	mov.w	r9, #4294967295
 8005fa8:	2200      	movs	r2, #0
 8005faa:	2312      	movs	r3, #18
 8005fac:	f8cd 9020 	str.w	r9, [sp, #32]
 8005fb0:	9223      	str	r2, [sp, #140]	; 0x8c
 8005fb2:	e7b0      	b.n	8005f16 <_dtoa_r+0x266>
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	930b      	str	r3, [sp, #44]	; 0x2c
 8005fb8:	e7f4      	b.n	8005fa4 <_dtoa_r+0x2f4>
 8005fba:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8005fbe:	464b      	mov	r3, r9
 8005fc0:	f8cd 9020 	str.w	r9, [sp, #32]
 8005fc4:	e7a7      	b.n	8005f16 <_dtoa_r+0x266>
 8005fc6:	3101      	adds	r1, #1
 8005fc8:	6041      	str	r1, [r0, #4]
 8005fca:	0052      	lsls	r2, r2, #1
 8005fcc:	e7a7      	b.n	8005f1e <_dtoa_r+0x26e>
 8005fce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005fd0:	9a03      	ldr	r2, [sp, #12]
 8005fd2:	601a      	str	r2, [r3, #0]
 8005fd4:	9b08      	ldr	r3, [sp, #32]
 8005fd6:	2b0e      	cmp	r3, #14
 8005fd8:	f200 80a8 	bhi.w	800612c <_dtoa_r+0x47c>
 8005fdc:	2c00      	cmp	r4, #0
 8005fde:	f000 80a5 	beq.w	800612c <_dtoa_r+0x47c>
 8005fe2:	f1ba 0f00 	cmp.w	sl, #0
 8005fe6:	dd34      	ble.n	8006052 <_dtoa_r+0x3a2>
 8005fe8:	4a9a      	ldr	r2, [pc, #616]	; (8006254 <_dtoa_r+0x5a4>)
 8005fea:	f00a 030f 	and.w	r3, sl, #15
 8005fee:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005ff2:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8005ff6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005ffa:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005ffe:	ea4f 142a 	mov.w	r4, sl, asr #4
 8006002:	d016      	beq.n	8006032 <_dtoa_r+0x382>
 8006004:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006008:	4b93      	ldr	r3, [pc, #588]	; (8006258 <_dtoa_r+0x5a8>)
 800600a:	2703      	movs	r7, #3
 800600c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006010:	f7fa fcac 	bl	800096c <__aeabi_ddiv>
 8006014:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006018:	f004 040f 	and.w	r4, r4, #15
 800601c:	4e8e      	ldr	r6, [pc, #568]	; (8006258 <_dtoa_r+0x5a8>)
 800601e:	b954      	cbnz	r4, 8006036 <_dtoa_r+0x386>
 8006020:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006024:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006028:	f7fa fca0 	bl	800096c <__aeabi_ddiv>
 800602c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006030:	e029      	b.n	8006086 <_dtoa_r+0x3d6>
 8006032:	2702      	movs	r7, #2
 8006034:	e7f2      	b.n	800601c <_dtoa_r+0x36c>
 8006036:	07e1      	lsls	r1, r4, #31
 8006038:	d508      	bpl.n	800604c <_dtoa_r+0x39c>
 800603a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800603e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006042:	f7fa fb69 	bl	8000718 <__aeabi_dmul>
 8006046:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800604a:	3701      	adds	r7, #1
 800604c:	1064      	asrs	r4, r4, #1
 800604e:	3608      	adds	r6, #8
 8006050:	e7e5      	b.n	800601e <_dtoa_r+0x36e>
 8006052:	f000 80a5 	beq.w	80061a0 <_dtoa_r+0x4f0>
 8006056:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800605a:	f1ca 0400 	rsb	r4, sl, #0
 800605e:	4b7d      	ldr	r3, [pc, #500]	; (8006254 <_dtoa_r+0x5a4>)
 8006060:	f004 020f 	and.w	r2, r4, #15
 8006064:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800606c:	f7fa fb54 	bl	8000718 <__aeabi_dmul>
 8006070:	2702      	movs	r7, #2
 8006072:	2300      	movs	r3, #0
 8006074:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006078:	4e77      	ldr	r6, [pc, #476]	; (8006258 <_dtoa_r+0x5a8>)
 800607a:	1124      	asrs	r4, r4, #4
 800607c:	2c00      	cmp	r4, #0
 800607e:	f040 8084 	bne.w	800618a <_dtoa_r+0x4da>
 8006082:	2b00      	cmp	r3, #0
 8006084:	d1d2      	bne.n	800602c <_dtoa_r+0x37c>
 8006086:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006088:	2b00      	cmp	r3, #0
 800608a:	f000 808b 	beq.w	80061a4 <_dtoa_r+0x4f4>
 800608e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006092:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006096:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800609a:	2200      	movs	r2, #0
 800609c:	4b6f      	ldr	r3, [pc, #444]	; (800625c <_dtoa_r+0x5ac>)
 800609e:	f7fa fdad 	bl	8000bfc <__aeabi_dcmplt>
 80060a2:	2800      	cmp	r0, #0
 80060a4:	d07e      	beq.n	80061a4 <_dtoa_r+0x4f4>
 80060a6:	9b08      	ldr	r3, [sp, #32]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d07b      	beq.n	80061a4 <_dtoa_r+0x4f4>
 80060ac:	f1b9 0f00 	cmp.w	r9, #0
 80060b0:	dd38      	ble.n	8006124 <_dtoa_r+0x474>
 80060b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80060b6:	2200      	movs	r2, #0
 80060b8:	4b69      	ldr	r3, [pc, #420]	; (8006260 <_dtoa_r+0x5b0>)
 80060ba:	f7fa fb2d 	bl	8000718 <__aeabi_dmul>
 80060be:	464c      	mov	r4, r9
 80060c0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80060c4:	f10a 38ff 	add.w	r8, sl, #4294967295
 80060c8:	3701      	adds	r7, #1
 80060ca:	4638      	mov	r0, r7
 80060cc:	f7fa faba 	bl	8000644 <__aeabi_i2d>
 80060d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80060d4:	f7fa fb20 	bl	8000718 <__aeabi_dmul>
 80060d8:	2200      	movs	r2, #0
 80060da:	4b62      	ldr	r3, [pc, #392]	; (8006264 <_dtoa_r+0x5b4>)
 80060dc:	f7fa f966 	bl	80003ac <__adddf3>
 80060e0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80060e4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80060e8:	9611      	str	r6, [sp, #68]	; 0x44
 80060ea:	2c00      	cmp	r4, #0
 80060ec:	d15d      	bne.n	80061aa <_dtoa_r+0x4fa>
 80060ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80060f2:	2200      	movs	r2, #0
 80060f4:	4b5c      	ldr	r3, [pc, #368]	; (8006268 <_dtoa_r+0x5b8>)
 80060f6:	f7fa f957 	bl	80003a8 <__aeabi_dsub>
 80060fa:	4602      	mov	r2, r0
 80060fc:	460b      	mov	r3, r1
 80060fe:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006102:	4633      	mov	r3, r6
 8006104:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006106:	f7fa fd97 	bl	8000c38 <__aeabi_dcmpgt>
 800610a:	2800      	cmp	r0, #0
 800610c:	f040 829c 	bne.w	8006648 <_dtoa_r+0x998>
 8006110:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006114:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006116:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800611a:	f7fa fd6f 	bl	8000bfc <__aeabi_dcmplt>
 800611e:	2800      	cmp	r0, #0
 8006120:	f040 8290 	bne.w	8006644 <_dtoa_r+0x994>
 8006124:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8006128:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800612c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800612e:	2b00      	cmp	r3, #0
 8006130:	f2c0 8152 	blt.w	80063d8 <_dtoa_r+0x728>
 8006134:	f1ba 0f0e 	cmp.w	sl, #14
 8006138:	f300 814e 	bgt.w	80063d8 <_dtoa_r+0x728>
 800613c:	4b45      	ldr	r3, [pc, #276]	; (8006254 <_dtoa_r+0x5a4>)
 800613e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006142:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006146:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800614a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800614c:	2b00      	cmp	r3, #0
 800614e:	f280 80db 	bge.w	8006308 <_dtoa_r+0x658>
 8006152:	9b08      	ldr	r3, [sp, #32]
 8006154:	2b00      	cmp	r3, #0
 8006156:	f300 80d7 	bgt.w	8006308 <_dtoa_r+0x658>
 800615a:	f040 8272 	bne.w	8006642 <_dtoa_r+0x992>
 800615e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006162:	2200      	movs	r2, #0
 8006164:	4b40      	ldr	r3, [pc, #256]	; (8006268 <_dtoa_r+0x5b8>)
 8006166:	f7fa fad7 	bl	8000718 <__aeabi_dmul>
 800616a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800616e:	f7fa fd59 	bl	8000c24 <__aeabi_dcmpge>
 8006172:	9c08      	ldr	r4, [sp, #32]
 8006174:	4626      	mov	r6, r4
 8006176:	2800      	cmp	r0, #0
 8006178:	f040 8248 	bne.w	800660c <_dtoa_r+0x95c>
 800617c:	2331      	movs	r3, #49	; 0x31
 800617e:	9f03      	ldr	r7, [sp, #12]
 8006180:	f10a 0a01 	add.w	sl, sl, #1
 8006184:	f807 3b01 	strb.w	r3, [r7], #1
 8006188:	e244      	b.n	8006614 <_dtoa_r+0x964>
 800618a:	07e2      	lsls	r2, r4, #31
 800618c:	d505      	bpl.n	800619a <_dtoa_r+0x4ea>
 800618e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006192:	f7fa fac1 	bl	8000718 <__aeabi_dmul>
 8006196:	2301      	movs	r3, #1
 8006198:	3701      	adds	r7, #1
 800619a:	1064      	asrs	r4, r4, #1
 800619c:	3608      	adds	r6, #8
 800619e:	e76d      	b.n	800607c <_dtoa_r+0x3cc>
 80061a0:	2702      	movs	r7, #2
 80061a2:	e770      	b.n	8006086 <_dtoa_r+0x3d6>
 80061a4:	46d0      	mov	r8, sl
 80061a6:	9c08      	ldr	r4, [sp, #32]
 80061a8:	e78f      	b.n	80060ca <_dtoa_r+0x41a>
 80061aa:	9903      	ldr	r1, [sp, #12]
 80061ac:	4b29      	ldr	r3, [pc, #164]	; (8006254 <_dtoa_r+0x5a4>)
 80061ae:	4421      	add	r1, r4
 80061b0:	9112      	str	r1, [sp, #72]	; 0x48
 80061b2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80061b4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80061b8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80061bc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80061c0:	2900      	cmp	r1, #0
 80061c2:	d055      	beq.n	8006270 <_dtoa_r+0x5c0>
 80061c4:	2000      	movs	r0, #0
 80061c6:	4929      	ldr	r1, [pc, #164]	; (800626c <_dtoa_r+0x5bc>)
 80061c8:	f7fa fbd0 	bl	800096c <__aeabi_ddiv>
 80061cc:	463b      	mov	r3, r7
 80061ce:	4632      	mov	r2, r6
 80061d0:	f7fa f8ea 	bl	80003a8 <__aeabi_dsub>
 80061d4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80061d8:	9f03      	ldr	r7, [sp, #12]
 80061da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80061de:	f7fa fd4b 	bl	8000c78 <__aeabi_d2iz>
 80061e2:	4604      	mov	r4, r0
 80061e4:	f7fa fa2e 	bl	8000644 <__aeabi_i2d>
 80061e8:	4602      	mov	r2, r0
 80061ea:	460b      	mov	r3, r1
 80061ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80061f0:	f7fa f8da 	bl	80003a8 <__aeabi_dsub>
 80061f4:	4602      	mov	r2, r0
 80061f6:	460b      	mov	r3, r1
 80061f8:	3430      	adds	r4, #48	; 0x30
 80061fa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80061fe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006202:	f807 4b01 	strb.w	r4, [r7], #1
 8006206:	f7fa fcf9 	bl	8000bfc <__aeabi_dcmplt>
 800620a:	2800      	cmp	r0, #0
 800620c:	d174      	bne.n	80062f8 <_dtoa_r+0x648>
 800620e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006212:	2000      	movs	r0, #0
 8006214:	4911      	ldr	r1, [pc, #68]	; (800625c <_dtoa_r+0x5ac>)
 8006216:	f7fa f8c7 	bl	80003a8 <__aeabi_dsub>
 800621a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800621e:	f7fa fced 	bl	8000bfc <__aeabi_dcmplt>
 8006222:	2800      	cmp	r0, #0
 8006224:	f040 80b7 	bne.w	8006396 <_dtoa_r+0x6e6>
 8006228:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800622a:	429f      	cmp	r7, r3
 800622c:	f43f af7a 	beq.w	8006124 <_dtoa_r+0x474>
 8006230:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006234:	2200      	movs	r2, #0
 8006236:	4b0a      	ldr	r3, [pc, #40]	; (8006260 <_dtoa_r+0x5b0>)
 8006238:	f7fa fa6e 	bl	8000718 <__aeabi_dmul>
 800623c:	2200      	movs	r2, #0
 800623e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006242:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006246:	4b06      	ldr	r3, [pc, #24]	; (8006260 <_dtoa_r+0x5b0>)
 8006248:	f7fa fa66 	bl	8000718 <__aeabi_dmul>
 800624c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006250:	e7c3      	b.n	80061da <_dtoa_r+0x52a>
 8006252:	bf00      	nop
 8006254:	08008d28 	.word	0x08008d28
 8006258:	08008d00 	.word	0x08008d00
 800625c:	3ff00000 	.word	0x3ff00000
 8006260:	40240000 	.word	0x40240000
 8006264:	401c0000 	.word	0x401c0000
 8006268:	40140000 	.word	0x40140000
 800626c:	3fe00000 	.word	0x3fe00000
 8006270:	4630      	mov	r0, r6
 8006272:	4639      	mov	r1, r7
 8006274:	f7fa fa50 	bl	8000718 <__aeabi_dmul>
 8006278:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800627a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800627e:	9c03      	ldr	r4, [sp, #12]
 8006280:	9314      	str	r3, [sp, #80]	; 0x50
 8006282:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006286:	f7fa fcf7 	bl	8000c78 <__aeabi_d2iz>
 800628a:	9015      	str	r0, [sp, #84]	; 0x54
 800628c:	f7fa f9da 	bl	8000644 <__aeabi_i2d>
 8006290:	4602      	mov	r2, r0
 8006292:	460b      	mov	r3, r1
 8006294:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006298:	f7fa f886 	bl	80003a8 <__aeabi_dsub>
 800629c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800629e:	4606      	mov	r6, r0
 80062a0:	3330      	adds	r3, #48	; 0x30
 80062a2:	f804 3b01 	strb.w	r3, [r4], #1
 80062a6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80062a8:	460f      	mov	r7, r1
 80062aa:	429c      	cmp	r4, r3
 80062ac:	f04f 0200 	mov.w	r2, #0
 80062b0:	d124      	bne.n	80062fc <_dtoa_r+0x64c>
 80062b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80062b6:	4bb0      	ldr	r3, [pc, #704]	; (8006578 <_dtoa_r+0x8c8>)
 80062b8:	f7fa f878 	bl	80003ac <__adddf3>
 80062bc:	4602      	mov	r2, r0
 80062be:	460b      	mov	r3, r1
 80062c0:	4630      	mov	r0, r6
 80062c2:	4639      	mov	r1, r7
 80062c4:	f7fa fcb8 	bl	8000c38 <__aeabi_dcmpgt>
 80062c8:	2800      	cmp	r0, #0
 80062ca:	d163      	bne.n	8006394 <_dtoa_r+0x6e4>
 80062cc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80062d0:	2000      	movs	r0, #0
 80062d2:	49a9      	ldr	r1, [pc, #676]	; (8006578 <_dtoa_r+0x8c8>)
 80062d4:	f7fa f868 	bl	80003a8 <__aeabi_dsub>
 80062d8:	4602      	mov	r2, r0
 80062da:	460b      	mov	r3, r1
 80062dc:	4630      	mov	r0, r6
 80062de:	4639      	mov	r1, r7
 80062e0:	f7fa fc8c 	bl	8000bfc <__aeabi_dcmplt>
 80062e4:	2800      	cmp	r0, #0
 80062e6:	f43f af1d 	beq.w	8006124 <_dtoa_r+0x474>
 80062ea:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80062ec:	1e7b      	subs	r3, r7, #1
 80062ee:	9314      	str	r3, [sp, #80]	; 0x50
 80062f0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80062f4:	2b30      	cmp	r3, #48	; 0x30
 80062f6:	d0f8      	beq.n	80062ea <_dtoa_r+0x63a>
 80062f8:	46c2      	mov	sl, r8
 80062fa:	e03b      	b.n	8006374 <_dtoa_r+0x6c4>
 80062fc:	4b9f      	ldr	r3, [pc, #636]	; (800657c <_dtoa_r+0x8cc>)
 80062fe:	f7fa fa0b 	bl	8000718 <__aeabi_dmul>
 8006302:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006306:	e7bc      	b.n	8006282 <_dtoa_r+0x5d2>
 8006308:	9f03      	ldr	r7, [sp, #12]
 800630a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800630e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006312:	4640      	mov	r0, r8
 8006314:	4649      	mov	r1, r9
 8006316:	f7fa fb29 	bl	800096c <__aeabi_ddiv>
 800631a:	f7fa fcad 	bl	8000c78 <__aeabi_d2iz>
 800631e:	4604      	mov	r4, r0
 8006320:	f7fa f990 	bl	8000644 <__aeabi_i2d>
 8006324:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006328:	f7fa f9f6 	bl	8000718 <__aeabi_dmul>
 800632c:	4602      	mov	r2, r0
 800632e:	460b      	mov	r3, r1
 8006330:	4640      	mov	r0, r8
 8006332:	4649      	mov	r1, r9
 8006334:	f7fa f838 	bl	80003a8 <__aeabi_dsub>
 8006338:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800633c:	f807 6b01 	strb.w	r6, [r7], #1
 8006340:	9e03      	ldr	r6, [sp, #12]
 8006342:	f8dd c020 	ldr.w	ip, [sp, #32]
 8006346:	1bbe      	subs	r6, r7, r6
 8006348:	45b4      	cmp	ip, r6
 800634a:	4602      	mov	r2, r0
 800634c:	460b      	mov	r3, r1
 800634e:	d136      	bne.n	80063be <_dtoa_r+0x70e>
 8006350:	f7fa f82c 	bl	80003ac <__adddf3>
 8006354:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006358:	4680      	mov	r8, r0
 800635a:	4689      	mov	r9, r1
 800635c:	f7fa fc6c 	bl	8000c38 <__aeabi_dcmpgt>
 8006360:	bb58      	cbnz	r0, 80063ba <_dtoa_r+0x70a>
 8006362:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006366:	4640      	mov	r0, r8
 8006368:	4649      	mov	r1, r9
 800636a:	f7fa fc3d 	bl	8000be8 <__aeabi_dcmpeq>
 800636e:	b108      	cbz	r0, 8006374 <_dtoa_r+0x6c4>
 8006370:	07e1      	lsls	r1, r4, #31
 8006372:	d422      	bmi.n	80063ba <_dtoa_r+0x70a>
 8006374:	4628      	mov	r0, r5
 8006376:	4659      	mov	r1, fp
 8006378:	f000 fe68 	bl	800704c <_Bfree>
 800637c:	2300      	movs	r3, #0
 800637e:	703b      	strb	r3, [r7, #0]
 8006380:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006382:	f10a 0001 	add.w	r0, sl, #1
 8006386:	6018      	str	r0, [r3, #0]
 8006388:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800638a:	2b00      	cmp	r3, #0
 800638c:	f43f acde 	beq.w	8005d4c <_dtoa_r+0x9c>
 8006390:	601f      	str	r7, [r3, #0]
 8006392:	e4db      	b.n	8005d4c <_dtoa_r+0x9c>
 8006394:	4627      	mov	r7, r4
 8006396:	463b      	mov	r3, r7
 8006398:	461f      	mov	r7, r3
 800639a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800639e:	2a39      	cmp	r2, #57	; 0x39
 80063a0:	d107      	bne.n	80063b2 <_dtoa_r+0x702>
 80063a2:	9a03      	ldr	r2, [sp, #12]
 80063a4:	429a      	cmp	r2, r3
 80063a6:	d1f7      	bne.n	8006398 <_dtoa_r+0x6e8>
 80063a8:	2230      	movs	r2, #48	; 0x30
 80063aa:	9903      	ldr	r1, [sp, #12]
 80063ac:	f108 0801 	add.w	r8, r8, #1
 80063b0:	700a      	strb	r2, [r1, #0]
 80063b2:	781a      	ldrb	r2, [r3, #0]
 80063b4:	3201      	adds	r2, #1
 80063b6:	701a      	strb	r2, [r3, #0]
 80063b8:	e79e      	b.n	80062f8 <_dtoa_r+0x648>
 80063ba:	46d0      	mov	r8, sl
 80063bc:	e7eb      	b.n	8006396 <_dtoa_r+0x6e6>
 80063be:	2200      	movs	r2, #0
 80063c0:	4b6e      	ldr	r3, [pc, #440]	; (800657c <_dtoa_r+0x8cc>)
 80063c2:	f7fa f9a9 	bl	8000718 <__aeabi_dmul>
 80063c6:	2200      	movs	r2, #0
 80063c8:	2300      	movs	r3, #0
 80063ca:	4680      	mov	r8, r0
 80063cc:	4689      	mov	r9, r1
 80063ce:	f7fa fc0b 	bl	8000be8 <__aeabi_dcmpeq>
 80063d2:	2800      	cmp	r0, #0
 80063d4:	d09b      	beq.n	800630e <_dtoa_r+0x65e>
 80063d6:	e7cd      	b.n	8006374 <_dtoa_r+0x6c4>
 80063d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80063da:	2a00      	cmp	r2, #0
 80063dc:	f000 80d0 	beq.w	8006580 <_dtoa_r+0x8d0>
 80063e0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80063e2:	2a01      	cmp	r2, #1
 80063e4:	f300 80ae 	bgt.w	8006544 <_dtoa_r+0x894>
 80063e8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80063ea:	2a00      	cmp	r2, #0
 80063ec:	f000 80a6 	beq.w	800653c <_dtoa_r+0x88c>
 80063f0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80063f4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80063f6:	9f06      	ldr	r7, [sp, #24]
 80063f8:	9a06      	ldr	r2, [sp, #24]
 80063fa:	2101      	movs	r1, #1
 80063fc:	441a      	add	r2, r3
 80063fe:	9206      	str	r2, [sp, #24]
 8006400:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006402:	4628      	mov	r0, r5
 8006404:	441a      	add	r2, r3
 8006406:	9209      	str	r2, [sp, #36]	; 0x24
 8006408:	f000 ff20 	bl	800724c <__i2b>
 800640c:	4606      	mov	r6, r0
 800640e:	2f00      	cmp	r7, #0
 8006410:	dd0c      	ble.n	800642c <_dtoa_r+0x77c>
 8006412:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006414:	2b00      	cmp	r3, #0
 8006416:	dd09      	ble.n	800642c <_dtoa_r+0x77c>
 8006418:	42bb      	cmp	r3, r7
 800641a:	bfa8      	it	ge
 800641c:	463b      	movge	r3, r7
 800641e:	9a06      	ldr	r2, [sp, #24]
 8006420:	1aff      	subs	r7, r7, r3
 8006422:	1ad2      	subs	r2, r2, r3
 8006424:	9206      	str	r2, [sp, #24]
 8006426:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006428:	1ad3      	subs	r3, r2, r3
 800642a:	9309      	str	r3, [sp, #36]	; 0x24
 800642c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800642e:	b1f3      	cbz	r3, 800646e <_dtoa_r+0x7be>
 8006430:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006432:	2b00      	cmp	r3, #0
 8006434:	f000 80a8 	beq.w	8006588 <_dtoa_r+0x8d8>
 8006438:	2c00      	cmp	r4, #0
 800643a:	dd10      	ble.n	800645e <_dtoa_r+0x7ae>
 800643c:	4631      	mov	r1, r6
 800643e:	4622      	mov	r2, r4
 8006440:	4628      	mov	r0, r5
 8006442:	f000 ffc1 	bl	80073c8 <__pow5mult>
 8006446:	465a      	mov	r2, fp
 8006448:	4601      	mov	r1, r0
 800644a:	4606      	mov	r6, r0
 800644c:	4628      	mov	r0, r5
 800644e:	f000 ff13 	bl	8007278 <__multiply>
 8006452:	4680      	mov	r8, r0
 8006454:	4659      	mov	r1, fp
 8006456:	4628      	mov	r0, r5
 8006458:	f000 fdf8 	bl	800704c <_Bfree>
 800645c:	46c3      	mov	fp, r8
 800645e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006460:	1b1a      	subs	r2, r3, r4
 8006462:	d004      	beq.n	800646e <_dtoa_r+0x7be>
 8006464:	4659      	mov	r1, fp
 8006466:	4628      	mov	r0, r5
 8006468:	f000 ffae 	bl	80073c8 <__pow5mult>
 800646c:	4683      	mov	fp, r0
 800646e:	2101      	movs	r1, #1
 8006470:	4628      	mov	r0, r5
 8006472:	f000 feeb 	bl	800724c <__i2b>
 8006476:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006478:	4604      	mov	r4, r0
 800647a:	2b00      	cmp	r3, #0
 800647c:	f340 8086 	ble.w	800658c <_dtoa_r+0x8dc>
 8006480:	461a      	mov	r2, r3
 8006482:	4601      	mov	r1, r0
 8006484:	4628      	mov	r0, r5
 8006486:	f000 ff9f 	bl	80073c8 <__pow5mult>
 800648a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800648c:	4604      	mov	r4, r0
 800648e:	2b01      	cmp	r3, #1
 8006490:	dd7f      	ble.n	8006592 <_dtoa_r+0x8e2>
 8006492:	f04f 0800 	mov.w	r8, #0
 8006496:	6923      	ldr	r3, [r4, #16]
 8006498:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800649c:	6918      	ldr	r0, [r3, #16]
 800649e:	f000 fe87 	bl	80071b0 <__hi0bits>
 80064a2:	f1c0 0020 	rsb	r0, r0, #32
 80064a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064a8:	4418      	add	r0, r3
 80064aa:	f010 001f 	ands.w	r0, r0, #31
 80064ae:	f000 8092 	beq.w	80065d6 <_dtoa_r+0x926>
 80064b2:	f1c0 0320 	rsb	r3, r0, #32
 80064b6:	2b04      	cmp	r3, #4
 80064b8:	f340 808a 	ble.w	80065d0 <_dtoa_r+0x920>
 80064bc:	f1c0 001c 	rsb	r0, r0, #28
 80064c0:	9b06      	ldr	r3, [sp, #24]
 80064c2:	4407      	add	r7, r0
 80064c4:	4403      	add	r3, r0
 80064c6:	9306      	str	r3, [sp, #24]
 80064c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064ca:	4403      	add	r3, r0
 80064cc:	9309      	str	r3, [sp, #36]	; 0x24
 80064ce:	9b06      	ldr	r3, [sp, #24]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	dd05      	ble.n	80064e0 <_dtoa_r+0x830>
 80064d4:	4659      	mov	r1, fp
 80064d6:	461a      	mov	r2, r3
 80064d8:	4628      	mov	r0, r5
 80064da:	f000 ffcf 	bl	800747c <__lshift>
 80064de:	4683      	mov	fp, r0
 80064e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	dd05      	ble.n	80064f2 <_dtoa_r+0x842>
 80064e6:	4621      	mov	r1, r4
 80064e8:	461a      	mov	r2, r3
 80064ea:	4628      	mov	r0, r5
 80064ec:	f000 ffc6 	bl	800747c <__lshift>
 80064f0:	4604      	mov	r4, r0
 80064f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d070      	beq.n	80065da <_dtoa_r+0x92a>
 80064f8:	4621      	mov	r1, r4
 80064fa:	4658      	mov	r0, fp
 80064fc:	f001 f82e 	bl	800755c <__mcmp>
 8006500:	2800      	cmp	r0, #0
 8006502:	da6a      	bge.n	80065da <_dtoa_r+0x92a>
 8006504:	2300      	movs	r3, #0
 8006506:	4659      	mov	r1, fp
 8006508:	220a      	movs	r2, #10
 800650a:	4628      	mov	r0, r5
 800650c:	f000 fdc0 	bl	8007090 <__multadd>
 8006510:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006512:	4683      	mov	fp, r0
 8006514:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006518:	2b00      	cmp	r3, #0
 800651a:	f000 8194 	beq.w	8006846 <_dtoa_r+0xb96>
 800651e:	4631      	mov	r1, r6
 8006520:	2300      	movs	r3, #0
 8006522:	220a      	movs	r2, #10
 8006524:	4628      	mov	r0, r5
 8006526:	f000 fdb3 	bl	8007090 <__multadd>
 800652a:	f1b9 0f00 	cmp.w	r9, #0
 800652e:	4606      	mov	r6, r0
 8006530:	f300 8093 	bgt.w	800665a <_dtoa_r+0x9aa>
 8006534:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006536:	2b02      	cmp	r3, #2
 8006538:	dc57      	bgt.n	80065ea <_dtoa_r+0x93a>
 800653a:	e08e      	b.n	800665a <_dtoa_r+0x9aa>
 800653c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800653e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006542:	e757      	b.n	80063f4 <_dtoa_r+0x744>
 8006544:	9b08      	ldr	r3, [sp, #32]
 8006546:	1e5c      	subs	r4, r3, #1
 8006548:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800654a:	42a3      	cmp	r3, r4
 800654c:	bfb7      	itett	lt
 800654e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006550:	1b1c      	subge	r4, r3, r4
 8006552:	1ae2      	sublt	r2, r4, r3
 8006554:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8006556:	bfbe      	ittt	lt
 8006558:	940a      	strlt	r4, [sp, #40]	; 0x28
 800655a:	189b      	addlt	r3, r3, r2
 800655c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800655e:	9b08      	ldr	r3, [sp, #32]
 8006560:	bfb8      	it	lt
 8006562:	2400      	movlt	r4, #0
 8006564:	2b00      	cmp	r3, #0
 8006566:	bfbb      	ittet	lt
 8006568:	9b06      	ldrlt	r3, [sp, #24]
 800656a:	9a08      	ldrlt	r2, [sp, #32]
 800656c:	9f06      	ldrge	r7, [sp, #24]
 800656e:	1a9f      	sublt	r7, r3, r2
 8006570:	bfac      	ite	ge
 8006572:	9b08      	ldrge	r3, [sp, #32]
 8006574:	2300      	movlt	r3, #0
 8006576:	e73f      	b.n	80063f8 <_dtoa_r+0x748>
 8006578:	3fe00000 	.word	0x3fe00000
 800657c:	40240000 	.word	0x40240000
 8006580:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006582:	9f06      	ldr	r7, [sp, #24]
 8006584:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006586:	e742      	b.n	800640e <_dtoa_r+0x75e>
 8006588:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800658a:	e76b      	b.n	8006464 <_dtoa_r+0x7b4>
 800658c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800658e:	2b01      	cmp	r3, #1
 8006590:	dc19      	bgt.n	80065c6 <_dtoa_r+0x916>
 8006592:	9b04      	ldr	r3, [sp, #16]
 8006594:	b9bb      	cbnz	r3, 80065c6 <_dtoa_r+0x916>
 8006596:	9b05      	ldr	r3, [sp, #20]
 8006598:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800659c:	b99b      	cbnz	r3, 80065c6 <_dtoa_r+0x916>
 800659e:	9b05      	ldr	r3, [sp, #20]
 80065a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80065a4:	0d1b      	lsrs	r3, r3, #20
 80065a6:	051b      	lsls	r3, r3, #20
 80065a8:	b183      	cbz	r3, 80065cc <_dtoa_r+0x91c>
 80065aa:	f04f 0801 	mov.w	r8, #1
 80065ae:	9b06      	ldr	r3, [sp, #24]
 80065b0:	3301      	adds	r3, #1
 80065b2:	9306      	str	r3, [sp, #24]
 80065b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065b6:	3301      	adds	r3, #1
 80065b8:	9309      	str	r3, [sp, #36]	; 0x24
 80065ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80065bc:	2b00      	cmp	r3, #0
 80065be:	f47f af6a 	bne.w	8006496 <_dtoa_r+0x7e6>
 80065c2:	2001      	movs	r0, #1
 80065c4:	e76f      	b.n	80064a6 <_dtoa_r+0x7f6>
 80065c6:	f04f 0800 	mov.w	r8, #0
 80065ca:	e7f6      	b.n	80065ba <_dtoa_r+0x90a>
 80065cc:	4698      	mov	r8, r3
 80065ce:	e7f4      	b.n	80065ba <_dtoa_r+0x90a>
 80065d0:	f43f af7d 	beq.w	80064ce <_dtoa_r+0x81e>
 80065d4:	4618      	mov	r0, r3
 80065d6:	301c      	adds	r0, #28
 80065d8:	e772      	b.n	80064c0 <_dtoa_r+0x810>
 80065da:	9b08      	ldr	r3, [sp, #32]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	dc36      	bgt.n	800664e <_dtoa_r+0x99e>
 80065e0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80065e2:	2b02      	cmp	r3, #2
 80065e4:	dd33      	ble.n	800664e <_dtoa_r+0x99e>
 80065e6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80065ea:	f1b9 0f00 	cmp.w	r9, #0
 80065ee:	d10d      	bne.n	800660c <_dtoa_r+0x95c>
 80065f0:	4621      	mov	r1, r4
 80065f2:	464b      	mov	r3, r9
 80065f4:	2205      	movs	r2, #5
 80065f6:	4628      	mov	r0, r5
 80065f8:	f000 fd4a 	bl	8007090 <__multadd>
 80065fc:	4601      	mov	r1, r0
 80065fe:	4604      	mov	r4, r0
 8006600:	4658      	mov	r0, fp
 8006602:	f000 ffab 	bl	800755c <__mcmp>
 8006606:	2800      	cmp	r0, #0
 8006608:	f73f adb8 	bgt.w	800617c <_dtoa_r+0x4cc>
 800660c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800660e:	9f03      	ldr	r7, [sp, #12]
 8006610:	ea6f 0a03 	mvn.w	sl, r3
 8006614:	f04f 0800 	mov.w	r8, #0
 8006618:	4621      	mov	r1, r4
 800661a:	4628      	mov	r0, r5
 800661c:	f000 fd16 	bl	800704c <_Bfree>
 8006620:	2e00      	cmp	r6, #0
 8006622:	f43f aea7 	beq.w	8006374 <_dtoa_r+0x6c4>
 8006626:	f1b8 0f00 	cmp.w	r8, #0
 800662a:	d005      	beq.n	8006638 <_dtoa_r+0x988>
 800662c:	45b0      	cmp	r8, r6
 800662e:	d003      	beq.n	8006638 <_dtoa_r+0x988>
 8006630:	4641      	mov	r1, r8
 8006632:	4628      	mov	r0, r5
 8006634:	f000 fd0a 	bl	800704c <_Bfree>
 8006638:	4631      	mov	r1, r6
 800663a:	4628      	mov	r0, r5
 800663c:	f000 fd06 	bl	800704c <_Bfree>
 8006640:	e698      	b.n	8006374 <_dtoa_r+0x6c4>
 8006642:	2400      	movs	r4, #0
 8006644:	4626      	mov	r6, r4
 8006646:	e7e1      	b.n	800660c <_dtoa_r+0x95c>
 8006648:	46c2      	mov	sl, r8
 800664a:	4626      	mov	r6, r4
 800664c:	e596      	b.n	800617c <_dtoa_r+0x4cc>
 800664e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006650:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006654:	2b00      	cmp	r3, #0
 8006656:	f000 80fd 	beq.w	8006854 <_dtoa_r+0xba4>
 800665a:	2f00      	cmp	r7, #0
 800665c:	dd05      	ble.n	800666a <_dtoa_r+0x9ba>
 800665e:	4631      	mov	r1, r6
 8006660:	463a      	mov	r2, r7
 8006662:	4628      	mov	r0, r5
 8006664:	f000 ff0a 	bl	800747c <__lshift>
 8006668:	4606      	mov	r6, r0
 800666a:	f1b8 0f00 	cmp.w	r8, #0
 800666e:	d05c      	beq.n	800672a <_dtoa_r+0xa7a>
 8006670:	4628      	mov	r0, r5
 8006672:	6871      	ldr	r1, [r6, #4]
 8006674:	f000 fcaa 	bl	8006fcc <_Balloc>
 8006678:	4607      	mov	r7, r0
 800667a:	b928      	cbnz	r0, 8006688 <_dtoa_r+0x9d8>
 800667c:	4602      	mov	r2, r0
 800667e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006682:	4b7f      	ldr	r3, [pc, #508]	; (8006880 <_dtoa_r+0xbd0>)
 8006684:	f7ff bb28 	b.w	8005cd8 <_dtoa_r+0x28>
 8006688:	6932      	ldr	r2, [r6, #16]
 800668a:	f106 010c 	add.w	r1, r6, #12
 800668e:	3202      	adds	r2, #2
 8006690:	0092      	lsls	r2, r2, #2
 8006692:	300c      	adds	r0, #12
 8006694:	f000 fc8c 	bl	8006fb0 <memcpy>
 8006698:	2201      	movs	r2, #1
 800669a:	4639      	mov	r1, r7
 800669c:	4628      	mov	r0, r5
 800669e:	f000 feed 	bl	800747c <__lshift>
 80066a2:	46b0      	mov	r8, r6
 80066a4:	4606      	mov	r6, r0
 80066a6:	9b03      	ldr	r3, [sp, #12]
 80066a8:	3301      	adds	r3, #1
 80066aa:	9308      	str	r3, [sp, #32]
 80066ac:	9b03      	ldr	r3, [sp, #12]
 80066ae:	444b      	add	r3, r9
 80066b0:	930a      	str	r3, [sp, #40]	; 0x28
 80066b2:	9b04      	ldr	r3, [sp, #16]
 80066b4:	f003 0301 	and.w	r3, r3, #1
 80066b8:	9309      	str	r3, [sp, #36]	; 0x24
 80066ba:	9b08      	ldr	r3, [sp, #32]
 80066bc:	4621      	mov	r1, r4
 80066be:	3b01      	subs	r3, #1
 80066c0:	4658      	mov	r0, fp
 80066c2:	9304      	str	r3, [sp, #16]
 80066c4:	f7ff fa68 	bl	8005b98 <quorem>
 80066c8:	4603      	mov	r3, r0
 80066ca:	4641      	mov	r1, r8
 80066cc:	3330      	adds	r3, #48	; 0x30
 80066ce:	9006      	str	r0, [sp, #24]
 80066d0:	4658      	mov	r0, fp
 80066d2:	930b      	str	r3, [sp, #44]	; 0x2c
 80066d4:	f000 ff42 	bl	800755c <__mcmp>
 80066d8:	4632      	mov	r2, r6
 80066da:	4681      	mov	r9, r0
 80066dc:	4621      	mov	r1, r4
 80066de:	4628      	mov	r0, r5
 80066e0:	f000 ff58 	bl	8007594 <__mdiff>
 80066e4:	68c2      	ldr	r2, [r0, #12]
 80066e6:	4607      	mov	r7, r0
 80066e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80066ea:	bb02      	cbnz	r2, 800672e <_dtoa_r+0xa7e>
 80066ec:	4601      	mov	r1, r0
 80066ee:	4658      	mov	r0, fp
 80066f0:	f000 ff34 	bl	800755c <__mcmp>
 80066f4:	4602      	mov	r2, r0
 80066f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80066f8:	4639      	mov	r1, r7
 80066fa:	4628      	mov	r0, r5
 80066fc:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8006700:	f000 fca4 	bl	800704c <_Bfree>
 8006704:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006706:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006708:	9f08      	ldr	r7, [sp, #32]
 800670a:	ea43 0102 	orr.w	r1, r3, r2
 800670e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006710:	430b      	orrs	r3, r1
 8006712:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006714:	d10d      	bne.n	8006732 <_dtoa_r+0xa82>
 8006716:	2b39      	cmp	r3, #57	; 0x39
 8006718:	d029      	beq.n	800676e <_dtoa_r+0xabe>
 800671a:	f1b9 0f00 	cmp.w	r9, #0
 800671e:	dd01      	ble.n	8006724 <_dtoa_r+0xa74>
 8006720:	9b06      	ldr	r3, [sp, #24]
 8006722:	3331      	adds	r3, #49	; 0x31
 8006724:	9a04      	ldr	r2, [sp, #16]
 8006726:	7013      	strb	r3, [r2, #0]
 8006728:	e776      	b.n	8006618 <_dtoa_r+0x968>
 800672a:	4630      	mov	r0, r6
 800672c:	e7b9      	b.n	80066a2 <_dtoa_r+0x9f2>
 800672e:	2201      	movs	r2, #1
 8006730:	e7e2      	b.n	80066f8 <_dtoa_r+0xa48>
 8006732:	f1b9 0f00 	cmp.w	r9, #0
 8006736:	db06      	blt.n	8006746 <_dtoa_r+0xa96>
 8006738:	9922      	ldr	r1, [sp, #136]	; 0x88
 800673a:	ea41 0909 	orr.w	r9, r1, r9
 800673e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006740:	ea59 0101 	orrs.w	r1, r9, r1
 8006744:	d120      	bne.n	8006788 <_dtoa_r+0xad8>
 8006746:	2a00      	cmp	r2, #0
 8006748:	ddec      	ble.n	8006724 <_dtoa_r+0xa74>
 800674a:	4659      	mov	r1, fp
 800674c:	2201      	movs	r2, #1
 800674e:	4628      	mov	r0, r5
 8006750:	9308      	str	r3, [sp, #32]
 8006752:	f000 fe93 	bl	800747c <__lshift>
 8006756:	4621      	mov	r1, r4
 8006758:	4683      	mov	fp, r0
 800675a:	f000 feff 	bl	800755c <__mcmp>
 800675e:	2800      	cmp	r0, #0
 8006760:	9b08      	ldr	r3, [sp, #32]
 8006762:	dc02      	bgt.n	800676a <_dtoa_r+0xaba>
 8006764:	d1de      	bne.n	8006724 <_dtoa_r+0xa74>
 8006766:	07da      	lsls	r2, r3, #31
 8006768:	d5dc      	bpl.n	8006724 <_dtoa_r+0xa74>
 800676a:	2b39      	cmp	r3, #57	; 0x39
 800676c:	d1d8      	bne.n	8006720 <_dtoa_r+0xa70>
 800676e:	2339      	movs	r3, #57	; 0x39
 8006770:	9a04      	ldr	r2, [sp, #16]
 8006772:	7013      	strb	r3, [r2, #0]
 8006774:	463b      	mov	r3, r7
 8006776:	461f      	mov	r7, r3
 8006778:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800677c:	3b01      	subs	r3, #1
 800677e:	2a39      	cmp	r2, #57	; 0x39
 8006780:	d050      	beq.n	8006824 <_dtoa_r+0xb74>
 8006782:	3201      	adds	r2, #1
 8006784:	701a      	strb	r2, [r3, #0]
 8006786:	e747      	b.n	8006618 <_dtoa_r+0x968>
 8006788:	2a00      	cmp	r2, #0
 800678a:	dd03      	ble.n	8006794 <_dtoa_r+0xae4>
 800678c:	2b39      	cmp	r3, #57	; 0x39
 800678e:	d0ee      	beq.n	800676e <_dtoa_r+0xabe>
 8006790:	3301      	adds	r3, #1
 8006792:	e7c7      	b.n	8006724 <_dtoa_r+0xa74>
 8006794:	9a08      	ldr	r2, [sp, #32]
 8006796:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006798:	f802 3c01 	strb.w	r3, [r2, #-1]
 800679c:	428a      	cmp	r2, r1
 800679e:	d02a      	beq.n	80067f6 <_dtoa_r+0xb46>
 80067a0:	4659      	mov	r1, fp
 80067a2:	2300      	movs	r3, #0
 80067a4:	220a      	movs	r2, #10
 80067a6:	4628      	mov	r0, r5
 80067a8:	f000 fc72 	bl	8007090 <__multadd>
 80067ac:	45b0      	cmp	r8, r6
 80067ae:	4683      	mov	fp, r0
 80067b0:	f04f 0300 	mov.w	r3, #0
 80067b4:	f04f 020a 	mov.w	r2, #10
 80067b8:	4641      	mov	r1, r8
 80067ba:	4628      	mov	r0, r5
 80067bc:	d107      	bne.n	80067ce <_dtoa_r+0xb1e>
 80067be:	f000 fc67 	bl	8007090 <__multadd>
 80067c2:	4680      	mov	r8, r0
 80067c4:	4606      	mov	r6, r0
 80067c6:	9b08      	ldr	r3, [sp, #32]
 80067c8:	3301      	adds	r3, #1
 80067ca:	9308      	str	r3, [sp, #32]
 80067cc:	e775      	b.n	80066ba <_dtoa_r+0xa0a>
 80067ce:	f000 fc5f 	bl	8007090 <__multadd>
 80067d2:	4631      	mov	r1, r6
 80067d4:	4680      	mov	r8, r0
 80067d6:	2300      	movs	r3, #0
 80067d8:	220a      	movs	r2, #10
 80067da:	4628      	mov	r0, r5
 80067dc:	f000 fc58 	bl	8007090 <__multadd>
 80067e0:	4606      	mov	r6, r0
 80067e2:	e7f0      	b.n	80067c6 <_dtoa_r+0xb16>
 80067e4:	f1b9 0f00 	cmp.w	r9, #0
 80067e8:	bfcc      	ite	gt
 80067ea:	464f      	movgt	r7, r9
 80067ec:	2701      	movle	r7, #1
 80067ee:	f04f 0800 	mov.w	r8, #0
 80067f2:	9a03      	ldr	r2, [sp, #12]
 80067f4:	4417      	add	r7, r2
 80067f6:	4659      	mov	r1, fp
 80067f8:	2201      	movs	r2, #1
 80067fa:	4628      	mov	r0, r5
 80067fc:	9308      	str	r3, [sp, #32]
 80067fe:	f000 fe3d 	bl	800747c <__lshift>
 8006802:	4621      	mov	r1, r4
 8006804:	4683      	mov	fp, r0
 8006806:	f000 fea9 	bl	800755c <__mcmp>
 800680a:	2800      	cmp	r0, #0
 800680c:	dcb2      	bgt.n	8006774 <_dtoa_r+0xac4>
 800680e:	d102      	bne.n	8006816 <_dtoa_r+0xb66>
 8006810:	9b08      	ldr	r3, [sp, #32]
 8006812:	07db      	lsls	r3, r3, #31
 8006814:	d4ae      	bmi.n	8006774 <_dtoa_r+0xac4>
 8006816:	463b      	mov	r3, r7
 8006818:	461f      	mov	r7, r3
 800681a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800681e:	2a30      	cmp	r2, #48	; 0x30
 8006820:	d0fa      	beq.n	8006818 <_dtoa_r+0xb68>
 8006822:	e6f9      	b.n	8006618 <_dtoa_r+0x968>
 8006824:	9a03      	ldr	r2, [sp, #12]
 8006826:	429a      	cmp	r2, r3
 8006828:	d1a5      	bne.n	8006776 <_dtoa_r+0xac6>
 800682a:	2331      	movs	r3, #49	; 0x31
 800682c:	f10a 0a01 	add.w	sl, sl, #1
 8006830:	e779      	b.n	8006726 <_dtoa_r+0xa76>
 8006832:	4b14      	ldr	r3, [pc, #80]	; (8006884 <_dtoa_r+0xbd4>)
 8006834:	f7ff baa8 	b.w	8005d88 <_dtoa_r+0xd8>
 8006838:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800683a:	2b00      	cmp	r3, #0
 800683c:	f47f aa81 	bne.w	8005d42 <_dtoa_r+0x92>
 8006840:	4b11      	ldr	r3, [pc, #68]	; (8006888 <_dtoa_r+0xbd8>)
 8006842:	f7ff baa1 	b.w	8005d88 <_dtoa_r+0xd8>
 8006846:	f1b9 0f00 	cmp.w	r9, #0
 800684a:	dc03      	bgt.n	8006854 <_dtoa_r+0xba4>
 800684c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800684e:	2b02      	cmp	r3, #2
 8006850:	f73f aecb 	bgt.w	80065ea <_dtoa_r+0x93a>
 8006854:	9f03      	ldr	r7, [sp, #12]
 8006856:	4621      	mov	r1, r4
 8006858:	4658      	mov	r0, fp
 800685a:	f7ff f99d 	bl	8005b98 <quorem>
 800685e:	9a03      	ldr	r2, [sp, #12]
 8006860:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006864:	f807 3b01 	strb.w	r3, [r7], #1
 8006868:	1aba      	subs	r2, r7, r2
 800686a:	4591      	cmp	r9, r2
 800686c:	ddba      	ble.n	80067e4 <_dtoa_r+0xb34>
 800686e:	4659      	mov	r1, fp
 8006870:	2300      	movs	r3, #0
 8006872:	220a      	movs	r2, #10
 8006874:	4628      	mov	r0, r5
 8006876:	f000 fc0b 	bl	8007090 <__multadd>
 800687a:	4683      	mov	fp, r0
 800687c:	e7eb      	b.n	8006856 <_dtoa_r+0xba6>
 800687e:	bf00      	nop
 8006880:	08008c18 	.word	0x08008c18
 8006884:	08008a18 	.word	0x08008a18
 8006888:	08008b99 	.word	0x08008b99

0800688c <rshift>:
 800688c:	6903      	ldr	r3, [r0, #16]
 800688e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006892:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8006896:	f100 0414 	add.w	r4, r0, #20
 800689a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800689e:	dd46      	ble.n	800692e <rshift+0xa2>
 80068a0:	f011 011f 	ands.w	r1, r1, #31
 80068a4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80068a8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80068ac:	d10c      	bne.n	80068c8 <rshift+0x3c>
 80068ae:	4629      	mov	r1, r5
 80068b0:	f100 0710 	add.w	r7, r0, #16
 80068b4:	42b1      	cmp	r1, r6
 80068b6:	d335      	bcc.n	8006924 <rshift+0x98>
 80068b8:	1a9b      	subs	r3, r3, r2
 80068ba:	009b      	lsls	r3, r3, #2
 80068bc:	1eea      	subs	r2, r5, #3
 80068be:	4296      	cmp	r6, r2
 80068c0:	bf38      	it	cc
 80068c2:	2300      	movcc	r3, #0
 80068c4:	4423      	add	r3, r4
 80068c6:	e015      	b.n	80068f4 <rshift+0x68>
 80068c8:	46a1      	mov	r9, r4
 80068ca:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80068ce:	f1c1 0820 	rsb	r8, r1, #32
 80068d2:	40cf      	lsrs	r7, r1
 80068d4:	f105 0e04 	add.w	lr, r5, #4
 80068d8:	4576      	cmp	r6, lr
 80068da:	46f4      	mov	ip, lr
 80068dc:	d816      	bhi.n	800690c <rshift+0x80>
 80068de:	1a9a      	subs	r2, r3, r2
 80068e0:	0092      	lsls	r2, r2, #2
 80068e2:	3a04      	subs	r2, #4
 80068e4:	3501      	adds	r5, #1
 80068e6:	42ae      	cmp	r6, r5
 80068e8:	bf38      	it	cc
 80068ea:	2200      	movcc	r2, #0
 80068ec:	18a3      	adds	r3, r4, r2
 80068ee:	50a7      	str	r7, [r4, r2]
 80068f0:	b107      	cbz	r7, 80068f4 <rshift+0x68>
 80068f2:	3304      	adds	r3, #4
 80068f4:	42a3      	cmp	r3, r4
 80068f6:	eba3 0204 	sub.w	r2, r3, r4
 80068fa:	bf08      	it	eq
 80068fc:	2300      	moveq	r3, #0
 80068fe:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006902:	6102      	str	r2, [r0, #16]
 8006904:	bf08      	it	eq
 8006906:	6143      	streq	r3, [r0, #20]
 8006908:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800690c:	f8dc c000 	ldr.w	ip, [ip]
 8006910:	fa0c fc08 	lsl.w	ip, ip, r8
 8006914:	ea4c 0707 	orr.w	r7, ip, r7
 8006918:	f849 7b04 	str.w	r7, [r9], #4
 800691c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006920:	40cf      	lsrs	r7, r1
 8006922:	e7d9      	b.n	80068d8 <rshift+0x4c>
 8006924:	f851 cb04 	ldr.w	ip, [r1], #4
 8006928:	f847 cf04 	str.w	ip, [r7, #4]!
 800692c:	e7c2      	b.n	80068b4 <rshift+0x28>
 800692e:	4623      	mov	r3, r4
 8006930:	e7e0      	b.n	80068f4 <rshift+0x68>

08006932 <__hexdig_fun>:
 8006932:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8006936:	2b09      	cmp	r3, #9
 8006938:	d802      	bhi.n	8006940 <__hexdig_fun+0xe>
 800693a:	3820      	subs	r0, #32
 800693c:	b2c0      	uxtb	r0, r0
 800693e:	4770      	bx	lr
 8006940:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8006944:	2b05      	cmp	r3, #5
 8006946:	d801      	bhi.n	800694c <__hexdig_fun+0x1a>
 8006948:	3847      	subs	r0, #71	; 0x47
 800694a:	e7f7      	b.n	800693c <__hexdig_fun+0xa>
 800694c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8006950:	2b05      	cmp	r3, #5
 8006952:	d801      	bhi.n	8006958 <__hexdig_fun+0x26>
 8006954:	3827      	subs	r0, #39	; 0x27
 8006956:	e7f1      	b.n	800693c <__hexdig_fun+0xa>
 8006958:	2000      	movs	r0, #0
 800695a:	4770      	bx	lr

0800695c <__gethex>:
 800695c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006960:	b08b      	sub	sp, #44	; 0x2c
 8006962:	9305      	str	r3, [sp, #20]
 8006964:	4bb2      	ldr	r3, [pc, #712]	; (8006c30 <__gethex+0x2d4>)
 8006966:	9002      	str	r0, [sp, #8]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	468b      	mov	fp, r1
 800696c:	4618      	mov	r0, r3
 800696e:	4690      	mov	r8, r2
 8006970:	9303      	str	r3, [sp, #12]
 8006972:	f7f9 fc59 	bl	8000228 <strlen>
 8006976:	4682      	mov	sl, r0
 8006978:	9b03      	ldr	r3, [sp, #12]
 800697a:	f8db 2000 	ldr.w	r2, [fp]
 800697e:	4403      	add	r3, r0
 8006980:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8006984:	9306      	str	r3, [sp, #24]
 8006986:	1c93      	adds	r3, r2, #2
 8006988:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800698c:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8006990:	32fe      	adds	r2, #254	; 0xfe
 8006992:	18d1      	adds	r1, r2, r3
 8006994:	461f      	mov	r7, r3
 8006996:	f813 0b01 	ldrb.w	r0, [r3], #1
 800699a:	9101      	str	r1, [sp, #4]
 800699c:	2830      	cmp	r0, #48	; 0x30
 800699e:	d0f8      	beq.n	8006992 <__gethex+0x36>
 80069a0:	f7ff ffc7 	bl	8006932 <__hexdig_fun>
 80069a4:	4604      	mov	r4, r0
 80069a6:	2800      	cmp	r0, #0
 80069a8:	d13a      	bne.n	8006a20 <__gethex+0xc4>
 80069aa:	4652      	mov	r2, sl
 80069ac:	4638      	mov	r0, r7
 80069ae:	9903      	ldr	r1, [sp, #12]
 80069b0:	f001 fa26 	bl	8007e00 <strncmp>
 80069b4:	4605      	mov	r5, r0
 80069b6:	2800      	cmp	r0, #0
 80069b8:	d166      	bne.n	8006a88 <__gethex+0x12c>
 80069ba:	f817 000a 	ldrb.w	r0, [r7, sl]
 80069be:	eb07 060a 	add.w	r6, r7, sl
 80069c2:	f7ff ffb6 	bl	8006932 <__hexdig_fun>
 80069c6:	2800      	cmp	r0, #0
 80069c8:	d060      	beq.n	8006a8c <__gethex+0x130>
 80069ca:	4633      	mov	r3, r6
 80069cc:	7818      	ldrb	r0, [r3, #0]
 80069ce:	461f      	mov	r7, r3
 80069d0:	2830      	cmp	r0, #48	; 0x30
 80069d2:	f103 0301 	add.w	r3, r3, #1
 80069d6:	d0f9      	beq.n	80069cc <__gethex+0x70>
 80069d8:	f7ff ffab 	bl	8006932 <__hexdig_fun>
 80069dc:	2301      	movs	r3, #1
 80069de:	fab0 f480 	clz	r4, r0
 80069e2:	4635      	mov	r5, r6
 80069e4:	0964      	lsrs	r4, r4, #5
 80069e6:	9301      	str	r3, [sp, #4]
 80069e8:	463a      	mov	r2, r7
 80069ea:	4616      	mov	r6, r2
 80069ec:	7830      	ldrb	r0, [r6, #0]
 80069ee:	3201      	adds	r2, #1
 80069f0:	f7ff ff9f 	bl	8006932 <__hexdig_fun>
 80069f4:	2800      	cmp	r0, #0
 80069f6:	d1f8      	bne.n	80069ea <__gethex+0x8e>
 80069f8:	4652      	mov	r2, sl
 80069fa:	4630      	mov	r0, r6
 80069fc:	9903      	ldr	r1, [sp, #12]
 80069fe:	f001 f9ff 	bl	8007e00 <strncmp>
 8006a02:	b980      	cbnz	r0, 8006a26 <__gethex+0xca>
 8006a04:	b94d      	cbnz	r5, 8006a1a <__gethex+0xbe>
 8006a06:	eb06 050a 	add.w	r5, r6, sl
 8006a0a:	462a      	mov	r2, r5
 8006a0c:	4616      	mov	r6, r2
 8006a0e:	7830      	ldrb	r0, [r6, #0]
 8006a10:	3201      	adds	r2, #1
 8006a12:	f7ff ff8e 	bl	8006932 <__hexdig_fun>
 8006a16:	2800      	cmp	r0, #0
 8006a18:	d1f8      	bne.n	8006a0c <__gethex+0xb0>
 8006a1a:	1bad      	subs	r5, r5, r6
 8006a1c:	00ad      	lsls	r5, r5, #2
 8006a1e:	e004      	b.n	8006a2a <__gethex+0xce>
 8006a20:	2400      	movs	r4, #0
 8006a22:	4625      	mov	r5, r4
 8006a24:	e7e0      	b.n	80069e8 <__gethex+0x8c>
 8006a26:	2d00      	cmp	r5, #0
 8006a28:	d1f7      	bne.n	8006a1a <__gethex+0xbe>
 8006a2a:	7833      	ldrb	r3, [r6, #0]
 8006a2c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006a30:	2b50      	cmp	r3, #80	; 0x50
 8006a32:	d139      	bne.n	8006aa8 <__gethex+0x14c>
 8006a34:	7873      	ldrb	r3, [r6, #1]
 8006a36:	2b2b      	cmp	r3, #43	; 0x2b
 8006a38:	d02a      	beq.n	8006a90 <__gethex+0x134>
 8006a3a:	2b2d      	cmp	r3, #45	; 0x2d
 8006a3c:	d02c      	beq.n	8006a98 <__gethex+0x13c>
 8006a3e:	f04f 0900 	mov.w	r9, #0
 8006a42:	1c71      	adds	r1, r6, #1
 8006a44:	7808      	ldrb	r0, [r1, #0]
 8006a46:	f7ff ff74 	bl	8006932 <__hexdig_fun>
 8006a4a:	1e43      	subs	r3, r0, #1
 8006a4c:	b2db      	uxtb	r3, r3
 8006a4e:	2b18      	cmp	r3, #24
 8006a50:	d82a      	bhi.n	8006aa8 <__gethex+0x14c>
 8006a52:	f1a0 0210 	sub.w	r2, r0, #16
 8006a56:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006a5a:	f7ff ff6a 	bl	8006932 <__hexdig_fun>
 8006a5e:	1e43      	subs	r3, r0, #1
 8006a60:	b2db      	uxtb	r3, r3
 8006a62:	2b18      	cmp	r3, #24
 8006a64:	d91b      	bls.n	8006a9e <__gethex+0x142>
 8006a66:	f1b9 0f00 	cmp.w	r9, #0
 8006a6a:	d000      	beq.n	8006a6e <__gethex+0x112>
 8006a6c:	4252      	negs	r2, r2
 8006a6e:	4415      	add	r5, r2
 8006a70:	f8cb 1000 	str.w	r1, [fp]
 8006a74:	b1d4      	cbz	r4, 8006aac <__gethex+0x150>
 8006a76:	9b01      	ldr	r3, [sp, #4]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	bf14      	ite	ne
 8006a7c:	2700      	movne	r7, #0
 8006a7e:	2706      	moveq	r7, #6
 8006a80:	4638      	mov	r0, r7
 8006a82:	b00b      	add	sp, #44	; 0x2c
 8006a84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a88:	463e      	mov	r6, r7
 8006a8a:	4625      	mov	r5, r4
 8006a8c:	2401      	movs	r4, #1
 8006a8e:	e7cc      	b.n	8006a2a <__gethex+0xce>
 8006a90:	f04f 0900 	mov.w	r9, #0
 8006a94:	1cb1      	adds	r1, r6, #2
 8006a96:	e7d5      	b.n	8006a44 <__gethex+0xe8>
 8006a98:	f04f 0901 	mov.w	r9, #1
 8006a9c:	e7fa      	b.n	8006a94 <__gethex+0x138>
 8006a9e:	230a      	movs	r3, #10
 8006aa0:	fb03 0202 	mla	r2, r3, r2, r0
 8006aa4:	3a10      	subs	r2, #16
 8006aa6:	e7d6      	b.n	8006a56 <__gethex+0xfa>
 8006aa8:	4631      	mov	r1, r6
 8006aaa:	e7e1      	b.n	8006a70 <__gethex+0x114>
 8006aac:	4621      	mov	r1, r4
 8006aae:	1bf3      	subs	r3, r6, r7
 8006ab0:	3b01      	subs	r3, #1
 8006ab2:	2b07      	cmp	r3, #7
 8006ab4:	dc0a      	bgt.n	8006acc <__gethex+0x170>
 8006ab6:	9802      	ldr	r0, [sp, #8]
 8006ab8:	f000 fa88 	bl	8006fcc <_Balloc>
 8006abc:	4604      	mov	r4, r0
 8006abe:	b940      	cbnz	r0, 8006ad2 <__gethex+0x176>
 8006ac0:	4602      	mov	r2, r0
 8006ac2:	21de      	movs	r1, #222	; 0xde
 8006ac4:	4b5b      	ldr	r3, [pc, #364]	; (8006c34 <__gethex+0x2d8>)
 8006ac6:	485c      	ldr	r0, [pc, #368]	; (8006c38 <__gethex+0x2dc>)
 8006ac8:	f001 f9bc 	bl	8007e44 <__assert_func>
 8006acc:	3101      	adds	r1, #1
 8006ace:	105b      	asrs	r3, r3, #1
 8006ad0:	e7ef      	b.n	8006ab2 <__gethex+0x156>
 8006ad2:	f04f 0b00 	mov.w	fp, #0
 8006ad6:	f100 0914 	add.w	r9, r0, #20
 8006ada:	f1ca 0301 	rsb	r3, sl, #1
 8006ade:	f8cd 9010 	str.w	r9, [sp, #16]
 8006ae2:	f8cd b004 	str.w	fp, [sp, #4]
 8006ae6:	9308      	str	r3, [sp, #32]
 8006ae8:	42b7      	cmp	r7, r6
 8006aea:	d33f      	bcc.n	8006b6c <__gethex+0x210>
 8006aec:	9f04      	ldr	r7, [sp, #16]
 8006aee:	9b01      	ldr	r3, [sp, #4]
 8006af0:	f847 3b04 	str.w	r3, [r7], #4
 8006af4:	eba7 0709 	sub.w	r7, r7, r9
 8006af8:	10bf      	asrs	r7, r7, #2
 8006afa:	6127      	str	r7, [r4, #16]
 8006afc:	4618      	mov	r0, r3
 8006afe:	f000 fb57 	bl	80071b0 <__hi0bits>
 8006b02:	017f      	lsls	r7, r7, #5
 8006b04:	f8d8 6000 	ldr.w	r6, [r8]
 8006b08:	1a3f      	subs	r7, r7, r0
 8006b0a:	42b7      	cmp	r7, r6
 8006b0c:	dd62      	ble.n	8006bd4 <__gethex+0x278>
 8006b0e:	1bbf      	subs	r7, r7, r6
 8006b10:	4639      	mov	r1, r7
 8006b12:	4620      	mov	r0, r4
 8006b14:	f000 fef1 	bl	80078fa <__any_on>
 8006b18:	4682      	mov	sl, r0
 8006b1a:	b1a8      	cbz	r0, 8006b48 <__gethex+0x1ec>
 8006b1c:	f04f 0a01 	mov.w	sl, #1
 8006b20:	1e7b      	subs	r3, r7, #1
 8006b22:	1159      	asrs	r1, r3, #5
 8006b24:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8006b28:	f003 021f 	and.w	r2, r3, #31
 8006b2c:	fa0a f202 	lsl.w	r2, sl, r2
 8006b30:	420a      	tst	r2, r1
 8006b32:	d009      	beq.n	8006b48 <__gethex+0x1ec>
 8006b34:	4553      	cmp	r3, sl
 8006b36:	dd05      	ble.n	8006b44 <__gethex+0x1e8>
 8006b38:	4620      	mov	r0, r4
 8006b3a:	1eb9      	subs	r1, r7, #2
 8006b3c:	f000 fedd 	bl	80078fa <__any_on>
 8006b40:	2800      	cmp	r0, #0
 8006b42:	d144      	bne.n	8006bce <__gethex+0x272>
 8006b44:	f04f 0a02 	mov.w	sl, #2
 8006b48:	4639      	mov	r1, r7
 8006b4a:	4620      	mov	r0, r4
 8006b4c:	f7ff fe9e 	bl	800688c <rshift>
 8006b50:	443d      	add	r5, r7
 8006b52:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006b56:	42ab      	cmp	r3, r5
 8006b58:	da4a      	bge.n	8006bf0 <__gethex+0x294>
 8006b5a:	4621      	mov	r1, r4
 8006b5c:	9802      	ldr	r0, [sp, #8]
 8006b5e:	f000 fa75 	bl	800704c <_Bfree>
 8006b62:	2300      	movs	r3, #0
 8006b64:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006b66:	27a3      	movs	r7, #163	; 0xa3
 8006b68:	6013      	str	r3, [r2, #0]
 8006b6a:	e789      	b.n	8006a80 <__gethex+0x124>
 8006b6c:	1e73      	subs	r3, r6, #1
 8006b6e:	9a06      	ldr	r2, [sp, #24]
 8006b70:	9307      	str	r3, [sp, #28]
 8006b72:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d019      	beq.n	8006bae <__gethex+0x252>
 8006b7a:	f1bb 0f20 	cmp.w	fp, #32
 8006b7e:	d107      	bne.n	8006b90 <__gethex+0x234>
 8006b80:	9b04      	ldr	r3, [sp, #16]
 8006b82:	9a01      	ldr	r2, [sp, #4]
 8006b84:	f843 2b04 	str.w	r2, [r3], #4
 8006b88:	9304      	str	r3, [sp, #16]
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	469b      	mov	fp, r3
 8006b8e:	9301      	str	r3, [sp, #4]
 8006b90:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8006b94:	f7ff fecd 	bl	8006932 <__hexdig_fun>
 8006b98:	9b01      	ldr	r3, [sp, #4]
 8006b9a:	f000 000f 	and.w	r0, r0, #15
 8006b9e:	fa00 f00b 	lsl.w	r0, r0, fp
 8006ba2:	4303      	orrs	r3, r0
 8006ba4:	9301      	str	r3, [sp, #4]
 8006ba6:	f10b 0b04 	add.w	fp, fp, #4
 8006baa:	9b07      	ldr	r3, [sp, #28]
 8006bac:	e00d      	b.n	8006bca <__gethex+0x26e>
 8006bae:	9a08      	ldr	r2, [sp, #32]
 8006bb0:	1e73      	subs	r3, r6, #1
 8006bb2:	4413      	add	r3, r2
 8006bb4:	42bb      	cmp	r3, r7
 8006bb6:	d3e0      	bcc.n	8006b7a <__gethex+0x21e>
 8006bb8:	4618      	mov	r0, r3
 8006bba:	4652      	mov	r2, sl
 8006bbc:	9903      	ldr	r1, [sp, #12]
 8006bbe:	9309      	str	r3, [sp, #36]	; 0x24
 8006bc0:	f001 f91e 	bl	8007e00 <strncmp>
 8006bc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bc6:	2800      	cmp	r0, #0
 8006bc8:	d1d7      	bne.n	8006b7a <__gethex+0x21e>
 8006bca:	461e      	mov	r6, r3
 8006bcc:	e78c      	b.n	8006ae8 <__gethex+0x18c>
 8006bce:	f04f 0a03 	mov.w	sl, #3
 8006bd2:	e7b9      	b.n	8006b48 <__gethex+0x1ec>
 8006bd4:	da09      	bge.n	8006bea <__gethex+0x28e>
 8006bd6:	1bf7      	subs	r7, r6, r7
 8006bd8:	4621      	mov	r1, r4
 8006bda:	463a      	mov	r2, r7
 8006bdc:	9802      	ldr	r0, [sp, #8]
 8006bde:	f000 fc4d 	bl	800747c <__lshift>
 8006be2:	4604      	mov	r4, r0
 8006be4:	1bed      	subs	r5, r5, r7
 8006be6:	f100 0914 	add.w	r9, r0, #20
 8006bea:	f04f 0a00 	mov.w	sl, #0
 8006bee:	e7b0      	b.n	8006b52 <__gethex+0x1f6>
 8006bf0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8006bf4:	42a8      	cmp	r0, r5
 8006bf6:	dd72      	ble.n	8006cde <__gethex+0x382>
 8006bf8:	1b45      	subs	r5, r0, r5
 8006bfa:	42ae      	cmp	r6, r5
 8006bfc:	dc35      	bgt.n	8006c6a <__gethex+0x30e>
 8006bfe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006c02:	2b02      	cmp	r3, #2
 8006c04:	d029      	beq.n	8006c5a <__gethex+0x2fe>
 8006c06:	2b03      	cmp	r3, #3
 8006c08:	d02b      	beq.n	8006c62 <__gethex+0x306>
 8006c0a:	2b01      	cmp	r3, #1
 8006c0c:	d11c      	bne.n	8006c48 <__gethex+0x2ec>
 8006c0e:	42ae      	cmp	r6, r5
 8006c10:	d11a      	bne.n	8006c48 <__gethex+0x2ec>
 8006c12:	2e01      	cmp	r6, #1
 8006c14:	d112      	bne.n	8006c3c <__gethex+0x2e0>
 8006c16:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006c1a:	9a05      	ldr	r2, [sp, #20]
 8006c1c:	2762      	movs	r7, #98	; 0x62
 8006c1e:	6013      	str	r3, [r2, #0]
 8006c20:	2301      	movs	r3, #1
 8006c22:	6123      	str	r3, [r4, #16]
 8006c24:	f8c9 3000 	str.w	r3, [r9]
 8006c28:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006c2a:	601c      	str	r4, [r3, #0]
 8006c2c:	e728      	b.n	8006a80 <__gethex+0x124>
 8006c2e:	bf00      	nop
 8006c30:	08008c90 	.word	0x08008c90
 8006c34:	08008c18 	.word	0x08008c18
 8006c38:	08008c29 	.word	0x08008c29
 8006c3c:	4620      	mov	r0, r4
 8006c3e:	1e71      	subs	r1, r6, #1
 8006c40:	f000 fe5b 	bl	80078fa <__any_on>
 8006c44:	2800      	cmp	r0, #0
 8006c46:	d1e6      	bne.n	8006c16 <__gethex+0x2ba>
 8006c48:	4621      	mov	r1, r4
 8006c4a:	9802      	ldr	r0, [sp, #8]
 8006c4c:	f000 f9fe 	bl	800704c <_Bfree>
 8006c50:	2300      	movs	r3, #0
 8006c52:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006c54:	2750      	movs	r7, #80	; 0x50
 8006c56:	6013      	str	r3, [r2, #0]
 8006c58:	e712      	b.n	8006a80 <__gethex+0x124>
 8006c5a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d1f3      	bne.n	8006c48 <__gethex+0x2ec>
 8006c60:	e7d9      	b.n	8006c16 <__gethex+0x2ba>
 8006c62:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d1d6      	bne.n	8006c16 <__gethex+0x2ba>
 8006c68:	e7ee      	b.n	8006c48 <__gethex+0x2ec>
 8006c6a:	1e6f      	subs	r7, r5, #1
 8006c6c:	f1ba 0f00 	cmp.w	sl, #0
 8006c70:	d132      	bne.n	8006cd8 <__gethex+0x37c>
 8006c72:	b127      	cbz	r7, 8006c7e <__gethex+0x322>
 8006c74:	4639      	mov	r1, r7
 8006c76:	4620      	mov	r0, r4
 8006c78:	f000 fe3f 	bl	80078fa <__any_on>
 8006c7c:	4682      	mov	sl, r0
 8006c7e:	2101      	movs	r1, #1
 8006c80:	117b      	asrs	r3, r7, #5
 8006c82:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8006c86:	f007 071f 	and.w	r7, r7, #31
 8006c8a:	fa01 f707 	lsl.w	r7, r1, r7
 8006c8e:	421f      	tst	r7, r3
 8006c90:	f04f 0702 	mov.w	r7, #2
 8006c94:	4629      	mov	r1, r5
 8006c96:	4620      	mov	r0, r4
 8006c98:	bf18      	it	ne
 8006c9a:	f04a 0a02 	orrne.w	sl, sl, #2
 8006c9e:	1b76      	subs	r6, r6, r5
 8006ca0:	f7ff fdf4 	bl	800688c <rshift>
 8006ca4:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8006ca8:	f1ba 0f00 	cmp.w	sl, #0
 8006cac:	d048      	beq.n	8006d40 <__gethex+0x3e4>
 8006cae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006cb2:	2b02      	cmp	r3, #2
 8006cb4:	d015      	beq.n	8006ce2 <__gethex+0x386>
 8006cb6:	2b03      	cmp	r3, #3
 8006cb8:	d017      	beq.n	8006cea <__gethex+0x38e>
 8006cba:	2b01      	cmp	r3, #1
 8006cbc:	d109      	bne.n	8006cd2 <__gethex+0x376>
 8006cbe:	f01a 0f02 	tst.w	sl, #2
 8006cc2:	d006      	beq.n	8006cd2 <__gethex+0x376>
 8006cc4:	f8d9 0000 	ldr.w	r0, [r9]
 8006cc8:	ea4a 0a00 	orr.w	sl, sl, r0
 8006ccc:	f01a 0f01 	tst.w	sl, #1
 8006cd0:	d10e      	bne.n	8006cf0 <__gethex+0x394>
 8006cd2:	f047 0710 	orr.w	r7, r7, #16
 8006cd6:	e033      	b.n	8006d40 <__gethex+0x3e4>
 8006cd8:	f04f 0a01 	mov.w	sl, #1
 8006cdc:	e7cf      	b.n	8006c7e <__gethex+0x322>
 8006cde:	2701      	movs	r7, #1
 8006ce0:	e7e2      	b.n	8006ca8 <__gethex+0x34c>
 8006ce2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006ce4:	f1c3 0301 	rsb	r3, r3, #1
 8006ce8:	9315      	str	r3, [sp, #84]	; 0x54
 8006cea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d0f0      	beq.n	8006cd2 <__gethex+0x376>
 8006cf0:	f04f 0c00 	mov.w	ip, #0
 8006cf4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8006cf8:	f104 0314 	add.w	r3, r4, #20
 8006cfc:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8006d00:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8006d04:	4618      	mov	r0, r3
 8006d06:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d0a:	f1b2 3fff 	cmp.w	r2, #4294967295
 8006d0e:	d01c      	beq.n	8006d4a <__gethex+0x3ee>
 8006d10:	3201      	adds	r2, #1
 8006d12:	6002      	str	r2, [r0, #0]
 8006d14:	2f02      	cmp	r7, #2
 8006d16:	f104 0314 	add.w	r3, r4, #20
 8006d1a:	d13d      	bne.n	8006d98 <__gethex+0x43c>
 8006d1c:	f8d8 2000 	ldr.w	r2, [r8]
 8006d20:	3a01      	subs	r2, #1
 8006d22:	42b2      	cmp	r2, r6
 8006d24:	d10a      	bne.n	8006d3c <__gethex+0x3e0>
 8006d26:	2201      	movs	r2, #1
 8006d28:	1171      	asrs	r1, r6, #5
 8006d2a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006d2e:	f006 061f 	and.w	r6, r6, #31
 8006d32:	fa02 f606 	lsl.w	r6, r2, r6
 8006d36:	421e      	tst	r6, r3
 8006d38:	bf18      	it	ne
 8006d3a:	4617      	movne	r7, r2
 8006d3c:	f047 0720 	orr.w	r7, r7, #32
 8006d40:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006d42:	601c      	str	r4, [r3, #0]
 8006d44:	9b05      	ldr	r3, [sp, #20]
 8006d46:	601d      	str	r5, [r3, #0]
 8006d48:	e69a      	b.n	8006a80 <__gethex+0x124>
 8006d4a:	4299      	cmp	r1, r3
 8006d4c:	f843 cc04 	str.w	ip, [r3, #-4]
 8006d50:	d8d8      	bhi.n	8006d04 <__gethex+0x3a8>
 8006d52:	68a3      	ldr	r3, [r4, #8]
 8006d54:	459b      	cmp	fp, r3
 8006d56:	db17      	blt.n	8006d88 <__gethex+0x42c>
 8006d58:	6861      	ldr	r1, [r4, #4]
 8006d5a:	9802      	ldr	r0, [sp, #8]
 8006d5c:	3101      	adds	r1, #1
 8006d5e:	f000 f935 	bl	8006fcc <_Balloc>
 8006d62:	4681      	mov	r9, r0
 8006d64:	b918      	cbnz	r0, 8006d6e <__gethex+0x412>
 8006d66:	4602      	mov	r2, r0
 8006d68:	2184      	movs	r1, #132	; 0x84
 8006d6a:	4b19      	ldr	r3, [pc, #100]	; (8006dd0 <__gethex+0x474>)
 8006d6c:	e6ab      	b.n	8006ac6 <__gethex+0x16a>
 8006d6e:	6922      	ldr	r2, [r4, #16]
 8006d70:	f104 010c 	add.w	r1, r4, #12
 8006d74:	3202      	adds	r2, #2
 8006d76:	0092      	lsls	r2, r2, #2
 8006d78:	300c      	adds	r0, #12
 8006d7a:	f000 f919 	bl	8006fb0 <memcpy>
 8006d7e:	4621      	mov	r1, r4
 8006d80:	9802      	ldr	r0, [sp, #8]
 8006d82:	f000 f963 	bl	800704c <_Bfree>
 8006d86:	464c      	mov	r4, r9
 8006d88:	6923      	ldr	r3, [r4, #16]
 8006d8a:	1c5a      	adds	r2, r3, #1
 8006d8c:	6122      	str	r2, [r4, #16]
 8006d8e:	2201      	movs	r2, #1
 8006d90:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006d94:	615a      	str	r2, [r3, #20]
 8006d96:	e7bd      	b.n	8006d14 <__gethex+0x3b8>
 8006d98:	6922      	ldr	r2, [r4, #16]
 8006d9a:	455a      	cmp	r2, fp
 8006d9c:	dd0b      	ble.n	8006db6 <__gethex+0x45a>
 8006d9e:	2101      	movs	r1, #1
 8006da0:	4620      	mov	r0, r4
 8006da2:	f7ff fd73 	bl	800688c <rshift>
 8006da6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006daa:	3501      	adds	r5, #1
 8006dac:	42ab      	cmp	r3, r5
 8006dae:	f6ff aed4 	blt.w	8006b5a <__gethex+0x1fe>
 8006db2:	2701      	movs	r7, #1
 8006db4:	e7c2      	b.n	8006d3c <__gethex+0x3e0>
 8006db6:	f016 061f 	ands.w	r6, r6, #31
 8006dba:	d0fa      	beq.n	8006db2 <__gethex+0x456>
 8006dbc:	4453      	add	r3, sl
 8006dbe:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8006dc2:	f000 f9f5 	bl	80071b0 <__hi0bits>
 8006dc6:	f1c6 0620 	rsb	r6, r6, #32
 8006dca:	42b0      	cmp	r0, r6
 8006dcc:	dbe7      	blt.n	8006d9e <__gethex+0x442>
 8006dce:	e7f0      	b.n	8006db2 <__gethex+0x456>
 8006dd0:	08008c18 	.word	0x08008c18

08006dd4 <L_shift>:
 8006dd4:	f1c2 0208 	rsb	r2, r2, #8
 8006dd8:	0092      	lsls	r2, r2, #2
 8006dda:	b570      	push	{r4, r5, r6, lr}
 8006ddc:	f1c2 0620 	rsb	r6, r2, #32
 8006de0:	6843      	ldr	r3, [r0, #4]
 8006de2:	6804      	ldr	r4, [r0, #0]
 8006de4:	fa03 f506 	lsl.w	r5, r3, r6
 8006de8:	432c      	orrs	r4, r5
 8006dea:	40d3      	lsrs	r3, r2
 8006dec:	6004      	str	r4, [r0, #0]
 8006dee:	f840 3f04 	str.w	r3, [r0, #4]!
 8006df2:	4288      	cmp	r0, r1
 8006df4:	d3f4      	bcc.n	8006de0 <L_shift+0xc>
 8006df6:	bd70      	pop	{r4, r5, r6, pc}

08006df8 <__match>:
 8006df8:	b530      	push	{r4, r5, lr}
 8006dfa:	6803      	ldr	r3, [r0, #0]
 8006dfc:	3301      	adds	r3, #1
 8006dfe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e02:	b914      	cbnz	r4, 8006e0a <__match+0x12>
 8006e04:	6003      	str	r3, [r0, #0]
 8006e06:	2001      	movs	r0, #1
 8006e08:	bd30      	pop	{r4, r5, pc}
 8006e0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e0e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8006e12:	2d19      	cmp	r5, #25
 8006e14:	bf98      	it	ls
 8006e16:	3220      	addls	r2, #32
 8006e18:	42a2      	cmp	r2, r4
 8006e1a:	d0f0      	beq.n	8006dfe <__match+0x6>
 8006e1c:	2000      	movs	r0, #0
 8006e1e:	e7f3      	b.n	8006e08 <__match+0x10>

08006e20 <__hexnan>:
 8006e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e24:	2500      	movs	r5, #0
 8006e26:	680b      	ldr	r3, [r1, #0]
 8006e28:	4682      	mov	sl, r0
 8006e2a:	115e      	asrs	r6, r3, #5
 8006e2c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8006e30:	f013 031f 	ands.w	r3, r3, #31
 8006e34:	bf18      	it	ne
 8006e36:	3604      	addne	r6, #4
 8006e38:	1f37      	subs	r7, r6, #4
 8006e3a:	46b9      	mov	r9, r7
 8006e3c:	463c      	mov	r4, r7
 8006e3e:	46ab      	mov	fp, r5
 8006e40:	b087      	sub	sp, #28
 8006e42:	4690      	mov	r8, r2
 8006e44:	6802      	ldr	r2, [r0, #0]
 8006e46:	9301      	str	r3, [sp, #4]
 8006e48:	f846 5c04 	str.w	r5, [r6, #-4]
 8006e4c:	9502      	str	r5, [sp, #8]
 8006e4e:	7851      	ldrb	r1, [r2, #1]
 8006e50:	1c53      	adds	r3, r2, #1
 8006e52:	9303      	str	r3, [sp, #12]
 8006e54:	b341      	cbz	r1, 8006ea8 <__hexnan+0x88>
 8006e56:	4608      	mov	r0, r1
 8006e58:	9205      	str	r2, [sp, #20]
 8006e5a:	9104      	str	r1, [sp, #16]
 8006e5c:	f7ff fd69 	bl	8006932 <__hexdig_fun>
 8006e60:	2800      	cmp	r0, #0
 8006e62:	d14f      	bne.n	8006f04 <__hexnan+0xe4>
 8006e64:	9904      	ldr	r1, [sp, #16]
 8006e66:	9a05      	ldr	r2, [sp, #20]
 8006e68:	2920      	cmp	r1, #32
 8006e6a:	d818      	bhi.n	8006e9e <__hexnan+0x7e>
 8006e6c:	9b02      	ldr	r3, [sp, #8]
 8006e6e:	459b      	cmp	fp, r3
 8006e70:	dd13      	ble.n	8006e9a <__hexnan+0x7a>
 8006e72:	454c      	cmp	r4, r9
 8006e74:	d206      	bcs.n	8006e84 <__hexnan+0x64>
 8006e76:	2d07      	cmp	r5, #7
 8006e78:	dc04      	bgt.n	8006e84 <__hexnan+0x64>
 8006e7a:	462a      	mov	r2, r5
 8006e7c:	4649      	mov	r1, r9
 8006e7e:	4620      	mov	r0, r4
 8006e80:	f7ff ffa8 	bl	8006dd4 <L_shift>
 8006e84:	4544      	cmp	r4, r8
 8006e86:	d950      	bls.n	8006f2a <__hexnan+0x10a>
 8006e88:	2300      	movs	r3, #0
 8006e8a:	f1a4 0904 	sub.w	r9, r4, #4
 8006e8e:	f844 3c04 	str.w	r3, [r4, #-4]
 8006e92:	461d      	mov	r5, r3
 8006e94:	464c      	mov	r4, r9
 8006e96:	f8cd b008 	str.w	fp, [sp, #8]
 8006e9a:	9a03      	ldr	r2, [sp, #12]
 8006e9c:	e7d7      	b.n	8006e4e <__hexnan+0x2e>
 8006e9e:	2929      	cmp	r1, #41	; 0x29
 8006ea0:	d156      	bne.n	8006f50 <__hexnan+0x130>
 8006ea2:	3202      	adds	r2, #2
 8006ea4:	f8ca 2000 	str.w	r2, [sl]
 8006ea8:	f1bb 0f00 	cmp.w	fp, #0
 8006eac:	d050      	beq.n	8006f50 <__hexnan+0x130>
 8006eae:	454c      	cmp	r4, r9
 8006eb0:	d206      	bcs.n	8006ec0 <__hexnan+0xa0>
 8006eb2:	2d07      	cmp	r5, #7
 8006eb4:	dc04      	bgt.n	8006ec0 <__hexnan+0xa0>
 8006eb6:	462a      	mov	r2, r5
 8006eb8:	4649      	mov	r1, r9
 8006eba:	4620      	mov	r0, r4
 8006ebc:	f7ff ff8a 	bl	8006dd4 <L_shift>
 8006ec0:	4544      	cmp	r4, r8
 8006ec2:	d934      	bls.n	8006f2e <__hexnan+0x10e>
 8006ec4:	4623      	mov	r3, r4
 8006ec6:	f1a8 0204 	sub.w	r2, r8, #4
 8006eca:	f853 1b04 	ldr.w	r1, [r3], #4
 8006ece:	429f      	cmp	r7, r3
 8006ed0:	f842 1f04 	str.w	r1, [r2, #4]!
 8006ed4:	d2f9      	bcs.n	8006eca <__hexnan+0xaa>
 8006ed6:	1b3b      	subs	r3, r7, r4
 8006ed8:	f023 0303 	bic.w	r3, r3, #3
 8006edc:	3304      	adds	r3, #4
 8006ede:	3401      	adds	r4, #1
 8006ee0:	3e03      	subs	r6, #3
 8006ee2:	42b4      	cmp	r4, r6
 8006ee4:	bf88      	it	hi
 8006ee6:	2304      	movhi	r3, #4
 8006ee8:	2200      	movs	r2, #0
 8006eea:	4443      	add	r3, r8
 8006eec:	f843 2b04 	str.w	r2, [r3], #4
 8006ef0:	429f      	cmp	r7, r3
 8006ef2:	d2fb      	bcs.n	8006eec <__hexnan+0xcc>
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	b91b      	cbnz	r3, 8006f00 <__hexnan+0xe0>
 8006ef8:	4547      	cmp	r7, r8
 8006efa:	d127      	bne.n	8006f4c <__hexnan+0x12c>
 8006efc:	2301      	movs	r3, #1
 8006efe:	603b      	str	r3, [r7, #0]
 8006f00:	2005      	movs	r0, #5
 8006f02:	e026      	b.n	8006f52 <__hexnan+0x132>
 8006f04:	3501      	adds	r5, #1
 8006f06:	2d08      	cmp	r5, #8
 8006f08:	f10b 0b01 	add.w	fp, fp, #1
 8006f0c:	dd06      	ble.n	8006f1c <__hexnan+0xfc>
 8006f0e:	4544      	cmp	r4, r8
 8006f10:	d9c3      	bls.n	8006e9a <__hexnan+0x7a>
 8006f12:	2300      	movs	r3, #0
 8006f14:	2501      	movs	r5, #1
 8006f16:	f844 3c04 	str.w	r3, [r4, #-4]
 8006f1a:	3c04      	subs	r4, #4
 8006f1c:	6822      	ldr	r2, [r4, #0]
 8006f1e:	f000 000f 	and.w	r0, r0, #15
 8006f22:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8006f26:	6022      	str	r2, [r4, #0]
 8006f28:	e7b7      	b.n	8006e9a <__hexnan+0x7a>
 8006f2a:	2508      	movs	r5, #8
 8006f2c:	e7b5      	b.n	8006e9a <__hexnan+0x7a>
 8006f2e:	9b01      	ldr	r3, [sp, #4]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d0df      	beq.n	8006ef4 <__hexnan+0xd4>
 8006f34:	f04f 32ff 	mov.w	r2, #4294967295
 8006f38:	f1c3 0320 	rsb	r3, r3, #32
 8006f3c:	fa22 f303 	lsr.w	r3, r2, r3
 8006f40:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8006f44:	401a      	ands	r2, r3
 8006f46:	f846 2c04 	str.w	r2, [r6, #-4]
 8006f4a:	e7d3      	b.n	8006ef4 <__hexnan+0xd4>
 8006f4c:	3f04      	subs	r7, #4
 8006f4e:	e7d1      	b.n	8006ef4 <__hexnan+0xd4>
 8006f50:	2004      	movs	r0, #4
 8006f52:	b007      	add	sp, #28
 8006f54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006f58 <_localeconv_r>:
 8006f58:	4800      	ldr	r0, [pc, #0]	; (8006f5c <_localeconv_r+0x4>)
 8006f5a:	4770      	bx	lr
 8006f5c:	20000168 	.word	0x20000168

08006f60 <malloc>:
 8006f60:	4b02      	ldr	r3, [pc, #8]	; (8006f6c <malloc+0xc>)
 8006f62:	4601      	mov	r1, r0
 8006f64:	6818      	ldr	r0, [r3, #0]
 8006f66:	f000 bd65 	b.w	8007a34 <_malloc_r>
 8006f6a:	bf00      	nop
 8006f6c:	20000010 	.word	0x20000010

08006f70 <__ascii_mbtowc>:
 8006f70:	b082      	sub	sp, #8
 8006f72:	b901      	cbnz	r1, 8006f76 <__ascii_mbtowc+0x6>
 8006f74:	a901      	add	r1, sp, #4
 8006f76:	b142      	cbz	r2, 8006f8a <__ascii_mbtowc+0x1a>
 8006f78:	b14b      	cbz	r3, 8006f8e <__ascii_mbtowc+0x1e>
 8006f7a:	7813      	ldrb	r3, [r2, #0]
 8006f7c:	600b      	str	r3, [r1, #0]
 8006f7e:	7812      	ldrb	r2, [r2, #0]
 8006f80:	1e10      	subs	r0, r2, #0
 8006f82:	bf18      	it	ne
 8006f84:	2001      	movne	r0, #1
 8006f86:	b002      	add	sp, #8
 8006f88:	4770      	bx	lr
 8006f8a:	4610      	mov	r0, r2
 8006f8c:	e7fb      	b.n	8006f86 <__ascii_mbtowc+0x16>
 8006f8e:	f06f 0001 	mvn.w	r0, #1
 8006f92:	e7f8      	b.n	8006f86 <__ascii_mbtowc+0x16>

08006f94 <memchr>:
 8006f94:	4603      	mov	r3, r0
 8006f96:	b510      	push	{r4, lr}
 8006f98:	b2c9      	uxtb	r1, r1
 8006f9a:	4402      	add	r2, r0
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	d101      	bne.n	8006fa6 <memchr+0x12>
 8006fa2:	2000      	movs	r0, #0
 8006fa4:	e003      	b.n	8006fae <memchr+0x1a>
 8006fa6:	7804      	ldrb	r4, [r0, #0]
 8006fa8:	3301      	adds	r3, #1
 8006faa:	428c      	cmp	r4, r1
 8006fac:	d1f6      	bne.n	8006f9c <memchr+0x8>
 8006fae:	bd10      	pop	{r4, pc}

08006fb0 <memcpy>:
 8006fb0:	440a      	add	r2, r1
 8006fb2:	4291      	cmp	r1, r2
 8006fb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8006fb8:	d100      	bne.n	8006fbc <memcpy+0xc>
 8006fba:	4770      	bx	lr
 8006fbc:	b510      	push	{r4, lr}
 8006fbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006fc2:	4291      	cmp	r1, r2
 8006fc4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006fc8:	d1f9      	bne.n	8006fbe <memcpy+0xe>
 8006fca:	bd10      	pop	{r4, pc}

08006fcc <_Balloc>:
 8006fcc:	b570      	push	{r4, r5, r6, lr}
 8006fce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006fd0:	4604      	mov	r4, r0
 8006fd2:	460d      	mov	r5, r1
 8006fd4:	b976      	cbnz	r6, 8006ff4 <_Balloc+0x28>
 8006fd6:	2010      	movs	r0, #16
 8006fd8:	f7ff ffc2 	bl	8006f60 <malloc>
 8006fdc:	4602      	mov	r2, r0
 8006fde:	6260      	str	r0, [r4, #36]	; 0x24
 8006fe0:	b920      	cbnz	r0, 8006fec <_Balloc+0x20>
 8006fe2:	2166      	movs	r1, #102	; 0x66
 8006fe4:	4b17      	ldr	r3, [pc, #92]	; (8007044 <_Balloc+0x78>)
 8006fe6:	4818      	ldr	r0, [pc, #96]	; (8007048 <_Balloc+0x7c>)
 8006fe8:	f000 ff2c 	bl	8007e44 <__assert_func>
 8006fec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006ff0:	6006      	str	r6, [r0, #0]
 8006ff2:	60c6      	str	r6, [r0, #12]
 8006ff4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006ff6:	68f3      	ldr	r3, [r6, #12]
 8006ff8:	b183      	cbz	r3, 800701c <_Balloc+0x50>
 8006ffa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ffc:	68db      	ldr	r3, [r3, #12]
 8006ffe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007002:	b9b8      	cbnz	r0, 8007034 <_Balloc+0x68>
 8007004:	2101      	movs	r1, #1
 8007006:	fa01 f605 	lsl.w	r6, r1, r5
 800700a:	1d72      	adds	r2, r6, #5
 800700c:	4620      	mov	r0, r4
 800700e:	0092      	lsls	r2, r2, #2
 8007010:	f000 fc94 	bl	800793c <_calloc_r>
 8007014:	b160      	cbz	r0, 8007030 <_Balloc+0x64>
 8007016:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800701a:	e00e      	b.n	800703a <_Balloc+0x6e>
 800701c:	2221      	movs	r2, #33	; 0x21
 800701e:	2104      	movs	r1, #4
 8007020:	4620      	mov	r0, r4
 8007022:	f000 fc8b 	bl	800793c <_calloc_r>
 8007026:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007028:	60f0      	str	r0, [r6, #12]
 800702a:	68db      	ldr	r3, [r3, #12]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d1e4      	bne.n	8006ffa <_Balloc+0x2e>
 8007030:	2000      	movs	r0, #0
 8007032:	bd70      	pop	{r4, r5, r6, pc}
 8007034:	6802      	ldr	r2, [r0, #0]
 8007036:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800703a:	2300      	movs	r3, #0
 800703c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007040:	e7f7      	b.n	8007032 <_Balloc+0x66>
 8007042:	bf00      	nop
 8007044:	08008ba6 	.word	0x08008ba6
 8007048:	08008ca4 	.word	0x08008ca4

0800704c <_Bfree>:
 800704c:	b570      	push	{r4, r5, r6, lr}
 800704e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007050:	4605      	mov	r5, r0
 8007052:	460c      	mov	r4, r1
 8007054:	b976      	cbnz	r6, 8007074 <_Bfree+0x28>
 8007056:	2010      	movs	r0, #16
 8007058:	f7ff ff82 	bl	8006f60 <malloc>
 800705c:	4602      	mov	r2, r0
 800705e:	6268      	str	r0, [r5, #36]	; 0x24
 8007060:	b920      	cbnz	r0, 800706c <_Bfree+0x20>
 8007062:	218a      	movs	r1, #138	; 0x8a
 8007064:	4b08      	ldr	r3, [pc, #32]	; (8007088 <_Bfree+0x3c>)
 8007066:	4809      	ldr	r0, [pc, #36]	; (800708c <_Bfree+0x40>)
 8007068:	f000 feec 	bl	8007e44 <__assert_func>
 800706c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007070:	6006      	str	r6, [r0, #0]
 8007072:	60c6      	str	r6, [r0, #12]
 8007074:	b13c      	cbz	r4, 8007086 <_Bfree+0x3a>
 8007076:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007078:	6862      	ldr	r2, [r4, #4]
 800707a:	68db      	ldr	r3, [r3, #12]
 800707c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007080:	6021      	str	r1, [r4, #0]
 8007082:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007086:	bd70      	pop	{r4, r5, r6, pc}
 8007088:	08008ba6 	.word	0x08008ba6
 800708c:	08008ca4 	.word	0x08008ca4

08007090 <__multadd>:
 8007090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007094:	4607      	mov	r7, r0
 8007096:	460c      	mov	r4, r1
 8007098:	461e      	mov	r6, r3
 800709a:	2000      	movs	r0, #0
 800709c:	690d      	ldr	r5, [r1, #16]
 800709e:	f101 0c14 	add.w	ip, r1, #20
 80070a2:	f8dc 3000 	ldr.w	r3, [ip]
 80070a6:	3001      	adds	r0, #1
 80070a8:	b299      	uxth	r1, r3
 80070aa:	fb02 6101 	mla	r1, r2, r1, r6
 80070ae:	0c1e      	lsrs	r6, r3, #16
 80070b0:	0c0b      	lsrs	r3, r1, #16
 80070b2:	fb02 3306 	mla	r3, r2, r6, r3
 80070b6:	b289      	uxth	r1, r1
 80070b8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80070bc:	4285      	cmp	r5, r0
 80070be:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80070c2:	f84c 1b04 	str.w	r1, [ip], #4
 80070c6:	dcec      	bgt.n	80070a2 <__multadd+0x12>
 80070c8:	b30e      	cbz	r6, 800710e <__multadd+0x7e>
 80070ca:	68a3      	ldr	r3, [r4, #8]
 80070cc:	42ab      	cmp	r3, r5
 80070ce:	dc19      	bgt.n	8007104 <__multadd+0x74>
 80070d0:	6861      	ldr	r1, [r4, #4]
 80070d2:	4638      	mov	r0, r7
 80070d4:	3101      	adds	r1, #1
 80070d6:	f7ff ff79 	bl	8006fcc <_Balloc>
 80070da:	4680      	mov	r8, r0
 80070dc:	b928      	cbnz	r0, 80070ea <__multadd+0x5a>
 80070de:	4602      	mov	r2, r0
 80070e0:	21b5      	movs	r1, #181	; 0xb5
 80070e2:	4b0c      	ldr	r3, [pc, #48]	; (8007114 <__multadd+0x84>)
 80070e4:	480c      	ldr	r0, [pc, #48]	; (8007118 <__multadd+0x88>)
 80070e6:	f000 fead 	bl	8007e44 <__assert_func>
 80070ea:	6922      	ldr	r2, [r4, #16]
 80070ec:	f104 010c 	add.w	r1, r4, #12
 80070f0:	3202      	adds	r2, #2
 80070f2:	0092      	lsls	r2, r2, #2
 80070f4:	300c      	adds	r0, #12
 80070f6:	f7ff ff5b 	bl	8006fb0 <memcpy>
 80070fa:	4621      	mov	r1, r4
 80070fc:	4638      	mov	r0, r7
 80070fe:	f7ff ffa5 	bl	800704c <_Bfree>
 8007102:	4644      	mov	r4, r8
 8007104:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007108:	3501      	adds	r5, #1
 800710a:	615e      	str	r6, [r3, #20]
 800710c:	6125      	str	r5, [r4, #16]
 800710e:	4620      	mov	r0, r4
 8007110:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007114:	08008c18 	.word	0x08008c18
 8007118:	08008ca4 	.word	0x08008ca4

0800711c <__s2b>:
 800711c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007120:	4615      	mov	r5, r2
 8007122:	2209      	movs	r2, #9
 8007124:	461f      	mov	r7, r3
 8007126:	3308      	adds	r3, #8
 8007128:	460c      	mov	r4, r1
 800712a:	fb93 f3f2 	sdiv	r3, r3, r2
 800712e:	4606      	mov	r6, r0
 8007130:	2201      	movs	r2, #1
 8007132:	2100      	movs	r1, #0
 8007134:	429a      	cmp	r2, r3
 8007136:	db09      	blt.n	800714c <__s2b+0x30>
 8007138:	4630      	mov	r0, r6
 800713a:	f7ff ff47 	bl	8006fcc <_Balloc>
 800713e:	b940      	cbnz	r0, 8007152 <__s2b+0x36>
 8007140:	4602      	mov	r2, r0
 8007142:	21ce      	movs	r1, #206	; 0xce
 8007144:	4b18      	ldr	r3, [pc, #96]	; (80071a8 <__s2b+0x8c>)
 8007146:	4819      	ldr	r0, [pc, #100]	; (80071ac <__s2b+0x90>)
 8007148:	f000 fe7c 	bl	8007e44 <__assert_func>
 800714c:	0052      	lsls	r2, r2, #1
 800714e:	3101      	adds	r1, #1
 8007150:	e7f0      	b.n	8007134 <__s2b+0x18>
 8007152:	9b08      	ldr	r3, [sp, #32]
 8007154:	2d09      	cmp	r5, #9
 8007156:	6143      	str	r3, [r0, #20]
 8007158:	f04f 0301 	mov.w	r3, #1
 800715c:	6103      	str	r3, [r0, #16]
 800715e:	dd16      	ble.n	800718e <__s2b+0x72>
 8007160:	f104 0909 	add.w	r9, r4, #9
 8007164:	46c8      	mov	r8, r9
 8007166:	442c      	add	r4, r5
 8007168:	f818 3b01 	ldrb.w	r3, [r8], #1
 800716c:	4601      	mov	r1, r0
 800716e:	220a      	movs	r2, #10
 8007170:	4630      	mov	r0, r6
 8007172:	3b30      	subs	r3, #48	; 0x30
 8007174:	f7ff ff8c 	bl	8007090 <__multadd>
 8007178:	45a0      	cmp	r8, r4
 800717a:	d1f5      	bne.n	8007168 <__s2b+0x4c>
 800717c:	f1a5 0408 	sub.w	r4, r5, #8
 8007180:	444c      	add	r4, r9
 8007182:	1b2d      	subs	r5, r5, r4
 8007184:	1963      	adds	r3, r4, r5
 8007186:	42bb      	cmp	r3, r7
 8007188:	db04      	blt.n	8007194 <__s2b+0x78>
 800718a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800718e:	2509      	movs	r5, #9
 8007190:	340a      	adds	r4, #10
 8007192:	e7f6      	b.n	8007182 <__s2b+0x66>
 8007194:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007198:	4601      	mov	r1, r0
 800719a:	220a      	movs	r2, #10
 800719c:	4630      	mov	r0, r6
 800719e:	3b30      	subs	r3, #48	; 0x30
 80071a0:	f7ff ff76 	bl	8007090 <__multadd>
 80071a4:	e7ee      	b.n	8007184 <__s2b+0x68>
 80071a6:	bf00      	nop
 80071a8:	08008c18 	.word	0x08008c18
 80071ac:	08008ca4 	.word	0x08008ca4

080071b0 <__hi0bits>:
 80071b0:	0c02      	lsrs	r2, r0, #16
 80071b2:	0412      	lsls	r2, r2, #16
 80071b4:	4603      	mov	r3, r0
 80071b6:	b9ca      	cbnz	r2, 80071ec <__hi0bits+0x3c>
 80071b8:	0403      	lsls	r3, r0, #16
 80071ba:	2010      	movs	r0, #16
 80071bc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80071c0:	bf04      	itt	eq
 80071c2:	021b      	lsleq	r3, r3, #8
 80071c4:	3008      	addeq	r0, #8
 80071c6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80071ca:	bf04      	itt	eq
 80071cc:	011b      	lsleq	r3, r3, #4
 80071ce:	3004      	addeq	r0, #4
 80071d0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80071d4:	bf04      	itt	eq
 80071d6:	009b      	lsleq	r3, r3, #2
 80071d8:	3002      	addeq	r0, #2
 80071da:	2b00      	cmp	r3, #0
 80071dc:	db05      	blt.n	80071ea <__hi0bits+0x3a>
 80071de:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80071e2:	f100 0001 	add.w	r0, r0, #1
 80071e6:	bf08      	it	eq
 80071e8:	2020      	moveq	r0, #32
 80071ea:	4770      	bx	lr
 80071ec:	2000      	movs	r0, #0
 80071ee:	e7e5      	b.n	80071bc <__hi0bits+0xc>

080071f0 <__lo0bits>:
 80071f0:	6803      	ldr	r3, [r0, #0]
 80071f2:	4602      	mov	r2, r0
 80071f4:	f013 0007 	ands.w	r0, r3, #7
 80071f8:	d00b      	beq.n	8007212 <__lo0bits+0x22>
 80071fa:	07d9      	lsls	r1, r3, #31
 80071fc:	d421      	bmi.n	8007242 <__lo0bits+0x52>
 80071fe:	0798      	lsls	r0, r3, #30
 8007200:	bf49      	itett	mi
 8007202:	085b      	lsrmi	r3, r3, #1
 8007204:	089b      	lsrpl	r3, r3, #2
 8007206:	2001      	movmi	r0, #1
 8007208:	6013      	strmi	r3, [r2, #0]
 800720a:	bf5c      	itt	pl
 800720c:	2002      	movpl	r0, #2
 800720e:	6013      	strpl	r3, [r2, #0]
 8007210:	4770      	bx	lr
 8007212:	b299      	uxth	r1, r3
 8007214:	b909      	cbnz	r1, 800721a <__lo0bits+0x2a>
 8007216:	2010      	movs	r0, #16
 8007218:	0c1b      	lsrs	r3, r3, #16
 800721a:	b2d9      	uxtb	r1, r3
 800721c:	b909      	cbnz	r1, 8007222 <__lo0bits+0x32>
 800721e:	3008      	adds	r0, #8
 8007220:	0a1b      	lsrs	r3, r3, #8
 8007222:	0719      	lsls	r1, r3, #28
 8007224:	bf04      	itt	eq
 8007226:	091b      	lsreq	r3, r3, #4
 8007228:	3004      	addeq	r0, #4
 800722a:	0799      	lsls	r1, r3, #30
 800722c:	bf04      	itt	eq
 800722e:	089b      	lsreq	r3, r3, #2
 8007230:	3002      	addeq	r0, #2
 8007232:	07d9      	lsls	r1, r3, #31
 8007234:	d403      	bmi.n	800723e <__lo0bits+0x4e>
 8007236:	085b      	lsrs	r3, r3, #1
 8007238:	f100 0001 	add.w	r0, r0, #1
 800723c:	d003      	beq.n	8007246 <__lo0bits+0x56>
 800723e:	6013      	str	r3, [r2, #0]
 8007240:	4770      	bx	lr
 8007242:	2000      	movs	r0, #0
 8007244:	4770      	bx	lr
 8007246:	2020      	movs	r0, #32
 8007248:	4770      	bx	lr
	...

0800724c <__i2b>:
 800724c:	b510      	push	{r4, lr}
 800724e:	460c      	mov	r4, r1
 8007250:	2101      	movs	r1, #1
 8007252:	f7ff febb 	bl	8006fcc <_Balloc>
 8007256:	4602      	mov	r2, r0
 8007258:	b928      	cbnz	r0, 8007266 <__i2b+0x1a>
 800725a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800725e:	4b04      	ldr	r3, [pc, #16]	; (8007270 <__i2b+0x24>)
 8007260:	4804      	ldr	r0, [pc, #16]	; (8007274 <__i2b+0x28>)
 8007262:	f000 fdef 	bl	8007e44 <__assert_func>
 8007266:	2301      	movs	r3, #1
 8007268:	6144      	str	r4, [r0, #20]
 800726a:	6103      	str	r3, [r0, #16]
 800726c:	bd10      	pop	{r4, pc}
 800726e:	bf00      	nop
 8007270:	08008c18 	.word	0x08008c18
 8007274:	08008ca4 	.word	0x08008ca4

08007278 <__multiply>:
 8007278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800727c:	4691      	mov	r9, r2
 800727e:	690a      	ldr	r2, [r1, #16]
 8007280:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007284:	460c      	mov	r4, r1
 8007286:	429a      	cmp	r2, r3
 8007288:	bfbe      	ittt	lt
 800728a:	460b      	movlt	r3, r1
 800728c:	464c      	movlt	r4, r9
 800728e:	4699      	movlt	r9, r3
 8007290:	6927      	ldr	r7, [r4, #16]
 8007292:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007296:	68a3      	ldr	r3, [r4, #8]
 8007298:	6861      	ldr	r1, [r4, #4]
 800729a:	eb07 060a 	add.w	r6, r7, sl
 800729e:	42b3      	cmp	r3, r6
 80072a0:	b085      	sub	sp, #20
 80072a2:	bfb8      	it	lt
 80072a4:	3101      	addlt	r1, #1
 80072a6:	f7ff fe91 	bl	8006fcc <_Balloc>
 80072aa:	b930      	cbnz	r0, 80072ba <__multiply+0x42>
 80072ac:	4602      	mov	r2, r0
 80072ae:	f240 115d 	movw	r1, #349	; 0x15d
 80072b2:	4b43      	ldr	r3, [pc, #268]	; (80073c0 <__multiply+0x148>)
 80072b4:	4843      	ldr	r0, [pc, #268]	; (80073c4 <__multiply+0x14c>)
 80072b6:	f000 fdc5 	bl	8007e44 <__assert_func>
 80072ba:	f100 0514 	add.w	r5, r0, #20
 80072be:	462b      	mov	r3, r5
 80072c0:	2200      	movs	r2, #0
 80072c2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80072c6:	4543      	cmp	r3, r8
 80072c8:	d321      	bcc.n	800730e <__multiply+0x96>
 80072ca:	f104 0314 	add.w	r3, r4, #20
 80072ce:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80072d2:	f109 0314 	add.w	r3, r9, #20
 80072d6:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80072da:	9202      	str	r2, [sp, #8]
 80072dc:	1b3a      	subs	r2, r7, r4
 80072de:	3a15      	subs	r2, #21
 80072e0:	f022 0203 	bic.w	r2, r2, #3
 80072e4:	3204      	adds	r2, #4
 80072e6:	f104 0115 	add.w	r1, r4, #21
 80072ea:	428f      	cmp	r7, r1
 80072ec:	bf38      	it	cc
 80072ee:	2204      	movcc	r2, #4
 80072f0:	9201      	str	r2, [sp, #4]
 80072f2:	9a02      	ldr	r2, [sp, #8]
 80072f4:	9303      	str	r3, [sp, #12]
 80072f6:	429a      	cmp	r2, r3
 80072f8:	d80c      	bhi.n	8007314 <__multiply+0x9c>
 80072fa:	2e00      	cmp	r6, #0
 80072fc:	dd03      	ble.n	8007306 <__multiply+0x8e>
 80072fe:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007302:	2b00      	cmp	r3, #0
 8007304:	d059      	beq.n	80073ba <__multiply+0x142>
 8007306:	6106      	str	r6, [r0, #16]
 8007308:	b005      	add	sp, #20
 800730a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800730e:	f843 2b04 	str.w	r2, [r3], #4
 8007312:	e7d8      	b.n	80072c6 <__multiply+0x4e>
 8007314:	f8b3 a000 	ldrh.w	sl, [r3]
 8007318:	f1ba 0f00 	cmp.w	sl, #0
 800731c:	d023      	beq.n	8007366 <__multiply+0xee>
 800731e:	46a9      	mov	r9, r5
 8007320:	f04f 0c00 	mov.w	ip, #0
 8007324:	f104 0e14 	add.w	lr, r4, #20
 8007328:	f85e 2b04 	ldr.w	r2, [lr], #4
 800732c:	f8d9 1000 	ldr.w	r1, [r9]
 8007330:	fa1f fb82 	uxth.w	fp, r2
 8007334:	b289      	uxth	r1, r1
 8007336:	fb0a 110b 	mla	r1, sl, fp, r1
 800733a:	4461      	add	r1, ip
 800733c:	f8d9 c000 	ldr.w	ip, [r9]
 8007340:	0c12      	lsrs	r2, r2, #16
 8007342:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007346:	fb0a c202 	mla	r2, sl, r2, ip
 800734a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800734e:	b289      	uxth	r1, r1
 8007350:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007354:	4577      	cmp	r7, lr
 8007356:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800735a:	f849 1b04 	str.w	r1, [r9], #4
 800735e:	d8e3      	bhi.n	8007328 <__multiply+0xb0>
 8007360:	9a01      	ldr	r2, [sp, #4]
 8007362:	f845 c002 	str.w	ip, [r5, r2]
 8007366:	9a03      	ldr	r2, [sp, #12]
 8007368:	3304      	adds	r3, #4
 800736a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800736e:	f1b9 0f00 	cmp.w	r9, #0
 8007372:	d020      	beq.n	80073b6 <__multiply+0x13e>
 8007374:	46ae      	mov	lr, r5
 8007376:	f04f 0a00 	mov.w	sl, #0
 800737a:	6829      	ldr	r1, [r5, #0]
 800737c:	f104 0c14 	add.w	ip, r4, #20
 8007380:	f8bc b000 	ldrh.w	fp, [ip]
 8007384:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007388:	b289      	uxth	r1, r1
 800738a:	fb09 220b 	mla	r2, r9, fp, r2
 800738e:	4492      	add	sl, r2
 8007390:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007394:	f84e 1b04 	str.w	r1, [lr], #4
 8007398:	f85c 2b04 	ldr.w	r2, [ip], #4
 800739c:	f8be 1000 	ldrh.w	r1, [lr]
 80073a0:	0c12      	lsrs	r2, r2, #16
 80073a2:	fb09 1102 	mla	r1, r9, r2, r1
 80073a6:	4567      	cmp	r7, ip
 80073a8:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80073ac:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80073b0:	d8e6      	bhi.n	8007380 <__multiply+0x108>
 80073b2:	9a01      	ldr	r2, [sp, #4]
 80073b4:	50a9      	str	r1, [r5, r2]
 80073b6:	3504      	adds	r5, #4
 80073b8:	e79b      	b.n	80072f2 <__multiply+0x7a>
 80073ba:	3e01      	subs	r6, #1
 80073bc:	e79d      	b.n	80072fa <__multiply+0x82>
 80073be:	bf00      	nop
 80073c0:	08008c18 	.word	0x08008c18
 80073c4:	08008ca4 	.word	0x08008ca4

080073c8 <__pow5mult>:
 80073c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073cc:	4615      	mov	r5, r2
 80073ce:	f012 0203 	ands.w	r2, r2, #3
 80073d2:	4606      	mov	r6, r0
 80073d4:	460f      	mov	r7, r1
 80073d6:	d007      	beq.n	80073e8 <__pow5mult+0x20>
 80073d8:	4c25      	ldr	r4, [pc, #148]	; (8007470 <__pow5mult+0xa8>)
 80073da:	3a01      	subs	r2, #1
 80073dc:	2300      	movs	r3, #0
 80073de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80073e2:	f7ff fe55 	bl	8007090 <__multadd>
 80073e6:	4607      	mov	r7, r0
 80073e8:	10ad      	asrs	r5, r5, #2
 80073ea:	d03d      	beq.n	8007468 <__pow5mult+0xa0>
 80073ec:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80073ee:	b97c      	cbnz	r4, 8007410 <__pow5mult+0x48>
 80073f0:	2010      	movs	r0, #16
 80073f2:	f7ff fdb5 	bl	8006f60 <malloc>
 80073f6:	4602      	mov	r2, r0
 80073f8:	6270      	str	r0, [r6, #36]	; 0x24
 80073fa:	b928      	cbnz	r0, 8007408 <__pow5mult+0x40>
 80073fc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007400:	4b1c      	ldr	r3, [pc, #112]	; (8007474 <__pow5mult+0xac>)
 8007402:	481d      	ldr	r0, [pc, #116]	; (8007478 <__pow5mult+0xb0>)
 8007404:	f000 fd1e 	bl	8007e44 <__assert_func>
 8007408:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800740c:	6004      	str	r4, [r0, #0]
 800740e:	60c4      	str	r4, [r0, #12]
 8007410:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007414:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007418:	b94c      	cbnz	r4, 800742e <__pow5mult+0x66>
 800741a:	f240 2171 	movw	r1, #625	; 0x271
 800741e:	4630      	mov	r0, r6
 8007420:	f7ff ff14 	bl	800724c <__i2b>
 8007424:	2300      	movs	r3, #0
 8007426:	4604      	mov	r4, r0
 8007428:	f8c8 0008 	str.w	r0, [r8, #8]
 800742c:	6003      	str	r3, [r0, #0]
 800742e:	f04f 0900 	mov.w	r9, #0
 8007432:	07eb      	lsls	r3, r5, #31
 8007434:	d50a      	bpl.n	800744c <__pow5mult+0x84>
 8007436:	4639      	mov	r1, r7
 8007438:	4622      	mov	r2, r4
 800743a:	4630      	mov	r0, r6
 800743c:	f7ff ff1c 	bl	8007278 <__multiply>
 8007440:	4680      	mov	r8, r0
 8007442:	4639      	mov	r1, r7
 8007444:	4630      	mov	r0, r6
 8007446:	f7ff fe01 	bl	800704c <_Bfree>
 800744a:	4647      	mov	r7, r8
 800744c:	106d      	asrs	r5, r5, #1
 800744e:	d00b      	beq.n	8007468 <__pow5mult+0xa0>
 8007450:	6820      	ldr	r0, [r4, #0]
 8007452:	b938      	cbnz	r0, 8007464 <__pow5mult+0x9c>
 8007454:	4622      	mov	r2, r4
 8007456:	4621      	mov	r1, r4
 8007458:	4630      	mov	r0, r6
 800745a:	f7ff ff0d 	bl	8007278 <__multiply>
 800745e:	6020      	str	r0, [r4, #0]
 8007460:	f8c0 9000 	str.w	r9, [r0]
 8007464:	4604      	mov	r4, r0
 8007466:	e7e4      	b.n	8007432 <__pow5mult+0x6a>
 8007468:	4638      	mov	r0, r7
 800746a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800746e:	bf00      	nop
 8007470:	08008df0 	.word	0x08008df0
 8007474:	08008ba6 	.word	0x08008ba6
 8007478:	08008ca4 	.word	0x08008ca4

0800747c <__lshift>:
 800747c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007480:	460c      	mov	r4, r1
 8007482:	4607      	mov	r7, r0
 8007484:	4691      	mov	r9, r2
 8007486:	6923      	ldr	r3, [r4, #16]
 8007488:	6849      	ldr	r1, [r1, #4]
 800748a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800748e:	68a3      	ldr	r3, [r4, #8]
 8007490:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007494:	f108 0601 	add.w	r6, r8, #1
 8007498:	42b3      	cmp	r3, r6
 800749a:	db0b      	blt.n	80074b4 <__lshift+0x38>
 800749c:	4638      	mov	r0, r7
 800749e:	f7ff fd95 	bl	8006fcc <_Balloc>
 80074a2:	4605      	mov	r5, r0
 80074a4:	b948      	cbnz	r0, 80074ba <__lshift+0x3e>
 80074a6:	4602      	mov	r2, r0
 80074a8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80074ac:	4b29      	ldr	r3, [pc, #164]	; (8007554 <__lshift+0xd8>)
 80074ae:	482a      	ldr	r0, [pc, #168]	; (8007558 <__lshift+0xdc>)
 80074b0:	f000 fcc8 	bl	8007e44 <__assert_func>
 80074b4:	3101      	adds	r1, #1
 80074b6:	005b      	lsls	r3, r3, #1
 80074b8:	e7ee      	b.n	8007498 <__lshift+0x1c>
 80074ba:	2300      	movs	r3, #0
 80074bc:	f100 0114 	add.w	r1, r0, #20
 80074c0:	f100 0210 	add.w	r2, r0, #16
 80074c4:	4618      	mov	r0, r3
 80074c6:	4553      	cmp	r3, sl
 80074c8:	db37      	blt.n	800753a <__lshift+0xbe>
 80074ca:	6920      	ldr	r0, [r4, #16]
 80074cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80074d0:	f104 0314 	add.w	r3, r4, #20
 80074d4:	f019 091f 	ands.w	r9, r9, #31
 80074d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80074dc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80074e0:	d02f      	beq.n	8007542 <__lshift+0xc6>
 80074e2:	468a      	mov	sl, r1
 80074e4:	f04f 0c00 	mov.w	ip, #0
 80074e8:	f1c9 0e20 	rsb	lr, r9, #32
 80074ec:	681a      	ldr	r2, [r3, #0]
 80074ee:	fa02 f209 	lsl.w	r2, r2, r9
 80074f2:	ea42 020c 	orr.w	r2, r2, ip
 80074f6:	f84a 2b04 	str.w	r2, [sl], #4
 80074fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80074fe:	4298      	cmp	r0, r3
 8007500:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007504:	d8f2      	bhi.n	80074ec <__lshift+0x70>
 8007506:	1b03      	subs	r3, r0, r4
 8007508:	3b15      	subs	r3, #21
 800750a:	f023 0303 	bic.w	r3, r3, #3
 800750e:	3304      	adds	r3, #4
 8007510:	f104 0215 	add.w	r2, r4, #21
 8007514:	4290      	cmp	r0, r2
 8007516:	bf38      	it	cc
 8007518:	2304      	movcc	r3, #4
 800751a:	f841 c003 	str.w	ip, [r1, r3]
 800751e:	f1bc 0f00 	cmp.w	ip, #0
 8007522:	d001      	beq.n	8007528 <__lshift+0xac>
 8007524:	f108 0602 	add.w	r6, r8, #2
 8007528:	3e01      	subs	r6, #1
 800752a:	4638      	mov	r0, r7
 800752c:	4621      	mov	r1, r4
 800752e:	612e      	str	r6, [r5, #16]
 8007530:	f7ff fd8c 	bl	800704c <_Bfree>
 8007534:	4628      	mov	r0, r5
 8007536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800753a:	f842 0f04 	str.w	r0, [r2, #4]!
 800753e:	3301      	adds	r3, #1
 8007540:	e7c1      	b.n	80074c6 <__lshift+0x4a>
 8007542:	3904      	subs	r1, #4
 8007544:	f853 2b04 	ldr.w	r2, [r3], #4
 8007548:	4298      	cmp	r0, r3
 800754a:	f841 2f04 	str.w	r2, [r1, #4]!
 800754e:	d8f9      	bhi.n	8007544 <__lshift+0xc8>
 8007550:	e7ea      	b.n	8007528 <__lshift+0xac>
 8007552:	bf00      	nop
 8007554:	08008c18 	.word	0x08008c18
 8007558:	08008ca4 	.word	0x08008ca4

0800755c <__mcmp>:
 800755c:	4603      	mov	r3, r0
 800755e:	690a      	ldr	r2, [r1, #16]
 8007560:	6900      	ldr	r0, [r0, #16]
 8007562:	b530      	push	{r4, r5, lr}
 8007564:	1a80      	subs	r0, r0, r2
 8007566:	d10d      	bne.n	8007584 <__mcmp+0x28>
 8007568:	3314      	adds	r3, #20
 800756a:	3114      	adds	r1, #20
 800756c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007570:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007574:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007578:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800757c:	4295      	cmp	r5, r2
 800757e:	d002      	beq.n	8007586 <__mcmp+0x2a>
 8007580:	d304      	bcc.n	800758c <__mcmp+0x30>
 8007582:	2001      	movs	r0, #1
 8007584:	bd30      	pop	{r4, r5, pc}
 8007586:	42a3      	cmp	r3, r4
 8007588:	d3f4      	bcc.n	8007574 <__mcmp+0x18>
 800758a:	e7fb      	b.n	8007584 <__mcmp+0x28>
 800758c:	f04f 30ff 	mov.w	r0, #4294967295
 8007590:	e7f8      	b.n	8007584 <__mcmp+0x28>
	...

08007594 <__mdiff>:
 8007594:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007598:	460d      	mov	r5, r1
 800759a:	4607      	mov	r7, r0
 800759c:	4611      	mov	r1, r2
 800759e:	4628      	mov	r0, r5
 80075a0:	4614      	mov	r4, r2
 80075a2:	f7ff ffdb 	bl	800755c <__mcmp>
 80075a6:	1e06      	subs	r6, r0, #0
 80075a8:	d111      	bne.n	80075ce <__mdiff+0x3a>
 80075aa:	4631      	mov	r1, r6
 80075ac:	4638      	mov	r0, r7
 80075ae:	f7ff fd0d 	bl	8006fcc <_Balloc>
 80075b2:	4602      	mov	r2, r0
 80075b4:	b928      	cbnz	r0, 80075c2 <__mdiff+0x2e>
 80075b6:	f240 2132 	movw	r1, #562	; 0x232
 80075ba:	4b3a      	ldr	r3, [pc, #232]	; (80076a4 <__mdiff+0x110>)
 80075bc:	483a      	ldr	r0, [pc, #232]	; (80076a8 <__mdiff+0x114>)
 80075be:	f000 fc41 	bl	8007e44 <__assert_func>
 80075c2:	2301      	movs	r3, #1
 80075c4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80075c8:	4610      	mov	r0, r2
 80075ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075ce:	bfa4      	itt	ge
 80075d0:	4623      	movge	r3, r4
 80075d2:	462c      	movge	r4, r5
 80075d4:	4638      	mov	r0, r7
 80075d6:	6861      	ldr	r1, [r4, #4]
 80075d8:	bfa6      	itte	ge
 80075da:	461d      	movge	r5, r3
 80075dc:	2600      	movge	r6, #0
 80075de:	2601      	movlt	r6, #1
 80075e0:	f7ff fcf4 	bl	8006fcc <_Balloc>
 80075e4:	4602      	mov	r2, r0
 80075e6:	b918      	cbnz	r0, 80075f0 <__mdiff+0x5c>
 80075e8:	f44f 7110 	mov.w	r1, #576	; 0x240
 80075ec:	4b2d      	ldr	r3, [pc, #180]	; (80076a4 <__mdiff+0x110>)
 80075ee:	e7e5      	b.n	80075bc <__mdiff+0x28>
 80075f0:	f102 0814 	add.w	r8, r2, #20
 80075f4:	46c2      	mov	sl, r8
 80075f6:	f04f 0c00 	mov.w	ip, #0
 80075fa:	6927      	ldr	r7, [r4, #16]
 80075fc:	60c6      	str	r6, [r0, #12]
 80075fe:	692e      	ldr	r6, [r5, #16]
 8007600:	f104 0014 	add.w	r0, r4, #20
 8007604:	f105 0914 	add.w	r9, r5, #20
 8007608:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800760c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007610:	3410      	adds	r4, #16
 8007612:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8007616:	f859 3b04 	ldr.w	r3, [r9], #4
 800761a:	fa1f f18b 	uxth.w	r1, fp
 800761e:	448c      	add	ip, r1
 8007620:	b299      	uxth	r1, r3
 8007622:	0c1b      	lsrs	r3, r3, #16
 8007624:	ebac 0101 	sub.w	r1, ip, r1
 8007628:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800762c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007630:	b289      	uxth	r1, r1
 8007632:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8007636:	454e      	cmp	r6, r9
 8007638:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800763c:	f84a 3b04 	str.w	r3, [sl], #4
 8007640:	d8e7      	bhi.n	8007612 <__mdiff+0x7e>
 8007642:	1b73      	subs	r3, r6, r5
 8007644:	3b15      	subs	r3, #21
 8007646:	f023 0303 	bic.w	r3, r3, #3
 800764a:	3515      	adds	r5, #21
 800764c:	3304      	adds	r3, #4
 800764e:	42ae      	cmp	r6, r5
 8007650:	bf38      	it	cc
 8007652:	2304      	movcc	r3, #4
 8007654:	4418      	add	r0, r3
 8007656:	4443      	add	r3, r8
 8007658:	461e      	mov	r6, r3
 800765a:	4605      	mov	r5, r0
 800765c:	4575      	cmp	r5, lr
 800765e:	d30e      	bcc.n	800767e <__mdiff+0xea>
 8007660:	f10e 0103 	add.w	r1, lr, #3
 8007664:	1a09      	subs	r1, r1, r0
 8007666:	f021 0103 	bic.w	r1, r1, #3
 800766a:	3803      	subs	r0, #3
 800766c:	4586      	cmp	lr, r0
 800766e:	bf38      	it	cc
 8007670:	2100      	movcc	r1, #0
 8007672:	4419      	add	r1, r3
 8007674:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8007678:	b18b      	cbz	r3, 800769e <__mdiff+0x10a>
 800767a:	6117      	str	r7, [r2, #16]
 800767c:	e7a4      	b.n	80075c8 <__mdiff+0x34>
 800767e:	f855 8b04 	ldr.w	r8, [r5], #4
 8007682:	fa1f f188 	uxth.w	r1, r8
 8007686:	4461      	add	r1, ip
 8007688:	140c      	asrs	r4, r1, #16
 800768a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800768e:	b289      	uxth	r1, r1
 8007690:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007694:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8007698:	f846 1b04 	str.w	r1, [r6], #4
 800769c:	e7de      	b.n	800765c <__mdiff+0xc8>
 800769e:	3f01      	subs	r7, #1
 80076a0:	e7e8      	b.n	8007674 <__mdiff+0xe0>
 80076a2:	bf00      	nop
 80076a4:	08008c18 	.word	0x08008c18
 80076a8:	08008ca4 	.word	0x08008ca4

080076ac <__ulp>:
 80076ac:	4b11      	ldr	r3, [pc, #68]	; (80076f4 <__ulp+0x48>)
 80076ae:	400b      	ands	r3, r1
 80076b0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	dd02      	ble.n	80076be <__ulp+0x12>
 80076b8:	2000      	movs	r0, #0
 80076ba:	4619      	mov	r1, r3
 80076bc:	4770      	bx	lr
 80076be:	425b      	negs	r3, r3
 80076c0:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80076c4:	f04f 0000 	mov.w	r0, #0
 80076c8:	f04f 0100 	mov.w	r1, #0
 80076cc:	ea4f 5223 	mov.w	r2, r3, asr #20
 80076d0:	da04      	bge.n	80076dc <__ulp+0x30>
 80076d2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80076d6:	fa43 f102 	asr.w	r1, r3, r2
 80076da:	4770      	bx	lr
 80076dc:	f1a2 0314 	sub.w	r3, r2, #20
 80076e0:	2b1e      	cmp	r3, #30
 80076e2:	bfd6      	itet	le
 80076e4:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80076e8:	2301      	movgt	r3, #1
 80076ea:	fa22 f303 	lsrle.w	r3, r2, r3
 80076ee:	4618      	mov	r0, r3
 80076f0:	4770      	bx	lr
 80076f2:	bf00      	nop
 80076f4:	7ff00000 	.word	0x7ff00000

080076f8 <__b2d>:
 80076f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80076fc:	6907      	ldr	r7, [r0, #16]
 80076fe:	f100 0914 	add.w	r9, r0, #20
 8007702:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8007706:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800770a:	f1a7 0804 	sub.w	r8, r7, #4
 800770e:	4630      	mov	r0, r6
 8007710:	f7ff fd4e 	bl	80071b0 <__hi0bits>
 8007714:	f1c0 0320 	rsb	r3, r0, #32
 8007718:	280a      	cmp	r0, #10
 800771a:	600b      	str	r3, [r1, #0]
 800771c:	491f      	ldr	r1, [pc, #124]	; (800779c <__b2d+0xa4>)
 800771e:	dc17      	bgt.n	8007750 <__b2d+0x58>
 8007720:	45c1      	cmp	r9, r8
 8007722:	bf28      	it	cs
 8007724:	2200      	movcs	r2, #0
 8007726:	f1c0 0c0b 	rsb	ip, r0, #11
 800772a:	fa26 f30c 	lsr.w	r3, r6, ip
 800772e:	bf38      	it	cc
 8007730:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8007734:	ea43 0501 	orr.w	r5, r3, r1
 8007738:	f100 0315 	add.w	r3, r0, #21
 800773c:	fa06 f303 	lsl.w	r3, r6, r3
 8007740:	fa22 f20c 	lsr.w	r2, r2, ip
 8007744:	ea43 0402 	orr.w	r4, r3, r2
 8007748:	4620      	mov	r0, r4
 800774a:	4629      	mov	r1, r5
 800774c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007750:	45c1      	cmp	r9, r8
 8007752:	bf2e      	itee	cs
 8007754:	2200      	movcs	r2, #0
 8007756:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800775a:	f1a7 0808 	subcc.w	r8, r7, #8
 800775e:	f1b0 030b 	subs.w	r3, r0, #11
 8007762:	d016      	beq.n	8007792 <__b2d+0x9a>
 8007764:	f1c3 0720 	rsb	r7, r3, #32
 8007768:	fa22 f107 	lsr.w	r1, r2, r7
 800776c:	45c8      	cmp	r8, r9
 800776e:	fa06 f603 	lsl.w	r6, r6, r3
 8007772:	ea46 0601 	orr.w	r6, r6, r1
 8007776:	bf94      	ite	ls
 8007778:	2100      	movls	r1, #0
 800777a:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800777e:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8007782:	fa02 f003 	lsl.w	r0, r2, r3
 8007786:	40f9      	lsrs	r1, r7
 8007788:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800778c:	ea40 0401 	orr.w	r4, r0, r1
 8007790:	e7da      	b.n	8007748 <__b2d+0x50>
 8007792:	4614      	mov	r4, r2
 8007794:	ea46 0501 	orr.w	r5, r6, r1
 8007798:	e7d6      	b.n	8007748 <__b2d+0x50>
 800779a:	bf00      	nop
 800779c:	3ff00000 	.word	0x3ff00000

080077a0 <__d2b>:
 80077a0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80077a4:	2101      	movs	r1, #1
 80077a6:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80077aa:	4690      	mov	r8, r2
 80077ac:	461d      	mov	r5, r3
 80077ae:	f7ff fc0d 	bl	8006fcc <_Balloc>
 80077b2:	4604      	mov	r4, r0
 80077b4:	b930      	cbnz	r0, 80077c4 <__d2b+0x24>
 80077b6:	4602      	mov	r2, r0
 80077b8:	f240 310a 	movw	r1, #778	; 0x30a
 80077bc:	4b24      	ldr	r3, [pc, #144]	; (8007850 <__d2b+0xb0>)
 80077be:	4825      	ldr	r0, [pc, #148]	; (8007854 <__d2b+0xb4>)
 80077c0:	f000 fb40 	bl	8007e44 <__assert_func>
 80077c4:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80077c8:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80077cc:	bb2d      	cbnz	r5, 800781a <__d2b+0x7a>
 80077ce:	9301      	str	r3, [sp, #4]
 80077d0:	f1b8 0300 	subs.w	r3, r8, #0
 80077d4:	d026      	beq.n	8007824 <__d2b+0x84>
 80077d6:	4668      	mov	r0, sp
 80077d8:	9300      	str	r3, [sp, #0]
 80077da:	f7ff fd09 	bl	80071f0 <__lo0bits>
 80077de:	9900      	ldr	r1, [sp, #0]
 80077e0:	b1f0      	cbz	r0, 8007820 <__d2b+0x80>
 80077e2:	9a01      	ldr	r2, [sp, #4]
 80077e4:	f1c0 0320 	rsb	r3, r0, #32
 80077e8:	fa02 f303 	lsl.w	r3, r2, r3
 80077ec:	430b      	orrs	r3, r1
 80077ee:	40c2      	lsrs	r2, r0
 80077f0:	6163      	str	r3, [r4, #20]
 80077f2:	9201      	str	r2, [sp, #4]
 80077f4:	9b01      	ldr	r3, [sp, #4]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	bf14      	ite	ne
 80077fa:	2102      	movne	r1, #2
 80077fc:	2101      	moveq	r1, #1
 80077fe:	61a3      	str	r3, [r4, #24]
 8007800:	6121      	str	r1, [r4, #16]
 8007802:	b1c5      	cbz	r5, 8007836 <__d2b+0x96>
 8007804:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007808:	4405      	add	r5, r0
 800780a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800780e:	603d      	str	r5, [r7, #0]
 8007810:	6030      	str	r0, [r6, #0]
 8007812:	4620      	mov	r0, r4
 8007814:	b002      	add	sp, #8
 8007816:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800781a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800781e:	e7d6      	b.n	80077ce <__d2b+0x2e>
 8007820:	6161      	str	r1, [r4, #20]
 8007822:	e7e7      	b.n	80077f4 <__d2b+0x54>
 8007824:	a801      	add	r0, sp, #4
 8007826:	f7ff fce3 	bl	80071f0 <__lo0bits>
 800782a:	2101      	movs	r1, #1
 800782c:	9b01      	ldr	r3, [sp, #4]
 800782e:	6121      	str	r1, [r4, #16]
 8007830:	6163      	str	r3, [r4, #20]
 8007832:	3020      	adds	r0, #32
 8007834:	e7e5      	b.n	8007802 <__d2b+0x62>
 8007836:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800783a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800783e:	6038      	str	r0, [r7, #0]
 8007840:	6918      	ldr	r0, [r3, #16]
 8007842:	f7ff fcb5 	bl	80071b0 <__hi0bits>
 8007846:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800784a:	6031      	str	r1, [r6, #0]
 800784c:	e7e1      	b.n	8007812 <__d2b+0x72>
 800784e:	bf00      	nop
 8007850:	08008c18 	.word	0x08008c18
 8007854:	08008ca4 	.word	0x08008ca4

08007858 <__ratio>:
 8007858:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800785c:	4688      	mov	r8, r1
 800785e:	4669      	mov	r1, sp
 8007860:	4681      	mov	r9, r0
 8007862:	f7ff ff49 	bl	80076f8 <__b2d>
 8007866:	460f      	mov	r7, r1
 8007868:	4604      	mov	r4, r0
 800786a:	460d      	mov	r5, r1
 800786c:	4640      	mov	r0, r8
 800786e:	a901      	add	r1, sp, #4
 8007870:	f7ff ff42 	bl	80076f8 <__b2d>
 8007874:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007878:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800787c:	468b      	mov	fp, r1
 800787e:	eba3 0c02 	sub.w	ip, r3, r2
 8007882:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007886:	1a9b      	subs	r3, r3, r2
 8007888:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800788c:	2b00      	cmp	r3, #0
 800788e:	bfd5      	itete	le
 8007890:	460a      	movle	r2, r1
 8007892:	462a      	movgt	r2, r5
 8007894:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007898:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800789c:	bfd8      	it	le
 800789e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80078a2:	465b      	mov	r3, fp
 80078a4:	4602      	mov	r2, r0
 80078a6:	4639      	mov	r1, r7
 80078a8:	4620      	mov	r0, r4
 80078aa:	f7f9 f85f 	bl	800096c <__aeabi_ddiv>
 80078ae:	b003      	add	sp, #12
 80078b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080078b4 <__copybits>:
 80078b4:	3901      	subs	r1, #1
 80078b6:	b570      	push	{r4, r5, r6, lr}
 80078b8:	1149      	asrs	r1, r1, #5
 80078ba:	6914      	ldr	r4, [r2, #16]
 80078bc:	3101      	adds	r1, #1
 80078be:	f102 0314 	add.w	r3, r2, #20
 80078c2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80078c6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80078ca:	1f05      	subs	r5, r0, #4
 80078cc:	42a3      	cmp	r3, r4
 80078ce:	d30c      	bcc.n	80078ea <__copybits+0x36>
 80078d0:	1aa3      	subs	r3, r4, r2
 80078d2:	3b11      	subs	r3, #17
 80078d4:	f023 0303 	bic.w	r3, r3, #3
 80078d8:	3211      	adds	r2, #17
 80078da:	42a2      	cmp	r2, r4
 80078dc:	bf88      	it	hi
 80078de:	2300      	movhi	r3, #0
 80078e0:	4418      	add	r0, r3
 80078e2:	2300      	movs	r3, #0
 80078e4:	4288      	cmp	r0, r1
 80078e6:	d305      	bcc.n	80078f4 <__copybits+0x40>
 80078e8:	bd70      	pop	{r4, r5, r6, pc}
 80078ea:	f853 6b04 	ldr.w	r6, [r3], #4
 80078ee:	f845 6f04 	str.w	r6, [r5, #4]!
 80078f2:	e7eb      	b.n	80078cc <__copybits+0x18>
 80078f4:	f840 3b04 	str.w	r3, [r0], #4
 80078f8:	e7f4      	b.n	80078e4 <__copybits+0x30>

080078fa <__any_on>:
 80078fa:	f100 0214 	add.w	r2, r0, #20
 80078fe:	6900      	ldr	r0, [r0, #16]
 8007900:	114b      	asrs	r3, r1, #5
 8007902:	4298      	cmp	r0, r3
 8007904:	b510      	push	{r4, lr}
 8007906:	db11      	blt.n	800792c <__any_on+0x32>
 8007908:	dd0a      	ble.n	8007920 <__any_on+0x26>
 800790a:	f011 011f 	ands.w	r1, r1, #31
 800790e:	d007      	beq.n	8007920 <__any_on+0x26>
 8007910:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007914:	fa24 f001 	lsr.w	r0, r4, r1
 8007918:	fa00 f101 	lsl.w	r1, r0, r1
 800791c:	428c      	cmp	r4, r1
 800791e:	d10b      	bne.n	8007938 <__any_on+0x3e>
 8007920:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007924:	4293      	cmp	r3, r2
 8007926:	d803      	bhi.n	8007930 <__any_on+0x36>
 8007928:	2000      	movs	r0, #0
 800792a:	bd10      	pop	{r4, pc}
 800792c:	4603      	mov	r3, r0
 800792e:	e7f7      	b.n	8007920 <__any_on+0x26>
 8007930:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007934:	2900      	cmp	r1, #0
 8007936:	d0f5      	beq.n	8007924 <__any_on+0x2a>
 8007938:	2001      	movs	r0, #1
 800793a:	e7f6      	b.n	800792a <__any_on+0x30>

0800793c <_calloc_r>:
 800793c:	b570      	push	{r4, r5, r6, lr}
 800793e:	fba1 5402 	umull	r5, r4, r1, r2
 8007942:	b934      	cbnz	r4, 8007952 <_calloc_r+0x16>
 8007944:	4629      	mov	r1, r5
 8007946:	f000 f875 	bl	8007a34 <_malloc_r>
 800794a:	4606      	mov	r6, r0
 800794c:	b928      	cbnz	r0, 800795a <_calloc_r+0x1e>
 800794e:	4630      	mov	r0, r6
 8007950:	bd70      	pop	{r4, r5, r6, pc}
 8007952:	220c      	movs	r2, #12
 8007954:	2600      	movs	r6, #0
 8007956:	6002      	str	r2, [r0, #0]
 8007958:	e7f9      	b.n	800794e <_calloc_r+0x12>
 800795a:	462a      	mov	r2, r5
 800795c:	4621      	mov	r1, r4
 800795e:	f7fc fbd3 	bl	8004108 <memset>
 8007962:	e7f4      	b.n	800794e <_calloc_r+0x12>

08007964 <_free_r>:
 8007964:	b538      	push	{r3, r4, r5, lr}
 8007966:	4605      	mov	r5, r0
 8007968:	2900      	cmp	r1, #0
 800796a:	d040      	beq.n	80079ee <_free_r+0x8a>
 800796c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007970:	1f0c      	subs	r4, r1, #4
 8007972:	2b00      	cmp	r3, #0
 8007974:	bfb8      	it	lt
 8007976:	18e4      	addlt	r4, r4, r3
 8007978:	f000 faae 	bl	8007ed8 <__malloc_lock>
 800797c:	4a1c      	ldr	r2, [pc, #112]	; (80079f0 <_free_r+0x8c>)
 800797e:	6813      	ldr	r3, [r2, #0]
 8007980:	b933      	cbnz	r3, 8007990 <_free_r+0x2c>
 8007982:	6063      	str	r3, [r4, #4]
 8007984:	6014      	str	r4, [r2, #0]
 8007986:	4628      	mov	r0, r5
 8007988:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800798c:	f000 baaa 	b.w	8007ee4 <__malloc_unlock>
 8007990:	42a3      	cmp	r3, r4
 8007992:	d908      	bls.n	80079a6 <_free_r+0x42>
 8007994:	6820      	ldr	r0, [r4, #0]
 8007996:	1821      	adds	r1, r4, r0
 8007998:	428b      	cmp	r3, r1
 800799a:	bf01      	itttt	eq
 800799c:	6819      	ldreq	r1, [r3, #0]
 800799e:	685b      	ldreq	r3, [r3, #4]
 80079a0:	1809      	addeq	r1, r1, r0
 80079a2:	6021      	streq	r1, [r4, #0]
 80079a4:	e7ed      	b.n	8007982 <_free_r+0x1e>
 80079a6:	461a      	mov	r2, r3
 80079a8:	685b      	ldr	r3, [r3, #4]
 80079aa:	b10b      	cbz	r3, 80079b0 <_free_r+0x4c>
 80079ac:	42a3      	cmp	r3, r4
 80079ae:	d9fa      	bls.n	80079a6 <_free_r+0x42>
 80079b0:	6811      	ldr	r1, [r2, #0]
 80079b2:	1850      	adds	r0, r2, r1
 80079b4:	42a0      	cmp	r0, r4
 80079b6:	d10b      	bne.n	80079d0 <_free_r+0x6c>
 80079b8:	6820      	ldr	r0, [r4, #0]
 80079ba:	4401      	add	r1, r0
 80079bc:	1850      	adds	r0, r2, r1
 80079be:	4283      	cmp	r3, r0
 80079c0:	6011      	str	r1, [r2, #0]
 80079c2:	d1e0      	bne.n	8007986 <_free_r+0x22>
 80079c4:	6818      	ldr	r0, [r3, #0]
 80079c6:	685b      	ldr	r3, [r3, #4]
 80079c8:	4401      	add	r1, r0
 80079ca:	6011      	str	r1, [r2, #0]
 80079cc:	6053      	str	r3, [r2, #4]
 80079ce:	e7da      	b.n	8007986 <_free_r+0x22>
 80079d0:	d902      	bls.n	80079d8 <_free_r+0x74>
 80079d2:	230c      	movs	r3, #12
 80079d4:	602b      	str	r3, [r5, #0]
 80079d6:	e7d6      	b.n	8007986 <_free_r+0x22>
 80079d8:	6820      	ldr	r0, [r4, #0]
 80079da:	1821      	adds	r1, r4, r0
 80079dc:	428b      	cmp	r3, r1
 80079de:	bf01      	itttt	eq
 80079e0:	6819      	ldreq	r1, [r3, #0]
 80079e2:	685b      	ldreq	r3, [r3, #4]
 80079e4:	1809      	addeq	r1, r1, r0
 80079e6:	6021      	streq	r1, [r4, #0]
 80079e8:	6063      	str	r3, [r4, #4]
 80079ea:	6054      	str	r4, [r2, #4]
 80079ec:	e7cb      	b.n	8007986 <_free_r+0x22>
 80079ee:	bd38      	pop	{r3, r4, r5, pc}
 80079f0:	2000033c 	.word	0x2000033c

080079f4 <sbrk_aligned>:
 80079f4:	b570      	push	{r4, r5, r6, lr}
 80079f6:	4e0e      	ldr	r6, [pc, #56]	; (8007a30 <sbrk_aligned+0x3c>)
 80079f8:	460c      	mov	r4, r1
 80079fa:	6831      	ldr	r1, [r6, #0]
 80079fc:	4605      	mov	r5, r0
 80079fe:	b911      	cbnz	r1, 8007a06 <sbrk_aligned+0x12>
 8007a00:	f000 f9ee 	bl	8007de0 <_sbrk_r>
 8007a04:	6030      	str	r0, [r6, #0]
 8007a06:	4621      	mov	r1, r4
 8007a08:	4628      	mov	r0, r5
 8007a0a:	f000 f9e9 	bl	8007de0 <_sbrk_r>
 8007a0e:	1c43      	adds	r3, r0, #1
 8007a10:	d00a      	beq.n	8007a28 <sbrk_aligned+0x34>
 8007a12:	1cc4      	adds	r4, r0, #3
 8007a14:	f024 0403 	bic.w	r4, r4, #3
 8007a18:	42a0      	cmp	r0, r4
 8007a1a:	d007      	beq.n	8007a2c <sbrk_aligned+0x38>
 8007a1c:	1a21      	subs	r1, r4, r0
 8007a1e:	4628      	mov	r0, r5
 8007a20:	f000 f9de 	bl	8007de0 <_sbrk_r>
 8007a24:	3001      	adds	r0, #1
 8007a26:	d101      	bne.n	8007a2c <sbrk_aligned+0x38>
 8007a28:	f04f 34ff 	mov.w	r4, #4294967295
 8007a2c:	4620      	mov	r0, r4
 8007a2e:	bd70      	pop	{r4, r5, r6, pc}
 8007a30:	20000340 	.word	0x20000340

08007a34 <_malloc_r>:
 8007a34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a38:	1ccd      	adds	r5, r1, #3
 8007a3a:	f025 0503 	bic.w	r5, r5, #3
 8007a3e:	3508      	adds	r5, #8
 8007a40:	2d0c      	cmp	r5, #12
 8007a42:	bf38      	it	cc
 8007a44:	250c      	movcc	r5, #12
 8007a46:	2d00      	cmp	r5, #0
 8007a48:	4607      	mov	r7, r0
 8007a4a:	db01      	blt.n	8007a50 <_malloc_r+0x1c>
 8007a4c:	42a9      	cmp	r1, r5
 8007a4e:	d905      	bls.n	8007a5c <_malloc_r+0x28>
 8007a50:	230c      	movs	r3, #12
 8007a52:	2600      	movs	r6, #0
 8007a54:	603b      	str	r3, [r7, #0]
 8007a56:	4630      	mov	r0, r6
 8007a58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a5c:	4e2e      	ldr	r6, [pc, #184]	; (8007b18 <_malloc_r+0xe4>)
 8007a5e:	f000 fa3b 	bl	8007ed8 <__malloc_lock>
 8007a62:	6833      	ldr	r3, [r6, #0]
 8007a64:	461c      	mov	r4, r3
 8007a66:	bb34      	cbnz	r4, 8007ab6 <_malloc_r+0x82>
 8007a68:	4629      	mov	r1, r5
 8007a6a:	4638      	mov	r0, r7
 8007a6c:	f7ff ffc2 	bl	80079f4 <sbrk_aligned>
 8007a70:	1c43      	adds	r3, r0, #1
 8007a72:	4604      	mov	r4, r0
 8007a74:	d14d      	bne.n	8007b12 <_malloc_r+0xde>
 8007a76:	6834      	ldr	r4, [r6, #0]
 8007a78:	4626      	mov	r6, r4
 8007a7a:	2e00      	cmp	r6, #0
 8007a7c:	d140      	bne.n	8007b00 <_malloc_r+0xcc>
 8007a7e:	6823      	ldr	r3, [r4, #0]
 8007a80:	4631      	mov	r1, r6
 8007a82:	4638      	mov	r0, r7
 8007a84:	eb04 0803 	add.w	r8, r4, r3
 8007a88:	f000 f9aa 	bl	8007de0 <_sbrk_r>
 8007a8c:	4580      	cmp	r8, r0
 8007a8e:	d13a      	bne.n	8007b06 <_malloc_r+0xd2>
 8007a90:	6821      	ldr	r1, [r4, #0]
 8007a92:	3503      	adds	r5, #3
 8007a94:	1a6d      	subs	r5, r5, r1
 8007a96:	f025 0503 	bic.w	r5, r5, #3
 8007a9a:	3508      	adds	r5, #8
 8007a9c:	2d0c      	cmp	r5, #12
 8007a9e:	bf38      	it	cc
 8007aa0:	250c      	movcc	r5, #12
 8007aa2:	4638      	mov	r0, r7
 8007aa4:	4629      	mov	r1, r5
 8007aa6:	f7ff ffa5 	bl	80079f4 <sbrk_aligned>
 8007aaa:	3001      	adds	r0, #1
 8007aac:	d02b      	beq.n	8007b06 <_malloc_r+0xd2>
 8007aae:	6823      	ldr	r3, [r4, #0]
 8007ab0:	442b      	add	r3, r5
 8007ab2:	6023      	str	r3, [r4, #0]
 8007ab4:	e00e      	b.n	8007ad4 <_malloc_r+0xa0>
 8007ab6:	6822      	ldr	r2, [r4, #0]
 8007ab8:	1b52      	subs	r2, r2, r5
 8007aba:	d41e      	bmi.n	8007afa <_malloc_r+0xc6>
 8007abc:	2a0b      	cmp	r2, #11
 8007abe:	d916      	bls.n	8007aee <_malloc_r+0xba>
 8007ac0:	1961      	adds	r1, r4, r5
 8007ac2:	42a3      	cmp	r3, r4
 8007ac4:	6025      	str	r5, [r4, #0]
 8007ac6:	bf18      	it	ne
 8007ac8:	6059      	strne	r1, [r3, #4]
 8007aca:	6863      	ldr	r3, [r4, #4]
 8007acc:	bf08      	it	eq
 8007ace:	6031      	streq	r1, [r6, #0]
 8007ad0:	5162      	str	r2, [r4, r5]
 8007ad2:	604b      	str	r3, [r1, #4]
 8007ad4:	4638      	mov	r0, r7
 8007ad6:	f104 060b 	add.w	r6, r4, #11
 8007ada:	f000 fa03 	bl	8007ee4 <__malloc_unlock>
 8007ade:	f026 0607 	bic.w	r6, r6, #7
 8007ae2:	1d23      	adds	r3, r4, #4
 8007ae4:	1af2      	subs	r2, r6, r3
 8007ae6:	d0b6      	beq.n	8007a56 <_malloc_r+0x22>
 8007ae8:	1b9b      	subs	r3, r3, r6
 8007aea:	50a3      	str	r3, [r4, r2]
 8007aec:	e7b3      	b.n	8007a56 <_malloc_r+0x22>
 8007aee:	6862      	ldr	r2, [r4, #4]
 8007af0:	42a3      	cmp	r3, r4
 8007af2:	bf0c      	ite	eq
 8007af4:	6032      	streq	r2, [r6, #0]
 8007af6:	605a      	strne	r2, [r3, #4]
 8007af8:	e7ec      	b.n	8007ad4 <_malloc_r+0xa0>
 8007afa:	4623      	mov	r3, r4
 8007afc:	6864      	ldr	r4, [r4, #4]
 8007afe:	e7b2      	b.n	8007a66 <_malloc_r+0x32>
 8007b00:	4634      	mov	r4, r6
 8007b02:	6876      	ldr	r6, [r6, #4]
 8007b04:	e7b9      	b.n	8007a7a <_malloc_r+0x46>
 8007b06:	230c      	movs	r3, #12
 8007b08:	4638      	mov	r0, r7
 8007b0a:	603b      	str	r3, [r7, #0]
 8007b0c:	f000 f9ea 	bl	8007ee4 <__malloc_unlock>
 8007b10:	e7a1      	b.n	8007a56 <_malloc_r+0x22>
 8007b12:	6025      	str	r5, [r4, #0]
 8007b14:	e7de      	b.n	8007ad4 <_malloc_r+0xa0>
 8007b16:	bf00      	nop
 8007b18:	2000033c 	.word	0x2000033c

08007b1c <__ssputs_r>:
 8007b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b20:	688e      	ldr	r6, [r1, #8]
 8007b22:	4682      	mov	sl, r0
 8007b24:	429e      	cmp	r6, r3
 8007b26:	460c      	mov	r4, r1
 8007b28:	4690      	mov	r8, r2
 8007b2a:	461f      	mov	r7, r3
 8007b2c:	d838      	bhi.n	8007ba0 <__ssputs_r+0x84>
 8007b2e:	898a      	ldrh	r2, [r1, #12]
 8007b30:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007b34:	d032      	beq.n	8007b9c <__ssputs_r+0x80>
 8007b36:	6825      	ldr	r5, [r4, #0]
 8007b38:	6909      	ldr	r1, [r1, #16]
 8007b3a:	3301      	adds	r3, #1
 8007b3c:	eba5 0901 	sub.w	r9, r5, r1
 8007b40:	6965      	ldr	r5, [r4, #20]
 8007b42:	444b      	add	r3, r9
 8007b44:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007b48:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007b4c:	106d      	asrs	r5, r5, #1
 8007b4e:	429d      	cmp	r5, r3
 8007b50:	bf38      	it	cc
 8007b52:	461d      	movcc	r5, r3
 8007b54:	0553      	lsls	r3, r2, #21
 8007b56:	d531      	bpl.n	8007bbc <__ssputs_r+0xa0>
 8007b58:	4629      	mov	r1, r5
 8007b5a:	f7ff ff6b 	bl	8007a34 <_malloc_r>
 8007b5e:	4606      	mov	r6, r0
 8007b60:	b950      	cbnz	r0, 8007b78 <__ssputs_r+0x5c>
 8007b62:	230c      	movs	r3, #12
 8007b64:	f04f 30ff 	mov.w	r0, #4294967295
 8007b68:	f8ca 3000 	str.w	r3, [sl]
 8007b6c:	89a3      	ldrh	r3, [r4, #12]
 8007b6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b72:	81a3      	strh	r3, [r4, #12]
 8007b74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b78:	464a      	mov	r2, r9
 8007b7a:	6921      	ldr	r1, [r4, #16]
 8007b7c:	f7ff fa18 	bl	8006fb0 <memcpy>
 8007b80:	89a3      	ldrh	r3, [r4, #12]
 8007b82:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007b86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b8a:	81a3      	strh	r3, [r4, #12]
 8007b8c:	6126      	str	r6, [r4, #16]
 8007b8e:	444e      	add	r6, r9
 8007b90:	6026      	str	r6, [r4, #0]
 8007b92:	463e      	mov	r6, r7
 8007b94:	6165      	str	r5, [r4, #20]
 8007b96:	eba5 0509 	sub.w	r5, r5, r9
 8007b9a:	60a5      	str	r5, [r4, #8]
 8007b9c:	42be      	cmp	r6, r7
 8007b9e:	d900      	bls.n	8007ba2 <__ssputs_r+0x86>
 8007ba0:	463e      	mov	r6, r7
 8007ba2:	4632      	mov	r2, r6
 8007ba4:	4641      	mov	r1, r8
 8007ba6:	6820      	ldr	r0, [r4, #0]
 8007ba8:	f000 f97c 	bl	8007ea4 <memmove>
 8007bac:	68a3      	ldr	r3, [r4, #8]
 8007bae:	2000      	movs	r0, #0
 8007bb0:	1b9b      	subs	r3, r3, r6
 8007bb2:	60a3      	str	r3, [r4, #8]
 8007bb4:	6823      	ldr	r3, [r4, #0]
 8007bb6:	4433      	add	r3, r6
 8007bb8:	6023      	str	r3, [r4, #0]
 8007bba:	e7db      	b.n	8007b74 <__ssputs_r+0x58>
 8007bbc:	462a      	mov	r2, r5
 8007bbe:	f000 f997 	bl	8007ef0 <_realloc_r>
 8007bc2:	4606      	mov	r6, r0
 8007bc4:	2800      	cmp	r0, #0
 8007bc6:	d1e1      	bne.n	8007b8c <__ssputs_r+0x70>
 8007bc8:	4650      	mov	r0, sl
 8007bca:	6921      	ldr	r1, [r4, #16]
 8007bcc:	f7ff feca 	bl	8007964 <_free_r>
 8007bd0:	e7c7      	b.n	8007b62 <__ssputs_r+0x46>
	...

08007bd4 <_svfiprintf_r>:
 8007bd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bd8:	4698      	mov	r8, r3
 8007bda:	898b      	ldrh	r3, [r1, #12]
 8007bdc:	4607      	mov	r7, r0
 8007bde:	061b      	lsls	r3, r3, #24
 8007be0:	460d      	mov	r5, r1
 8007be2:	4614      	mov	r4, r2
 8007be4:	b09d      	sub	sp, #116	; 0x74
 8007be6:	d50e      	bpl.n	8007c06 <_svfiprintf_r+0x32>
 8007be8:	690b      	ldr	r3, [r1, #16]
 8007bea:	b963      	cbnz	r3, 8007c06 <_svfiprintf_r+0x32>
 8007bec:	2140      	movs	r1, #64	; 0x40
 8007bee:	f7ff ff21 	bl	8007a34 <_malloc_r>
 8007bf2:	6028      	str	r0, [r5, #0]
 8007bf4:	6128      	str	r0, [r5, #16]
 8007bf6:	b920      	cbnz	r0, 8007c02 <_svfiprintf_r+0x2e>
 8007bf8:	230c      	movs	r3, #12
 8007bfa:	603b      	str	r3, [r7, #0]
 8007bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8007c00:	e0d1      	b.n	8007da6 <_svfiprintf_r+0x1d2>
 8007c02:	2340      	movs	r3, #64	; 0x40
 8007c04:	616b      	str	r3, [r5, #20]
 8007c06:	2300      	movs	r3, #0
 8007c08:	9309      	str	r3, [sp, #36]	; 0x24
 8007c0a:	2320      	movs	r3, #32
 8007c0c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007c10:	2330      	movs	r3, #48	; 0x30
 8007c12:	f04f 0901 	mov.w	r9, #1
 8007c16:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c1a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007dc0 <_svfiprintf_r+0x1ec>
 8007c1e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007c22:	4623      	mov	r3, r4
 8007c24:	469a      	mov	sl, r3
 8007c26:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c2a:	b10a      	cbz	r2, 8007c30 <_svfiprintf_r+0x5c>
 8007c2c:	2a25      	cmp	r2, #37	; 0x25
 8007c2e:	d1f9      	bne.n	8007c24 <_svfiprintf_r+0x50>
 8007c30:	ebba 0b04 	subs.w	fp, sl, r4
 8007c34:	d00b      	beq.n	8007c4e <_svfiprintf_r+0x7a>
 8007c36:	465b      	mov	r3, fp
 8007c38:	4622      	mov	r2, r4
 8007c3a:	4629      	mov	r1, r5
 8007c3c:	4638      	mov	r0, r7
 8007c3e:	f7ff ff6d 	bl	8007b1c <__ssputs_r>
 8007c42:	3001      	adds	r0, #1
 8007c44:	f000 80aa 	beq.w	8007d9c <_svfiprintf_r+0x1c8>
 8007c48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c4a:	445a      	add	r2, fp
 8007c4c:	9209      	str	r2, [sp, #36]	; 0x24
 8007c4e:	f89a 3000 	ldrb.w	r3, [sl]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	f000 80a2 	beq.w	8007d9c <_svfiprintf_r+0x1c8>
 8007c58:	2300      	movs	r3, #0
 8007c5a:	f04f 32ff 	mov.w	r2, #4294967295
 8007c5e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c62:	f10a 0a01 	add.w	sl, sl, #1
 8007c66:	9304      	str	r3, [sp, #16]
 8007c68:	9307      	str	r3, [sp, #28]
 8007c6a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007c6e:	931a      	str	r3, [sp, #104]	; 0x68
 8007c70:	4654      	mov	r4, sl
 8007c72:	2205      	movs	r2, #5
 8007c74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c78:	4851      	ldr	r0, [pc, #324]	; (8007dc0 <_svfiprintf_r+0x1ec>)
 8007c7a:	f7ff f98b 	bl	8006f94 <memchr>
 8007c7e:	9a04      	ldr	r2, [sp, #16]
 8007c80:	b9d8      	cbnz	r0, 8007cba <_svfiprintf_r+0xe6>
 8007c82:	06d0      	lsls	r0, r2, #27
 8007c84:	bf44      	itt	mi
 8007c86:	2320      	movmi	r3, #32
 8007c88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c8c:	0711      	lsls	r1, r2, #28
 8007c8e:	bf44      	itt	mi
 8007c90:	232b      	movmi	r3, #43	; 0x2b
 8007c92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c96:	f89a 3000 	ldrb.w	r3, [sl]
 8007c9a:	2b2a      	cmp	r3, #42	; 0x2a
 8007c9c:	d015      	beq.n	8007cca <_svfiprintf_r+0xf6>
 8007c9e:	4654      	mov	r4, sl
 8007ca0:	2000      	movs	r0, #0
 8007ca2:	f04f 0c0a 	mov.w	ip, #10
 8007ca6:	9a07      	ldr	r2, [sp, #28]
 8007ca8:	4621      	mov	r1, r4
 8007caa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007cae:	3b30      	subs	r3, #48	; 0x30
 8007cb0:	2b09      	cmp	r3, #9
 8007cb2:	d94e      	bls.n	8007d52 <_svfiprintf_r+0x17e>
 8007cb4:	b1b0      	cbz	r0, 8007ce4 <_svfiprintf_r+0x110>
 8007cb6:	9207      	str	r2, [sp, #28]
 8007cb8:	e014      	b.n	8007ce4 <_svfiprintf_r+0x110>
 8007cba:	eba0 0308 	sub.w	r3, r0, r8
 8007cbe:	fa09 f303 	lsl.w	r3, r9, r3
 8007cc2:	4313      	orrs	r3, r2
 8007cc4:	46a2      	mov	sl, r4
 8007cc6:	9304      	str	r3, [sp, #16]
 8007cc8:	e7d2      	b.n	8007c70 <_svfiprintf_r+0x9c>
 8007cca:	9b03      	ldr	r3, [sp, #12]
 8007ccc:	1d19      	adds	r1, r3, #4
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	9103      	str	r1, [sp, #12]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	bfbb      	ittet	lt
 8007cd6:	425b      	neglt	r3, r3
 8007cd8:	f042 0202 	orrlt.w	r2, r2, #2
 8007cdc:	9307      	strge	r3, [sp, #28]
 8007cde:	9307      	strlt	r3, [sp, #28]
 8007ce0:	bfb8      	it	lt
 8007ce2:	9204      	strlt	r2, [sp, #16]
 8007ce4:	7823      	ldrb	r3, [r4, #0]
 8007ce6:	2b2e      	cmp	r3, #46	; 0x2e
 8007ce8:	d10c      	bne.n	8007d04 <_svfiprintf_r+0x130>
 8007cea:	7863      	ldrb	r3, [r4, #1]
 8007cec:	2b2a      	cmp	r3, #42	; 0x2a
 8007cee:	d135      	bne.n	8007d5c <_svfiprintf_r+0x188>
 8007cf0:	9b03      	ldr	r3, [sp, #12]
 8007cf2:	3402      	adds	r4, #2
 8007cf4:	1d1a      	adds	r2, r3, #4
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	9203      	str	r2, [sp, #12]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	bfb8      	it	lt
 8007cfe:	f04f 33ff 	movlt.w	r3, #4294967295
 8007d02:	9305      	str	r3, [sp, #20]
 8007d04:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8007dc4 <_svfiprintf_r+0x1f0>
 8007d08:	2203      	movs	r2, #3
 8007d0a:	4650      	mov	r0, sl
 8007d0c:	7821      	ldrb	r1, [r4, #0]
 8007d0e:	f7ff f941 	bl	8006f94 <memchr>
 8007d12:	b140      	cbz	r0, 8007d26 <_svfiprintf_r+0x152>
 8007d14:	2340      	movs	r3, #64	; 0x40
 8007d16:	eba0 000a 	sub.w	r0, r0, sl
 8007d1a:	fa03 f000 	lsl.w	r0, r3, r0
 8007d1e:	9b04      	ldr	r3, [sp, #16]
 8007d20:	3401      	adds	r4, #1
 8007d22:	4303      	orrs	r3, r0
 8007d24:	9304      	str	r3, [sp, #16]
 8007d26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d2a:	2206      	movs	r2, #6
 8007d2c:	4826      	ldr	r0, [pc, #152]	; (8007dc8 <_svfiprintf_r+0x1f4>)
 8007d2e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007d32:	f7ff f92f 	bl	8006f94 <memchr>
 8007d36:	2800      	cmp	r0, #0
 8007d38:	d038      	beq.n	8007dac <_svfiprintf_r+0x1d8>
 8007d3a:	4b24      	ldr	r3, [pc, #144]	; (8007dcc <_svfiprintf_r+0x1f8>)
 8007d3c:	bb1b      	cbnz	r3, 8007d86 <_svfiprintf_r+0x1b2>
 8007d3e:	9b03      	ldr	r3, [sp, #12]
 8007d40:	3307      	adds	r3, #7
 8007d42:	f023 0307 	bic.w	r3, r3, #7
 8007d46:	3308      	adds	r3, #8
 8007d48:	9303      	str	r3, [sp, #12]
 8007d4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d4c:	4433      	add	r3, r6
 8007d4e:	9309      	str	r3, [sp, #36]	; 0x24
 8007d50:	e767      	b.n	8007c22 <_svfiprintf_r+0x4e>
 8007d52:	460c      	mov	r4, r1
 8007d54:	2001      	movs	r0, #1
 8007d56:	fb0c 3202 	mla	r2, ip, r2, r3
 8007d5a:	e7a5      	b.n	8007ca8 <_svfiprintf_r+0xd4>
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	f04f 0c0a 	mov.w	ip, #10
 8007d62:	4619      	mov	r1, r3
 8007d64:	3401      	adds	r4, #1
 8007d66:	9305      	str	r3, [sp, #20]
 8007d68:	4620      	mov	r0, r4
 8007d6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d6e:	3a30      	subs	r2, #48	; 0x30
 8007d70:	2a09      	cmp	r2, #9
 8007d72:	d903      	bls.n	8007d7c <_svfiprintf_r+0x1a8>
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d0c5      	beq.n	8007d04 <_svfiprintf_r+0x130>
 8007d78:	9105      	str	r1, [sp, #20]
 8007d7a:	e7c3      	b.n	8007d04 <_svfiprintf_r+0x130>
 8007d7c:	4604      	mov	r4, r0
 8007d7e:	2301      	movs	r3, #1
 8007d80:	fb0c 2101 	mla	r1, ip, r1, r2
 8007d84:	e7f0      	b.n	8007d68 <_svfiprintf_r+0x194>
 8007d86:	ab03      	add	r3, sp, #12
 8007d88:	9300      	str	r3, [sp, #0]
 8007d8a:	462a      	mov	r2, r5
 8007d8c:	4638      	mov	r0, r7
 8007d8e:	4b10      	ldr	r3, [pc, #64]	; (8007dd0 <_svfiprintf_r+0x1fc>)
 8007d90:	a904      	add	r1, sp, #16
 8007d92:	f7fc fa5f 	bl	8004254 <_printf_float>
 8007d96:	1c42      	adds	r2, r0, #1
 8007d98:	4606      	mov	r6, r0
 8007d9a:	d1d6      	bne.n	8007d4a <_svfiprintf_r+0x176>
 8007d9c:	89ab      	ldrh	r3, [r5, #12]
 8007d9e:	065b      	lsls	r3, r3, #25
 8007da0:	f53f af2c 	bmi.w	8007bfc <_svfiprintf_r+0x28>
 8007da4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007da6:	b01d      	add	sp, #116	; 0x74
 8007da8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dac:	ab03      	add	r3, sp, #12
 8007dae:	9300      	str	r3, [sp, #0]
 8007db0:	462a      	mov	r2, r5
 8007db2:	4638      	mov	r0, r7
 8007db4:	4b06      	ldr	r3, [pc, #24]	; (8007dd0 <_svfiprintf_r+0x1fc>)
 8007db6:	a904      	add	r1, sp, #16
 8007db8:	f7fc fce8 	bl	800478c <_printf_i>
 8007dbc:	e7eb      	b.n	8007d96 <_svfiprintf_r+0x1c2>
 8007dbe:	bf00      	nop
 8007dc0:	08008dfc 	.word	0x08008dfc
 8007dc4:	08008e02 	.word	0x08008e02
 8007dc8:	08008e06 	.word	0x08008e06
 8007dcc:	08004255 	.word	0x08004255
 8007dd0:	08007b1d 	.word	0x08007b1d

08007dd4 <nan>:
 8007dd4:	2000      	movs	r0, #0
 8007dd6:	4901      	ldr	r1, [pc, #4]	; (8007ddc <nan+0x8>)
 8007dd8:	4770      	bx	lr
 8007dda:	bf00      	nop
 8007ddc:	7ff80000 	.word	0x7ff80000

08007de0 <_sbrk_r>:
 8007de0:	b538      	push	{r3, r4, r5, lr}
 8007de2:	2300      	movs	r3, #0
 8007de4:	4d05      	ldr	r5, [pc, #20]	; (8007dfc <_sbrk_r+0x1c>)
 8007de6:	4604      	mov	r4, r0
 8007de8:	4608      	mov	r0, r1
 8007dea:	602b      	str	r3, [r5, #0]
 8007dec:	f7f9 fc0c 	bl	8001608 <_sbrk>
 8007df0:	1c43      	adds	r3, r0, #1
 8007df2:	d102      	bne.n	8007dfa <_sbrk_r+0x1a>
 8007df4:	682b      	ldr	r3, [r5, #0]
 8007df6:	b103      	cbz	r3, 8007dfa <_sbrk_r+0x1a>
 8007df8:	6023      	str	r3, [r4, #0]
 8007dfa:	bd38      	pop	{r3, r4, r5, pc}
 8007dfc:	20000344 	.word	0x20000344

08007e00 <strncmp>:
 8007e00:	4603      	mov	r3, r0
 8007e02:	b510      	push	{r4, lr}
 8007e04:	b172      	cbz	r2, 8007e24 <strncmp+0x24>
 8007e06:	3901      	subs	r1, #1
 8007e08:	1884      	adds	r4, r0, r2
 8007e0a:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007e0e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007e12:	4290      	cmp	r0, r2
 8007e14:	d101      	bne.n	8007e1a <strncmp+0x1a>
 8007e16:	42a3      	cmp	r3, r4
 8007e18:	d101      	bne.n	8007e1e <strncmp+0x1e>
 8007e1a:	1a80      	subs	r0, r0, r2
 8007e1c:	bd10      	pop	{r4, pc}
 8007e1e:	2800      	cmp	r0, #0
 8007e20:	d1f3      	bne.n	8007e0a <strncmp+0xa>
 8007e22:	e7fa      	b.n	8007e1a <strncmp+0x1a>
 8007e24:	4610      	mov	r0, r2
 8007e26:	e7f9      	b.n	8007e1c <strncmp+0x1c>

08007e28 <__ascii_wctomb>:
 8007e28:	4603      	mov	r3, r0
 8007e2a:	4608      	mov	r0, r1
 8007e2c:	b141      	cbz	r1, 8007e40 <__ascii_wctomb+0x18>
 8007e2e:	2aff      	cmp	r2, #255	; 0xff
 8007e30:	d904      	bls.n	8007e3c <__ascii_wctomb+0x14>
 8007e32:	228a      	movs	r2, #138	; 0x8a
 8007e34:	f04f 30ff 	mov.w	r0, #4294967295
 8007e38:	601a      	str	r2, [r3, #0]
 8007e3a:	4770      	bx	lr
 8007e3c:	2001      	movs	r0, #1
 8007e3e:	700a      	strb	r2, [r1, #0]
 8007e40:	4770      	bx	lr
	...

08007e44 <__assert_func>:
 8007e44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007e46:	4614      	mov	r4, r2
 8007e48:	461a      	mov	r2, r3
 8007e4a:	4b09      	ldr	r3, [pc, #36]	; (8007e70 <__assert_func+0x2c>)
 8007e4c:	4605      	mov	r5, r0
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	68d8      	ldr	r0, [r3, #12]
 8007e52:	b14c      	cbz	r4, 8007e68 <__assert_func+0x24>
 8007e54:	4b07      	ldr	r3, [pc, #28]	; (8007e74 <__assert_func+0x30>)
 8007e56:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007e5a:	9100      	str	r1, [sp, #0]
 8007e5c:	462b      	mov	r3, r5
 8007e5e:	4906      	ldr	r1, [pc, #24]	; (8007e78 <__assert_func+0x34>)
 8007e60:	f000 f80e 	bl	8007e80 <fiprintf>
 8007e64:	f000 fa8a 	bl	800837c <abort>
 8007e68:	4b04      	ldr	r3, [pc, #16]	; (8007e7c <__assert_func+0x38>)
 8007e6a:	461c      	mov	r4, r3
 8007e6c:	e7f3      	b.n	8007e56 <__assert_func+0x12>
 8007e6e:	bf00      	nop
 8007e70:	20000010 	.word	0x20000010
 8007e74:	08008e0d 	.word	0x08008e0d
 8007e78:	08008e1a 	.word	0x08008e1a
 8007e7c:	08008e48 	.word	0x08008e48

08007e80 <fiprintf>:
 8007e80:	b40e      	push	{r1, r2, r3}
 8007e82:	b503      	push	{r0, r1, lr}
 8007e84:	4601      	mov	r1, r0
 8007e86:	ab03      	add	r3, sp, #12
 8007e88:	4805      	ldr	r0, [pc, #20]	; (8007ea0 <fiprintf+0x20>)
 8007e8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e8e:	6800      	ldr	r0, [r0, #0]
 8007e90:	9301      	str	r3, [sp, #4]
 8007e92:	f000 f883 	bl	8007f9c <_vfiprintf_r>
 8007e96:	b002      	add	sp, #8
 8007e98:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e9c:	b003      	add	sp, #12
 8007e9e:	4770      	bx	lr
 8007ea0:	20000010 	.word	0x20000010

08007ea4 <memmove>:
 8007ea4:	4288      	cmp	r0, r1
 8007ea6:	b510      	push	{r4, lr}
 8007ea8:	eb01 0402 	add.w	r4, r1, r2
 8007eac:	d902      	bls.n	8007eb4 <memmove+0x10>
 8007eae:	4284      	cmp	r4, r0
 8007eb0:	4623      	mov	r3, r4
 8007eb2:	d807      	bhi.n	8007ec4 <memmove+0x20>
 8007eb4:	1e43      	subs	r3, r0, #1
 8007eb6:	42a1      	cmp	r1, r4
 8007eb8:	d008      	beq.n	8007ecc <memmove+0x28>
 8007eba:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007ebe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007ec2:	e7f8      	b.n	8007eb6 <memmove+0x12>
 8007ec4:	4601      	mov	r1, r0
 8007ec6:	4402      	add	r2, r0
 8007ec8:	428a      	cmp	r2, r1
 8007eca:	d100      	bne.n	8007ece <memmove+0x2a>
 8007ecc:	bd10      	pop	{r4, pc}
 8007ece:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007ed2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007ed6:	e7f7      	b.n	8007ec8 <memmove+0x24>

08007ed8 <__malloc_lock>:
 8007ed8:	4801      	ldr	r0, [pc, #4]	; (8007ee0 <__malloc_lock+0x8>)
 8007eda:	f000 bc0b 	b.w	80086f4 <__retarget_lock_acquire_recursive>
 8007ede:	bf00      	nop
 8007ee0:	20000348 	.word	0x20000348

08007ee4 <__malloc_unlock>:
 8007ee4:	4801      	ldr	r0, [pc, #4]	; (8007eec <__malloc_unlock+0x8>)
 8007ee6:	f000 bc06 	b.w	80086f6 <__retarget_lock_release_recursive>
 8007eea:	bf00      	nop
 8007eec:	20000348 	.word	0x20000348

08007ef0 <_realloc_r>:
 8007ef0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ef4:	4680      	mov	r8, r0
 8007ef6:	4614      	mov	r4, r2
 8007ef8:	460e      	mov	r6, r1
 8007efa:	b921      	cbnz	r1, 8007f06 <_realloc_r+0x16>
 8007efc:	4611      	mov	r1, r2
 8007efe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f02:	f7ff bd97 	b.w	8007a34 <_malloc_r>
 8007f06:	b92a      	cbnz	r2, 8007f14 <_realloc_r+0x24>
 8007f08:	f7ff fd2c 	bl	8007964 <_free_r>
 8007f0c:	4625      	mov	r5, r4
 8007f0e:	4628      	mov	r0, r5
 8007f10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f14:	f000 fc56 	bl	80087c4 <_malloc_usable_size_r>
 8007f18:	4284      	cmp	r4, r0
 8007f1a:	4607      	mov	r7, r0
 8007f1c:	d802      	bhi.n	8007f24 <_realloc_r+0x34>
 8007f1e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007f22:	d812      	bhi.n	8007f4a <_realloc_r+0x5a>
 8007f24:	4621      	mov	r1, r4
 8007f26:	4640      	mov	r0, r8
 8007f28:	f7ff fd84 	bl	8007a34 <_malloc_r>
 8007f2c:	4605      	mov	r5, r0
 8007f2e:	2800      	cmp	r0, #0
 8007f30:	d0ed      	beq.n	8007f0e <_realloc_r+0x1e>
 8007f32:	42bc      	cmp	r4, r7
 8007f34:	4622      	mov	r2, r4
 8007f36:	4631      	mov	r1, r6
 8007f38:	bf28      	it	cs
 8007f3a:	463a      	movcs	r2, r7
 8007f3c:	f7ff f838 	bl	8006fb0 <memcpy>
 8007f40:	4631      	mov	r1, r6
 8007f42:	4640      	mov	r0, r8
 8007f44:	f7ff fd0e 	bl	8007964 <_free_r>
 8007f48:	e7e1      	b.n	8007f0e <_realloc_r+0x1e>
 8007f4a:	4635      	mov	r5, r6
 8007f4c:	e7df      	b.n	8007f0e <_realloc_r+0x1e>

08007f4e <__sfputc_r>:
 8007f4e:	6893      	ldr	r3, [r2, #8]
 8007f50:	b410      	push	{r4}
 8007f52:	3b01      	subs	r3, #1
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	6093      	str	r3, [r2, #8]
 8007f58:	da07      	bge.n	8007f6a <__sfputc_r+0x1c>
 8007f5a:	6994      	ldr	r4, [r2, #24]
 8007f5c:	42a3      	cmp	r3, r4
 8007f5e:	db01      	blt.n	8007f64 <__sfputc_r+0x16>
 8007f60:	290a      	cmp	r1, #10
 8007f62:	d102      	bne.n	8007f6a <__sfputc_r+0x1c>
 8007f64:	bc10      	pop	{r4}
 8007f66:	f000 b949 	b.w	80081fc <__swbuf_r>
 8007f6a:	6813      	ldr	r3, [r2, #0]
 8007f6c:	1c58      	adds	r0, r3, #1
 8007f6e:	6010      	str	r0, [r2, #0]
 8007f70:	7019      	strb	r1, [r3, #0]
 8007f72:	4608      	mov	r0, r1
 8007f74:	bc10      	pop	{r4}
 8007f76:	4770      	bx	lr

08007f78 <__sfputs_r>:
 8007f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f7a:	4606      	mov	r6, r0
 8007f7c:	460f      	mov	r7, r1
 8007f7e:	4614      	mov	r4, r2
 8007f80:	18d5      	adds	r5, r2, r3
 8007f82:	42ac      	cmp	r4, r5
 8007f84:	d101      	bne.n	8007f8a <__sfputs_r+0x12>
 8007f86:	2000      	movs	r0, #0
 8007f88:	e007      	b.n	8007f9a <__sfputs_r+0x22>
 8007f8a:	463a      	mov	r2, r7
 8007f8c:	4630      	mov	r0, r6
 8007f8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f92:	f7ff ffdc 	bl	8007f4e <__sfputc_r>
 8007f96:	1c43      	adds	r3, r0, #1
 8007f98:	d1f3      	bne.n	8007f82 <__sfputs_r+0xa>
 8007f9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007f9c <_vfiprintf_r>:
 8007f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fa0:	460d      	mov	r5, r1
 8007fa2:	4614      	mov	r4, r2
 8007fa4:	4698      	mov	r8, r3
 8007fa6:	4606      	mov	r6, r0
 8007fa8:	b09d      	sub	sp, #116	; 0x74
 8007faa:	b118      	cbz	r0, 8007fb4 <_vfiprintf_r+0x18>
 8007fac:	6983      	ldr	r3, [r0, #24]
 8007fae:	b90b      	cbnz	r3, 8007fb4 <_vfiprintf_r+0x18>
 8007fb0:	f000 fb02 	bl	80085b8 <__sinit>
 8007fb4:	4b89      	ldr	r3, [pc, #548]	; (80081dc <_vfiprintf_r+0x240>)
 8007fb6:	429d      	cmp	r5, r3
 8007fb8:	d11b      	bne.n	8007ff2 <_vfiprintf_r+0x56>
 8007fba:	6875      	ldr	r5, [r6, #4]
 8007fbc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007fbe:	07d9      	lsls	r1, r3, #31
 8007fc0:	d405      	bmi.n	8007fce <_vfiprintf_r+0x32>
 8007fc2:	89ab      	ldrh	r3, [r5, #12]
 8007fc4:	059a      	lsls	r2, r3, #22
 8007fc6:	d402      	bmi.n	8007fce <_vfiprintf_r+0x32>
 8007fc8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007fca:	f000 fb93 	bl	80086f4 <__retarget_lock_acquire_recursive>
 8007fce:	89ab      	ldrh	r3, [r5, #12]
 8007fd0:	071b      	lsls	r3, r3, #28
 8007fd2:	d501      	bpl.n	8007fd8 <_vfiprintf_r+0x3c>
 8007fd4:	692b      	ldr	r3, [r5, #16]
 8007fd6:	b9eb      	cbnz	r3, 8008014 <_vfiprintf_r+0x78>
 8007fd8:	4629      	mov	r1, r5
 8007fda:	4630      	mov	r0, r6
 8007fdc:	f000 f960 	bl	80082a0 <__swsetup_r>
 8007fe0:	b1c0      	cbz	r0, 8008014 <_vfiprintf_r+0x78>
 8007fe2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007fe4:	07dc      	lsls	r4, r3, #31
 8007fe6:	d50e      	bpl.n	8008006 <_vfiprintf_r+0x6a>
 8007fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8007fec:	b01d      	add	sp, #116	; 0x74
 8007fee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ff2:	4b7b      	ldr	r3, [pc, #492]	; (80081e0 <_vfiprintf_r+0x244>)
 8007ff4:	429d      	cmp	r5, r3
 8007ff6:	d101      	bne.n	8007ffc <_vfiprintf_r+0x60>
 8007ff8:	68b5      	ldr	r5, [r6, #8]
 8007ffa:	e7df      	b.n	8007fbc <_vfiprintf_r+0x20>
 8007ffc:	4b79      	ldr	r3, [pc, #484]	; (80081e4 <_vfiprintf_r+0x248>)
 8007ffe:	429d      	cmp	r5, r3
 8008000:	bf08      	it	eq
 8008002:	68f5      	ldreq	r5, [r6, #12]
 8008004:	e7da      	b.n	8007fbc <_vfiprintf_r+0x20>
 8008006:	89ab      	ldrh	r3, [r5, #12]
 8008008:	0598      	lsls	r0, r3, #22
 800800a:	d4ed      	bmi.n	8007fe8 <_vfiprintf_r+0x4c>
 800800c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800800e:	f000 fb72 	bl	80086f6 <__retarget_lock_release_recursive>
 8008012:	e7e9      	b.n	8007fe8 <_vfiprintf_r+0x4c>
 8008014:	2300      	movs	r3, #0
 8008016:	9309      	str	r3, [sp, #36]	; 0x24
 8008018:	2320      	movs	r3, #32
 800801a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800801e:	2330      	movs	r3, #48	; 0x30
 8008020:	f04f 0901 	mov.w	r9, #1
 8008024:	f8cd 800c 	str.w	r8, [sp, #12]
 8008028:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80081e8 <_vfiprintf_r+0x24c>
 800802c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008030:	4623      	mov	r3, r4
 8008032:	469a      	mov	sl, r3
 8008034:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008038:	b10a      	cbz	r2, 800803e <_vfiprintf_r+0xa2>
 800803a:	2a25      	cmp	r2, #37	; 0x25
 800803c:	d1f9      	bne.n	8008032 <_vfiprintf_r+0x96>
 800803e:	ebba 0b04 	subs.w	fp, sl, r4
 8008042:	d00b      	beq.n	800805c <_vfiprintf_r+0xc0>
 8008044:	465b      	mov	r3, fp
 8008046:	4622      	mov	r2, r4
 8008048:	4629      	mov	r1, r5
 800804a:	4630      	mov	r0, r6
 800804c:	f7ff ff94 	bl	8007f78 <__sfputs_r>
 8008050:	3001      	adds	r0, #1
 8008052:	f000 80aa 	beq.w	80081aa <_vfiprintf_r+0x20e>
 8008056:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008058:	445a      	add	r2, fp
 800805a:	9209      	str	r2, [sp, #36]	; 0x24
 800805c:	f89a 3000 	ldrb.w	r3, [sl]
 8008060:	2b00      	cmp	r3, #0
 8008062:	f000 80a2 	beq.w	80081aa <_vfiprintf_r+0x20e>
 8008066:	2300      	movs	r3, #0
 8008068:	f04f 32ff 	mov.w	r2, #4294967295
 800806c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008070:	f10a 0a01 	add.w	sl, sl, #1
 8008074:	9304      	str	r3, [sp, #16]
 8008076:	9307      	str	r3, [sp, #28]
 8008078:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800807c:	931a      	str	r3, [sp, #104]	; 0x68
 800807e:	4654      	mov	r4, sl
 8008080:	2205      	movs	r2, #5
 8008082:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008086:	4858      	ldr	r0, [pc, #352]	; (80081e8 <_vfiprintf_r+0x24c>)
 8008088:	f7fe ff84 	bl	8006f94 <memchr>
 800808c:	9a04      	ldr	r2, [sp, #16]
 800808e:	b9d8      	cbnz	r0, 80080c8 <_vfiprintf_r+0x12c>
 8008090:	06d1      	lsls	r1, r2, #27
 8008092:	bf44      	itt	mi
 8008094:	2320      	movmi	r3, #32
 8008096:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800809a:	0713      	lsls	r3, r2, #28
 800809c:	bf44      	itt	mi
 800809e:	232b      	movmi	r3, #43	; 0x2b
 80080a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80080a4:	f89a 3000 	ldrb.w	r3, [sl]
 80080a8:	2b2a      	cmp	r3, #42	; 0x2a
 80080aa:	d015      	beq.n	80080d8 <_vfiprintf_r+0x13c>
 80080ac:	4654      	mov	r4, sl
 80080ae:	2000      	movs	r0, #0
 80080b0:	f04f 0c0a 	mov.w	ip, #10
 80080b4:	9a07      	ldr	r2, [sp, #28]
 80080b6:	4621      	mov	r1, r4
 80080b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80080bc:	3b30      	subs	r3, #48	; 0x30
 80080be:	2b09      	cmp	r3, #9
 80080c0:	d94e      	bls.n	8008160 <_vfiprintf_r+0x1c4>
 80080c2:	b1b0      	cbz	r0, 80080f2 <_vfiprintf_r+0x156>
 80080c4:	9207      	str	r2, [sp, #28]
 80080c6:	e014      	b.n	80080f2 <_vfiprintf_r+0x156>
 80080c8:	eba0 0308 	sub.w	r3, r0, r8
 80080cc:	fa09 f303 	lsl.w	r3, r9, r3
 80080d0:	4313      	orrs	r3, r2
 80080d2:	46a2      	mov	sl, r4
 80080d4:	9304      	str	r3, [sp, #16]
 80080d6:	e7d2      	b.n	800807e <_vfiprintf_r+0xe2>
 80080d8:	9b03      	ldr	r3, [sp, #12]
 80080da:	1d19      	adds	r1, r3, #4
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	9103      	str	r1, [sp, #12]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	bfbb      	ittet	lt
 80080e4:	425b      	neglt	r3, r3
 80080e6:	f042 0202 	orrlt.w	r2, r2, #2
 80080ea:	9307      	strge	r3, [sp, #28]
 80080ec:	9307      	strlt	r3, [sp, #28]
 80080ee:	bfb8      	it	lt
 80080f0:	9204      	strlt	r2, [sp, #16]
 80080f2:	7823      	ldrb	r3, [r4, #0]
 80080f4:	2b2e      	cmp	r3, #46	; 0x2e
 80080f6:	d10c      	bne.n	8008112 <_vfiprintf_r+0x176>
 80080f8:	7863      	ldrb	r3, [r4, #1]
 80080fa:	2b2a      	cmp	r3, #42	; 0x2a
 80080fc:	d135      	bne.n	800816a <_vfiprintf_r+0x1ce>
 80080fe:	9b03      	ldr	r3, [sp, #12]
 8008100:	3402      	adds	r4, #2
 8008102:	1d1a      	adds	r2, r3, #4
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	9203      	str	r2, [sp, #12]
 8008108:	2b00      	cmp	r3, #0
 800810a:	bfb8      	it	lt
 800810c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008110:	9305      	str	r3, [sp, #20]
 8008112:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80081ec <_vfiprintf_r+0x250>
 8008116:	2203      	movs	r2, #3
 8008118:	4650      	mov	r0, sl
 800811a:	7821      	ldrb	r1, [r4, #0]
 800811c:	f7fe ff3a 	bl	8006f94 <memchr>
 8008120:	b140      	cbz	r0, 8008134 <_vfiprintf_r+0x198>
 8008122:	2340      	movs	r3, #64	; 0x40
 8008124:	eba0 000a 	sub.w	r0, r0, sl
 8008128:	fa03 f000 	lsl.w	r0, r3, r0
 800812c:	9b04      	ldr	r3, [sp, #16]
 800812e:	3401      	adds	r4, #1
 8008130:	4303      	orrs	r3, r0
 8008132:	9304      	str	r3, [sp, #16]
 8008134:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008138:	2206      	movs	r2, #6
 800813a:	482d      	ldr	r0, [pc, #180]	; (80081f0 <_vfiprintf_r+0x254>)
 800813c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008140:	f7fe ff28 	bl	8006f94 <memchr>
 8008144:	2800      	cmp	r0, #0
 8008146:	d03f      	beq.n	80081c8 <_vfiprintf_r+0x22c>
 8008148:	4b2a      	ldr	r3, [pc, #168]	; (80081f4 <_vfiprintf_r+0x258>)
 800814a:	bb1b      	cbnz	r3, 8008194 <_vfiprintf_r+0x1f8>
 800814c:	9b03      	ldr	r3, [sp, #12]
 800814e:	3307      	adds	r3, #7
 8008150:	f023 0307 	bic.w	r3, r3, #7
 8008154:	3308      	adds	r3, #8
 8008156:	9303      	str	r3, [sp, #12]
 8008158:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800815a:	443b      	add	r3, r7
 800815c:	9309      	str	r3, [sp, #36]	; 0x24
 800815e:	e767      	b.n	8008030 <_vfiprintf_r+0x94>
 8008160:	460c      	mov	r4, r1
 8008162:	2001      	movs	r0, #1
 8008164:	fb0c 3202 	mla	r2, ip, r2, r3
 8008168:	e7a5      	b.n	80080b6 <_vfiprintf_r+0x11a>
 800816a:	2300      	movs	r3, #0
 800816c:	f04f 0c0a 	mov.w	ip, #10
 8008170:	4619      	mov	r1, r3
 8008172:	3401      	adds	r4, #1
 8008174:	9305      	str	r3, [sp, #20]
 8008176:	4620      	mov	r0, r4
 8008178:	f810 2b01 	ldrb.w	r2, [r0], #1
 800817c:	3a30      	subs	r2, #48	; 0x30
 800817e:	2a09      	cmp	r2, #9
 8008180:	d903      	bls.n	800818a <_vfiprintf_r+0x1ee>
 8008182:	2b00      	cmp	r3, #0
 8008184:	d0c5      	beq.n	8008112 <_vfiprintf_r+0x176>
 8008186:	9105      	str	r1, [sp, #20]
 8008188:	e7c3      	b.n	8008112 <_vfiprintf_r+0x176>
 800818a:	4604      	mov	r4, r0
 800818c:	2301      	movs	r3, #1
 800818e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008192:	e7f0      	b.n	8008176 <_vfiprintf_r+0x1da>
 8008194:	ab03      	add	r3, sp, #12
 8008196:	9300      	str	r3, [sp, #0]
 8008198:	462a      	mov	r2, r5
 800819a:	4630      	mov	r0, r6
 800819c:	4b16      	ldr	r3, [pc, #88]	; (80081f8 <_vfiprintf_r+0x25c>)
 800819e:	a904      	add	r1, sp, #16
 80081a0:	f7fc f858 	bl	8004254 <_printf_float>
 80081a4:	4607      	mov	r7, r0
 80081a6:	1c78      	adds	r0, r7, #1
 80081a8:	d1d6      	bne.n	8008158 <_vfiprintf_r+0x1bc>
 80081aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80081ac:	07d9      	lsls	r1, r3, #31
 80081ae:	d405      	bmi.n	80081bc <_vfiprintf_r+0x220>
 80081b0:	89ab      	ldrh	r3, [r5, #12]
 80081b2:	059a      	lsls	r2, r3, #22
 80081b4:	d402      	bmi.n	80081bc <_vfiprintf_r+0x220>
 80081b6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80081b8:	f000 fa9d 	bl	80086f6 <__retarget_lock_release_recursive>
 80081bc:	89ab      	ldrh	r3, [r5, #12]
 80081be:	065b      	lsls	r3, r3, #25
 80081c0:	f53f af12 	bmi.w	8007fe8 <_vfiprintf_r+0x4c>
 80081c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80081c6:	e711      	b.n	8007fec <_vfiprintf_r+0x50>
 80081c8:	ab03      	add	r3, sp, #12
 80081ca:	9300      	str	r3, [sp, #0]
 80081cc:	462a      	mov	r2, r5
 80081ce:	4630      	mov	r0, r6
 80081d0:	4b09      	ldr	r3, [pc, #36]	; (80081f8 <_vfiprintf_r+0x25c>)
 80081d2:	a904      	add	r1, sp, #16
 80081d4:	f7fc fada 	bl	800478c <_printf_i>
 80081d8:	e7e4      	b.n	80081a4 <_vfiprintf_r+0x208>
 80081da:	bf00      	nop
 80081dc:	08008e6c 	.word	0x08008e6c
 80081e0:	08008e8c 	.word	0x08008e8c
 80081e4:	08008e4c 	.word	0x08008e4c
 80081e8:	08008dfc 	.word	0x08008dfc
 80081ec:	08008e02 	.word	0x08008e02
 80081f0:	08008e06 	.word	0x08008e06
 80081f4:	08004255 	.word	0x08004255
 80081f8:	08007f79 	.word	0x08007f79

080081fc <__swbuf_r>:
 80081fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081fe:	460e      	mov	r6, r1
 8008200:	4614      	mov	r4, r2
 8008202:	4605      	mov	r5, r0
 8008204:	b118      	cbz	r0, 800820e <__swbuf_r+0x12>
 8008206:	6983      	ldr	r3, [r0, #24]
 8008208:	b90b      	cbnz	r3, 800820e <__swbuf_r+0x12>
 800820a:	f000 f9d5 	bl	80085b8 <__sinit>
 800820e:	4b21      	ldr	r3, [pc, #132]	; (8008294 <__swbuf_r+0x98>)
 8008210:	429c      	cmp	r4, r3
 8008212:	d12b      	bne.n	800826c <__swbuf_r+0x70>
 8008214:	686c      	ldr	r4, [r5, #4]
 8008216:	69a3      	ldr	r3, [r4, #24]
 8008218:	60a3      	str	r3, [r4, #8]
 800821a:	89a3      	ldrh	r3, [r4, #12]
 800821c:	071a      	lsls	r2, r3, #28
 800821e:	d52f      	bpl.n	8008280 <__swbuf_r+0x84>
 8008220:	6923      	ldr	r3, [r4, #16]
 8008222:	b36b      	cbz	r3, 8008280 <__swbuf_r+0x84>
 8008224:	6923      	ldr	r3, [r4, #16]
 8008226:	6820      	ldr	r0, [r4, #0]
 8008228:	b2f6      	uxtb	r6, r6
 800822a:	1ac0      	subs	r0, r0, r3
 800822c:	6963      	ldr	r3, [r4, #20]
 800822e:	4637      	mov	r7, r6
 8008230:	4283      	cmp	r3, r0
 8008232:	dc04      	bgt.n	800823e <__swbuf_r+0x42>
 8008234:	4621      	mov	r1, r4
 8008236:	4628      	mov	r0, r5
 8008238:	f000 f92a 	bl	8008490 <_fflush_r>
 800823c:	bb30      	cbnz	r0, 800828c <__swbuf_r+0x90>
 800823e:	68a3      	ldr	r3, [r4, #8]
 8008240:	3001      	adds	r0, #1
 8008242:	3b01      	subs	r3, #1
 8008244:	60a3      	str	r3, [r4, #8]
 8008246:	6823      	ldr	r3, [r4, #0]
 8008248:	1c5a      	adds	r2, r3, #1
 800824a:	6022      	str	r2, [r4, #0]
 800824c:	701e      	strb	r6, [r3, #0]
 800824e:	6963      	ldr	r3, [r4, #20]
 8008250:	4283      	cmp	r3, r0
 8008252:	d004      	beq.n	800825e <__swbuf_r+0x62>
 8008254:	89a3      	ldrh	r3, [r4, #12]
 8008256:	07db      	lsls	r3, r3, #31
 8008258:	d506      	bpl.n	8008268 <__swbuf_r+0x6c>
 800825a:	2e0a      	cmp	r6, #10
 800825c:	d104      	bne.n	8008268 <__swbuf_r+0x6c>
 800825e:	4621      	mov	r1, r4
 8008260:	4628      	mov	r0, r5
 8008262:	f000 f915 	bl	8008490 <_fflush_r>
 8008266:	b988      	cbnz	r0, 800828c <__swbuf_r+0x90>
 8008268:	4638      	mov	r0, r7
 800826a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800826c:	4b0a      	ldr	r3, [pc, #40]	; (8008298 <__swbuf_r+0x9c>)
 800826e:	429c      	cmp	r4, r3
 8008270:	d101      	bne.n	8008276 <__swbuf_r+0x7a>
 8008272:	68ac      	ldr	r4, [r5, #8]
 8008274:	e7cf      	b.n	8008216 <__swbuf_r+0x1a>
 8008276:	4b09      	ldr	r3, [pc, #36]	; (800829c <__swbuf_r+0xa0>)
 8008278:	429c      	cmp	r4, r3
 800827a:	bf08      	it	eq
 800827c:	68ec      	ldreq	r4, [r5, #12]
 800827e:	e7ca      	b.n	8008216 <__swbuf_r+0x1a>
 8008280:	4621      	mov	r1, r4
 8008282:	4628      	mov	r0, r5
 8008284:	f000 f80c 	bl	80082a0 <__swsetup_r>
 8008288:	2800      	cmp	r0, #0
 800828a:	d0cb      	beq.n	8008224 <__swbuf_r+0x28>
 800828c:	f04f 37ff 	mov.w	r7, #4294967295
 8008290:	e7ea      	b.n	8008268 <__swbuf_r+0x6c>
 8008292:	bf00      	nop
 8008294:	08008e6c 	.word	0x08008e6c
 8008298:	08008e8c 	.word	0x08008e8c
 800829c:	08008e4c 	.word	0x08008e4c

080082a0 <__swsetup_r>:
 80082a0:	4b32      	ldr	r3, [pc, #200]	; (800836c <__swsetup_r+0xcc>)
 80082a2:	b570      	push	{r4, r5, r6, lr}
 80082a4:	681d      	ldr	r5, [r3, #0]
 80082a6:	4606      	mov	r6, r0
 80082a8:	460c      	mov	r4, r1
 80082aa:	b125      	cbz	r5, 80082b6 <__swsetup_r+0x16>
 80082ac:	69ab      	ldr	r3, [r5, #24]
 80082ae:	b913      	cbnz	r3, 80082b6 <__swsetup_r+0x16>
 80082b0:	4628      	mov	r0, r5
 80082b2:	f000 f981 	bl	80085b8 <__sinit>
 80082b6:	4b2e      	ldr	r3, [pc, #184]	; (8008370 <__swsetup_r+0xd0>)
 80082b8:	429c      	cmp	r4, r3
 80082ba:	d10f      	bne.n	80082dc <__swsetup_r+0x3c>
 80082bc:	686c      	ldr	r4, [r5, #4]
 80082be:	89a3      	ldrh	r3, [r4, #12]
 80082c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80082c4:	0719      	lsls	r1, r3, #28
 80082c6:	d42c      	bmi.n	8008322 <__swsetup_r+0x82>
 80082c8:	06dd      	lsls	r5, r3, #27
 80082ca:	d411      	bmi.n	80082f0 <__swsetup_r+0x50>
 80082cc:	2309      	movs	r3, #9
 80082ce:	6033      	str	r3, [r6, #0]
 80082d0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80082d4:	f04f 30ff 	mov.w	r0, #4294967295
 80082d8:	81a3      	strh	r3, [r4, #12]
 80082da:	e03e      	b.n	800835a <__swsetup_r+0xba>
 80082dc:	4b25      	ldr	r3, [pc, #148]	; (8008374 <__swsetup_r+0xd4>)
 80082de:	429c      	cmp	r4, r3
 80082e0:	d101      	bne.n	80082e6 <__swsetup_r+0x46>
 80082e2:	68ac      	ldr	r4, [r5, #8]
 80082e4:	e7eb      	b.n	80082be <__swsetup_r+0x1e>
 80082e6:	4b24      	ldr	r3, [pc, #144]	; (8008378 <__swsetup_r+0xd8>)
 80082e8:	429c      	cmp	r4, r3
 80082ea:	bf08      	it	eq
 80082ec:	68ec      	ldreq	r4, [r5, #12]
 80082ee:	e7e6      	b.n	80082be <__swsetup_r+0x1e>
 80082f0:	0758      	lsls	r0, r3, #29
 80082f2:	d512      	bpl.n	800831a <__swsetup_r+0x7a>
 80082f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80082f6:	b141      	cbz	r1, 800830a <__swsetup_r+0x6a>
 80082f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80082fc:	4299      	cmp	r1, r3
 80082fe:	d002      	beq.n	8008306 <__swsetup_r+0x66>
 8008300:	4630      	mov	r0, r6
 8008302:	f7ff fb2f 	bl	8007964 <_free_r>
 8008306:	2300      	movs	r3, #0
 8008308:	6363      	str	r3, [r4, #52]	; 0x34
 800830a:	89a3      	ldrh	r3, [r4, #12]
 800830c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008310:	81a3      	strh	r3, [r4, #12]
 8008312:	2300      	movs	r3, #0
 8008314:	6063      	str	r3, [r4, #4]
 8008316:	6923      	ldr	r3, [r4, #16]
 8008318:	6023      	str	r3, [r4, #0]
 800831a:	89a3      	ldrh	r3, [r4, #12]
 800831c:	f043 0308 	orr.w	r3, r3, #8
 8008320:	81a3      	strh	r3, [r4, #12]
 8008322:	6923      	ldr	r3, [r4, #16]
 8008324:	b94b      	cbnz	r3, 800833a <__swsetup_r+0x9a>
 8008326:	89a3      	ldrh	r3, [r4, #12]
 8008328:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800832c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008330:	d003      	beq.n	800833a <__swsetup_r+0x9a>
 8008332:	4621      	mov	r1, r4
 8008334:	4630      	mov	r0, r6
 8008336:	f000 fa05 	bl	8008744 <__smakebuf_r>
 800833a:	89a0      	ldrh	r0, [r4, #12]
 800833c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008340:	f010 0301 	ands.w	r3, r0, #1
 8008344:	d00a      	beq.n	800835c <__swsetup_r+0xbc>
 8008346:	2300      	movs	r3, #0
 8008348:	60a3      	str	r3, [r4, #8]
 800834a:	6963      	ldr	r3, [r4, #20]
 800834c:	425b      	negs	r3, r3
 800834e:	61a3      	str	r3, [r4, #24]
 8008350:	6923      	ldr	r3, [r4, #16]
 8008352:	b943      	cbnz	r3, 8008366 <__swsetup_r+0xc6>
 8008354:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008358:	d1ba      	bne.n	80082d0 <__swsetup_r+0x30>
 800835a:	bd70      	pop	{r4, r5, r6, pc}
 800835c:	0781      	lsls	r1, r0, #30
 800835e:	bf58      	it	pl
 8008360:	6963      	ldrpl	r3, [r4, #20]
 8008362:	60a3      	str	r3, [r4, #8]
 8008364:	e7f4      	b.n	8008350 <__swsetup_r+0xb0>
 8008366:	2000      	movs	r0, #0
 8008368:	e7f7      	b.n	800835a <__swsetup_r+0xba>
 800836a:	bf00      	nop
 800836c:	20000010 	.word	0x20000010
 8008370:	08008e6c 	.word	0x08008e6c
 8008374:	08008e8c 	.word	0x08008e8c
 8008378:	08008e4c 	.word	0x08008e4c

0800837c <abort>:
 800837c:	2006      	movs	r0, #6
 800837e:	b508      	push	{r3, lr}
 8008380:	f000 fa50 	bl	8008824 <raise>
 8008384:	2001      	movs	r0, #1
 8008386:	f7f9 f8cc 	bl	8001522 <_exit>
	...

0800838c <__sflush_r>:
 800838c:	898a      	ldrh	r2, [r1, #12]
 800838e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008390:	4605      	mov	r5, r0
 8008392:	0710      	lsls	r0, r2, #28
 8008394:	460c      	mov	r4, r1
 8008396:	d457      	bmi.n	8008448 <__sflush_r+0xbc>
 8008398:	684b      	ldr	r3, [r1, #4]
 800839a:	2b00      	cmp	r3, #0
 800839c:	dc04      	bgt.n	80083a8 <__sflush_r+0x1c>
 800839e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	dc01      	bgt.n	80083a8 <__sflush_r+0x1c>
 80083a4:	2000      	movs	r0, #0
 80083a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80083a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80083aa:	2e00      	cmp	r6, #0
 80083ac:	d0fa      	beq.n	80083a4 <__sflush_r+0x18>
 80083ae:	2300      	movs	r3, #0
 80083b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80083b4:	682f      	ldr	r7, [r5, #0]
 80083b6:	602b      	str	r3, [r5, #0]
 80083b8:	d032      	beq.n	8008420 <__sflush_r+0x94>
 80083ba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80083bc:	89a3      	ldrh	r3, [r4, #12]
 80083be:	075a      	lsls	r2, r3, #29
 80083c0:	d505      	bpl.n	80083ce <__sflush_r+0x42>
 80083c2:	6863      	ldr	r3, [r4, #4]
 80083c4:	1ac0      	subs	r0, r0, r3
 80083c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80083c8:	b10b      	cbz	r3, 80083ce <__sflush_r+0x42>
 80083ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80083cc:	1ac0      	subs	r0, r0, r3
 80083ce:	2300      	movs	r3, #0
 80083d0:	4602      	mov	r2, r0
 80083d2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80083d4:	4628      	mov	r0, r5
 80083d6:	6a21      	ldr	r1, [r4, #32]
 80083d8:	47b0      	blx	r6
 80083da:	1c43      	adds	r3, r0, #1
 80083dc:	89a3      	ldrh	r3, [r4, #12]
 80083de:	d106      	bne.n	80083ee <__sflush_r+0x62>
 80083e0:	6829      	ldr	r1, [r5, #0]
 80083e2:	291d      	cmp	r1, #29
 80083e4:	d82c      	bhi.n	8008440 <__sflush_r+0xb4>
 80083e6:	4a29      	ldr	r2, [pc, #164]	; (800848c <__sflush_r+0x100>)
 80083e8:	40ca      	lsrs	r2, r1
 80083ea:	07d6      	lsls	r6, r2, #31
 80083ec:	d528      	bpl.n	8008440 <__sflush_r+0xb4>
 80083ee:	2200      	movs	r2, #0
 80083f0:	6062      	str	r2, [r4, #4]
 80083f2:	6922      	ldr	r2, [r4, #16]
 80083f4:	04d9      	lsls	r1, r3, #19
 80083f6:	6022      	str	r2, [r4, #0]
 80083f8:	d504      	bpl.n	8008404 <__sflush_r+0x78>
 80083fa:	1c42      	adds	r2, r0, #1
 80083fc:	d101      	bne.n	8008402 <__sflush_r+0x76>
 80083fe:	682b      	ldr	r3, [r5, #0]
 8008400:	b903      	cbnz	r3, 8008404 <__sflush_r+0x78>
 8008402:	6560      	str	r0, [r4, #84]	; 0x54
 8008404:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008406:	602f      	str	r7, [r5, #0]
 8008408:	2900      	cmp	r1, #0
 800840a:	d0cb      	beq.n	80083a4 <__sflush_r+0x18>
 800840c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008410:	4299      	cmp	r1, r3
 8008412:	d002      	beq.n	800841a <__sflush_r+0x8e>
 8008414:	4628      	mov	r0, r5
 8008416:	f7ff faa5 	bl	8007964 <_free_r>
 800841a:	2000      	movs	r0, #0
 800841c:	6360      	str	r0, [r4, #52]	; 0x34
 800841e:	e7c2      	b.n	80083a6 <__sflush_r+0x1a>
 8008420:	6a21      	ldr	r1, [r4, #32]
 8008422:	2301      	movs	r3, #1
 8008424:	4628      	mov	r0, r5
 8008426:	47b0      	blx	r6
 8008428:	1c41      	adds	r1, r0, #1
 800842a:	d1c7      	bne.n	80083bc <__sflush_r+0x30>
 800842c:	682b      	ldr	r3, [r5, #0]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d0c4      	beq.n	80083bc <__sflush_r+0x30>
 8008432:	2b1d      	cmp	r3, #29
 8008434:	d001      	beq.n	800843a <__sflush_r+0xae>
 8008436:	2b16      	cmp	r3, #22
 8008438:	d101      	bne.n	800843e <__sflush_r+0xb2>
 800843a:	602f      	str	r7, [r5, #0]
 800843c:	e7b2      	b.n	80083a4 <__sflush_r+0x18>
 800843e:	89a3      	ldrh	r3, [r4, #12]
 8008440:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008444:	81a3      	strh	r3, [r4, #12]
 8008446:	e7ae      	b.n	80083a6 <__sflush_r+0x1a>
 8008448:	690f      	ldr	r7, [r1, #16]
 800844a:	2f00      	cmp	r7, #0
 800844c:	d0aa      	beq.n	80083a4 <__sflush_r+0x18>
 800844e:	0793      	lsls	r3, r2, #30
 8008450:	bf18      	it	ne
 8008452:	2300      	movne	r3, #0
 8008454:	680e      	ldr	r6, [r1, #0]
 8008456:	bf08      	it	eq
 8008458:	694b      	ldreq	r3, [r1, #20]
 800845a:	1bf6      	subs	r6, r6, r7
 800845c:	600f      	str	r7, [r1, #0]
 800845e:	608b      	str	r3, [r1, #8]
 8008460:	2e00      	cmp	r6, #0
 8008462:	dd9f      	ble.n	80083a4 <__sflush_r+0x18>
 8008464:	4633      	mov	r3, r6
 8008466:	463a      	mov	r2, r7
 8008468:	4628      	mov	r0, r5
 800846a:	6a21      	ldr	r1, [r4, #32]
 800846c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8008470:	47e0      	blx	ip
 8008472:	2800      	cmp	r0, #0
 8008474:	dc06      	bgt.n	8008484 <__sflush_r+0xf8>
 8008476:	89a3      	ldrh	r3, [r4, #12]
 8008478:	f04f 30ff 	mov.w	r0, #4294967295
 800847c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008480:	81a3      	strh	r3, [r4, #12]
 8008482:	e790      	b.n	80083a6 <__sflush_r+0x1a>
 8008484:	4407      	add	r7, r0
 8008486:	1a36      	subs	r6, r6, r0
 8008488:	e7ea      	b.n	8008460 <__sflush_r+0xd4>
 800848a:	bf00      	nop
 800848c:	20400001 	.word	0x20400001

08008490 <_fflush_r>:
 8008490:	b538      	push	{r3, r4, r5, lr}
 8008492:	690b      	ldr	r3, [r1, #16]
 8008494:	4605      	mov	r5, r0
 8008496:	460c      	mov	r4, r1
 8008498:	b913      	cbnz	r3, 80084a0 <_fflush_r+0x10>
 800849a:	2500      	movs	r5, #0
 800849c:	4628      	mov	r0, r5
 800849e:	bd38      	pop	{r3, r4, r5, pc}
 80084a0:	b118      	cbz	r0, 80084aa <_fflush_r+0x1a>
 80084a2:	6983      	ldr	r3, [r0, #24]
 80084a4:	b90b      	cbnz	r3, 80084aa <_fflush_r+0x1a>
 80084a6:	f000 f887 	bl	80085b8 <__sinit>
 80084aa:	4b14      	ldr	r3, [pc, #80]	; (80084fc <_fflush_r+0x6c>)
 80084ac:	429c      	cmp	r4, r3
 80084ae:	d11b      	bne.n	80084e8 <_fflush_r+0x58>
 80084b0:	686c      	ldr	r4, [r5, #4]
 80084b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d0ef      	beq.n	800849a <_fflush_r+0xa>
 80084ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80084bc:	07d0      	lsls	r0, r2, #31
 80084be:	d404      	bmi.n	80084ca <_fflush_r+0x3a>
 80084c0:	0599      	lsls	r1, r3, #22
 80084c2:	d402      	bmi.n	80084ca <_fflush_r+0x3a>
 80084c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80084c6:	f000 f915 	bl	80086f4 <__retarget_lock_acquire_recursive>
 80084ca:	4628      	mov	r0, r5
 80084cc:	4621      	mov	r1, r4
 80084ce:	f7ff ff5d 	bl	800838c <__sflush_r>
 80084d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80084d4:	4605      	mov	r5, r0
 80084d6:	07da      	lsls	r2, r3, #31
 80084d8:	d4e0      	bmi.n	800849c <_fflush_r+0xc>
 80084da:	89a3      	ldrh	r3, [r4, #12]
 80084dc:	059b      	lsls	r3, r3, #22
 80084de:	d4dd      	bmi.n	800849c <_fflush_r+0xc>
 80084e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80084e2:	f000 f908 	bl	80086f6 <__retarget_lock_release_recursive>
 80084e6:	e7d9      	b.n	800849c <_fflush_r+0xc>
 80084e8:	4b05      	ldr	r3, [pc, #20]	; (8008500 <_fflush_r+0x70>)
 80084ea:	429c      	cmp	r4, r3
 80084ec:	d101      	bne.n	80084f2 <_fflush_r+0x62>
 80084ee:	68ac      	ldr	r4, [r5, #8]
 80084f0:	e7df      	b.n	80084b2 <_fflush_r+0x22>
 80084f2:	4b04      	ldr	r3, [pc, #16]	; (8008504 <_fflush_r+0x74>)
 80084f4:	429c      	cmp	r4, r3
 80084f6:	bf08      	it	eq
 80084f8:	68ec      	ldreq	r4, [r5, #12]
 80084fa:	e7da      	b.n	80084b2 <_fflush_r+0x22>
 80084fc:	08008e6c 	.word	0x08008e6c
 8008500:	08008e8c 	.word	0x08008e8c
 8008504:	08008e4c 	.word	0x08008e4c

08008508 <std>:
 8008508:	2300      	movs	r3, #0
 800850a:	b510      	push	{r4, lr}
 800850c:	4604      	mov	r4, r0
 800850e:	e9c0 3300 	strd	r3, r3, [r0]
 8008512:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008516:	6083      	str	r3, [r0, #8]
 8008518:	8181      	strh	r1, [r0, #12]
 800851a:	6643      	str	r3, [r0, #100]	; 0x64
 800851c:	81c2      	strh	r2, [r0, #14]
 800851e:	6183      	str	r3, [r0, #24]
 8008520:	4619      	mov	r1, r3
 8008522:	2208      	movs	r2, #8
 8008524:	305c      	adds	r0, #92	; 0x5c
 8008526:	f7fb fdef 	bl	8004108 <memset>
 800852a:	4b05      	ldr	r3, [pc, #20]	; (8008540 <std+0x38>)
 800852c:	6224      	str	r4, [r4, #32]
 800852e:	6263      	str	r3, [r4, #36]	; 0x24
 8008530:	4b04      	ldr	r3, [pc, #16]	; (8008544 <std+0x3c>)
 8008532:	62a3      	str	r3, [r4, #40]	; 0x28
 8008534:	4b04      	ldr	r3, [pc, #16]	; (8008548 <std+0x40>)
 8008536:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008538:	4b04      	ldr	r3, [pc, #16]	; (800854c <std+0x44>)
 800853a:	6323      	str	r3, [r4, #48]	; 0x30
 800853c:	bd10      	pop	{r4, pc}
 800853e:	bf00      	nop
 8008540:	0800885d 	.word	0x0800885d
 8008544:	0800887f 	.word	0x0800887f
 8008548:	080088b7 	.word	0x080088b7
 800854c:	080088db 	.word	0x080088db

08008550 <_cleanup_r>:
 8008550:	4901      	ldr	r1, [pc, #4]	; (8008558 <_cleanup_r+0x8>)
 8008552:	f000 b8af 	b.w	80086b4 <_fwalk_reent>
 8008556:	bf00      	nop
 8008558:	08008491 	.word	0x08008491

0800855c <__sfmoreglue>:
 800855c:	2268      	movs	r2, #104	; 0x68
 800855e:	b570      	push	{r4, r5, r6, lr}
 8008560:	1e4d      	subs	r5, r1, #1
 8008562:	4355      	muls	r5, r2
 8008564:	460e      	mov	r6, r1
 8008566:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800856a:	f7ff fa63 	bl	8007a34 <_malloc_r>
 800856e:	4604      	mov	r4, r0
 8008570:	b140      	cbz	r0, 8008584 <__sfmoreglue+0x28>
 8008572:	2100      	movs	r1, #0
 8008574:	e9c0 1600 	strd	r1, r6, [r0]
 8008578:	300c      	adds	r0, #12
 800857a:	60a0      	str	r0, [r4, #8]
 800857c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008580:	f7fb fdc2 	bl	8004108 <memset>
 8008584:	4620      	mov	r0, r4
 8008586:	bd70      	pop	{r4, r5, r6, pc}

08008588 <__sfp_lock_acquire>:
 8008588:	4801      	ldr	r0, [pc, #4]	; (8008590 <__sfp_lock_acquire+0x8>)
 800858a:	f000 b8b3 	b.w	80086f4 <__retarget_lock_acquire_recursive>
 800858e:	bf00      	nop
 8008590:	20000349 	.word	0x20000349

08008594 <__sfp_lock_release>:
 8008594:	4801      	ldr	r0, [pc, #4]	; (800859c <__sfp_lock_release+0x8>)
 8008596:	f000 b8ae 	b.w	80086f6 <__retarget_lock_release_recursive>
 800859a:	bf00      	nop
 800859c:	20000349 	.word	0x20000349

080085a0 <__sinit_lock_acquire>:
 80085a0:	4801      	ldr	r0, [pc, #4]	; (80085a8 <__sinit_lock_acquire+0x8>)
 80085a2:	f000 b8a7 	b.w	80086f4 <__retarget_lock_acquire_recursive>
 80085a6:	bf00      	nop
 80085a8:	2000034a 	.word	0x2000034a

080085ac <__sinit_lock_release>:
 80085ac:	4801      	ldr	r0, [pc, #4]	; (80085b4 <__sinit_lock_release+0x8>)
 80085ae:	f000 b8a2 	b.w	80086f6 <__retarget_lock_release_recursive>
 80085b2:	bf00      	nop
 80085b4:	2000034a 	.word	0x2000034a

080085b8 <__sinit>:
 80085b8:	b510      	push	{r4, lr}
 80085ba:	4604      	mov	r4, r0
 80085bc:	f7ff fff0 	bl	80085a0 <__sinit_lock_acquire>
 80085c0:	69a3      	ldr	r3, [r4, #24]
 80085c2:	b11b      	cbz	r3, 80085cc <__sinit+0x14>
 80085c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085c8:	f7ff bff0 	b.w	80085ac <__sinit_lock_release>
 80085cc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80085d0:	6523      	str	r3, [r4, #80]	; 0x50
 80085d2:	4b13      	ldr	r3, [pc, #76]	; (8008620 <__sinit+0x68>)
 80085d4:	4a13      	ldr	r2, [pc, #76]	; (8008624 <__sinit+0x6c>)
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	62a2      	str	r2, [r4, #40]	; 0x28
 80085da:	42a3      	cmp	r3, r4
 80085dc:	bf08      	it	eq
 80085de:	2301      	moveq	r3, #1
 80085e0:	4620      	mov	r0, r4
 80085e2:	bf08      	it	eq
 80085e4:	61a3      	streq	r3, [r4, #24]
 80085e6:	f000 f81f 	bl	8008628 <__sfp>
 80085ea:	6060      	str	r0, [r4, #4]
 80085ec:	4620      	mov	r0, r4
 80085ee:	f000 f81b 	bl	8008628 <__sfp>
 80085f2:	60a0      	str	r0, [r4, #8]
 80085f4:	4620      	mov	r0, r4
 80085f6:	f000 f817 	bl	8008628 <__sfp>
 80085fa:	2200      	movs	r2, #0
 80085fc:	2104      	movs	r1, #4
 80085fe:	60e0      	str	r0, [r4, #12]
 8008600:	6860      	ldr	r0, [r4, #4]
 8008602:	f7ff ff81 	bl	8008508 <std>
 8008606:	2201      	movs	r2, #1
 8008608:	2109      	movs	r1, #9
 800860a:	68a0      	ldr	r0, [r4, #8]
 800860c:	f7ff ff7c 	bl	8008508 <std>
 8008610:	2202      	movs	r2, #2
 8008612:	2112      	movs	r1, #18
 8008614:	68e0      	ldr	r0, [r4, #12]
 8008616:	f7ff ff77 	bl	8008508 <std>
 800861a:	2301      	movs	r3, #1
 800861c:	61a3      	str	r3, [r4, #24]
 800861e:	e7d1      	b.n	80085c4 <__sinit+0xc>
 8008620:	08008a04 	.word	0x08008a04
 8008624:	08008551 	.word	0x08008551

08008628 <__sfp>:
 8008628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800862a:	4607      	mov	r7, r0
 800862c:	f7ff ffac 	bl	8008588 <__sfp_lock_acquire>
 8008630:	4b1e      	ldr	r3, [pc, #120]	; (80086ac <__sfp+0x84>)
 8008632:	681e      	ldr	r6, [r3, #0]
 8008634:	69b3      	ldr	r3, [r6, #24]
 8008636:	b913      	cbnz	r3, 800863e <__sfp+0x16>
 8008638:	4630      	mov	r0, r6
 800863a:	f7ff ffbd 	bl	80085b8 <__sinit>
 800863e:	3648      	adds	r6, #72	; 0x48
 8008640:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008644:	3b01      	subs	r3, #1
 8008646:	d503      	bpl.n	8008650 <__sfp+0x28>
 8008648:	6833      	ldr	r3, [r6, #0]
 800864a:	b30b      	cbz	r3, 8008690 <__sfp+0x68>
 800864c:	6836      	ldr	r6, [r6, #0]
 800864e:	e7f7      	b.n	8008640 <__sfp+0x18>
 8008650:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008654:	b9d5      	cbnz	r5, 800868c <__sfp+0x64>
 8008656:	4b16      	ldr	r3, [pc, #88]	; (80086b0 <__sfp+0x88>)
 8008658:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800865c:	60e3      	str	r3, [r4, #12]
 800865e:	6665      	str	r5, [r4, #100]	; 0x64
 8008660:	f000 f847 	bl	80086f2 <__retarget_lock_init_recursive>
 8008664:	f7ff ff96 	bl	8008594 <__sfp_lock_release>
 8008668:	2208      	movs	r2, #8
 800866a:	4629      	mov	r1, r5
 800866c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008670:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008674:	6025      	str	r5, [r4, #0]
 8008676:	61a5      	str	r5, [r4, #24]
 8008678:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800867c:	f7fb fd44 	bl	8004108 <memset>
 8008680:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008684:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008688:	4620      	mov	r0, r4
 800868a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800868c:	3468      	adds	r4, #104	; 0x68
 800868e:	e7d9      	b.n	8008644 <__sfp+0x1c>
 8008690:	2104      	movs	r1, #4
 8008692:	4638      	mov	r0, r7
 8008694:	f7ff ff62 	bl	800855c <__sfmoreglue>
 8008698:	4604      	mov	r4, r0
 800869a:	6030      	str	r0, [r6, #0]
 800869c:	2800      	cmp	r0, #0
 800869e:	d1d5      	bne.n	800864c <__sfp+0x24>
 80086a0:	f7ff ff78 	bl	8008594 <__sfp_lock_release>
 80086a4:	230c      	movs	r3, #12
 80086a6:	603b      	str	r3, [r7, #0]
 80086a8:	e7ee      	b.n	8008688 <__sfp+0x60>
 80086aa:	bf00      	nop
 80086ac:	08008a04 	.word	0x08008a04
 80086b0:	ffff0001 	.word	0xffff0001

080086b4 <_fwalk_reent>:
 80086b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086b8:	4606      	mov	r6, r0
 80086ba:	4688      	mov	r8, r1
 80086bc:	2700      	movs	r7, #0
 80086be:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80086c2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80086c6:	f1b9 0901 	subs.w	r9, r9, #1
 80086ca:	d505      	bpl.n	80086d8 <_fwalk_reent+0x24>
 80086cc:	6824      	ldr	r4, [r4, #0]
 80086ce:	2c00      	cmp	r4, #0
 80086d0:	d1f7      	bne.n	80086c2 <_fwalk_reent+0xe>
 80086d2:	4638      	mov	r0, r7
 80086d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80086d8:	89ab      	ldrh	r3, [r5, #12]
 80086da:	2b01      	cmp	r3, #1
 80086dc:	d907      	bls.n	80086ee <_fwalk_reent+0x3a>
 80086de:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80086e2:	3301      	adds	r3, #1
 80086e4:	d003      	beq.n	80086ee <_fwalk_reent+0x3a>
 80086e6:	4629      	mov	r1, r5
 80086e8:	4630      	mov	r0, r6
 80086ea:	47c0      	blx	r8
 80086ec:	4307      	orrs	r7, r0
 80086ee:	3568      	adds	r5, #104	; 0x68
 80086f0:	e7e9      	b.n	80086c6 <_fwalk_reent+0x12>

080086f2 <__retarget_lock_init_recursive>:
 80086f2:	4770      	bx	lr

080086f4 <__retarget_lock_acquire_recursive>:
 80086f4:	4770      	bx	lr

080086f6 <__retarget_lock_release_recursive>:
 80086f6:	4770      	bx	lr

080086f8 <__swhatbuf_r>:
 80086f8:	b570      	push	{r4, r5, r6, lr}
 80086fa:	460e      	mov	r6, r1
 80086fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008700:	4614      	mov	r4, r2
 8008702:	2900      	cmp	r1, #0
 8008704:	461d      	mov	r5, r3
 8008706:	b096      	sub	sp, #88	; 0x58
 8008708:	da08      	bge.n	800871c <__swhatbuf_r+0x24>
 800870a:	2200      	movs	r2, #0
 800870c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008710:	602a      	str	r2, [r5, #0]
 8008712:	061a      	lsls	r2, r3, #24
 8008714:	d410      	bmi.n	8008738 <__swhatbuf_r+0x40>
 8008716:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800871a:	e00e      	b.n	800873a <__swhatbuf_r+0x42>
 800871c:	466a      	mov	r2, sp
 800871e:	f000 f903 	bl	8008928 <_fstat_r>
 8008722:	2800      	cmp	r0, #0
 8008724:	dbf1      	blt.n	800870a <__swhatbuf_r+0x12>
 8008726:	9a01      	ldr	r2, [sp, #4]
 8008728:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800872c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008730:	425a      	negs	r2, r3
 8008732:	415a      	adcs	r2, r3
 8008734:	602a      	str	r2, [r5, #0]
 8008736:	e7ee      	b.n	8008716 <__swhatbuf_r+0x1e>
 8008738:	2340      	movs	r3, #64	; 0x40
 800873a:	2000      	movs	r0, #0
 800873c:	6023      	str	r3, [r4, #0]
 800873e:	b016      	add	sp, #88	; 0x58
 8008740:	bd70      	pop	{r4, r5, r6, pc}
	...

08008744 <__smakebuf_r>:
 8008744:	898b      	ldrh	r3, [r1, #12]
 8008746:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008748:	079d      	lsls	r5, r3, #30
 800874a:	4606      	mov	r6, r0
 800874c:	460c      	mov	r4, r1
 800874e:	d507      	bpl.n	8008760 <__smakebuf_r+0x1c>
 8008750:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008754:	6023      	str	r3, [r4, #0]
 8008756:	6123      	str	r3, [r4, #16]
 8008758:	2301      	movs	r3, #1
 800875a:	6163      	str	r3, [r4, #20]
 800875c:	b002      	add	sp, #8
 800875e:	bd70      	pop	{r4, r5, r6, pc}
 8008760:	466a      	mov	r2, sp
 8008762:	ab01      	add	r3, sp, #4
 8008764:	f7ff ffc8 	bl	80086f8 <__swhatbuf_r>
 8008768:	9900      	ldr	r1, [sp, #0]
 800876a:	4605      	mov	r5, r0
 800876c:	4630      	mov	r0, r6
 800876e:	f7ff f961 	bl	8007a34 <_malloc_r>
 8008772:	b948      	cbnz	r0, 8008788 <__smakebuf_r+0x44>
 8008774:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008778:	059a      	lsls	r2, r3, #22
 800877a:	d4ef      	bmi.n	800875c <__smakebuf_r+0x18>
 800877c:	f023 0303 	bic.w	r3, r3, #3
 8008780:	f043 0302 	orr.w	r3, r3, #2
 8008784:	81a3      	strh	r3, [r4, #12]
 8008786:	e7e3      	b.n	8008750 <__smakebuf_r+0xc>
 8008788:	4b0d      	ldr	r3, [pc, #52]	; (80087c0 <__smakebuf_r+0x7c>)
 800878a:	62b3      	str	r3, [r6, #40]	; 0x28
 800878c:	89a3      	ldrh	r3, [r4, #12]
 800878e:	6020      	str	r0, [r4, #0]
 8008790:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008794:	81a3      	strh	r3, [r4, #12]
 8008796:	9b00      	ldr	r3, [sp, #0]
 8008798:	6120      	str	r0, [r4, #16]
 800879a:	6163      	str	r3, [r4, #20]
 800879c:	9b01      	ldr	r3, [sp, #4]
 800879e:	b15b      	cbz	r3, 80087b8 <__smakebuf_r+0x74>
 80087a0:	4630      	mov	r0, r6
 80087a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80087a6:	f000 f8d1 	bl	800894c <_isatty_r>
 80087aa:	b128      	cbz	r0, 80087b8 <__smakebuf_r+0x74>
 80087ac:	89a3      	ldrh	r3, [r4, #12]
 80087ae:	f023 0303 	bic.w	r3, r3, #3
 80087b2:	f043 0301 	orr.w	r3, r3, #1
 80087b6:	81a3      	strh	r3, [r4, #12]
 80087b8:	89a0      	ldrh	r0, [r4, #12]
 80087ba:	4305      	orrs	r5, r0
 80087bc:	81a5      	strh	r5, [r4, #12]
 80087be:	e7cd      	b.n	800875c <__smakebuf_r+0x18>
 80087c0:	08008551 	.word	0x08008551

080087c4 <_malloc_usable_size_r>:
 80087c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80087c8:	1f18      	subs	r0, r3, #4
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	bfbc      	itt	lt
 80087ce:	580b      	ldrlt	r3, [r1, r0]
 80087d0:	18c0      	addlt	r0, r0, r3
 80087d2:	4770      	bx	lr

080087d4 <_raise_r>:
 80087d4:	291f      	cmp	r1, #31
 80087d6:	b538      	push	{r3, r4, r5, lr}
 80087d8:	4604      	mov	r4, r0
 80087da:	460d      	mov	r5, r1
 80087dc:	d904      	bls.n	80087e8 <_raise_r+0x14>
 80087de:	2316      	movs	r3, #22
 80087e0:	6003      	str	r3, [r0, #0]
 80087e2:	f04f 30ff 	mov.w	r0, #4294967295
 80087e6:	bd38      	pop	{r3, r4, r5, pc}
 80087e8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80087ea:	b112      	cbz	r2, 80087f2 <_raise_r+0x1e>
 80087ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80087f0:	b94b      	cbnz	r3, 8008806 <_raise_r+0x32>
 80087f2:	4620      	mov	r0, r4
 80087f4:	f000 f830 	bl	8008858 <_getpid_r>
 80087f8:	462a      	mov	r2, r5
 80087fa:	4601      	mov	r1, r0
 80087fc:	4620      	mov	r0, r4
 80087fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008802:	f000 b817 	b.w	8008834 <_kill_r>
 8008806:	2b01      	cmp	r3, #1
 8008808:	d00a      	beq.n	8008820 <_raise_r+0x4c>
 800880a:	1c59      	adds	r1, r3, #1
 800880c:	d103      	bne.n	8008816 <_raise_r+0x42>
 800880e:	2316      	movs	r3, #22
 8008810:	6003      	str	r3, [r0, #0]
 8008812:	2001      	movs	r0, #1
 8008814:	e7e7      	b.n	80087e6 <_raise_r+0x12>
 8008816:	2400      	movs	r4, #0
 8008818:	4628      	mov	r0, r5
 800881a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800881e:	4798      	blx	r3
 8008820:	2000      	movs	r0, #0
 8008822:	e7e0      	b.n	80087e6 <_raise_r+0x12>

08008824 <raise>:
 8008824:	4b02      	ldr	r3, [pc, #8]	; (8008830 <raise+0xc>)
 8008826:	4601      	mov	r1, r0
 8008828:	6818      	ldr	r0, [r3, #0]
 800882a:	f7ff bfd3 	b.w	80087d4 <_raise_r>
 800882e:	bf00      	nop
 8008830:	20000010 	.word	0x20000010

08008834 <_kill_r>:
 8008834:	b538      	push	{r3, r4, r5, lr}
 8008836:	2300      	movs	r3, #0
 8008838:	4d06      	ldr	r5, [pc, #24]	; (8008854 <_kill_r+0x20>)
 800883a:	4604      	mov	r4, r0
 800883c:	4608      	mov	r0, r1
 800883e:	4611      	mov	r1, r2
 8008840:	602b      	str	r3, [r5, #0]
 8008842:	f7f8 fe5e 	bl	8001502 <_kill>
 8008846:	1c43      	adds	r3, r0, #1
 8008848:	d102      	bne.n	8008850 <_kill_r+0x1c>
 800884a:	682b      	ldr	r3, [r5, #0]
 800884c:	b103      	cbz	r3, 8008850 <_kill_r+0x1c>
 800884e:	6023      	str	r3, [r4, #0]
 8008850:	bd38      	pop	{r3, r4, r5, pc}
 8008852:	bf00      	nop
 8008854:	20000344 	.word	0x20000344

08008858 <_getpid_r>:
 8008858:	f7f8 be4c 	b.w	80014f4 <_getpid>

0800885c <__sread>:
 800885c:	b510      	push	{r4, lr}
 800885e:	460c      	mov	r4, r1
 8008860:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008864:	f000 f894 	bl	8008990 <_read_r>
 8008868:	2800      	cmp	r0, #0
 800886a:	bfab      	itete	ge
 800886c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800886e:	89a3      	ldrhlt	r3, [r4, #12]
 8008870:	181b      	addge	r3, r3, r0
 8008872:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008876:	bfac      	ite	ge
 8008878:	6563      	strge	r3, [r4, #84]	; 0x54
 800887a:	81a3      	strhlt	r3, [r4, #12]
 800887c:	bd10      	pop	{r4, pc}

0800887e <__swrite>:
 800887e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008882:	461f      	mov	r7, r3
 8008884:	898b      	ldrh	r3, [r1, #12]
 8008886:	4605      	mov	r5, r0
 8008888:	05db      	lsls	r3, r3, #23
 800888a:	460c      	mov	r4, r1
 800888c:	4616      	mov	r6, r2
 800888e:	d505      	bpl.n	800889c <__swrite+0x1e>
 8008890:	2302      	movs	r3, #2
 8008892:	2200      	movs	r2, #0
 8008894:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008898:	f000 f868 	bl	800896c <_lseek_r>
 800889c:	89a3      	ldrh	r3, [r4, #12]
 800889e:	4632      	mov	r2, r6
 80088a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80088a4:	81a3      	strh	r3, [r4, #12]
 80088a6:	4628      	mov	r0, r5
 80088a8:	463b      	mov	r3, r7
 80088aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80088ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80088b2:	f000 b817 	b.w	80088e4 <_write_r>

080088b6 <__sseek>:
 80088b6:	b510      	push	{r4, lr}
 80088b8:	460c      	mov	r4, r1
 80088ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088be:	f000 f855 	bl	800896c <_lseek_r>
 80088c2:	1c43      	adds	r3, r0, #1
 80088c4:	89a3      	ldrh	r3, [r4, #12]
 80088c6:	bf15      	itete	ne
 80088c8:	6560      	strne	r0, [r4, #84]	; 0x54
 80088ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80088ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80088d2:	81a3      	strheq	r3, [r4, #12]
 80088d4:	bf18      	it	ne
 80088d6:	81a3      	strhne	r3, [r4, #12]
 80088d8:	bd10      	pop	{r4, pc}

080088da <__sclose>:
 80088da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088de:	f000 b813 	b.w	8008908 <_close_r>
	...

080088e4 <_write_r>:
 80088e4:	b538      	push	{r3, r4, r5, lr}
 80088e6:	4604      	mov	r4, r0
 80088e8:	4608      	mov	r0, r1
 80088ea:	4611      	mov	r1, r2
 80088ec:	2200      	movs	r2, #0
 80088ee:	4d05      	ldr	r5, [pc, #20]	; (8008904 <_write_r+0x20>)
 80088f0:	602a      	str	r2, [r5, #0]
 80088f2:	461a      	mov	r2, r3
 80088f4:	f7f8 fe3c 	bl	8001570 <_write>
 80088f8:	1c43      	adds	r3, r0, #1
 80088fa:	d102      	bne.n	8008902 <_write_r+0x1e>
 80088fc:	682b      	ldr	r3, [r5, #0]
 80088fe:	b103      	cbz	r3, 8008902 <_write_r+0x1e>
 8008900:	6023      	str	r3, [r4, #0]
 8008902:	bd38      	pop	{r3, r4, r5, pc}
 8008904:	20000344 	.word	0x20000344

08008908 <_close_r>:
 8008908:	b538      	push	{r3, r4, r5, lr}
 800890a:	2300      	movs	r3, #0
 800890c:	4d05      	ldr	r5, [pc, #20]	; (8008924 <_close_r+0x1c>)
 800890e:	4604      	mov	r4, r0
 8008910:	4608      	mov	r0, r1
 8008912:	602b      	str	r3, [r5, #0]
 8008914:	f7f8 fe48 	bl	80015a8 <_close>
 8008918:	1c43      	adds	r3, r0, #1
 800891a:	d102      	bne.n	8008922 <_close_r+0x1a>
 800891c:	682b      	ldr	r3, [r5, #0]
 800891e:	b103      	cbz	r3, 8008922 <_close_r+0x1a>
 8008920:	6023      	str	r3, [r4, #0]
 8008922:	bd38      	pop	{r3, r4, r5, pc}
 8008924:	20000344 	.word	0x20000344

08008928 <_fstat_r>:
 8008928:	b538      	push	{r3, r4, r5, lr}
 800892a:	2300      	movs	r3, #0
 800892c:	4d06      	ldr	r5, [pc, #24]	; (8008948 <_fstat_r+0x20>)
 800892e:	4604      	mov	r4, r0
 8008930:	4608      	mov	r0, r1
 8008932:	4611      	mov	r1, r2
 8008934:	602b      	str	r3, [r5, #0]
 8008936:	f7f8 fe42 	bl	80015be <_fstat>
 800893a:	1c43      	adds	r3, r0, #1
 800893c:	d102      	bne.n	8008944 <_fstat_r+0x1c>
 800893e:	682b      	ldr	r3, [r5, #0]
 8008940:	b103      	cbz	r3, 8008944 <_fstat_r+0x1c>
 8008942:	6023      	str	r3, [r4, #0]
 8008944:	bd38      	pop	{r3, r4, r5, pc}
 8008946:	bf00      	nop
 8008948:	20000344 	.word	0x20000344

0800894c <_isatty_r>:
 800894c:	b538      	push	{r3, r4, r5, lr}
 800894e:	2300      	movs	r3, #0
 8008950:	4d05      	ldr	r5, [pc, #20]	; (8008968 <_isatty_r+0x1c>)
 8008952:	4604      	mov	r4, r0
 8008954:	4608      	mov	r0, r1
 8008956:	602b      	str	r3, [r5, #0]
 8008958:	f7f8 fe40 	bl	80015dc <_isatty>
 800895c:	1c43      	adds	r3, r0, #1
 800895e:	d102      	bne.n	8008966 <_isatty_r+0x1a>
 8008960:	682b      	ldr	r3, [r5, #0]
 8008962:	b103      	cbz	r3, 8008966 <_isatty_r+0x1a>
 8008964:	6023      	str	r3, [r4, #0]
 8008966:	bd38      	pop	{r3, r4, r5, pc}
 8008968:	20000344 	.word	0x20000344

0800896c <_lseek_r>:
 800896c:	b538      	push	{r3, r4, r5, lr}
 800896e:	4604      	mov	r4, r0
 8008970:	4608      	mov	r0, r1
 8008972:	4611      	mov	r1, r2
 8008974:	2200      	movs	r2, #0
 8008976:	4d05      	ldr	r5, [pc, #20]	; (800898c <_lseek_r+0x20>)
 8008978:	602a      	str	r2, [r5, #0]
 800897a:	461a      	mov	r2, r3
 800897c:	f7f8 fe38 	bl	80015f0 <_lseek>
 8008980:	1c43      	adds	r3, r0, #1
 8008982:	d102      	bne.n	800898a <_lseek_r+0x1e>
 8008984:	682b      	ldr	r3, [r5, #0]
 8008986:	b103      	cbz	r3, 800898a <_lseek_r+0x1e>
 8008988:	6023      	str	r3, [r4, #0]
 800898a:	bd38      	pop	{r3, r4, r5, pc}
 800898c:	20000344 	.word	0x20000344

08008990 <_read_r>:
 8008990:	b538      	push	{r3, r4, r5, lr}
 8008992:	4604      	mov	r4, r0
 8008994:	4608      	mov	r0, r1
 8008996:	4611      	mov	r1, r2
 8008998:	2200      	movs	r2, #0
 800899a:	4d05      	ldr	r5, [pc, #20]	; (80089b0 <_read_r+0x20>)
 800899c:	602a      	str	r2, [r5, #0]
 800899e:	461a      	mov	r2, r3
 80089a0:	f7f8 fdc9 	bl	8001536 <_read>
 80089a4:	1c43      	adds	r3, r0, #1
 80089a6:	d102      	bne.n	80089ae <_read_r+0x1e>
 80089a8:	682b      	ldr	r3, [r5, #0]
 80089aa:	b103      	cbz	r3, 80089ae <_read_r+0x1e>
 80089ac:	6023      	str	r3, [r4, #0]
 80089ae:	bd38      	pop	{r3, r4, r5, pc}
 80089b0:	20000344 	.word	0x20000344

080089b4 <_init>:
 80089b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089b6:	bf00      	nop
 80089b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089ba:	bc08      	pop	{r3}
 80089bc:	469e      	mov	lr, r3
 80089be:	4770      	bx	lr

080089c0 <_fini>:
 80089c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089c2:	bf00      	nop
 80089c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089c6:	bc08      	pop	{r3}
 80089c8:	469e      	mov	lr, r3
 80089ca:	4770      	bx	lr
