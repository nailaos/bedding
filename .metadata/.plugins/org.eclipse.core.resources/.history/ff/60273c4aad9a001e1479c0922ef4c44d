#include "game.h"
#include "usart.h"
#include <stdlib.h>

#define SPE 20
#define WOOL 16
#define Le 0.5

int myMap[8][8] = { {0,4,0,0,0,0,0,0},
					{0,0,0,16,0,0,0,0},
					{0,0,16,0,0,0,0,0},
					{0,0,0,0,16,0,0,0},
					{0,0,0,0,0,0,16,0},
					{0,0,0,0,0,16,0,0},
					{0,0,0,0,0,0,0,4},
					{0,0,0,0,0,0,0,0},};
int visited[8][8];
Position_edc25* myPath;
int myBase[2] = { 0, 0 };
int pathLen;
int dx[4] = { 0, 1, 0, -1 };
int dy[4] = { 1, 0, -1, 0 };
int consume[5] = { 32, 32,64,2,4 };
int maxMinerNum = 0;
int tryNum = 0;
int upperLimit = 56;

void initMap(char* mapInfo) {
    for (int i = 0; i < 64; i++) {
        int x = i / 8;
        int y = i % 8;
        int val = mapInfo[i] - '0';
        myMap[x][y] = val;
        upperLimit += val;
    }
}

void printMap() {
    for (int i = 0; i < 8; i++) {
        for (int j = 0; j < 8; j++)
            u1_printf("%d ", myMap[i][j]);
        u1_printf("\n");
    }
}


int getMapId(Position_edc25* points) {
    int x = (int)points->posx;
    int y = (int)points->posy;
    return 8 * y + x;
}

int findPath(int x, int y, int currMiner, int woolNum, Position_edc25* path, int* len) {
    currMiner += myMap[x][y];
    visited[x][y] = 1;
    if (woolNum == 0) {
        if (currMiner > maxMinerNum) {
            maxMinerNum = currMiner;
            path[*len].posx = (float)y + 0.5;
            path[*len].posy = (float)x + 0.5;
            *len = *len + 1;
            pathLen = *len;
            for (int i = 0; i < pathLen; i++)
                myPath[i] = path[i];
            *len = *len - 1;
            if (maxMinerNum == upperLimit / 2)
                return 1;
        }
        tryNum++;
        visited[x][y] = 0;
        return 0;
    }
    for (int i = 0; i < 4; i++) {
        int nx = x + dx[i];
        int ny = y + dy[i];
        if (nx < 0 || nx>7 || ny < 0 || ny > 7)
            continue;
        if (visited[nx][ny])
            continue;
        path[*len].posx = (float)y + 0.5;
        path[*len].posy = (float)x + 0.5;
        *len = *len + 1;
        if (findPath(nx, ny, currMiner, woolNum - 1, path, len))
            return 1;
        *len = *len - 1;
    }
    visited[x][y] = 0;
    return 0;
}

void printPath() {
    u1_printf("final length of path is %d\n", pathLen);

    for (int i = 0; i < pathLen; i++) {
        u1_printf("[%f, %f]", myPath[i].posx, myPath[i].posy);
        if (i < pathLen - 1)
            u1_printf("->");
    }
    u1_printf("\n");

    u1_printf("tryNum is %d\n", tryNum);
    u1_printf("the max mineral is %d\n", maxMinerNum);
}

int arrive(Position_edc25* from, Position_edc25* to) {
    Position_edc25 curr;
    getPosition(&curr);
    float distance = (to->posx - curr.posx) * (to->posx - curr.posx) + (to->posy - curr.posy)*(to->posy - curr.posy);
    if (distance < LEN)
        return 1;
    return 0;
}

int accident() {
    if (!getHealth()) {
        u1_printf("accident\n");
        return 1;
    }
    return 0;
}

int putWool(Position_edc25* from, Position_edc25* to) {
    // Position_edc25 curr;
    // getPosition(&curr);
    int id = getMapId(to);
    // if (abs(from->posx - to->posx) < 0.5) {
    //     if (from->posy > to->posy)
    //         id -= 8;
    //     else
    //         id += 8;
    // } else {
    //     if (from->posx > to->posx)
    //         id -= 1;
    //     else
    //         id += 1;
    // }
    if (!getHeightOfId(id)) {
        if (getWoolCount() == 0)
            return 0;
        else
            place_block_id(id);
    }
    return 1;
}

int getdir(Position_edc25* from, Position_edc25* to) {
    if (myBase[0] == 0) {
        if (abs(from->posx - to->posx) < 0.5) {
            if (to->posy > from->posy)
                return 0;
            else
                return 1;
        } else {
            if (to->posx < from->posx)
                return 2;
            else
                return 3;
        }
    } else {
        if (abs(from->posx - to->posx) < 0.5) {
            if (to->posy > from->posy)
                return 1;
            else
                return 0;
        } else {
            if (to->posx < from->posx)
                return 3;
            else
                return 2;
        }
    }
    return 0;
}

int mymove(Position_edc25* from, Position_edc25* to) {
    setv(SPE);
    setdir(getdir(from,to));
    u1_printf("seted\n");
    while (!arrive(from, to)) {
        if (!putWool(from, to) || accident()) {
            setv(0);
            return 0;
        }
        u1_printf("running\n");
    }
    u1_printf("finish\n");
    setv(0);
    return 1;
}

int myMove() {
    for (int i = 1; i < pathLen; i++)
        if (!mymove(&myPath[i - 1], &myPath[i]))
            return 0;
    for (int i = pathLen - 1; i > 0; i--)
        if (!mymove(&myPath[i], &myPath[i - 1]))
            return 0;
    return 1;
}

void moveHome() {
    u1_printf("go to home\n");
}

int decide() {
    Position_edc25* tmp = (Position_edc25*)calloc(64, sizeof(Position_edc25));
    int len = 0;
    for (int i = 0; i < 8; i++)
        for (int j = 0; j < 8; j++)
            visited[i][j] = 0;
    tryNum = 0;
    findPath(myBase[0], myBase[1], 0, getWoolCount(), tmp, &len);
    free(tmp);
    return 0;
}

int availableBuy(int x) {
    return getEmeraldCount() > consume[x];
}

void myTrade() {
    int woolcount = getWoolCount();
    if (woolcount < WOOL / 2) {
        for (int i = 0; i < WOOL - woolcount; i++) {
            if (!availableBuy(3))
                break;
            trade_id(3);
        }
    }
    while (availableBuy(1)) {
        trade_id(1);
    }
}

void executeTask(int x) {
    if (x == 0) {
        printPath();
        myMove();
        int res = myMove();
        if (res)
            myTrade();
        else
            moveHome();
    }
}

void gameRun() {
    myPath = (Position_edc25*)calloc(64, sizeof(Position_edc25));
    Position_edc25 curr;
    getPosition(&curr);
    myBase[0] = (int)curr.posx;
    myBase[1] = (int)curr.posy;
    while (1) {
        int res = decide();
        executeTask(res);
    }
}
