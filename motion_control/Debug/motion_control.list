
motion_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c530  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000051c  0800c718  0800c718  0001c718  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cc34  0800cc34  0002021c  2**0
                  CONTENTS
  4 .ARM          00000000  0800cc34  0800cc34  0002021c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800cc34  0800cc34  0002021c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cc34  0800cc34  0001cc34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cc38  0800cc38  0001cc38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000021c  20000000  0800cc3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000850  2000021c  0800ce58  0002021c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a6c  0800ce58  00020a6c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010707  00000000  00000000  00020245  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cf6  00000000  00000000  0003094c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fd0  00000000  00000000  00033648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000eb0  00000000  00000000  00034618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b2ac  00000000  00000000  000354c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000132e1  00000000  00000000  00050774  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b04f  00000000  00000000  00063a55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000feaa4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005690  00000000  00000000  000feaf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	2000021c 	.word	0x2000021c
 8000204:	00000000 	.word	0x00000000
 8000208:	0800c700 	.word	0x0800c700

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000220 	.word	0x20000220
 8000224:	0800c700 	.word	0x0800c700

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2uiz>:
 8000b60:	004a      	lsls	r2, r1, #1
 8000b62:	d211      	bcs.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d211      	bcs.n	8000b8e <__aeabi_d2uiz+0x2e>
 8000b6a:	d50d      	bpl.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d40e      	bmi.n	8000b94 <__aeabi_d2uiz+0x34>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_d2uiz+0x3a>
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0000 	mov.w	r0, #0
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2f>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba8:	bf24      	itt	cs
 8000baa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bb2:	d90d      	bls.n	8000bd0 <__aeabi_d2f+0x30>
 8000bb4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bbc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bc4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc8:	bf08      	it	eq
 8000bca:	f020 0001 	biceq.w	r0, r0, #1
 8000bce:	4770      	bx	lr
 8000bd0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bd4:	d121      	bne.n	8000c1a <__aeabi_d2f+0x7a>
 8000bd6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bda:	bfbc      	itt	lt
 8000bdc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	4770      	bxlt	lr
 8000be2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000be6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bea:	f1c2 0218 	rsb	r2, r2, #24
 8000bee:	f1c2 0c20 	rsb	ip, r2, #32
 8000bf2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bf6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bfa:	bf18      	it	ne
 8000bfc:	f040 0001 	orrne.w	r0, r0, #1
 8000c00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c0c:	ea40 000c 	orr.w	r0, r0, ip
 8000c10:	fa23 f302 	lsr.w	r3, r3, r2
 8000c14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c18:	e7cc      	b.n	8000bb4 <__aeabi_d2f+0x14>
 8000c1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c1e:	d107      	bne.n	8000c30 <__aeabi_d2f+0x90>
 8000c20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c24:	bf1e      	ittt	ne
 8000c26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c2e:	4770      	bxne	lr
 8000c30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop

08000c40 <__aeabi_frsub>:
 8000c40:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c44:	e002      	b.n	8000c4c <__addsf3>
 8000c46:	bf00      	nop

08000c48 <__aeabi_fsub>:
 8000c48:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c4c <__addsf3>:
 8000c4c:	0042      	lsls	r2, r0, #1
 8000c4e:	bf1f      	itttt	ne
 8000c50:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c54:	ea92 0f03 	teqne	r2, r3
 8000c58:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c5c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c60:	d06a      	beq.n	8000d38 <__addsf3+0xec>
 8000c62:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c66:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c6a:	bfc1      	itttt	gt
 8000c6c:	18d2      	addgt	r2, r2, r3
 8000c6e:	4041      	eorgt	r1, r0
 8000c70:	4048      	eorgt	r0, r1
 8000c72:	4041      	eorgt	r1, r0
 8000c74:	bfb8      	it	lt
 8000c76:	425b      	neglt	r3, r3
 8000c78:	2b19      	cmp	r3, #25
 8000c7a:	bf88      	it	hi
 8000c7c:	4770      	bxhi	lr
 8000c7e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c82:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c86:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c8a:	bf18      	it	ne
 8000c8c:	4240      	negne	r0, r0
 8000c8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c92:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c96:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c9a:	bf18      	it	ne
 8000c9c:	4249      	negne	r1, r1
 8000c9e:	ea92 0f03 	teq	r2, r3
 8000ca2:	d03f      	beq.n	8000d24 <__addsf3+0xd8>
 8000ca4:	f1a2 0201 	sub.w	r2, r2, #1
 8000ca8:	fa41 fc03 	asr.w	ip, r1, r3
 8000cac:	eb10 000c 	adds.w	r0, r0, ip
 8000cb0:	f1c3 0320 	rsb	r3, r3, #32
 8000cb4:	fa01 f103 	lsl.w	r1, r1, r3
 8000cb8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cbc:	d502      	bpl.n	8000cc4 <__addsf3+0x78>
 8000cbe:	4249      	negs	r1, r1
 8000cc0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000cc4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000cc8:	d313      	bcc.n	8000cf2 <__addsf3+0xa6>
 8000cca:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000cce:	d306      	bcc.n	8000cde <__addsf3+0x92>
 8000cd0:	0840      	lsrs	r0, r0, #1
 8000cd2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cd6:	f102 0201 	add.w	r2, r2, #1
 8000cda:	2afe      	cmp	r2, #254	; 0xfe
 8000cdc:	d251      	bcs.n	8000d82 <__addsf3+0x136>
 8000cde:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000ce2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ce6:	bf08      	it	eq
 8000ce8:	f020 0001 	biceq.w	r0, r0, #1
 8000cec:	ea40 0003 	orr.w	r0, r0, r3
 8000cf0:	4770      	bx	lr
 8000cf2:	0049      	lsls	r1, r1, #1
 8000cf4:	eb40 0000 	adc.w	r0, r0, r0
 8000cf8:	3a01      	subs	r2, #1
 8000cfa:	bf28      	it	cs
 8000cfc:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d00:	d2ed      	bcs.n	8000cde <__addsf3+0x92>
 8000d02:	fab0 fc80 	clz	ip, r0
 8000d06:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d0a:	ebb2 020c 	subs.w	r2, r2, ip
 8000d0e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d12:	bfaa      	itet	ge
 8000d14:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d18:	4252      	neglt	r2, r2
 8000d1a:	4318      	orrge	r0, r3
 8000d1c:	bfbc      	itt	lt
 8000d1e:	40d0      	lsrlt	r0, r2
 8000d20:	4318      	orrlt	r0, r3
 8000d22:	4770      	bx	lr
 8000d24:	f092 0f00 	teq	r2, #0
 8000d28:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d2c:	bf06      	itte	eq
 8000d2e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d32:	3201      	addeq	r2, #1
 8000d34:	3b01      	subne	r3, #1
 8000d36:	e7b5      	b.n	8000ca4 <__addsf3+0x58>
 8000d38:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d3c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d40:	bf18      	it	ne
 8000d42:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d46:	d021      	beq.n	8000d8c <__addsf3+0x140>
 8000d48:	ea92 0f03 	teq	r2, r3
 8000d4c:	d004      	beq.n	8000d58 <__addsf3+0x10c>
 8000d4e:	f092 0f00 	teq	r2, #0
 8000d52:	bf08      	it	eq
 8000d54:	4608      	moveq	r0, r1
 8000d56:	4770      	bx	lr
 8000d58:	ea90 0f01 	teq	r0, r1
 8000d5c:	bf1c      	itt	ne
 8000d5e:	2000      	movne	r0, #0
 8000d60:	4770      	bxne	lr
 8000d62:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d66:	d104      	bne.n	8000d72 <__addsf3+0x126>
 8000d68:	0040      	lsls	r0, r0, #1
 8000d6a:	bf28      	it	cs
 8000d6c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d70:	4770      	bx	lr
 8000d72:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d76:	bf3c      	itt	cc
 8000d78:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d7c:	4770      	bxcc	lr
 8000d7e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d82:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d86:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d8a:	4770      	bx	lr
 8000d8c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d90:	bf16      	itet	ne
 8000d92:	4608      	movne	r0, r1
 8000d94:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d98:	4601      	movne	r1, r0
 8000d9a:	0242      	lsls	r2, r0, #9
 8000d9c:	bf06      	itte	eq
 8000d9e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000da2:	ea90 0f01 	teqeq	r0, r1
 8000da6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000daa:	4770      	bx	lr

08000dac <__aeabi_ui2f>:
 8000dac:	f04f 0300 	mov.w	r3, #0
 8000db0:	e004      	b.n	8000dbc <__aeabi_i2f+0x8>
 8000db2:	bf00      	nop

08000db4 <__aeabi_i2f>:
 8000db4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000db8:	bf48      	it	mi
 8000dba:	4240      	negmi	r0, r0
 8000dbc:	ea5f 0c00 	movs.w	ip, r0
 8000dc0:	bf08      	it	eq
 8000dc2:	4770      	bxeq	lr
 8000dc4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000dc8:	4601      	mov	r1, r0
 8000dca:	f04f 0000 	mov.w	r0, #0
 8000dce:	e01c      	b.n	8000e0a <__aeabi_l2f+0x2a>

08000dd0 <__aeabi_ul2f>:
 8000dd0:	ea50 0201 	orrs.w	r2, r0, r1
 8000dd4:	bf08      	it	eq
 8000dd6:	4770      	bxeq	lr
 8000dd8:	f04f 0300 	mov.w	r3, #0
 8000ddc:	e00a      	b.n	8000df4 <__aeabi_l2f+0x14>
 8000dde:	bf00      	nop

08000de0 <__aeabi_l2f>:
 8000de0:	ea50 0201 	orrs.w	r2, r0, r1
 8000de4:	bf08      	it	eq
 8000de6:	4770      	bxeq	lr
 8000de8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000dec:	d502      	bpl.n	8000df4 <__aeabi_l2f+0x14>
 8000dee:	4240      	negs	r0, r0
 8000df0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000df4:	ea5f 0c01 	movs.w	ip, r1
 8000df8:	bf02      	ittt	eq
 8000dfa:	4684      	moveq	ip, r0
 8000dfc:	4601      	moveq	r1, r0
 8000dfe:	2000      	moveq	r0, #0
 8000e00:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e04:	bf08      	it	eq
 8000e06:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e0a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e0e:	fabc f28c 	clz	r2, ip
 8000e12:	3a08      	subs	r2, #8
 8000e14:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e18:	db10      	blt.n	8000e3c <__aeabi_l2f+0x5c>
 8000e1a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e1e:	4463      	add	r3, ip
 8000e20:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e24:	f1c2 0220 	rsb	r2, r2, #32
 8000e28:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e2c:	fa20 f202 	lsr.w	r2, r0, r2
 8000e30:	eb43 0002 	adc.w	r0, r3, r2
 8000e34:	bf08      	it	eq
 8000e36:	f020 0001 	biceq.w	r0, r0, #1
 8000e3a:	4770      	bx	lr
 8000e3c:	f102 0220 	add.w	r2, r2, #32
 8000e40:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e44:	f1c2 0220 	rsb	r2, r2, #32
 8000e48:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e4c:	fa21 f202 	lsr.w	r2, r1, r2
 8000e50:	eb43 0002 	adc.w	r0, r3, r2
 8000e54:	bf08      	it	eq
 8000e56:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e5a:	4770      	bx	lr

08000e5c <__aeabi_fmul>:
 8000e5c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e60:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e64:	bf1e      	ittt	ne
 8000e66:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e6a:	ea92 0f0c 	teqne	r2, ip
 8000e6e:	ea93 0f0c 	teqne	r3, ip
 8000e72:	d06f      	beq.n	8000f54 <__aeabi_fmul+0xf8>
 8000e74:	441a      	add	r2, r3
 8000e76:	ea80 0c01 	eor.w	ip, r0, r1
 8000e7a:	0240      	lsls	r0, r0, #9
 8000e7c:	bf18      	it	ne
 8000e7e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e82:	d01e      	beq.n	8000ec2 <__aeabi_fmul+0x66>
 8000e84:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e88:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e8c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e90:	fba0 3101 	umull	r3, r1, r0, r1
 8000e94:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e98:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e9c:	bf3e      	ittt	cc
 8000e9e:	0049      	lslcc	r1, r1, #1
 8000ea0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000ea4:	005b      	lslcc	r3, r3, #1
 8000ea6:	ea40 0001 	orr.w	r0, r0, r1
 8000eaa:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000eae:	2afd      	cmp	r2, #253	; 0xfd
 8000eb0:	d81d      	bhi.n	8000eee <__aeabi_fmul+0x92>
 8000eb2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000eb6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000eba:	bf08      	it	eq
 8000ebc:	f020 0001 	biceq.w	r0, r0, #1
 8000ec0:	4770      	bx	lr
 8000ec2:	f090 0f00 	teq	r0, #0
 8000ec6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000eca:	bf08      	it	eq
 8000ecc:	0249      	lsleq	r1, r1, #9
 8000ece:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ed2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000ed6:	3a7f      	subs	r2, #127	; 0x7f
 8000ed8:	bfc2      	ittt	gt
 8000eda:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ede:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ee2:	4770      	bxgt	lr
 8000ee4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee8:	f04f 0300 	mov.w	r3, #0
 8000eec:	3a01      	subs	r2, #1
 8000eee:	dc5d      	bgt.n	8000fac <__aeabi_fmul+0x150>
 8000ef0:	f112 0f19 	cmn.w	r2, #25
 8000ef4:	bfdc      	itt	le
 8000ef6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000efa:	4770      	bxle	lr
 8000efc:	f1c2 0200 	rsb	r2, r2, #0
 8000f00:	0041      	lsls	r1, r0, #1
 8000f02:	fa21 f102 	lsr.w	r1, r1, r2
 8000f06:	f1c2 0220 	rsb	r2, r2, #32
 8000f0a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000f0e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000f12:	f140 0000 	adc.w	r0, r0, #0
 8000f16:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000f1a:	bf08      	it	eq
 8000f1c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000f20:	4770      	bx	lr
 8000f22:	f092 0f00 	teq	r2, #0
 8000f26:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f2a:	bf02      	ittt	eq
 8000f2c:	0040      	lsleq	r0, r0, #1
 8000f2e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f32:	3a01      	subeq	r2, #1
 8000f34:	d0f9      	beq.n	8000f2a <__aeabi_fmul+0xce>
 8000f36:	ea40 000c 	orr.w	r0, r0, ip
 8000f3a:	f093 0f00 	teq	r3, #0
 8000f3e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f42:	bf02      	ittt	eq
 8000f44:	0049      	lsleq	r1, r1, #1
 8000f46:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f4a:	3b01      	subeq	r3, #1
 8000f4c:	d0f9      	beq.n	8000f42 <__aeabi_fmul+0xe6>
 8000f4e:	ea41 010c 	orr.w	r1, r1, ip
 8000f52:	e78f      	b.n	8000e74 <__aeabi_fmul+0x18>
 8000f54:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f58:	ea92 0f0c 	teq	r2, ip
 8000f5c:	bf18      	it	ne
 8000f5e:	ea93 0f0c 	teqne	r3, ip
 8000f62:	d00a      	beq.n	8000f7a <__aeabi_fmul+0x11e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f6e:	d1d8      	bne.n	8000f22 <__aeabi_fmul+0xc6>
 8000f70:	ea80 0001 	eor.w	r0, r0, r1
 8000f74:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f78:	4770      	bx	lr
 8000f7a:	f090 0f00 	teq	r0, #0
 8000f7e:	bf17      	itett	ne
 8000f80:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f84:	4608      	moveq	r0, r1
 8000f86:	f091 0f00 	teqne	r1, #0
 8000f8a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000f8e:	d014      	beq.n	8000fba <__aeabi_fmul+0x15e>
 8000f90:	ea92 0f0c 	teq	r2, ip
 8000f94:	d101      	bne.n	8000f9a <__aeabi_fmul+0x13e>
 8000f96:	0242      	lsls	r2, r0, #9
 8000f98:	d10f      	bne.n	8000fba <__aeabi_fmul+0x15e>
 8000f9a:	ea93 0f0c 	teq	r3, ip
 8000f9e:	d103      	bne.n	8000fa8 <__aeabi_fmul+0x14c>
 8000fa0:	024b      	lsls	r3, r1, #9
 8000fa2:	bf18      	it	ne
 8000fa4:	4608      	movne	r0, r1
 8000fa6:	d108      	bne.n	8000fba <__aeabi_fmul+0x15e>
 8000fa8:	ea80 0001 	eor.w	r0, r0, r1
 8000fac:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000fb0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000fb4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fb8:	4770      	bx	lr
 8000fba:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000fbe:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000fc2:	4770      	bx	lr

08000fc4 <__aeabi_fdiv>:
 8000fc4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000fc8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000fcc:	bf1e      	ittt	ne
 8000fce:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000fd2:	ea92 0f0c 	teqne	r2, ip
 8000fd6:	ea93 0f0c 	teqne	r3, ip
 8000fda:	d069      	beq.n	80010b0 <__aeabi_fdiv+0xec>
 8000fdc:	eba2 0203 	sub.w	r2, r2, r3
 8000fe0:	ea80 0c01 	eor.w	ip, r0, r1
 8000fe4:	0249      	lsls	r1, r1, #9
 8000fe6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000fea:	d037      	beq.n	800105c <__aeabi_fdiv+0x98>
 8000fec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ff0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ff4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ff8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ffc:	428b      	cmp	r3, r1
 8000ffe:	bf38      	it	cc
 8001000:	005b      	lslcc	r3, r3, #1
 8001002:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8001006:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800100a:	428b      	cmp	r3, r1
 800100c:	bf24      	itt	cs
 800100e:	1a5b      	subcs	r3, r3, r1
 8001010:	ea40 000c 	orrcs.w	r0, r0, ip
 8001014:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8001018:	bf24      	itt	cs
 800101a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800101e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8001022:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8001026:	bf24      	itt	cs
 8001028:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800102c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8001030:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8001034:	bf24      	itt	cs
 8001036:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800103a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800103e:	011b      	lsls	r3, r3, #4
 8001040:	bf18      	it	ne
 8001042:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8001046:	d1e0      	bne.n	800100a <__aeabi_fdiv+0x46>
 8001048:	2afd      	cmp	r2, #253	; 0xfd
 800104a:	f63f af50 	bhi.w	8000eee <__aeabi_fmul+0x92>
 800104e:	428b      	cmp	r3, r1
 8001050:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8001054:	bf08      	it	eq
 8001056:	f020 0001 	biceq.w	r0, r0, #1
 800105a:	4770      	bx	lr
 800105c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8001060:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8001064:	327f      	adds	r2, #127	; 0x7f
 8001066:	bfc2      	ittt	gt
 8001068:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800106c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001070:	4770      	bxgt	lr
 8001072:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001076:	f04f 0300 	mov.w	r3, #0
 800107a:	3a01      	subs	r2, #1
 800107c:	e737      	b.n	8000eee <__aeabi_fmul+0x92>
 800107e:	f092 0f00 	teq	r2, #0
 8001082:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8001086:	bf02      	ittt	eq
 8001088:	0040      	lsleq	r0, r0, #1
 800108a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800108e:	3a01      	subeq	r2, #1
 8001090:	d0f9      	beq.n	8001086 <__aeabi_fdiv+0xc2>
 8001092:	ea40 000c 	orr.w	r0, r0, ip
 8001096:	f093 0f00 	teq	r3, #0
 800109a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800109e:	bf02      	ittt	eq
 80010a0:	0049      	lsleq	r1, r1, #1
 80010a2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80010a6:	3b01      	subeq	r3, #1
 80010a8:	d0f9      	beq.n	800109e <__aeabi_fdiv+0xda>
 80010aa:	ea41 010c 	orr.w	r1, r1, ip
 80010ae:	e795      	b.n	8000fdc <__aeabi_fdiv+0x18>
 80010b0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80010b4:	ea92 0f0c 	teq	r2, ip
 80010b8:	d108      	bne.n	80010cc <__aeabi_fdiv+0x108>
 80010ba:	0242      	lsls	r2, r0, #9
 80010bc:	f47f af7d 	bne.w	8000fba <__aeabi_fmul+0x15e>
 80010c0:	ea93 0f0c 	teq	r3, ip
 80010c4:	f47f af70 	bne.w	8000fa8 <__aeabi_fmul+0x14c>
 80010c8:	4608      	mov	r0, r1
 80010ca:	e776      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010cc:	ea93 0f0c 	teq	r3, ip
 80010d0:	d104      	bne.n	80010dc <__aeabi_fdiv+0x118>
 80010d2:	024b      	lsls	r3, r1, #9
 80010d4:	f43f af4c 	beq.w	8000f70 <__aeabi_fmul+0x114>
 80010d8:	4608      	mov	r0, r1
 80010da:	e76e      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010dc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80010e0:	bf18      	it	ne
 80010e2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80010e6:	d1ca      	bne.n	800107e <__aeabi_fdiv+0xba>
 80010e8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80010ec:	f47f af5c 	bne.w	8000fa8 <__aeabi_fmul+0x14c>
 80010f0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80010f4:	f47f af3c 	bne.w	8000f70 <__aeabi_fmul+0x114>
 80010f8:	e75f      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010fa:	bf00      	nop

080010fc <__gesf2>:
 80010fc:	f04f 3cff 	mov.w	ip, #4294967295
 8001100:	e006      	b.n	8001110 <__cmpsf2+0x4>
 8001102:	bf00      	nop

08001104 <__lesf2>:
 8001104:	f04f 0c01 	mov.w	ip, #1
 8001108:	e002      	b.n	8001110 <__cmpsf2+0x4>
 800110a:	bf00      	nop

0800110c <__cmpsf2>:
 800110c:	f04f 0c01 	mov.w	ip, #1
 8001110:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001114:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001118:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800111c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001120:	bf18      	it	ne
 8001122:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001126:	d011      	beq.n	800114c <__cmpsf2+0x40>
 8001128:	b001      	add	sp, #4
 800112a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800112e:	bf18      	it	ne
 8001130:	ea90 0f01 	teqne	r0, r1
 8001134:	bf58      	it	pl
 8001136:	ebb2 0003 	subspl.w	r0, r2, r3
 800113a:	bf88      	it	hi
 800113c:	17c8      	asrhi	r0, r1, #31
 800113e:	bf38      	it	cc
 8001140:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001144:	bf18      	it	ne
 8001146:	f040 0001 	orrne.w	r0, r0, #1
 800114a:	4770      	bx	lr
 800114c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001150:	d102      	bne.n	8001158 <__cmpsf2+0x4c>
 8001152:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001156:	d105      	bne.n	8001164 <__cmpsf2+0x58>
 8001158:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800115c:	d1e4      	bne.n	8001128 <__cmpsf2+0x1c>
 800115e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001162:	d0e1      	beq.n	8001128 <__cmpsf2+0x1c>
 8001164:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop

0800116c <__aeabi_cfrcmple>:
 800116c:	4684      	mov	ip, r0
 800116e:	4608      	mov	r0, r1
 8001170:	4661      	mov	r1, ip
 8001172:	e7ff      	b.n	8001174 <__aeabi_cfcmpeq>

08001174 <__aeabi_cfcmpeq>:
 8001174:	b50f      	push	{r0, r1, r2, r3, lr}
 8001176:	f7ff ffc9 	bl	800110c <__cmpsf2>
 800117a:	2800      	cmp	r0, #0
 800117c:	bf48      	it	mi
 800117e:	f110 0f00 	cmnmi.w	r0, #0
 8001182:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001184 <__aeabi_fcmpeq>:
 8001184:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001188:	f7ff fff4 	bl	8001174 <__aeabi_cfcmpeq>
 800118c:	bf0c      	ite	eq
 800118e:	2001      	moveq	r0, #1
 8001190:	2000      	movne	r0, #0
 8001192:	f85d fb08 	ldr.w	pc, [sp], #8
 8001196:	bf00      	nop

08001198 <__aeabi_fcmplt>:
 8001198:	f84d ed08 	str.w	lr, [sp, #-8]!
 800119c:	f7ff ffea 	bl	8001174 <__aeabi_cfcmpeq>
 80011a0:	bf34      	ite	cc
 80011a2:	2001      	movcc	r0, #1
 80011a4:	2000      	movcs	r0, #0
 80011a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80011aa:	bf00      	nop

080011ac <__aeabi_fcmple>:
 80011ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011b0:	f7ff ffe0 	bl	8001174 <__aeabi_cfcmpeq>
 80011b4:	bf94      	ite	ls
 80011b6:	2001      	movls	r0, #1
 80011b8:	2000      	movhi	r0, #0
 80011ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80011be:	bf00      	nop

080011c0 <__aeabi_fcmpge>:
 80011c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011c4:	f7ff ffd2 	bl	800116c <__aeabi_cfrcmple>
 80011c8:	bf94      	ite	ls
 80011ca:	2001      	movls	r0, #1
 80011cc:	2000      	movhi	r0, #0
 80011ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80011d2:	bf00      	nop

080011d4 <__aeabi_fcmpgt>:
 80011d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011d8:	f7ff ffc8 	bl	800116c <__aeabi_cfrcmple>
 80011dc:	bf34      	ite	cc
 80011de:	2001      	movcc	r0, #1
 80011e0:	2000      	movcs	r0, #0
 80011e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80011e6:	bf00      	nop

080011e8 <__aeabi_f2iz>:
 80011e8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80011ec:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80011f0:	d30f      	bcc.n	8001212 <__aeabi_f2iz+0x2a>
 80011f2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80011f6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80011fa:	d90d      	bls.n	8001218 <__aeabi_f2iz+0x30>
 80011fc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001200:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001204:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001208:	fa23 f002 	lsr.w	r0, r3, r2
 800120c:	bf18      	it	ne
 800120e:	4240      	negne	r0, r0
 8001210:	4770      	bx	lr
 8001212:	f04f 0000 	mov.w	r0, #0
 8001216:	4770      	bx	lr
 8001218:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800121c:	d101      	bne.n	8001222 <__aeabi_f2iz+0x3a>
 800121e:	0242      	lsls	r2, r0, #9
 8001220:	d105      	bne.n	800122e <__aeabi_f2iz+0x46>
 8001222:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001226:	bf08      	it	eq
 8001228:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800122c:	4770      	bx	lr
 800122e:	f04f 0000 	mov.w	r0, #0
 8001232:	4770      	bx	lr

08001234 <__aeabi_d2lz>:
 8001234:	b538      	push	{r3, r4, r5, lr}
 8001236:	4605      	mov	r5, r0
 8001238:	460c      	mov	r4, r1
 800123a:	2200      	movs	r2, #0
 800123c:	2300      	movs	r3, #0
 800123e:	4628      	mov	r0, r5
 8001240:	4621      	mov	r1, r4
 8001242:	f7ff fc27 	bl	8000a94 <__aeabi_dcmplt>
 8001246:	b928      	cbnz	r0, 8001254 <__aeabi_d2lz+0x20>
 8001248:	4628      	mov	r0, r5
 800124a:	4621      	mov	r1, r4
 800124c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001250:	f000 b80a 	b.w	8001268 <__aeabi_d2ulz>
 8001254:	4628      	mov	r0, r5
 8001256:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 800125a:	f000 f805 	bl	8001268 <__aeabi_d2ulz>
 800125e:	4240      	negs	r0, r0
 8001260:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001264:	bd38      	pop	{r3, r4, r5, pc}
 8001266:	bf00      	nop

08001268 <__aeabi_d2ulz>:
 8001268:	b5d0      	push	{r4, r6, r7, lr}
 800126a:	2200      	movs	r2, #0
 800126c:	4b0b      	ldr	r3, [pc, #44]	; (800129c <__aeabi_d2ulz+0x34>)
 800126e:	4606      	mov	r6, r0
 8001270:	460f      	mov	r7, r1
 8001272:	f7ff f99d 	bl	80005b0 <__aeabi_dmul>
 8001276:	f7ff fc73 	bl	8000b60 <__aeabi_d2uiz>
 800127a:	4604      	mov	r4, r0
 800127c:	f7ff f91e 	bl	80004bc <__aeabi_ui2d>
 8001280:	2200      	movs	r2, #0
 8001282:	4b07      	ldr	r3, [pc, #28]	; (80012a0 <__aeabi_d2ulz+0x38>)
 8001284:	f7ff f994 	bl	80005b0 <__aeabi_dmul>
 8001288:	4602      	mov	r2, r0
 800128a:	460b      	mov	r3, r1
 800128c:	4630      	mov	r0, r6
 800128e:	4639      	mov	r1, r7
 8001290:	f7fe ffd6 	bl	8000240 <__aeabi_dsub>
 8001294:	f7ff fc64 	bl	8000b60 <__aeabi_d2uiz>
 8001298:	4621      	mov	r1, r4
 800129a:	bdd0      	pop	{r4, r6, r7, pc}
 800129c:	3df00000 	.word	0x3df00000
 80012a0:	41f00000 	.word	0x41f00000

080012a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012aa:	4b1a      	ldr	r3, [pc, #104]	; (8001314 <MX_DMA_Init+0x70>)
 80012ac:	695b      	ldr	r3, [r3, #20]
 80012ae:	4a19      	ldr	r2, [pc, #100]	; (8001314 <MX_DMA_Init+0x70>)
 80012b0:	f043 0301 	orr.w	r3, r3, #1
 80012b4:	6153      	str	r3, [r2, #20]
 80012b6:	4b17      	ldr	r3, [pc, #92]	; (8001314 <MX_DMA_Init+0x70>)
 80012b8:	695b      	ldr	r3, [r3, #20]
 80012ba:	f003 0301 	and.w	r3, r3, #1
 80012be:	607b      	str	r3, [r7, #4]
 80012c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80012c2:	4b14      	ldr	r3, [pc, #80]	; (8001314 <MX_DMA_Init+0x70>)
 80012c4:	695b      	ldr	r3, [r3, #20]
 80012c6:	4a13      	ldr	r2, [pc, #76]	; (8001314 <MX_DMA_Init+0x70>)
 80012c8:	f043 0302 	orr.w	r3, r3, #2
 80012cc:	6153      	str	r3, [r2, #20]
 80012ce:	4b11      	ldr	r3, [pc, #68]	; (8001314 <MX_DMA_Init+0x70>)
 80012d0:	695b      	ldr	r3, [r3, #20]
 80012d2:	f003 0302 	and.w	r3, r3, #2
 80012d6:	603b      	str	r3, [r7, #0]
 80012d8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80012da:	2200      	movs	r2, #0
 80012dc:	2100      	movs	r1, #0
 80012de:	200d      	movs	r0, #13
 80012e0:	f003 f9bf 	bl	8004662 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80012e4:	200d      	movs	r0, #13
 80012e6:	f003 f9d8 	bl	800469a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80012ea:	2200      	movs	r2, #0
 80012ec:	2100      	movs	r1, #0
 80012ee:	2010      	movs	r0, #16
 80012f0:	f003 f9b7 	bl	8004662 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80012f4:	2010      	movs	r0, #16
 80012f6:	f003 f9d0 	bl	800469a <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 0, 0);
 80012fa:	2200      	movs	r2, #0
 80012fc:	2100      	movs	r1, #0
 80012fe:	203a      	movs	r0, #58	; 0x3a
 8001300:	f003 f9af 	bl	8004662 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 8001304:	203a      	movs	r0, #58	; 0x3a
 8001306:	f003 f9c8 	bl	800469a <HAL_NVIC_EnableIRQ>

}
 800130a:	bf00      	nop
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	40021000 	.word	0x40021000

08001318 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b088      	sub	sp, #32
 800131c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800131e:	f107 0310 	add.w	r3, r7, #16
 8001322:	2200      	movs	r2, #0
 8001324:	601a      	str	r2, [r3, #0]
 8001326:	605a      	str	r2, [r3, #4]
 8001328:	609a      	str	r2, [r3, #8]
 800132a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800132c:	4b23      	ldr	r3, [pc, #140]	; (80013bc <MX_GPIO_Init+0xa4>)
 800132e:	699b      	ldr	r3, [r3, #24]
 8001330:	4a22      	ldr	r2, [pc, #136]	; (80013bc <MX_GPIO_Init+0xa4>)
 8001332:	f043 0320 	orr.w	r3, r3, #32
 8001336:	6193      	str	r3, [r2, #24]
 8001338:	4b20      	ldr	r3, [pc, #128]	; (80013bc <MX_GPIO_Init+0xa4>)
 800133a:	699b      	ldr	r3, [r3, #24]
 800133c:	f003 0320 	and.w	r3, r3, #32
 8001340:	60fb      	str	r3, [r7, #12]
 8001342:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001344:	4b1d      	ldr	r3, [pc, #116]	; (80013bc <MX_GPIO_Init+0xa4>)
 8001346:	699b      	ldr	r3, [r3, #24]
 8001348:	4a1c      	ldr	r2, [pc, #112]	; (80013bc <MX_GPIO_Init+0xa4>)
 800134a:	f043 0310 	orr.w	r3, r3, #16
 800134e:	6193      	str	r3, [r2, #24]
 8001350:	4b1a      	ldr	r3, [pc, #104]	; (80013bc <MX_GPIO_Init+0xa4>)
 8001352:	699b      	ldr	r3, [r3, #24]
 8001354:	f003 0310 	and.w	r3, r3, #16
 8001358:	60bb      	str	r3, [r7, #8]
 800135a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800135c:	4b17      	ldr	r3, [pc, #92]	; (80013bc <MX_GPIO_Init+0xa4>)
 800135e:	699b      	ldr	r3, [r3, #24]
 8001360:	4a16      	ldr	r2, [pc, #88]	; (80013bc <MX_GPIO_Init+0xa4>)
 8001362:	f043 0304 	orr.w	r3, r3, #4
 8001366:	6193      	str	r3, [r2, #24]
 8001368:	4b14      	ldr	r3, [pc, #80]	; (80013bc <MX_GPIO_Init+0xa4>)
 800136a:	699b      	ldr	r3, [r3, #24]
 800136c:	f003 0304 	and.w	r3, r3, #4
 8001370:	607b      	str	r3, [r7, #4]
 8001372:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001374:	4b11      	ldr	r3, [pc, #68]	; (80013bc <MX_GPIO_Init+0xa4>)
 8001376:	699b      	ldr	r3, [r3, #24]
 8001378:	4a10      	ldr	r2, [pc, #64]	; (80013bc <MX_GPIO_Init+0xa4>)
 800137a:	f043 0308 	orr.w	r3, r3, #8
 800137e:	6193      	str	r3, [r2, #24]
 8001380:	4b0e      	ldr	r3, [pc, #56]	; (80013bc <MX_GPIO_Init+0xa4>)
 8001382:	699b      	ldr	r3, [r3, #24]
 8001384:	f003 0308 	and.w	r3, r3, #8
 8001388:	603b      	str	r3, [r7, #0]
 800138a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800138c:	2200      	movs	r2, #0
 800138e:	21ff      	movs	r1, #255	; 0xff
 8001390:	480b      	ldr	r0, [pc, #44]	; (80013c0 <MX_GPIO_Init+0xa8>)
 8001392:	f003 ffb5 	bl	8005300 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001396:	23ff      	movs	r3, #255	; 0xff
 8001398:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800139a:	2301      	movs	r3, #1
 800139c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139e:	2300      	movs	r3, #0
 80013a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a2:	2302      	movs	r3, #2
 80013a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013a6:	f107 0310 	add.w	r3, r7, #16
 80013aa:	4619      	mov	r1, r3
 80013ac:	4804      	ldr	r0, [pc, #16]	; (80013c0 <MX_GPIO_Init+0xa8>)
 80013ae:	f003 fe13 	bl	8004fd8 <HAL_GPIO_Init>

}
 80013b2:	bf00      	nop
 80013b4:	3720      	adds	r7, #32
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	40021000 	.word	0x40021000
 80013c0:	40011000 	.word	0x40011000

080013c4 <jy62_Init>:
struct Angl Angle;  //储存角度值
struct Temp Temperature;  //储存温度值
/***********************接口****************************/

void jy62_Init(UART_HandleTypeDef *huart)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
	jy62_huart = huart;
 80013cc:	4a06      	ldr	r2, [pc, #24]	; (80013e8 <jy62_Init+0x24>)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6013      	str	r3, [r2, #0]
    HAL_UART_Receive_DMA(jy62_huart,jy62Receive,JY62_MESSAGE_LENTH);
 80013d2:	4b05      	ldr	r3, [pc, #20]	; (80013e8 <jy62_Init+0x24>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	220b      	movs	r2, #11
 80013d8:	4904      	ldr	r1, [pc, #16]	; (80013ec <jy62_Init+0x28>)
 80013da:	4618      	mov	r0, r3
 80013dc:	f005 fde2 	bl	8006fa4 <HAL_UART_Receive_DMA>
}
 80013e0:	bf00      	nop
 80013e2:	3708      	adds	r7, #8
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	20000250 	.word	0x20000250
 80013ec:	20000238 	.word	0x20000238

080013f0 <jy62MessageRecord>:

void jy62MessageRecord(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0
	if(jy62Receive[0] ==0x55)
 80013f6:	4b1f      	ldr	r3, [pc, #124]	; (8001474 <jy62MessageRecord+0x84>)
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	2b55      	cmp	r3, #85	; 0x55
 80013fe:	d12d      	bne.n	800145c <jy62MessageRecord+0x6c>
	{
		uint8_t sum  = 0x00;
 8001400:	2300      	movs	r3, #0
 8001402:	73fb      	strb	r3, [r7, #15]
		for (int i = 0; i < JY62_MESSAGE_LENTH-1; i++)
 8001404:	2300      	movs	r3, #0
 8001406:	60bb      	str	r3, [r7, #8]
 8001408:	e00a      	b.n	8001420 <jy62MessageRecord+0x30>
		{
			sum += jy62Receive[i];
 800140a:	4a1a      	ldr	r2, [pc, #104]	; (8001474 <jy62MessageRecord+0x84>)
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	4413      	add	r3, r2
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	b2da      	uxtb	r2, r3
 8001414:	7bfb      	ldrb	r3, [r7, #15]
 8001416:	4413      	add	r3, r2
 8001418:	73fb      	strb	r3, [r7, #15]
		for (int i = 0; i < JY62_MESSAGE_LENTH-1; i++)
 800141a:	68bb      	ldr	r3, [r7, #8]
 800141c:	3301      	adds	r3, #1
 800141e:	60bb      	str	r3, [r7, #8]
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	2b09      	cmp	r3, #9
 8001424:	ddf1      	ble.n	800140a <jy62MessageRecord+0x1a>
		}
		if(sum == jy62Receive[JY62_MESSAGE_LENTH-1])
 8001426:	4b13      	ldr	r3, [pc, #76]	; (8001474 <jy62MessageRecord+0x84>)
 8001428:	7a9b      	ldrb	r3, [r3, #10]
 800142a:	b2db      	uxtb	r3, r3
 800142c:	7bfa      	ldrb	r2, [r7, #15]
 800142e:	429a      	cmp	r2, r3
 8001430:	d114      	bne.n	800145c <jy62MessageRecord+0x6c>
		{
			for (int i = 0; i < JY62_MESSAGE_LENTH; i++)
 8001432:	2300      	movs	r3, #0
 8001434:	607b      	str	r3, [r7, #4]
 8001436:	e00c      	b.n	8001452 <jy62MessageRecord+0x62>
			{
				jy62Message[i] = jy62Receive[i];
 8001438:	4a0e      	ldr	r2, [pc, #56]	; (8001474 <jy62MessageRecord+0x84>)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4413      	add	r3, r2
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	b2d9      	uxtb	r1, r3
 8001442:	4a0d      	ldr	r2, [pc, #52]	; (8001478 <jy62MessageRecord+0x88>)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	4413      	add	r3, r2
 8001448:	460a      	mov	r2, r1
 800144a:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < JY62_MESSAGE_LENTH; i++)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	3301      	adds	r3, #1
 8001450:	607b      	str	r3, [r7, #4]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2b0a      	cmp	r3, #10
 8001456:	ddef      	ble.n	8001438 <jy62MessageRecord+0x48>
			}
		    Decode();
 8001458:	f000 f9f4 	bl	8001844 <Decode>
		}
	}
	HAL_UART_Receive_DMA(jy62_huart,jy62Receive,JY62_MESSAGE_LENTH);
 800145c:	4b07      	ldr	r3, [pc, #28]	; (800147c <jy62MessageRecord+0x8c>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	220b      	movs	r2, #11
 8001462:	4904      	ldr	r1, [pc, #16]	; (8001474 <jy62MessageRecord+0x84>)
 8001464:	4618      	mov	r0, r3
 8001466:	f005 fd9d 	bl	8006fa4 <HAL_UART_Receive_DMA>
}
 800146a:	bf00      	nop
 800146c:	3710      	adds	r7, #16
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	20000238 	.word	0x20000238
 8001478:	20000244 	.word	0x20000244
 800147c:	20000250 	.word	0x20000250

08001480 <SetBaud>:

void SetBaud(int Baud)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
	if(Baud == 115200)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
 800148e:	d108      	bne.n	80014a2 <SetBaud+0x22>
	{
		HAL_UART_Transmit(jy62_huart,setBaud115200,3,HAL_MAX_DELAY);
 8001490:	4b0c      	ldr	r3, [pc, #48]	; (80014c4 <SetBaud+0x44>)
 8001492:	6818      	ldr	r0, [r3, #0]
 8001494:	f04f 33ff 	mov.w	r3, #4294967295
 8001498:	2203      	movs	r2, #3
 800149a:	490b      	ldr	r1, [pc, #44]	; (80014c8 <SetBaud+0x48>)
 800149c:	f005 fcff 	bl	8006e9e <HAL_UART_Transmit>
	}
	else if(Baud == 9600)
	{
		HAL_UART_Transmit(jy62_huart,setBaud115200,3,HAL_MAX_DELAY);
	}
}
 80014a0:	e00b      	b.n	80014ba <SetBaud+0x3a>
	else if(Baud == 9600)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
 80014a8:	d107      	bne.n	80014ba <SetBaud+0x3a>
		HAL_UART_Transmit(jy62_huart,setBaud115200,3,HAL_MAX_DELAY);
 80014aa:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <SetBaud+0x44>)
 80014ac:	6818      	ldr	r0, [r3, #0]
 80014ae:	f04f 33ff 	mov.w	r3, #4294967295
 80014b2:	2203      	movs	r2, #3
 80014b4:	4904      	ldr	r1, [pc, #16]	; (80014c8 <SetBaud+0x48>)
 80014b6:	f005 fcf2 	bl	8006e9e <HAL_UART_Transmit>
}
 80014ba:	bf00      	nop
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	20000250 	.word	0x20000250
 80014c8:	20000008 	.word	0x20000008

080014cc <SetVertical>:
{
	HAL_UART_Transmit(jy62_huart,setHorizontal,3,HAL_MAX_DELAY);
}

void SetVertical()
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(jy62_huart,setVertical,3,HAL_MAX_DELAY);
 80014d0:	4b04      	ldr	r3, [pc, #16]	; (80014e4 <SetVertical+0x18>)
 80014d2:	6818      	ldr	r0, [r3, #0]
 80014d4:	f04f 33ff 	mov.w	r3, #4294967295
 80014d8:	2203      	movs	r2, #3
 80014da:	4903      	ldr	r1, [pc, #12]	; (80014e8 <SetVertical+0x1c>)
 80014dc:	f005 fcdf 	bl	8006e9e <HAL_UART_Transmit>
}
 80014e0:	bf00      	nop
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	20000250 	.word	0x20000250
 80014e8:	2000000c 	.word	0x2000000c

080014ec <InitAngle>:

void InitAngle()
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(jy62_huart,initAngle,3,HAL_MAX_DELAY);
 80014f0:	4b04      	ldr	r3, [pc, #16]	; (8001504 <InitAngle+0x18>)
 80014f2:	6818      	ldr	r0, [r3, #0]
 80014f4:	f04f 33ff 	mov.w	r3, #4294967295
 80014f8:	2203      	movs	r2, #3
 80014fa:	4903      	ldr	r1, [pc, #12]	; (8001508 <InitAngle+0x1c>)
 80014fc:	f005 fccf 	bl	8006e9e <HAL_UART_Transmit>
}
 8001500:	bf00      	nop
 8001502:	bd80      	pop	{r7, pc}
 8001504:	20000250 	.word	0x20000250
 8001508:	20000000 	.word	0x20000000

0800150c <Calibrate>:

void Calibrate()
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(jy62_huart,calibrateAcce,3,HAL_MAX_DELAY);
 8001510:	4b04      	ldr	r3, [pc, #16]	; (8001524 <Calibrate+0x18>)
 8001512:	6818      	ldr	r0, [r3, #0]
 8001514:	f04f 33ff 	mov.w	r3, #4294967295
 8001518:	2203      	movs	r2, #3
 800151a:	4903      	ldr	r1, [pc, #12]	; (8001528 <Calibrate+0x1c>)
 800151c:	f005 fcbf 	bl	8006e9e <HAL_UART_Transmit>
}
 8001520:	bf00      	nop
 8001522:	bd80      	pop	{r7, pc}
 8001524:	20000250 	.word	0x20000250
 8001528:	20000004 	.word	0x20000004

0800152c <SleepOrAwake>:

void SleepOrAwake()
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(jy62_huart,sleepAndAwake,3,HAL_MAX_DELAY);
 8001530:	4b04      	ldr	r3, [pc, #16]	; (8001544 <SleepOrAwake+0x18>)
 8001532:	6818      	ldr	r0, [r3, #0]
 8001534:	f04f 33ff 	mov.w	r3, #4294967295
 8001538:	2203      	movs	r2, #3
 800153a:	4903      	ldr	r1, [pc, #12]	; (8001548 <SleepOrAwake+0x1c>)
 800153c:	f005 fcaf 	bl	8006e9e <HAL_UART_Transmit>
}
 8001540:	bf00      	nop
 8001542:	bd80      	pop	{r7, pc}
 8001544:	20000250 	.word	0x20000250
 8001548:	20000010 	.word	0x20000010

0800154c <GetPitch>:
float GetRoll()
{
	return Angle.roll;
}
float GetPitch()
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
	return Angle.pitch;
 8001550:	4b02      	ldr	r3, [pc, #8]	; (800155c <GetPitch+0x10>)
 8001552:	685b      	ldr	r3, [r3, #4]
}
 8001554:	4618      	mov	r0, r3
 8001556:	46bd      	mov	sp, r7
 8001558:	bc80      	pop	{r7}
 800155a:	4770      	bx	lr
 800155c:	2000026c 	.word	0x2000026c

08001560 <GetYaw>:
float GetYaw()
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
	return Angle.yaw;
 8001564:	4b02      	ldr	r3, [pc, #8]	; (8001570 <GetYaw+0x10>)
 8001566:	689b      	ldr	r3, [r3, #8]
}
 8001568:	4618      	mov	r0, r3
 800156a:	46bd      	mov	sp, r7
 800156c:	bc80      	pop	{r7}
 800156e:	4770      	bx	lr
 8001570:	2000026c 	.word	0x2000026c

08001574 <DecodeAngle>:


/***************************************************/

void DecodeAngle()
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
	Angle.roll = (float)((jy62Message[3]<<8)|jy62Message[2])/32768 * 180 ;
 8001578:	4b27      	ldr	r3, [pc, #156]	; (8001618 <DecodeAngle+0xa4>)
 800157a:	78db      	ldrb	r3, [r3, #3]
 800157c:	b2db      	uxtb	r3, r3
 800157e:	021b      	lsls	r3, r3, #8
 8001580:	4a25      	ldr	r2, [pc, #148]	; (8001618 <DecodeAngle+0xa4>)
 8001582:	7892      	ldrb	r2, [r2, #2]
 8001584:	b2d2      	uxtb	r2, r2
 8001586:	4313      	orrs	r3, r2
 8001588:	4618      	mov	r0, r3
 800158a:	f7ff fc13 	bl	8000db4 <__aeabi_i2f>
 800158e:	4603      	mov	r3, r0
 8001590:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
 8001594:	4618      	mov	r0, r3
 8001596:	f7ff fd15 	bl	8000fc4 <__aeabi_fdiv>
 800159a:	4603      	mov	r3, r0
 800159c:	491f      	ldr	r1, [pc, #124]	; (800161c <DecodeAngle+0xa8>)
 800159e:	4618      	mov	r0, r3
 80015a0:	f7ff fc5c 	bl	8000e5c <__aeabi_fmul>
 80015a4:	4603      	mov	r3, r0
 80015a6:	461a      	mov	r2, r3
 80015a8:	4b1d      	ldr	r3, [pc, #116]	; (8001620 <DecodeAngle+0xac>)
 80015aa:	601a      	str	r2, [r3, #0]
	Angle.pitch = (float)((jy62Message[5]<<8)|jy62Message[4])/32768 * 180 ;
 80015ac:	4b1a      	ldr	r3, [pc, #104]	; (8001618 <DecodeAngle+0xa4>)
 80015ae:	795b      	ldrb	r3, [r3, #5]
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	021b      	lsls	r3, r3, #8
 80015b4:	4a18      	ldr	r2, [pc, #96]	; (8001618 <DecodeAngle+0xa4>)
 80015b6:	7912      	ldrb	r2, [r2, #4]
 80015b8:	b2d2      	uxtb	r2, r2
 80015ba:	4313      	orrs	r3, r2
 80015bc:	4618      	mov	r0, r3
 80015be:	f7ff fbf9 	bl	8000db4 <__aeabi_i2f>
 80015c2:	4603      	mov	r3, r0
 80015c4:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7ff fcfb 	bl	8000fc4 <__aeabi_fdiv>
 80015ce:	4603      	mov	r3, r0
 80015d0:	4912      	ldr	r1, [pc, #72]	; (800161c <DecodeAngle+0xa8>)
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7ff fc42 	bl	8000e5c <__aeabi_fmul>
 80015d8:	4603      	mov	r3, r0
 80015da:	461a      	mov	r2, r3
 80015dc:	4b10      	ldr	r3, [pc, #64]	; (8001620 <DecodeAngle+0xac>)
 80015de:	605a      	str	r2, [r3, #4]
	Angle.yaw =  (float)((jy62Message[7]<<8)|jy62Message[6])/32768 * 180 ;
 80015e0:	4b0d      	ldr	r3, [pc, #52]	; (8001618 <DecodeAngle+0xa4>)
 80015e2:	79db      	ldrb	r3, [r3, #7]
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	021b      	lsls	r3, r3, #8
 80015e8:	4a0b      	ldr	r2, [pc, #44]	; (8001618 <DecodeAngle+0xa4>)
 80015ea:	7992      	ldrb	r2, [r2, #6]
 80015ec:	b2d2      	uxtb	r2, r2
 80015ee:	4313      	orrs	r3, r2
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7ff fbdf 	bl	8000db4 <__aeabi_i2f>
 80015f6:	4603      	mov	r3, r0
 80015f8:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7ff fce1 	bl	8000fc4 <__aeabi_fdiv>
 8001602:	4603      	mov	r3, r0
 8001604:	4905      	ldr	r1, [pc, #20]	; (800161c <DecodeAngle+0xa8>)
 8001606:	4618      	mov	r0, r3
 8001608:	f7ff fc28 	bl	8000e5c <__aeabi_fmul>
 800160c:	4603      	mov	r3, r0
 800160e:	461a      	mov	r2, r3
 8001610:	4b03      	ldr	r3, [pc, #12]	; (8001620 <DecodeAngle+0xac>)
 8001612:	609a      	str	r2, [r3, #8]
	//u1_printf("%f\n",Angle.yaw);
}
 8001614:	bf00      	nop
 8001616:	bd80      	pop	{r7, pc}
 8001618:	20000244 	.word	0x20000244
 800161c:	43340000 	.word	0x43340000
 8001620:	2000026c 	.word	0x2000026c
 8001624:	00000000 	.word	0x00000000

08001628 <DecodeAccelerate>:

void DecodeAccelerate()
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
	Accelerate.accelerate_x = (float)((jy62Message[3]<<8)|jy62Message[2])/32768 * 16 * g ;
 800162c:	4b40      	ldr	r3, [pc, #256]	; (8001730 <DecodeAccelerate+0x108>)
 800162e:	78db      	ldrb	r3, [r3, #3]
 8001630:	b2db      	uxtb	r3, r3
 8001632:	021b      	lsls	r3, r3, #8
 8001634:	4a3e      	ldr	r2, [pc, #248]	; (8001730 <DecodeAccelerate+0x108>)
 8001636:	7892      	ldrb	r2, [r2, #2]
 8001638:	b2d2      	uxtb	r2, r2
 800163a:	4313      	orrs	r3, r2
 800163c:	4618      	mov	r0, r3
 800163e:	f7ff fbb9 	bl	8000db4 <__aeabi_i2f>
 8001642:	4603      	mov	r3, r0
 8001644:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
 8001648:	4618      	mov	r0, r3
 800164a:	f7ff fcbb 	bl	8000fc4 <__aeabi_fdiv>
 800164e:	4603      	mov	r3, r0
 8001650:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 8001654:	4618      	mov	r0, r3
 8001656:	f7ff fc01 	bl	8000e5c <__aeabi_fmul>
 800165a:	4603      	mov	r3, r0
 800165c:	4618      	mov	r0, r3
 800165e:	f7fe ff4f 	bl	8000500 <__aeabi_f2d>
 8001662:	a331      	add	r3, pc, #196	; (adr r3, 8001728 <DecodeAccelerate+0x100>)
 8001664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001668:	f7fe ffa2 	bl	80005b0 <__aeabi_dmul>
 800166c:	4602      	mov	r2, r0
 800166e:	460b      	mov	r3, r1
 8001670:	4610      	mov	r0, r2
 8001672:	4619      	mov	r1, r3
 8001674:	f7ff fa94 	bl	8000ba0 <__aeabi_d2f>
 8001678:	4603      	mov	r3, r0
 800167a:	4a2e      	ldr	r2, [pc, #184]	; (8001734 <DecodeAccelerate+0x10c>)
 800167c:	6013      	str	r3, [r2, #0]
	Accelerate.accelerate_y = (float)((jy62Message[5]<<8)|jy62Message[4])/32768 * 16 * g ;
 800167e:	4b2c      	ldr	r3, [pc, #176]	; (8001730 <DecodeAccelerate+0x108>)
 8001680:	795b      	ldrb	r3, [r3, #5]
 8001682:	b2db      	uxtb	r3, r3
 8001684:	021b      	lsls	r3, r3, #8
 8001686:	4a2a      	ldr	r2, [pc, #168]	; (8001730 <DecodeAccelerate+0x108>)
 8001688:	7912      	ldrb	r2, [r2, #4]
 800168a:	b2d2      	uxtb	r2, r2
 800168c:	4313      	orrs	r3, r2
 800168e:	4618      	mov	r0, r3
 8001690:	f7ff fb90 	bl	8000db4 <__aeabi_i2f>
 8001694:	4603      	mov	r3, r0
 8001696:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
 800169a:	4618      	mov	r0, r3
 800169c:	f7ff fc92 	bl	8000fc4 <__aeabi_fdiv>
 80016a0:	4603      	mov	r3, r0
 80016a2:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7ff fbd8 	bl	8000e5c <__aeabi_fmul>
 80016ac:	4603      	mov	r3, r0
 80016ae:	4618      	mov	r0, r3
 80016b0:	f7fe ff26 	bl	8000500 <__aeabi_f2d>
 80016b4:	a31c      	add	r3, pc, #112	; (adr r3, 8001728 <DecodeAccelerate+0x100>)
 80016b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ba:	f7fe ff79 	bl	80005b0 <__aeabi_dmul>
 80016be:	4602      	mov	r2, r0
 80016c0:	460b      	mov	r3, r1
 80016c2:	4610      	mov	r0, r2
 80016c4:	4619      	mov	r1, r3
 80016c6:	f7ff fa6b 	bl	8000ba0 <__aeabi_d2f>
 80016ca:	4603      	mov	r3, r0
 80016cc:	4a19      	ldr	r2, [pc, #100]	; (8001734 <DecodeAccelerate+0x10c>)
 80016ce:	6053      	str	r3, [r2, #4]
	Accelerate.accelerate_z = (float)((jy62Message[7]<<8)|jy62Message[6])/32768 * 16 * g ;
 80016d0:	4b17      	ldr	r3, [pc, #92]	; (8001730 <DecodeAccelerate+0x108>)
 80016d2:	79db      	ldrb	r3, [r3, #7]
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	021b      	lsls	r3, r3, #8
 80016d8:	4a15      	ldr	r2, [pc, #84]	; (8001730 <DecodeAccelerate+0x108>)
 80016da:	7992      	ldrb	r2, [r2, #6]
 80016dc:	b2d2      	uxtb	r2, r2
 80016de:	4313      	orrs	r3, r2
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7ff fb67 	bl	8000db4 <__aeabi_i2f>
 80016e6:	4603      	mov	r3, r0
 80016e8:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7ff fc69 	bl	8000fc4 <__aeabi_fdiv>
 80016f2:	4603      	mov	r3, r0
 80016f4:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7ff fbaf 	bl	8000e5c <__aeabi_fmul>
 80016fe:	4603      	mov	r3, r0
 8001700:	4618      	mov	r0, r3
 8001702:	f7fe fefd 	bl	8000500 <__aeabi_f2d>
 8001706:	a308      	add	r3, pc, #32	; (adr r3, 8001728 <DecodeAccelerate+0x100>)
 8001708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800170c:	f7fe ff50 	bl	80005b0 <__aeabi_dmul>
 8001710:	4602      	mov	r2, r0
 8001712:	460b      	mov	r3, r1
 8001714:	4610      	mov	r0, r2
 8001716:	4619      	mov	r1, r3
 8001718:	f7ff fa42 	bl	8000ba0 <__aeabi_d2f>
 800171c:	4603      	mov	r3, r0
 800171e:	4a05      	ldr	r2, [pc, #20]	; (8001734 <DecodeAccelerate+0x10c>)
 8001720:	6093      	str	r3, [r2, #8]
}
 8001722:	bf00      	nop
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	9999999a 	.word	0x9999999a
 800172c:	40239999 	.word	0x40239999
 8001730:	20000244 	.word	0x20000244
 8001734:	20000254 	.word	0x20000254

08001738 <DecodeVelocity>:

void DecodeVelocity()
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
	Velocity.velocity_x = (float)((jy62Message[3]<<8)|jy62Message[2])/32768 * 2000 ;
 800173c:	4b27      	ldr	r3, [pc, #156]	; (80017dc <DecodeVelocity+0xa4>)
 800173e:	78db      	ldrb	r3, [r3, #3]
 8001740:	b2db      	uxtb	r3, r3
 8001742:	021b      	lsls	r3, r3, #8
 8001744:	4a25      	ldr	r2, [pc, #148]	; (80017dc <DecodeVelocity+0xa4>)
 8001746:	7892      	ldrb	r2, [r2, #2]
 8001748:	b2d2      	uxtb	r2, r2
 800174a:	4313      	orrs	r3, r2
 800174c:	4618      	mov	r0, r3
 800174e:	f7ff fb31 	bl	8000db4 <__aeabi_i2f>
 8001752:	4603      	mov	r3, r0
 8001754:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
 8001758:	4618      	mov	r0, r3
 800175a:	f7ff fc33 	bl	8000fc4 <__aeabi_fdiv>
 800175e:	4603      	mov	r3, r0
 8001760:	491f      	ldr	r1, [pc, #124]	; (80017e0 <DecodeVelocity+0xa8>)
 8001762:	4618      	mov	r0, r3
 8001764:	f7ff fb7a 	bl	8000e5c <__aeabi_fmul>
 8001768:	4603      	mov	r3, r0
 800176a:	461a      	mov	r2, r3
 800176c:	4b1d      	ldr	r3, [pc, #116]	; (80017e4 <DecodeVelocity+0xac>)
 800176e:	601a      	str	r2, [r3, #0]
	Velocity.velocity_y = (float)((jy62Message[5]<<8)|jy62Message[4])/32768 * 2000 ;
 8001770:	4b1a      	ldr	r3, [pc, #104]	; (80017dc <DecodeVelocity+0xa4>)
 8001772:	795b      	ldrb	r3, [r3, #5]
 8001774:	b2db      	uxtb	r3, r3
 8001776:	021b      	lsls	r3, r3, #8
 8001778:	4a18      	ldr	r2, [pc, #96]	; (80017dc <DecodeVelocity+0xa4>)
 800177a:	7912      	ldrb	r2, [r2, #4]
 800177c:	b2d2      	uxtb	r2, r2
 800177e:	4313      	orrs	r3, r2
 8001780:	4618      	mov	r0, r3
 8001782:	f7ff fb17 	bl	8000db4 <__aeabi_i2f>
 8001786:	4603      	mov	r3, r0
 8001788:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff fc19 	bl	8000fc4 <__aeabi_fdiv>
 8001792:	4603      	mov	r3, r0
 8001794:	4912      	ldr	r1, [pc, #72]	; (80017e0 <DecodeVelocity+0xa8>)
 8001796:	4618      	mov	r0, r3
 8001798:	f7ff fb60 	bl	8000e5c <__aeabi_fmul>
 800179c:	4603      	mov	r3, r0
 800179e:	461a      	mov	r2, r3
 80017a0:	4b10      	ldr	r3, [pc, #64]	; (80017e4 <DecodeVelocity+0xac>)
 80017a2:	605a      	str	r2, [r3, #4]
	Velocity.velocity_z = (float)((jy62Message[7]<<8)|jy62Message[6])/32768 * 2000 ;
 80017a4:	4b0d      	ldr	r3, [pc, #52]	; (80017dc <DecodeVelocity+0xa4>)
 80017a6:	79db      	ldrb	r3, [r3, #7]
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	021b      	lsls	r3, r3, #8
 80017ac:	4a0b      	ldr	r2, [pc, #44]	; (80017dc <DecodeVelocity+0xa4>)
 80017ae:	7992      	ldrb	r2, [r2, #6]
 80017b0:	b2d2      	uxtb	r2, r2
 80017b2:	4313      	orrs	r3, r2
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7ff fafd 	bl	8000db4 <__aeabi_i2f>
 80017ba:	4603      	mov	r3, r0
 80017bc:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7ff fbff 	bl	8000fc4 <__aeabi_fdiv>
 80017c6:	4603      	mov	r3, r0
 80017c8:	4905      	ldr	r1, [pc, #20]	; (80017e0 <DecodeVelocity+0xa8>)
 80017ca:	4618      	mov	r0, r3
 80017cc:	f7ff fb46 	bl	8000e5c <__aeabi_fmul>
 80017d0:	4603      	mov	r3, r0
 80017d2:	461a      	mov	r2, r3
 80017d4:	4b03      	ldr	r3, [pc, #12]	; (80017e4 <DecodeVelocity+0xac>)
 80017d6:	609a      	str	r2, [r3, #8]
}
 80017d8:	bf00      	nop
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	20000244 	.word	0x20000244
 80017e0:	44fa0000 	.word	0x44fa0000
 80017e4:	20000260 	.word	0x20000260

080017e8 <DecodeTemperature>:

void DecodeTemperature()
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
	Temperature.temperature = ((short)(jy62Message[9])<<8 | jy62Message[8])/340 +36.53;
 80017ec:	4b12      	ldr	r3, [pc, #72]	; (8001838 <DecodeTemperature+0x50>)
 80017ee:	7a5b      	ldrb	r3, [r3, #9]
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	021b      	lsls	r3, r3, #8
 80017f4:	4a10      	ldr	r2, [pc, #64]	; (8001838 <DecodeTemperature+0x50>)
 80017f6:	7a12      	ldrb	r2, [r2, #8]
 80017f8:	b2d2      	uxtb	r2, r2
 80017fa:	4313      	orrs	r3, r2
 80017fc:	4a0f      	ldr	r2, [pc, #60]	; (800183c <DecodeTemperature+0x54>)
 80017fe:	fb82 1203 	smull	r1, r2, r2, r3
 8001802:	11d2      	asrs	r2, r2, #7
 8001804:	17db      	asrs	r3, r3, #31
 8001806:	1ad3      	subs	r3, r2, r3
 8001808:	4618      	mov	r0, r3
 800180a:	f7fe fe67 	bl	80004dc <__aeabi_i2d>
 800180e:	a308      	add	r3, pc, #32	; (adr r3, 8001830 <DecodeTemperature+0x48>)
 8001810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001814:	f7fe fd16 	bl	8000244 <__adddf3>
 8001818:	4602      	mov	r2, r0
 800181a:	460b      	mov	r3, r1
 800181c:	4610      	mov	r0, r2
 800181e:	4619      	mov	r1, r3
 8001820:	f7ff f9be 	bl	8000ba0 <__aeabi_d2f>
 8001824:	4603      	mov	r3, r0
 8001826:	4a06      	ldr	r2, [pc, #24]	; (8001840 <DecodeTemperature+0x58>)
 8001828:	6013      	str	r3, [r2, #0]
} 
 800182a:	bf00      	nop
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	0a3d70a4 	.word	0x0a3d70a4
 8001834:	404243d7 	.word	0x404243d7
 8001838:	20000244 	.word	0x20000244
 800183c:	60606061 	.word	0x60606061
 8001840:	20000278 	.word	0x20000278

08001844 <Decode>:


void Decode()
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
    switch (jy62Message[1])
 8001848:	4b0c      	ldr	r3, [pc, #48]	; (800187c <Decode+0x38>)
 800184a:	785b      	ldrb	r3, [r3, #1]
 800184c:	b2db      	uxtb	r3, r3
 800184e:	2b53      	cmp	r3, #83	; 0x53
 8001850:	d00c      	beq.n	800186c <Decode+0x28>
 8001852:	2b53      	cmp	r3, #83	; 0x53
 8001854:	dc0d      	bgt.n	8001872 <Decode+0x2e>
 8001856:	2b51      	cmp	r3, #81	; 0x51
 8001858:	d002      	beq.n	8001860 <Decode+0x1c>
 800185a:	2b52      	cmp	r3, #82	; 0x52
 800185c:	d003      	beq.n	8001866 <Decode+0x22>
 800185e:	e008      	b.n	8001872 <Decode+0x2e>
	{
	    case 0x51: DecodeAccelerate(); break;
 8001860:	f7ff fee2 	bl	8001628 <DecodeAccelerate>
 8001864:	e005      	b.n	8001872 <Decode+0x2e>
		case 0x52: DecodeVelocity();  break;
 8001866:	f7ff ff67 	bl	8001738 <DecodeVelocity>
 800186a:	e002      	b.n	8001872 <Decode+0x2e>
		case 0x53: DecodeAngle(); break;
 800186c:	f7ff fe82 	bl	8001574 <DecodeAngle>
 8001870:	bf00      	nop
	}
	DecodeTemperature();
 8001872:	f7ff ffb9 	bl	80017e8 <DecodeTemperature>
}
 8001876:	bf00      	nop
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	20000244 	.word	0x20000244

08001880 <getMapId_new>:
Position_edc25 target;
Position_edc25 path[50];
int pathlen = 0;
int myMap_new[64] = {0};

int getMapId_new(Position_edc25* points) {
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
    int x = (int)points->posx;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4618      	mov	r0, r3
 800188e:	f7ff fcab 	bl	80011e8 <__aeabi_f2iz>
 8001892:	4603      	mov	r3, r0
 8001894:	60fb      	str	r3, [r7, #12]
    int y = (int)points->posy;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	4618      	mov	r0, r3
 800189c:	f7ff fca4 	bl	80011e8 <__aeabi_f2iz>
 80018a0:	4603      	mov	r3, r0
 80018a2:	60bb      	str	r3, [r7, #8]
    return 8 * y + x;
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	00da      	lsls	r2, r3, #3
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	4413      	add	r3, r2
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3710      	adds	r7, #16
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	0000      	movs	r0, r0
	...

080018b8 <getdir_new>:
int getdir_new(Position_edc25* from, Position_edc25* to) {
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
 80018c0:	6039      	str	r1, [r7, #0]
    if (Base.posx == 0.5) {
 80018c2:	4b4b      	ldr	r3, [pc, #300]	; (80019f0 <getdir_new+0x138>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80018ca:	4618      	mov	r0, r3
 80018cc:	f7ff fc5a 	bl	8001184 <__aeabi_fcmpeq>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d045      	beq.n	8001962 <getdir_new+0xaa>
        if ((from->posx - to->posx) > 0.3||to->posx-from->posx>0.3) {
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4619      	mov	r1, r3
 80018e0:	4610      	mov	r0, r2
 80018e2:	f7ff f9b1 	bl	8000c48 <__aeabi_fsub>
 80018e6:	4603      	mov	r3, r0
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7fe fe09 	bl	8000500 <__aeabi_f2d>
 80018ee:	a33e      	add	r3, pc, #248	; (adr r3, 80019e8 <getdir_new+0x130>)
 80018f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f4:	f7ff f8ec 	bl	8000ad0 <__aeabi_dcmpgt>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d113      	bne.n	8001926 <getdir_new+0x6e>
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4619      	mov	r1, r3
 8001908:	4610      	mov	r0, r2
 800190a:	f7ff f99d 	bl	8000c48 <__aeabi_fsub>
 800190e:	4603      	mov	r3, r0
 8001910:	4618      	mov	r0, r3
 8001912:	f7fe fdf5 	bl	8000500 <__aeabi_f2d>
 8001916:	a334      	add	r3, pc, #208	; (adr r3, 80019e8 <getdir_new+0x130>)
 8001918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800191c:	f7ff f8d8 	bl	8000ad0 <__aeabi_dcmpgt>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d00e      	beq.n	8001944 <getdir_new+0x8c>
            if (to->posx < from->posx)
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4619      	mov	r1, r3
 8001930:	4610      	mov	r0, r2
 8001932:	f7ff fc31 	bl	8001198 <__aeabi_fcmplt>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <getdir_new+0x88>
                return 5;
 800193c:	2305      	movs	r3, #5
 800193e:	e04f      	b.n	80019e0 <getdir_new+0x128>
            else

                return 4;
 8001940:	2304      	movs	r3, #4
 8001942:	e04d      	b.n	80019e0 <getdir_new+0x128>
        } else {
        	if (to->posy > from->posy)
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	685a      	ldr	r2, [r3, #4]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	4619      	mov	r1, r3
 800194e:	4610      	mov	r0, r2
 8001950:	f7ff fc40 	bl	80011d4 <__aeabi_fcmpgt>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <getdir_new+0xa6>
        	    return 0;
 800195a:	2300      	movs	r3, #0
 800195c:	e040      	b.n	80019e0 <getdir_new+0x128>
        	else
        	    return 1;
 800195e:	2301      	movs	r3, #1
 8001960:	e03e      	b.n	80019e0 <getdir_new+0x128>

        }
    }
    else {
        if ((from->posx - to->posx) > 0.5||to->posx-from->posx>0.5) {
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4619      	mov	r1, r3
 800196c:	4610      	mov	r0, r2
 800196e:	f7ff f96b 	bl	8000c48 <__aeabi_fsub>
 8001972:	4603      	mov	r3, r0
 8001974:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8001978:	4618      	mov	r0, r3
 800197a:	f7ff fc2b 	bl	80011d4 <__aeabi_fcmpgt>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d110      	bne.n	80019a6 <getdir_new+0xee>
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4619      	mov	r1, r3
 800198e:	4610      	mov	r0, r2
 8001990:	f7ff f95a 	bl	8000c48 <__aeabi_fsub>
 8001994:	4603      	mov	r3, r0
 8001996:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800199a:	4618      	mov	r0, r3
 800199c:	f7ff fc1a 	bl	80011d4 <__aeabi_fcmpgt>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d00e      	beq.n	80019c4 <getdir_new+0x10c>
            if (to->posx < from->posx)
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4619      	mov	r1, r3
 80019b0:	4610      	mov	r0, r2
 80019b2:	f7ff fbf1 	bl	8001198 <__aeabi_fcmplt>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <getdir_new+0x108>
                return 4;
 80019bc:	2304      	movs	r3, #4
 80019be:	e00f      	b.n	80019e0 <getdir_new+0x128>
            else
                return 5;
 80019c0:	2305      	movs	r3, #5
 80019c2:	e00d      	b.n	80019e0 <getdir_new+0x128>
        } else {
            if (to->posy > from->posy)
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	685a      	ldr	r2, [r3, #4]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	4619      	mov	r1, r3
 80019ce:	4610      	mov	r0, r2
 80019d0:	f7ff fc00 	bl	80011d4 <__aeabi_fcmpgt>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <getdir_new+0x126>
                return 1;
 80019da:	2301      	movs	r3, #1
 80019dc:	e000      	b.n	80019e0 <getdir_new+0x128>
            else
                return 0;
 80019de:	2300      	movs	r3, #0

        }
    }
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3708      	adds	r7, #8
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	33333333 	.word	0x33333333
 80019ec:	3fd33333 	.word	0x3fd33333
 80019f0:	2000027c 	.word	0x2000027c
 80019f4:	00000000 	.word	0x00000000

080019f8 <move_target>:
		setv(0);
		return 1;
	}
	return 0;
}
int move_target(Position_edc25 *from,Position_edc25 *to,int v){
 80019f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019fc:	b08a      	sub	sp, #40	; 0x28
 80019fe:	af06      	add	r7, sp, #24
 8001a00:	60f8      	str	r0, [r7, #12]
 8001a02:	60b9      	str	r1, [r7, #8]
 8001a04:	607a      	str	r2, [r7, #4]
	setdir(getdir_new(from,to));
 8001a06:	68b9      	ldr	r1, [r7, #8]
 8001a08:	68f8      	ldr	r0, [r7, #12]
 8001a0a:	f7ff ff55 	bl	80018b8 <getdir_new>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	4618      	mov	r0, r3
 8001a12:	f001 fab5 	bl	8002f80 <setdir>
	pidparm1.lr=0;
 8001a16:	4b50      	ldr	r3, [pc, #320]	; (8001b58 <move_target+0x160>)
 8001a18:	f04f 0200 	mov.w	r2, #0
 8001a1c:	605a      	str	r2, [r3, #4]
	pidparm1.sum=0;
 8001a1e:	4b4e      	ldr	r3, [pc, #312]	; (8001b58 <move_target+0x160>)
 8001a20:	f04f 0200 	mov.w	r2, #0
 8001a24:	601a      	str	r2, [r3, #0]
	setv(v);
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f7ff f9c4 	bl	8000db4 <__aeabi_i2f>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f001 f9a2 	bl	8002d78 <setv>
	if(dir==0||dir==1){
 8001a34:	4b49      	ldr	r3, [pc, #292]	; (8001b5c <move_target+0x164>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d003      	beq.n	8001a44 <move_target+0x4c>
 8001a3c:	4b47      	ldr	r3, [pc, #284]	; (8001b5c <move_target+0x164>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d150      	bne.n	8001ae6 <move_target+0xee>
		while((my_pos.posy-to->posy)>0.3||to->posy-my_pos.posy>0.3){
 8001a44:	bf00      	nop
 8001a46:	4b46      	ldr	r3, [pc, #280]	; (8001b60 <move_target+0x168>)
 8001a48:	685a      	ldr	r2, [r3, #4]
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	4619      	mov	r1, r3
 8001a50:	4610      	mov	r0, r2
 8001a52:	f7ff f8f9 	bl	8000c48 <__aeabi_fsub>
 8001a56:	4603      	mov	r3, r0
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7fe fd51 	bl	8000500 <__aeabi_f2d>
 8001a5e:	a33c      	add	r3, pc, #240	; (adr r3, 8001b50 <move_target+0x158>)
 8001a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a64:	f7ff f834 	bl	8000ad0 <__aeabi_dcmpgt>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d1eb      	bne.n	8001a46 <move_target+0x4e>
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	4a3b      	ldr	r2, [pc, #236]	; (8001b60 <move_target+0x168>)
 8001a74:	6852      	ldr	r2, [r2, #4]
 8001a76:	4611      	mov	r1, r2
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7ff f8e5 	bl	8000c48 <__aeabi_fsub>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7fe fd3d 	bl	8000500 <__aeabi_f2d>
 8001a86:	a332      	add	r3, pc, #200	; (adr r3, 8001b50 <move_target+0x158>)
 8001a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a8c:	f7ff f820 	bl	8000ad0 <__aeabi_dcmpgt>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d1d7      	bne.n	8001a46 <move_target+0x4e>

			//u1_printf("dir:%d,(%f,%f)\n",dir,curr.posx,curr.posy);
		}
		u1_printf("now:(%f,%f),target:(%f,%f)",my_pos.posx,my_pos.posy,to->posx,to->posy);
 8001a96:	4b32      	ldr	r3, [pc, #200]	; (8001b60 <move_target+0x168>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7fe fd30 	bl	8000500 <__aeabi_f2d>
 8001aa0:	4682      	mov	sl, r0
 8001aa2:	468b      	mov	fp, r1
 8001aa4:	4b2e      	ldr	r3, [pc, #184]	; (8001b60 <move_target+0x168>)
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7fe fd29 	bl	8000500 <__aeabi_f2d>
 8001aae:	4604      	mov	r4, r0
 8001ab0:	460d      	mov	r5, r1
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7fe fd22 	bl	8000500 <__aeabi_f2d>
 8001abc:	4680      	mov	r8, r0
 8001abe:	4689      	mov	r9, r1
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7fe fd1b 	bl	8000500 <__aeabi_f2d>
 8001aca:	4602      	mov	r2, r0
 8001acc:	460b      	mov	r3, r1
 8001ace:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001ad2:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001ad6:	e9cd 4500 	strd	r4, r5, [sp]
 8001ada:	4652      	mov	r2, sl
 8001adc:	465b      	mov	r3, fp
 8001ade:	4821      	ldr	r0, [pc, #132]	; (8001b64 <move_target+0x16c>)
 8001ae0:	f002 f97e 	bl	8003de0 <u1_printf>
 8001ae4:	e028      	b.n	8001b38 <move_target+0x140>
	}
	else{
		while((my_pos.posx-to->posx)>0.3||to->posx-my_pos.posx>0.3){
 8001ae6:	bf00      	nop
 8001ae8:	4b1d      	ldr	r3, [pc, #116]	; (8001b60 <move_target+0x168>)
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4619      	mov	r1, r3
 8001af2:	4610      	mov	r0, r2
 8001af4:	f7ff f8a8 	bl	8000c48 <__aeabi_fsub>
 8001af8:	4603      	mov	r3, r0
 8001afa:	4618      	mov	r0, r3
 8001afc:	f7fe fd00 	bl	8000500 <__aeabi_f2d>
 8001b00:	a313      	add	r3, pc, #76	; (adr r3, 8001b50 <move_target+0x158>)
 8001b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b06:	f7fe ffe3 	bl	8000ad0 <__aeabi_dcmpgt>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d1eb      	bne.n	8001ae8 <move_target+0xf0>
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a12      	ldr	r2, [pc, #72]	; (8001b60 <move_target+0x168>)
 8001b16:	6812      	ldr	r2, [r2, #0]
 8001b18:	4611      	mov	r1, r2
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7ff f894 	bl	8000c48 <__aeabi_fsub>
 8001b20:	4603      	mov	r3, r0
 8001b22:	4618      	mov	r0, r3
 8001b24:	f7fe fcec 	bl	8000500 <__aeabi_f2d>
 8001b28:	a309      	add	r3, pc, #36	; (adr r3, 8001b50 <move_target+0x158>)
 8001b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b2e:	f7fe ffcf 	bl	8000ad0 <__aeabi_dcmpgt>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d1d7      	bne.n	8001ae8 <move_target+0xf0>

			//u1_printf("dir:%d,(%f,%f)\n",dir,curr.posx,curr.posy);
		}
	}

	setv(0);
 8001b38:	f04f 0000 	mov.w	r0, #0
 8001b3c:	f001 f91c 	bl	8002d78 <setv>
	return 1;
 8001b40:	2301      	movs	r3, #1
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3710      	adds	r7, #16
 8001b46:	46bd      	mov	sp, r7
 8001b48:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b4c:	f3af 8000 	nop.w
 8001b50:	33333333 	.word	0x33333333
 8001b54:	3fd33333 	.word	0x3fd33333
 8001b58:	20000028 	.word	0x20000028
 8001b5c:	20000524 	.word	0x20000524
 8001b60:	20000284 	.word	0x20000284
 8001b64:	0800c718 	.word	0x0800c718

08001b68 <InitBase>:
int InitBase(){
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
	Position_edc25 curr;
	getPosition(&curr);
 8001b6e:	463b      	mov	r3, r7
 8001b70:	4618      	mov	r0, r3
 8001b72:	f002 fb75 	bl	8004260 <getPosition>
	if(curr.posx>3){
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	490d      	ldr	r1, [pc, #52]	; (8001bb0 <InitBase+0x48>)
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7ff fb2a 	bl	80011d4 <__aeabi_fcmpgt>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d007      	beq.n	8001b96 <InitBase+0x2e>
		Base.posx=7.5;
 8001b86:	4b0b      	ldr	r3, [pc, #44]	; (8001bb4 <InitBase+0x4c>)
 8001b88:	4a0b      	ldr	r2, [pc, #44]	; (8001bb8 <InitBase+0x50>)
 8001b8a:	601a      	str	r2, [r3, #0]
		Base.posy=7.5;
 8001b8c:	4b09      	ldr	r3, [pc, #36]	; (8001bb4 <InitBase+0x4c>)
 8001b8e:	4a0a      	ldr	r2, [pc, #40]	; (8001bb8 <InitBase+0x50>)
 8001b90:	605a      	str	r2, [r3, #4]
		return 1;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e008      	b.n	8001ba8 <InitBase+0x40>
	}
	else{
		Base.posx=0.5;
 8001b96:	4b07      	ldr	r3, [pc, #28]	; (8001bb4 <InitBase+0x4c>)
 8001b98:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8001b9c:	601a      	str	r2, [r3, #0]
		Base.posy=0.5;
 8001b9e:	4b05      	ldr	r3, [pc, #20]	; (8001bb4 <InitBase+0x4c>)
 8001ba0:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8001ba4:	605a      	str	r2, [r3, #4]
		return 0;
 8001ba6:	2300      	movs	r3, #0
	}
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3708      	adds	r7, #8
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	40400000 	.word	0x40400000
 8001bb4:	2000027c 	.word	0x2000027c
 8001bb8:	40f00000 	.word	0x40f00000

08001bbc <make_choice>:
	path[1] = Base;
	path[2] = Base;
	//move_target();
}

int make_choice(){
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
	if(Base.posx == 0.5) {
 8001bc0:	4b6f      	ldr	r3, [pc, #444]	; (8001d80 <make_choice+0x1c4>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7ff fadb 	bl	8001184 <__aeabi_fcmpeq>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d071      	beq.n	8001cb8 <make_choice+0xfc>
		pathlen = 15;
 8001bd4:	4b6b      	ldr	r3, [pc, #428]	; (8001d84 <make_choice+0x1c8>)
 8001bd6:	220f      	movs	r2, #15
 8001bd8:	601a      	str	r2, [r3, #0]
		path[0].posx = 0.5;
 8001bda:	4b6b      	ldr	r3, [pc, #428]	; (8001d88 <make_choice+0x1cc>)
 8001bdc:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8001be0:	601a      	str	r2, [r3, #0]
		path[0].posy = 1.5;
 8001be2:	4b69      	ldr	r3, [pc, #420]	; (8001d88 <make_choice+0x1cc>)
 8001be4:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8001be8:	605a      	str	r2, [r3, #4]
		path[1].posx = 0.5;
 8001bea:	4b67      	ldr	r3, [pc, #412]	; (8001d88 <make_choice+0x1cc>)
 8001bec:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8001bf0:	609a      	str	r2, [r3, #8]
		path[1].posy = 2.5;
 8001bf2:	4b65      	ldr	r3, [pc, #404]	; (8001d88 <make_choice+0x1cc>)
 8001bf4:	4a65      	ldr	r2, [pc, #404]	; (8001d8c <make_choice+0x1d0>)
 8001bf6:	60da      	str	r2, [r3, #12]
		path[2].posx = 0.5;
 8001bf8:	4b63      	ldr	r3, [pc, #396]	; (8001d88 <make_choice+0x1cc>)
 8001bfa:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8001bfe:	611a      	str	r2, [r3, #16]
		path[2].posy = 3.5;
 8001c00:	4b61      	ldr	r3, [pc, #388]	; (8001d88 <make_choice+0x1cc>)
 8001c02:	4a63      	ldr	r2, [pc, #396]	; (8001d90 <make_choice+0x1d4>)
 8001c04:	615a      	str	r2, [r3, #20]
		path[3].posx = 0.5;
 8001c06:	4b60      	ldr	r3, [pc, #384]	; (8001d88 <make_choice+0x1cc>)
 8001c08:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8001c0c:	619a      	str	r2, [r3, #24]
		path[3].posy = 4.5;
 8001c0e:	4b5e      	ldr	r3, [pc, #376]	; (8001d88 <make_choice+0x1cc>)
 8001c10:	4a60      	ldr	r2, [pc, #384]	; (8001d94 <make_choice+0x1d8>)
 8001c12:	61da      	str	r2, [r3, #28]
		path[4].posx = 0.5;
 8001c14:	4b5c      	ldr	r3, [pc, #368]	; (8001d88 <make_choice+0x1cc>)
 8001c16:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8001c1a:	621a      	str	r2, [r3, #32]
		path[4].posy = 5.5;
 8001c1c:	4b5a      	ldr	r3, [pc, #360]	; (8001d88 <make_choice+0x1cc>)
 8001c1e:	4a5e      	ldr	r2, [pc, #376]	; (8001d98 <make_choice+0x1dc>)
 8001c20:	625a      	str	r2, [r3, #36]	; 0x24
		path[5].posx = 0.5;
 8001c22:	4b59      	ldr	r3, [pc, #356]	; (8001d88 <make_choice+0x1cc>)
 8001c24:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8001c28:	629a      	str	r2, [r3, #40]	; 0x28
		path[5].posy = 6.5;
 8001c2a:	4b57      	ldr	r3, [pc, #348]	; (8001d88 <make_choice+0x1cc>)
 8001c2c:	4a5b      	ldr	r2, [pc, #364]	; (8001d9c <make_choice+0x1e0>)
 8001c2e:	62da      	str	r2, [r3, #44]	; 0x2c
		path[6].posx = 0.5;
 8001c30:	4b55      	ldr	r3, [pc, #340]	; (8001d88 <make_choice+0x1cc>)
 8001c32:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8001c36:	631a      	str	r2, [r3, #48]	; 0x30
		path[6].posy = 7.5;
 8001c38:	4b53      	ldr	r3, [pc, #332]	; (8001d88 <make_choice+0x1cc>)
 8001c3a:	4a59      	ldr	r2, [pc, #356]	; (8001da0 <make_choice+0x1e4>)
 8001c3c:	635a      	str	r2, [r3, #52]	; 0x34
		path[7].posx = 0.5;
 8001c3e:	4b52      	ldr	r3, [pc, #328]	; (8001d88 <make_choice+0x1cc>)
 8001c40:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8001c44:	639a      	str	r2, [r3, #56]	; 0x38
		path[7].posy = 6.5;
 8001c46:	4b50      	ldr	r3, [pc, #320]	; (8001d88 <make_choice+0x1cc>)
 8001c48:	4a54      	ldr	r2, [pc, #336]	; (8001d9c <make_choice+0x1e0>)
 8001c4a:	63da      	str	r2, [r3, #60]	; 0x3c
		path[8].posx = 0.5;
 8001c4c:	4b4e      	ldr	r3, [pc, #312]	; (8001d88 <make_choice+0x1cc>)
 8001c4e:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8001c52:	641a      	str	r2, [r3, #64]	; 0x40
		path[8].posy = 5.5;
 8001c54:	4b4c      	ldr	r3, [pc, #304]	; (8001d88 <make_choice+0x1cc>)
 8001c56:	4a50      	ldr	r2, [pc, #320]	; (8001d98 <make_choice+0x1dc>)
 8001c58:	645a      	str	r2, [r3, #68]	; 0x44
		path[9].posx = 0.5;
 8001c5a:	4b4b      	ldr	r3, [pc, #300]	; (8001d88 <make_choice+0x1cc>)
 8001c5c:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8001c60:	649a      	str	r2, [r3, #72]	; 0x48
		path[9].posy = 4.5;
 8001c62:	4b49      	ldr	r3, [pc, #292]	; (8001d88 <make_choice+0x1cc>)
 8001c64:	4a4b      	ldr	r2, [pc, #300]	; (8001d94 <make_choice+0x1d8>)
 8001c66:	64da      	str	r2, [r3, #76]	; 0x4c
		path[10].posx = 0.5;
 8001c68:	4b47      	ldr	r3, [pc, #284]	; (8001d88 <make_choice+0x1cc>)
 8001c6a:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8001c6e:	651a      	str	r2, [r3, #80]	; 0x50
		path[10].posy = 3.5;
 8001c70:	4b45      	ldr	r3, [pc, #276]	; (8001d88 <make_choice+0x1cc>)
 8001c72:	4a47      	ldr	r2, [pc, #284]	; (8001d90 <make_choice+0x1d4>)
 8001c74:	655a      	str	r2, [r3, #84]	; 0x54
		path[11].posx = 0.5;
 8001c76:	4b44      	ldr	r3, [pc, #272]	; (8001d88 <make_choice+0x1cc>)
 8001c78:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8001c7c:	659a      	str	r2, [r3, #88]	; 0x58
		path[11].posy = 2.5;
 8001c7e:	4b42      	ldr	r3, [pc, #264]	; (8001d88 <make_choice+0x1cc>)
 8001c80:	4a42      	ldr	r2, [pc, #264]	; (8001d8c <make_choice+0x1d0>)
 8001c82:	65da      	str	r2, [r3, #92]	; 0x5c
		path[12].posx = 0.5;
 8001c84:	4b40      	ldr	r3, [pc, #256]	; (8001d88 <make_choice+0x1cc>)
 8001c86:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8001c8a:	661a      	str	r2, [r3, #96]	; 0x60
		path[12].posy = 1.5;
 8001c8c:	4b3e      	ldr	r3, [pc, #248]	; (8001d88 <make_choice+0x1cc>)
 8001c8e:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8001c92:	665a      	str	r2, [r3, #100]	; 0x64
		path[13].posx = 0.5;
 8001c94:	4b3c      	ldr	r3, [pc, #240]	; (8001d88 <make_choice+0x1cc>)
 8001c96:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8001c9a:	669a      	str	r2, [r3, #104]	; 0x68
		path[13].posy = 0.5;
 8001c9c:	4b3a      	ldr	r3, [pc, #232]	; (8001d88 <make_choice+0x1cc>)
 8001c9e:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8001ca2:	66da      	str	r2, [r3, #108]	; 0x6c
		path[14].posx = 0.5;
 8001ca4:	4b38      	ldr	r3, [pc, #224]	; (8001d88 <make_choice+0x1cc>)
 8001ca6:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8001caa:	671a      	str	r2, [r3, #112]	; 0x70
		path[14].posy = 0.5;
 8001cac:	4b36      	ldr	r3, [pc, #216]	; (8001d88 <make_choice+0x1cc>)
 8001cae:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8001cb2:	675a      	str	r2, [r3, #116]	; 0x74
		return 1;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e060      	b.n	8001d7a <make_choice+0x1be>
	} else {
		pathlen = 15;
 8001cb8:	4b32      	ldr	r3, [pc, #200]	; (8001d84 <make_choice+0x1c8>)
 8001cba:	220f      	movs	r2, #15
 8001cbc:	601a      	str	r2, [r3, #0]
		path[0].posx = 7.5;
 8001cbe:	4b32      	ldr	r3, [pc, #200]	; (8001d88 <make_choice+0x1cc>)
 8001cc0:	4a37      	ldr	r2, [pc, #220]	; (8001da0 <make_choice+0x1e4>)
 8001cc2:	601a      	str	r2, [r3, #0]
		path[0].posy = 6.5;
 8001cc4:	4b30      	ldr	r3, [pc, #192]	; (8001d88 <make_choice+0x1cc>)
 8001cc6:	4a35      	ldr	r2, [pc, #212]	; (8001d9c <make_choice+0x1e0>)
 8001cc8:	605a      	str	r2, [r3, #4]
		path[1].posx = 7.5;
 8001cca:	4b2f      	ldr	r3, [pc, #188]	; (8001d88 <make_choice+0x1cc>)
 8001ccc:	4a34      	ldr	r2, [pc, #208]	; (8001da0 <make_choice+0x1e4>)
 8001cce:	609a      	str	r2, [r3, #8]
		path[1].posy = 5.5;
 8001cd0:	4b2d      	ldr	r3, [pc, #180]	; (8001d88 <make_choice+0x1cc>)
 8001cd2:	4a31      	ldr	r2, [pc, #196]	; (8001d98 <make_choice+0x1dc>)
 8001cd4:	60da      	str	r2, [r3, #12]
		path[2].posx = 7.5;
 8001cd6:	4b2c      	ldr	r3, [pc, #176]	; (8001d88 <make_choice+0x1cc>)
 8001cd8:	4a31      	ldr	r2, [pc, #196]	; (8001da0 <make_choice+0x1e4>)
 8001cda:	611a      	str	r2, [r3, #16]
		path[2].posy = 4.5;
 8001cdc:	4b2a      	ldr	r3, [pc, #168]	; (8001d88 <make_choice+0x1cc>)
 8001cde:	4a2d      	ldr	r2, [pc, #180]	; (8001d94 <make_choice+0x1d8>)
 8001ce0:	615a      	str	r2, [r3, #20]
		path[3].posx = 7.5;
 8001ce2:	4b29      	ldr	r3, [pc, #164]	; (8001d88 <make_choice+0x1cc>)
 8001ce4:	4a2e      	ldr	r2, [pc, #184]	; (8001da0 <make_choice+0x1e4>)
 8001ce6:	619a      	str	r2, [r3, #24]
		path[3].posy = 3.5;
 8001ce8:	4b27      	ldr	r3, [pc, #156]	; (8001d88 <make_choice+0x1cc>)
 8001cea:	4a29      	ldr	r2, [pc, #164]	; (8001d90 <make_choice+0x1d4>)
 8001cec:	61da      	str	r2, [r3, #28]
		path[4].posx = 7.5;
 8001cee:	4b26      	ldr	r3, [pc, #152]	; (8001d88 <make_choice+0x1cc>)
 8001cf0:	4a2b      	ldr	r2, [pc, #172]	; (8001da0 <make_choice+0x1e4>)
 8001cf2:	621a      	str	r2, [r3, #32]
		path[4].posy = 2.5;
 8001cf4:	4b24      	ldr	r3, [pc, #144]	; (8001d88 <make_choice+0x1cc>)
 8001cf6:	4a25      	ldr	r2, [pc, #148]	; (8001d8c <make_choice+0x1d0>)
 8001cf8:	625a      	str	r2, [r3, #36]	; 0x24
		path[5].posx = 7.5;
 8001cfa:	4b23      	ldr	r3, [pc, #140]	; (8001d88 <make_choice+0x1cc>)
 8001cfc:	4a28      	ldr	r2, [pc, #160]	; (8001da0 <make_choice+0x1e4>)
 8001cfe:	629a      	str	r2, [r3, #40]	; 0x28
		path[5].posy = 1.5;
 8001d00:	4b21      	ldr	r3, [pc, #132]	; (8001d88 <make_choice+0x1cc>)
 8001d02:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8001d06:	62da      	str	r2, [r3, #44]	; 0x2c
		path[6].posx = 7.5;
 8001d08:	4b1f      	ldr	r3, [pc, #124]	; (8001d88 <make_choice+0x1cc>)
 8001d0a:	4a25      	ldr	r2, [pc, #148]	; (8001da0 <make_choice+0x1e4>)
 8001d0c:	631a      	str	r2, [r3, #48]	; 0x30
		path[6].posy = 0.5;
 8001d0e:	4b1e      	ldr	r3, [pc, #120]	; (8001d88 <make_choice+0x1cc>)
 8001d10:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8001d14:	635a      	str	r2, [r3, #52]	; 0x34
		path[7].posx = 7.5;
 8001d16:	4b1c      	ldr	r3, [pc, #112]	; (8001d88 <make_choice+0x1cc>)
 8001d18:	4a21      	ldr	r2, [pc, #132]	; (8001da0 <make_choice+0x1e4>)
 8001d1a:	639a      	str	r2, [r3, #56]	; 0x38
		path[7].posy = 1.5;
 8001d1c:	4b1a      	ldr	r3, [pc, #104]	; (8001d88 <make_choice+0x1cc>)
 8001d1e:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8001d22:	63da      	str	r2, [r3, #60]	; 0x3c
		path[8].posx = 7.5;
 8001d24:	4b18      	ldr	r3, [pc, #96]	; (8001d88 <make_choice+0x1cc>)
 8001d26:	4a1e      	ldr	r2, [pc, #120]	; (8001da0 <make_choice+0x1e4>)
 8001d28:	641a      	str	r2, [r3, #64]	; 0x40
		path[8].posy = 2.5;
 8001d2a:	4b17      	ldr	r3, [pc, #92]	; (8001d88 <make_choice+0x1cc>)
 8001d2c:	4a17      	ldr	r2, [pc, #92]	; (8001d8c <make_choice+0x1d0>)
 8001d2e:	645a      	str	r2, [r3, #68]	; 0x44
		path[9].posx = 7.5;
 8001d30:	4b15      	ldr	r3, [pc, #84]	; (8001d88 <make_choice+0x1cc>)
 8001d32:	4a1b      	ldr	r2, [pc, #108]	; (8001da0 <make_choice+0x1e4>)
 8001d34:	649a      	str	r2, [r3, #72]	; 0x48
		path[9].posy = 3.5;
 8001d36:	4b14      	ldr	r3, [pc, #80]	; (8001d88 <make_choice+0x1cc>)
 8001d38:	4a15      	ldr	r2, [pc, #84]	; (8001d90 <make_choice+0x1d4>)
 8001d3a:	64da      	str	r2, [r3, #76]	; 0x4c
		path[10].posx = 7.5;
 8001d3c:	4b12      	ldr	r3, [pc, #72]	; (8001d88 <make_choice+0x1cc>)
 8001d3e:	4a18      	ldr	r2, [pc, #96]	; (8001da0 <make_choice+0x1e4>)
 8001d40:	651a      	str	r2, [r3, #80]	; 0x50
		path[10].posy = 4.5;
 8001d42:	4b11      	ldr	r3, [pc, #68]	; (8001d88 <make_choice+0x1cc>)
 8001d44:	4a13      	ldr	r2, [pc, #76]	; (8001d94 <make_choice+0x1d8>)
 8001d46:	655a      	str	r2, [r3, #84]	; 0x54
		path[11].posx = 7.5;
 8001d48:	4b0f      	ldr	r3, [pc, #60]	; (8001d88 <make_choice+0x1cc>)
 8001d4a:	4a15      	ldr	r2, [pc, #84]	; (8001da0 <make_choice+0x1e4>)
 8001d4c:	659a      	str	r2, [r3, #88]	; 0x58
		path[11].posy = 5.5;
 8001d4e:	4b0e      	ldr	r3, [pc, #56]	; (8001d88 <make_choice+0x1cc>)
 8001d50:	4a11      	ldr	r2, [pc, #68]	; (8001d98 <make_choice+0x1dc>)
 8001d52:	65da      	str	r2, [r3, #92]	; 0x5c
		path[12].posx = 7.5;
 8001d54:	4b0c      	ldr	r3, [pc, #48]	; (8001d88 <make_choice+0x1cc>)
 8001d56:	4a12      	ldr	r2, [pc, #72]	; (8001da0 <make_choice+0x1e4>)
 8001d58:	661a      	str	r2, [r3, #96]	; 0x60
		path[12].posy = 6.5;
 8001d5a:	4b0b      	ldr	r3, [pc, #44]	; (8001d88 <make_choice+0x1cc>)
 8001d5c:	4a0f      	ldr	r2, [pc, #60]	; (8001d9c <make_choice+0x1e0>)
 8001d5e:	665a      	str	r2, [r3, #100]	; 0x64
		path[13].posx = 7.5;
 8001d60:	4b09      	ldr	r3, [pc, #36]	; (8001d88 <make_choice+0x1cc>)
 8001d62:	4a0f      	ldr	r2, [pc, #60]	; (8001da0 <make_choice+0x1e4>)
 8001d64:	669a      	str	r2, [r3, #104]	; 0x68
		path[13].posy = 7.5;
 8001d66:	4b08      	ldr	r3, [pc, #32]	; (8001d88 <make_choice+0x1cc>)
 8001d68:	4a0d      	ldr	r2, [pc, #52]	; (8001da0 <make_choice+0x1e4>)
 8001d6a:	66da      	str	r2, [r3, #108]	; 0x6c
		path[14].posx = 7.5;
 8001d6c:	4b06      	ldr	r3, [pc, #24]	; (8001d88 <make_choice+0x1cc>)
 8001d6e:	4a0c      	ldr	r2, [pc, #48]	; (8001da0 <make_choice+0x1e4>)
 8001d70:	671a      	str	r2, [r3, #112]	; 0x70
		path[14].posy = 7.5;
 8001d72:	4b05      	ldr	r3, [pc, #20]	; (8001d88 <make_choice+0x1cc>)
 8001d74:	4a0a      	ldr	r2, [pc, #40]	; (8001da0 <make_choice+0x1e4>)
 8001d76:	675a      	str	r2, [r3, #116]	; 0x74
		return 1;
 8001d78:	2301      	movs	r3, #1
			path[11].posy = 7.5;
			return 2;
		}
	}

}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	2000027c 	.word	0x2000027c
 8001d84:	2000041c 	.word	0x2000041c
 8001d88:	2000028c 	.word	0x2000028c
 8001d8c:	40200000 	.word	0x40200000
 8001d90:	40600000 	.word	0x40600000
 8001d94:	40900000 	.word	0x40900000
 8001d98:	40b00000 	.word	0x40b00000
 8001d9c:	40d00000 	.word	0x40d00000
 8001da0:	40f00000 	.word	0x40f00000

08001da4 <Trade>:
int Trade(){
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
	int myEmraldCount = getEmeraldCount();
 8001daa:	f002 fa73 	bl	8004294 <getEmeraldCount>
 8001dae:	4603      	mov	r3, r0
 8001db0:	607b      	str	r3, [r7, #4]
	int myWoolCount = getWoolCount();
 8001db2:	f002 fa7b 	bl	80042ac <getWoolCount>
 8001db6:	4603      	mov	r3, r0
 8001db8:	603b      	str	r3, [r7, #0]
	while(myWoolCount <4
 8001dba:	e00b      	b.n	8001dd4 <Trade+0x30>
			&& myEmraldCount>2){
		trade_id(3);
 8001dbc:	2003      	movs	r0, #3
 8001dbe:	f002 faa7 	bl	8004310 <trade_id>
		HAL_Delay(200);
 8001dc2:	20c8      	movs	r0, #200	; 0xc8
 8001dc4:	f002 fb52 	bl	800446c <HAL_Delay>
		myEmraldCount-=2;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	3b02      	subs	r3, #2
 8001dcc:	607b      	str	r3, [r7, #4]
		myWoolCount+=1;
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	603b      	str	r3, [r7, #0]
	while(myWoolCount <4
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	2b03      	cmp	r3, #3
 8001dd8:	dc0c      	bgt.n	8001df4 <Trade+0x50>
			&& myEmraldCount>2){
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	dced      	bgt.n	8001dbc <Trade+0x18>
	}
	while(myEmraldCount>=32){
 8001de0:	e008      	b.n	8001df4 <Trade+0x50>
		trade_id(1);
 8001de2:	2001      	movs	r0, #1
 8001de4:	f002 fa94 	bl	8004310 <trade_id>
		HAL_Delay(200);
 8001de8:	20c8      	movs	r0, #200	; 0xc8
 8001dea:	f002 fb3f 	bl	800446c <HAL_Delay>
		myEmraldCount-=32;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	3b20      	subs	r3, #32
 8001df2:	607b      	str	r3, [r7, #4]
	while(myEmraldCount>=32){
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2b1f      	cmp	r3, #31
 8001df8:	dcf3      	bgt.n	8001de2 <Trade+0x3e>
	}
	return 1;
 8001dfa:	2301      	movs	r3, #1
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3708      	adds	r7, #8
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}

08001e04 <pid>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

float pid(pidstr *a,float dr)//用于更新PWM的占空比
{
 8001e04:	b5b0      	push	{r4, r5, r7, lr}
 8001e06:	b084      	sub	sp, #16
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	6039      	str	r1, [r7, #0]
  a->sum = a->sum + dr;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	6839      	ldr	r1, [r7, #0]
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7fe ff19 	bl	8000c4c <__addsf3>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	601a      	str	r2, [r3, #0]
  float pwm = a->Kp * dr + a->Ki * a->sum + a->Kd * (dr - a->lr);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	6839      	ldr	r1, [r7, #0]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7ff f817 	bl	8000e5c <__aeabi_fmul>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	461c      	mov	r4, r3
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	68da      	ldr	r2, [r3, #12]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	4610      	mov	r0, r2
 8001e3e:	f7ff f80d 	bl	8000e5c <__aeabi_fmul>
 8001e42:	4603      	mov	r3, r0
 8001e44:	4619      	mov	r1, r3
 8001e46:	4620      	mov	r0, r4
 8001e48:	f7fe ff00 	bl	8000c4c <__addsf3>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	461d      	mov	r5, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	691c      	ldr	r4, [r3, #16]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	4619      	mov	r1, r3
 8001e5a:	6838      	ldr	r0, [r7, #0]
 8001e5c:	f7fe fef4 	bl	8000c48 <__aeabi_fsub>
 8001e60:	4603      	mov	r3, r0
 8001e62:	4619      	mov	r1, r3
 8001e64:	4620      	mov	r0, r4
 8001e66:	f7fe fff9 	bl	8000e5c <__aeabi_fmul>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	4628      	mov	r0, r5
 8001e70:	f7fe feec 	bl	8000c4c <__addsf3>
 8001e74:	4603      	mov	r3, r0
 8001e76:	60fb      	str	r3, [r7, #12]
  a->lr = dr;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	683a      	ldr	r2, [r7, #0]
 8001e7c:	605a      	str	r2, [r3, #4]
  if(pwm >= PID_MAX){
 8001e7e:	490c      	ldr	r1, [pc, #48]	; (8001eb0 <pid+0xac>)
 8001e80:	68f8      	ldr	r0, [r7, #12]
 8001e82:	f7ff f99d 	bl	80011c0 <__aeabi_fcmpge>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d001      	beq.n	8001e90 <pid+0x8c>
    return PID_MAX;
 8001e8c:	4b08      	ldr	r3, [pc, #32]	; (8001eb0 <pid+0xac>)
 8001e8e:	e00b      	b.n	8001ea8 <pid+0xa4>
  }
  else if(pwm <= PID_MIN)
 8001e90:	f04f 0100 	mov.w	r1, #0
 8001e94:	68f8      	ldr	r0, [r7, #12]
 8001e96:	f7ff f989 	bl	80011ac <__aeabi_fcmple>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d002      	beq.n	8001ea6 <pid+0xa2>
  {
    return PID_MIN;
 8001ea0:	f04f 0300 	mov.w	r3, #0
 8001ea4:	e000      	b.n	8001ea8 <pid+0xa4>
  }
  else
  {
    return pwm;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
  }
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3710      	adds	r7, #16
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bdb0      	pop	{r4, r5, r7, pc}
 8001eb0:	447a0000 	.word	0x447a0000
 8001eb4:	00000000 	.word	0x00000000

08001eb8 <HAL_TIM_PeriodElapsedCallback>:

//这个刚刚加过了，只是告诉读�?�应该放�??????
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b094      	sub	sp, #80	; 0x50
 8001ebc:	af04      	add	r7, sp, #16
 8001ebe:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM2)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ec8:	f040 85e4 	bne.w	8002a94 <HAL_TIM_PeriodElapsedCallback+0xbdc>
	  {
	    int cnt=__HAL_TIM_GetCounter(&htim3);
 8001ecc:	4ba2      	ldr	r3, [pc, #648]	; (8002158 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed2:	63fb      	str	r3, [r7, #60]	; 0x3c
	    if (cnt>500){
 8001ed4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ed6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001eda:	dd04      	ble.n	8001ee6 <HAL_TIM_PeriodElapsedCallback+0x2e>
	    	cnt=(65535-cnt);
 8001edc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ede:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8001ee2:	33ff      	adds	r3, #255	; 0xff
 8001ee4:	63fb      	str	r3, [r7, #60]	; 0x3c
	    }
	    __HAL_TIM_SetCounter(&htim3, 0);
 8001ee6:	4b9c      	ldr	r3, [pc, #624]	; (8002158 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	2200      	movs	r2, #0
 8001eec:	625a      	str	r2, [r3, #36]	; 0x24
	    float vnow=(cnt/15.59)*20.7;//v单位：cm/s
 8001eee:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001ef0:	f7fe faf4 	bl	80004dc <__aeabi_i2d>
 8001ef4:	a394      	add	r3, pc, #592	; (adr r3, 8002148 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001efa:	f7fe fc83 	bl	8000804 <__aeabi_ddiv>
 8001efe:	4602      	mov	r2, r0
 8001f00:	460b      	mov	r3, r1
 8001f02:	4610      	mov	r0, r2
 8001f04:	4619      	mov	r1, r3
 8001f06:	a392      	add	r3, pc, #584	; (adr r3, 8002150 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f0c:	f7fe fb50 	bl	80005b0 <__aeabi_dmul>
 8001f10:	4602      	mov	r2, r0
 8001f12:	460b      	mov	r3, r1
 8001f14:	4610      	mov	r0, r2
 8001f16:	4619      	mov	r1, r3
 8001f18:	f7fe fe42 	bl	8000ba0 <__aeabi_d2f>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	633b      	str	r3, [r7, #48]	; 0x30
	    float dr=vset-vnow;
 8001f20:	4b8e      	ldr	r3, [pc, #568]	; (800215c <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7fe fe8e 	bl	8000c48 <__aeabi_fsub>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
	    float Ori_pwm=pid(&pidparm,dr);
 8001f30:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001f32:	488b      	ldr	r0, [pc, #556]	; (8002160 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001f34:	f7ff ff66 	bl	8001e04 <pid>
 8001f38:	62b8      	str	r0, [r7, #40]	; 0x28
	    float yaw = GetYaw();
 8001f3a:	f7ff fb11 	bl	8001560 <GetYaw>
 8001f3e:	6278      	str	r0, [r7, #36]	; 0x24
	    u1_printf("ROW: %f, PITCH:%f, YAW:%f\r\n", 5.0, 5.0, yaw);
 8001f40:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001f42:	f7fe fadd 	bl	8000500 <__aeabi_f2d>
 8001f46:	4602      	mov	r2, r0
 8001f48:	460b      	mov	r3, r1
 8001f4a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001f4e:	f04f 0200 	mov.w	r2, #0
 8001f52:	4b84      	ldr	r3, [pc, #528]	; (8002164 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001f54:	e9cd 2300 	strd	r2, r3, [sp]
 8001f58:	f04f 0200 	mov.w	r2, #0
 8001f5c:	4b81      	ldr	r3, [pc, #516]	; (8002164 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001f5e:	4882      	ldr	r0, [pc, #520]	; (8002168 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001f60:	f001 ff3e 	bl	8003de0 <u1_printf>

	    //u1_printf("%f,%f,%f\n",vnow,vset,pwm);
	    //int temp=pwm;
	    int pwm[4];
	    int dphi=yaw>180?360-yaw:yaw;
 8001f64:	4981      	ldr	r1, [pc, #516]	; (800216c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001f66:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001f68:	f7ff f934 	bl	80011d4 <__aeabi_fcmpgt>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d009      	beq.n	8001f86 <HAL_TIM_PeriodElapsedCallback+0xce>
 8001f72:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f74:	487e      	ldr	r0, [pc, #504]	; (8002170 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001f76:	f7fe fe67 	bl	8000c48 <__aeabi_fsub>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f7ff f933 	bl	80011e8 <__aeabi_f2iz>
 8001f82:	4603      	mov	r3, r0
 8001f84:	e003      	b.n	8001f8e <HAL_TIM_PeriodElapsedCallback+0xd6>
 8001f86:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001f88:	f7ff f92e 	bl	80011e8 <__aeabi_f2iz>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	623b      	str	r3, [r7, #32]
	    float Ori_pidphi =pid(&pidparm1,dphi);
 8001f90:	6a38      	ldr	r0, [r7, #32]
 8001f92:	f7fe ff0f 	bl	8000db4 <__aeabi_i2f>
 8001f96:	4603      	mov	r3, r0
 8001f98:	4619      	mov	r1, r3
 8001f9a:	4876      	ldr	r0, [pc, #472]	; (8002174 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001f9c:	f7ff ff32 	bl	8001e04 <pid>
 8001fa0:	61f8      	str	r0, [r7, #28]
	    int pwmphi=Ori_pidphi;
 8001fa2:	69f8      	ldr	r0, [r7, #28]
 8001fa4:	f7ff f920 	bl	80011e8 <__aeabi_f2iz>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	61bb      	str	r3, [r7, #24]
	    if(dir==4&&vset>10){//平移的校准
 8001fac:	4b72      	ldr	r3, [pc, #456]	; (8002178 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	2b04      	cmp	r3, #4
 8001fb2:	f040 815a 	bne.w	800226a <HAL_TIM_PeriodElapsedCallback+0x3b2>
 8001fb6:	4b69      	ldr	r3, [pc, #420]	; (800215c <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4970      	ldr	r1, [pc, #448]	; (800217c <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f7ff f909 	bl	80011d4 <__aeabi_fcmpgt>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	f000 8150 	beq.w	800226a <HAL_TIM_PeriodElapsedCallback+0x3b2>
	    	if(yaw>0&&yaw<180){
 8001fca:	f04f 0100 	mov.w	r1, #0
 8001fce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001fd0:	f7ff f900 	bl	80011d4 <__aeabi_fcmpgt>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	f000 808e 	beq.w	80020f8 <HAL_TIM_PeriodElapsedCallback+0x240>
 8001fdc:	4963      	ldr	r1, [pc, #396]	; (800216c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001fde:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001fe0:	f7ff f8da 	bl	8001198 <__aeabi_fcmplt>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	f000 8086 	beq.w	80020f8 <HAL_TIM_PeriodElapsedCallback+0x240>
	    		pwm[0]=Ori_pwm-pwmphi<0?0:Ori_pwm-pwmphi;
 8001fec:	69b8      	ldr	r0, [r7, #24]
 8001fee:	f7fe fee1 	bl	8000db4 <__aeabi_i2f>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001ff8:	f7fe fe26 	bl	8000c48 <__aeabi_fsub>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	f04f 0100 	mov.w	r1, #0
 8002002:	4618      	mov	r0, r3
 8002004:	f7ff f8c8 	bl	8001198 <__aeabi_fcmplt>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d001      	beq.n	8002012 <HAL_TIM_PeriodElapsedCallback+0x15a>
 800200e:	2300      	movs	r3, #0
 8002010:	e00c      	b.n	800202c <HAL_TIM_PeriodElapsedCallback+0x174>
 8002012:	69b8      	ldr	r0, [r7, #24]
 8002014:	f7fe fece 	bl	8000db4 <__aeabi_i2f>
 8002018:	4603      	mov	r3, r0
 800201a:	4619      	mov	r1, r3
 800201c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800201e:	f7fe fe13 	bl	8000c48 <__aeabi_fsub>
 8002022:	4603      	mov	r3, r0
 8002024:	4618      	mov	r0, r3
 8002026:	f7ff f8df 	bl	80011e8 <__aeabi_f2iz>
 800202a:	4603      	mov	r3, r0
 800202c:	60bb      	str	r3, [r7, #8]
	    		pwm[1]=Ori_pwm+pwmphi>1000?1000:Ori_pwm+pwmphi;
 800202e:	69b8      	ldr	r0, [r7, #24]
 8002030:	f7fe fec0 	bl	8000db4 <__aeabi_i2f>
 8002034:	4603      	mov	r3, r0
 8002036:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002038:	4618      	mov	r0, r3
 800203a:	f7fe fe07 	bl	8000c4c <__addsf3>
 800203e:	4603      	mov	r3, r0
 8002040:	494f      	ldr	r1, [pc, #316]	; (8002180 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8002042:	4618      	mov	r0, r3
 8002044:	f7ff f8c6 	bl	80011d4 <__aeabi_fcmpgt>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d002      	beq.n	8002054 <HAL_TIM_PeriodElapsedCallback+0x19c>
 800204e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002052:	e00c      	b.n	800206e <HAL_TIM_PeriodElapsedCallback+0x1b6>
 8002054:	69b8      	ldr	r0, [r7, #24]
 8002056:	f7fe fead 	bl	8000db4 <__aeabi_i2f>
 800205a:	4603      	mov	r3, r0
 800205c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800205e:	4618      	mov	r0, r3
 8002060:	f7fe fdf4 	bl	8000c4c <__addsf3>
 8002064:	4603      	mov	r3, r0
 8002066:	4618      	mov	r0, r3
 8002068:	f7ff f8be 	bl	80011e8 <__aeabi_f2iz>
 800206c:	4603      	mov	r3, r0
 800206e:	60fb      	str	r3, [r7, #12]
	    		pwm[2]=Ori_pwm+pwmphi>1000?1000:Ori_pwm+pwmphi;
 8002070:	69b8      	ldr	r0, [r7, #24]
 8002072:	f7fe fe9f 	bl	8000db4 <__aeabi_i2f>
 8002076:	4603      	mov	r3, r0
 8002078:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800207a:	4618      	mov	r0, r3
 800207c:	f7fe fde6 	bl	8000c4c <__addsf3>
 8002080:	4603      	mov	r3, r0
 8002082:	493f      	ldr	r1, [pc, #252]	; (8002180 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8002084:	4618      	mov	r0, r3
 8002086:	f7ff f8a5 	bl	80011d4 <__aeabi_fcmpgt>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d002      	beq.n	8002096 <HAL_TIM_PeriodElapsedCallback+0x1de>
 8002090:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002094:	e00c      	b.n	80020b0 <HAL_TIM_PeriodElapsedCallback+0x1f8>
 8002096:	69b8      	ldr	r0, [r7, #24]
 8002098:	f7fe fe8c 	bl	8000db4 <__aeabi_i2f>
 800209c:	4603      	mov	r3, r0
 800209e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80020a0:	4618      	mov	r0, r3
 80020a2:	f7fe fdd3 	bl	8000c4c <__addsf3>
 80020a6:	4603      	mov	r3, r0
 80020a8:	4618      	mov	r0, r3
 80020aa:	f7ff f89d 	bl	80011e8 <__aeabi_f2iz>
 80020ae:	4603      	mov	r3, r0
 80020b0:	613b      	str	r3, [r7, #16]
	    		pwm[3]=Ori_pwm-pwmphi<0?0:Ori_pwm-pwmphi;
 80020b2:	69b8      	ldr	r0, [r7, #24]
 80020b4:	f7fe fe7e 	bl	8000db4 <__aeabi_i2f>
 80020b8:	4603      	mov	r3, r0
 80020ba:	4619      	mov	r1, r3
 80020bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80020be:	f7fe fdc3 	bl	8000c48 <__aeabi_fsub>
 80020c2:	4603      	mov	r3, r0
 80020c4:	f04f 0100 	mov.w	r1, #0
 80020c8:	4618      	mov	r0, r3
 80020ca:	f7ff f865 	bl	8001198 <__aeabi_fcmplt>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d001      	beq.n	80020d8 <HAL_TIM_PeriodElapsedCallback+0x220>
 80020d4:	2300      	movs	r3, #0
 80020d6:	e00c      	b.n	80020f2 <HAL_TIM_PeriodElapsedCallback+0x23a>
 80020d8:	69b8      	ldr	r0, [r7, #24]
 80020da:	f7fe fe6b 	bl	8000db4 <__aeabi_i2f>
 80020de:	4603      	mov	r3, r0
 80020e0:	4619      	mov	r1, r3
 80020e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80020e4:	f7fe fdb0 	bl	8000c48 <__aeabi_fsub>
 80020e8:	4603      	mov	r3, r0
 80020ea:	4618      	mov	r0, r3
 80020ec:	f7ff f87c 	bl	80011e8 <__aeabi_f2iz>
 80020f0:	4603      	mov	r3, r0
 80020f2:	617b      	str	r3, [r7, #20]
	    	if(yaw>0&&yaw<180){
 80020f4:	f000 bcbb 	b.w	8002a6e <HAL_TIM_PeriodElapsedCallback+0xbb6>
	    	}
	    	else if(yaw<360&&yaw>180){
 80020f8:	491d      	ldr	r1, [pc, #116]	; (8002170 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80020fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80020fc:	f7ff f84c 	bl	8001198 <__aeabi_fcmplt>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d101      	bne.n	800210a <HAL_TIM_PeriodElapsedCallback+0x252>
	    	if(yaw>0&&yaw<180){
 8002106:	f000 bcb2 	b.w	8002a6e <HAL_TIM_PeriodElapsedCallback+0xbb6>
	    	else if(yaw<360&&yaw>180){
 800210a:	4918      	ldr	r1, [pc, #96]	; (800216c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 800210c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800210e:	f7ff f861 	bl	80011d4 <__aeabi_fcmpgt>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	d101      	bne.n	800211c <HAL_TIM_PeriodElapsedCallback+0x264>
	    	if(yaw>0&&yaw<180){
 8002118:	f000 bca9 	b.w	8002a6e <HAL_TIM_PeriodElapsedCallback+0xbb6>
	    		pwm[0]=Ori_pwm+pwmphi>1000?1000:Ori_pwm+pwmphi;
 800211c:	69b8      	ldr	r0, [r7, #24]
 800211e:	f7fe fe49 	bl	8000db4 <__aeabi_i2f>
 8002122:	4603      	mov	r3, r0
 8002124:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002126:	4618      	mov	r0, r3
 8002128:	f7fe fd90 	bl	8000c4c <__addsf3>
 800212c:	4603      	mov	r3, r0
 800212e:	4914      	ldr	r1, [pc, #80]	; (8002180 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8002130:	4618      	mov	r0, r3
 8002132:	f7ff f84f 	bl	80011d4 <__aeabi_fcmpgt>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d023      	beq.n	8002184 <HAL_TIM_PeriodElapsedCallback+0x2cc>
 800213c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002140:	e02d      	b.n	800219e <HAL_TIM_PeriodElapsedCallback+0x2e6>
 8002142:	bf00      	nop
 8002144:	f3af 8000 	nop.w
 8002148:	7ae147ae 	.word	0x7ae147ae
 800214c:	402f2e14 	.word	0x402f2e14
 8002150:	33333333 	.word	0x33333333
 8002154:	4034b333 	.word	0x4034b333
 8002158:	200005bc 	.word	0x200005bc
 800215c:	20000520 	.word	0x20000520
 8002160:	20000014 	.word	0x20000014
 8002164:	40140000 	.word	0x40140000
 8002168:	0800c734 	.word	0x0800c734
 800216c:	43340000 	.word	0x43340000
 8002170:	43b40000 	.word	0x43b40000
 8002174:	20000028 	.word	0x20000028
 8002178:	20000524 	.word	0x20000524
 800217c:	41200000 	.word	0x41200000
 8002180:	447a0000 	.word	0x447a0000
 8002184:	69b8      	ldr	r0, [r7, #24]
 8002186:	f7fe fe15 	bl	8000db4 <__aeabi_i2f>
 800218a:	4603      	mov	r3, r0
 800218c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800218e:	4618      	mov	r0, r3
 8002190:	f7fe fd5c 	bl	8000c4c <__addsf3>
 8002194:	4603      	mov	r3, r0
 8002196:	4618      	mov	r0, r3
 8002198:	f7ff f826 	bl	80011e8 <__aeabi_f2iz>
 800219c:	4603      	mov	r3, r0
 800219e:	60bb      	str	r3, [r7, #8]
	    		pwm[1]=Ori_pwm-pwmphi<0?0:Ori_pwm-pwmphi;
 80021a0:	69b8      	ldr	r0, [r7, #24]
 80021a2:	f7fe fe07 	bl	8000db4 <__aeabi_i2f>
 80021a6:	4603      	mov	r3, r0
 80021a8:	4619      	mov	r1, r3
 80021aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80021ac:	f7fe fd4c 	bl	8000c48 <__aeabi_fsub>
 80021b0:	4603      	mov	r3, r0
 80021b2:	f04f 0100 	mov.w	r1, #0
 80021b6:	4618      	mov	r0, r3
 80021b8:	f7fe ffee 	bl	8001198 <__aeabi_fcmplt>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <HAL_TIM_PeriodElapsedCallback+0x30e>
 80021c2:	2300      	movs	r3, #0
 80021c4:	e00c      	b.n	80021e0 <HAL_TIM_PeriodElapsedCallback+0x328>
 80021c6:	69b8      	ldr	r0, [r7, #24]
 80021c8:	f7fe fdf4 	bl	8000db4 <__aeabi_i2f>
 80021cc:	4603      	mov	r3, r0
 80021ce:	4619      	mov	r1, r3
 80021d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80021d2:	f7fe fd39 	bl	8000c48 <__aeabi_fsub>
 80021d6:	4603      	mov	r3, r0
 80021d8:	4618      	mov	r0, r3
 80021da:	f7ff f805 	bl	80011e8 <__aeabi_f2iz>
 80021de:	4603      	mov	r3, r0
 80021e0:	60fb      	str	r3, [r7, #12]
	    		pwm[2]=Ori_pwm-pwmphi<0?0:Ori_pwm-pwmphi;
 80021e2:	69b8      	ldr	r0, [r7, #24]
 80021e4:	f7fe fde6 	bl	8000db4 <__aeabi_i2f>
 80021e8:	4603      	mov	r3, r0
 80021ea:	4619      	mov	r1, r3
 80021ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80021ee:	f7fe fd2b 	bl	8000c48 <__aeabi_fsub>
 80021f2:	4603      	mov	r3, r0
 80021f4:	f04f 0100 	mov.w	r1, #0
 80021f8:	4618      	mov	r0, r3
 80021fa:	f7fe ffcd 	bl	8001198 <__aeabi_fcmplt>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d001      	beq.n	8002208 <HAL_TIM_PeriodElapsedCallback+0x350>
 8002204:	2300      	movs	r3, #0
 8002206:	e00c      	b.n	8002222 <HAL_TIM_PeriodElapsedCallback+0x36a>
 8002208:	69b8      	ldr	r0, [r7, #24]
 800220a:	f7fe fdd3 	bl	8000db4 <__aeabi_i2f>
 800220e:	4603      	mov	r3, r0
 8002210:	4619      	mov	r1, r3
 8002212:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002214:	f7fe fd18 	bl	8000c48 <__aeabi_fsub>
 8002218:	4603      	mov	r3, r0
 800221a:	4618      	mov	r0, r3
 800221c:	f7fe ffe4 	bl	80011e8 <__aeabi_f2iz>
 8002220:	4603      	mov	r3, r0
 8002222:	613b      	str	r3, [r7, #16]
	    		pwm[3]=Ori_pwm+pwmphi>1000?1000:Ori_pwm+pwmphi;
 8002224:	69b8      	ldr	r0, [r7, #24]
 8002226:	f7fe fdc5 	bl	8000db4 <__aeabi_i2f>
 800222a:	4603      	mov	r3, r0
 800222c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800222e:	4618      	mov	r0, r3
 8002230:	f7fe fd0c 	bl	8000c4c <__addsf3>
 8002234:	4603      	mov	r3, r0
 8002236:	49a2      	ldr	r1, [pc, #648]	; (80024c0 <HAL_TIM_PeriodElapsedCallback+0x608>)
 8002238:	4618      	mov	r0, r3
 800223a:	f7fe ffcb 	bl	80011d4 <__aeabi_fcmpgt>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d002      	beq.n	800224a <HAL_TIM_PeriodElapsedCallback+0x392>
 8002244:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002248:	e00c      	b.n	8002264 <HAL_TIM_PeriodElapsedCallback+0x3ac>
 800224a:	69b8      	ldr	r0, [r7, #24]
 800224c:	f7fe fdb2 	bl	8000db4 <__aeabi_i2f>
 8002250:	4603      	mov	r3, r0
 8002252:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002254:	4618      	mov	r0, r3
 8002256:	f7fe fcf9 	bl	8000c4c <__addsf3>
 800225a:	4603      	mov	r3, r0
 800225c:	4618      	mov	r0, r3
 800225e:	f7fe ffc3 	bl	80011e8 <__aeabi_f2iz>
 8002262:	4603      	mov	r3, r0
 8002264:	617b      	str	r3, [r7, #20]
	    	if(yaw>0&&yaw<180){
 8002266:	f000 bc02 	b.w	8002a6e <HAL_TIM_PeriodElapsedCallback+0xbb6>
	    	}
	    }
	    else if(dir==5&&vset>10){
 800226a:	4b96      	ldr	r3, [pc, #600]	; (80024c4 <HAL_TIM_PeriodElapsedCallback+0x60c>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	2b05      	cmp	r3, #5
 8002270:	f040 8141 	bne.w	80024f6 <HAL_TIM_PeriodElapsedCallback+0x63e>
 8002274:	4b94      	ldr	r3, [pc, #592]	; (80024c8 <HAL_TIM_PeriodElapsedCallback+0x610>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4994      	ldr	r1, [pc, #592]	; (80024cc <HAL_TIM_PeriodElapsedCallback+0x614>)
 800227a:	4618      	mov	r0, r3
 800227c:	f7fe ffaa 	bl	80011d4 <__aeabi_fcmpgt>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	f000 8137 	beq.w	80024f6 <HAL_TIM_PeriodElapsedCallback+0x63e>
	    	if(yaw<360&&yaw>180){
 8002288:	4991      	ldr	r1, [pc, #580]	; (80024d0 <HAL_TIM_PeriodElapsedCallback+0x618>)
 800228a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800228c:	f7fe ff84 	bl	8001198 <__aeabi_fcmplt>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	f000 808d 	beq.w	80023b2 <HAL_TIM_PeriodElapsedCallback+0x4fa>
 8002298:	498e      	ldr	r1, [pc, #568]	; (80024d4 <HAL_TIM_PeriodElapsedCallback+0x61c>)
 800229a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800229c:	f7fe ff9a 	bl	80011d4 <__aeabi_fcmpgt>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	f000 8085 	beq.w	80023b2 <HAL_TIM_PeriodElapsedCallback+0x4fa>
	    		pwm[0]=Ori_pwm-pwmphi<0?0:Ori_pwm-pwmphi;
 80022a8:	69b8      	ldr	r0, [r7, #24]
 80022aa:	f7fe fd83 	bl	8000db4 <__aeabi_i2f>
 80022ae:	4603      	mov	r3, r0
 80022b0:	4619      	mov	r1, r3
 80022b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80022b4:	f7fe fcc8 	bl	8000c48 <__aeabi_fsub>
 80022b8:	4603      	mov	r3, r0
 80022ba:	f04f 0100 	mov.w	r1, #0
 80022be:	4618      	mov	r0, r3
 80022c0:	f7fe ff6a 	bl	8001198 <__aeabi_fcmplt>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <HAL_TIM_PeriodElapsedCallback+0x416>
 80022ca:	2300      	movs	r3, #0
 80022cc:	e00c      	b.n	80022e8 <HAL_TIM_PeriodElapsedCallback+0x430>
 80022ce:	69b8      	ldr	r0, [r7, #24]
 80022d0:	f7fe fd70 	bl	8000db4 <__aeabi_i2f>
 80022d4:	4603      	mov	r3, r0
 80022d6:	4619      	mov	r1, r3
 80022d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80022da:	f7fe fcb5 	bl	8000c48 <__aeabi_fsub>
 80022de:	4603      	mov	r3, r0
 80022e0:	4618      	mov	r0, r3
 80022e2:	f7fe ff81 	bl	80011e8 <__aeabi_f2iz>
 80022e6:	4603      	mov	r3, r0
 80022e8:	60bb      	str	r3, [r7, #8]
	    		pwm[1]=Ori_pwm+pwmphi>1000?1000:Ori_pwm+pwmphi;
 80022ea:	69b8      	ldr	r0, [r7, #24]
 80022ec:	f7fe fd62 	bl	8000db4 <__aeabi_i2f>
 80022f0:	4603      	mov	r3, r0
 80022f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80022f4:	4618      	mov	r0, r3
 80022f6:	f7fe fca9 	bl	8000c4c <__addsf3>
 80022fa:	4603      	mov	r3, r0
 80022fc:	4970      	ldr	r1, [pc, #448]	; (80024c0 <HAL_TIM_PeriodElapsedCallback+0x608>)
 80022fe:	4618      	mov	r0, r3
 8002300:	f7fe ff68 	bl	80011d4 <__aeabi_fcmpgt>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d002      	beq.n	8002310 <HAL_TIM_PeriodElapsedCallback+0x458>
 800230a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800230e:	e00c      	b.n	800232a <HAL_TIM_PeriodElapsedCallback+0x472>
 8002310:	69b8      	ldr	r0, [r7, #24]
 8002312:	f7fe fd4f 	bl	8000db4 <__aeabi_i2f>
 8002316:	4603      	mov	r3, r0
 8002318:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800231a:	4618      	mov	r0, r3
 800231c:	f7fe fc96 	bl	8000c4c <__addsf3>
 8002320:	4603      	mov	r3, r0
 8002322:	4618      	mov	r0, r3
 8002324:	f7fe ff60 	bl	80011e8 <__aeabi_f2iz>
 8002328:	4603      	mov	r3, r0
 800232a:	60fb      	str	r3, [r7, #12]
	    		pwm[2]=Ori_pwm+pwmphi>1000?1000:Ori_pwm+pwmphi;
 800232c:	69b8      	ldr	r0, [r7, #24]
 800232e:	f7fe fd41 	bl	8000db4 <__aeabi_i2f>
 8002332:	4603      	mov	r3, r0
 8002334:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002336:	4618      	mov	r0, r3
 8002338:	f7fe fc88 	bl	8000c4c <__addsf3>
 800233c:	4603      	mov	r3, r0
 800233e:	4960      	ldr	r1, [pc, #384]	; (80024c0 <HAL_TIM_PeriodElapsedCallback+0x608>)
 8002340:	4618      	mov	r0, r3
 8002342:	f7fe ff47 	bl	80011d4 <__aeabi_fcmpgt>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d002      	beq.n	8002352 <HAL_TIM_PeriodElapsedCallback+0x49a>
 800234c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002350:	e00c      	b.n	800236c <HAL_TIM_PeriodElapsedCallback+0x4b4>
 8002352:	69b8      	ldr	r0, [r7, #24]
 8002354:	f7fe fd2e 	bl	8000db4 <__aeabi_i2f>
 8002358:	4603      	mov	r3, r0
 800235a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800235c:	4618      	mov	r0, r3
 800235e:	f7fe fc75 	bl	8000c4c <__addsf3>
 8002362:	4603      	mov	r3, r0
 8002364:	4618      	mov	r0, r3
 8002366:	f7fe ff3f 	bl	80011e8 <__aeabi_f2iz>
 800236a:	4603      	mov	r3, r0
 800236c:	613b      	str	r3, [r7, #16]
	    		pwm[3]=Ori_pwm-pwmphi<0?0:Ori_pwm-pwmphi;
 800236e:	69b8      	ldr	r0, [r7, #24]
 8002370:	f7fe fd20 	bl	8000db4 <__aeabi_i2f>
 8002374:	4603      	mov	r3, r0
 8002376:	4619      	mov	r1, r3
 8002378:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800237a:	f7fe fc65 	bl	8000c48 <__aeabi_fsub>
 800237e:	4603      	mov	r3, r0
 8002380:	f04f 0100 	mov.w	r1, #0
 8002384:	4618      	mov	r0, r3
 8002386:	f7fe ff07 	bl	8001198 <__aeabi_fcmplt>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d001      	beq.n	8002394 <HAL_TIM_PeriodElapsedCallback+0x4dc>
 8002390:	2300      	movs	r3, #0
 8002392:	e00c      	b.n	80023ae <HAL_TIM_PeriodElapsedCallback+0x4f6>
 8002394:	69b8      	ldr	r0, [r7, #24]
 8002396:	f7fe fd0d 	bl	8000db4 <__aeabi_i2f>
 800239a:	4603      	mov	r3, r0
 800239c:	4619      	mov	r1, r3
 800239e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80023a0:	f7fe fc52 	bl	8000c48 <__aeabi_fsub>
 80023a4:	4603      	mov	r3, r0
 80023a6:	4618      	mov	r0, r3
 80023a8:	f7fe ff1e 	bl	80011e8 <__aeabi_f2iz>
 80023ac:	4603      	mov	r3, r0
 80023ae:	617b      	str	r3, [r7, #20]
	    	if(yaw<360&&yaw>180){
 80023b0:	e35d      	b.n	8002a6e <HAL_TIM_PeriodElapsedCallback+0xbb6>
	    	}
	    	else if(yaw>0&&yaw<180){
 80023b2:	f04f 0100 	mov.w	r1, #0
 80023b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80023b8:	f7fe ff0c 	bl	80011d4 <__aeabi_fcmpgt>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d100      	bne.n	80023c4 <HAL_TIM_PeriodElapsedCallback+0x50c>
	    	if(yaw<360&&yaw>180){
 80023c2:	e354      	b.n	8002a6e <HAL_TIM_PeriodElapsedCallback+0xbb6>
	    	else if(yaw>0&&yaw<180){
 80023c4:	4943      	ldr	r1, [pc, #268]	; (80024d4 <HAL_TIM_PeriodElapsedCallback+0x61c>)
 80023c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80023c8:	f7fe fee6 	bl	8001198 <__aeabi_fcmplt>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d100      	bne.n	80023d4 <HAL_TIM_PeriodElapsedCallback+0x51c>
	    	if(yaw<360&&yaw>180){
 80023d2:	e34c      	b.n	8002a6e <HAL_TIM_PeriodElapsedCallback+0xbb6>
	    		pwm[0]=Ori_pwm+pwmphi>1000?1000:Ori_pwm+pwmphi;
 80023d4:	69b8      	ldr	r0, [r7, #24]
 80023d6:	f7fe fced 	bl	8000db4 <__aeabi_i2f>
 80023da:	4603      	mov	r3, r0
 80023dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80023de:	4618      	mov	r0, r3
 80023e0:	f7fe fc34 	bl	8000c4c <__addsf3>
 80023e4:	4603      	mov	r3, r0
 80023e6:	4936      	ldr	r1, [pc, #216]	; (80024c0 <HAL_TIM_PeriodElapsedCallback+0x608>)
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7fe fef3 	bl	80011d4 <__aeabi_fcmpgt>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d002      	beq.n	80023fa <HAL_TIM_PeriodElapsedCallback+0x542>
 80023f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023f8:	e00c      	b.n	8002414 <HAL_TIM_PeriodElapsedCallback+0x55c>
 80023fa:	69b8      	ldr	r0, [r7, #24]
 80023fc:	f7fe fcda 	bl	8000db4 <__aeabi_i2f>
 8002400:	4603      	mov	r3, r0
 8002402:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002404:	4618      	mov	r0, r3
 8002406:	f7fe fc21 	bl	8000c4c <__addsf3>
 800240a:	4603      	mov	r3, r0
 800240c:	4618      	mov	r0, r3
 800240e:	f7fe feeb 	bl	80011e8 <__aeabi_f2iz>
 8002412:	4603      	mov	r3, r0
 8002414:	60bb      	str	r3, [r7, #8]
	    		pwm[1]=Ori_pwm-pwmphi<0?0:Ori_pwm-pwmphi;
 8002416:	69b8      	ldr	r0, [r7, #24]
 8002418:	f7fe fccc 	bl	8000db4 <__aeabi_i2f>
 800241c:	4603      	mov	r3, r0
 800241e:	4619      	mov	r1, r3
 8002420:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002422:	f7fe fc11 	bl	8000c48 <__aeabi_fsub>
 8002426:	4603      	mov	r3, r0
 8002428:	f04f 0100 	mov.w	r1, #0
 800242c:	4618      	mov	r0, r3
 800242e:	f7fe feb3 	bl	8001198 <__aeabi_fcmplt>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d001      	beq.n	800243c <HAL_TIM_PeriodElapsedCallback+0x584>
 8002438:	2300      	movs	r3, #0
 800243a:	e00c      	b.n	8002456 <HAL_TIM_PeriodElapsedCallback+0x59e>
 800243c:	69b8      	ldr	r0, [r7, #24]
 800243e:	f7fe fcb9 	bl	8000db4 <__aeabi_i2f>
 8002442:	4603      	mov	r3, r0
 8002444:	4619      	mov	r1, r3
 8002446:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002448:	f7fe fbfe 	bl	8000c48 <__aeabi_fsub>
 800244c:	4603      	mov	r3, r0
 800244e:	4618      	mov	r0, r3
 8002450:	f7fe feca 	bl	80011e8 <__aeabi_f2iz>
 8002454:	4603      	mov	r3, r0
 8002456:	60fb      	str	r3, [r7, #12]
	    		pwm[2]=Ori_pwm-pwmphi<0?0:Ori_pwm-pwmphi;
 8002458:	69b8      	ldr	r0, [r7, #24]
 800245a:	f7fe fcab 	bl	8000db4 <__aeabi_i2f>
 800245e:	4603      	mov	r3, r0
 8002460:	4619      	mov	r1, r3
 8002462:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002464:	f7fe fbf0 	bl	8000c48 <__aeabi_fsub>
 8002468:	4603      	mov	r3, r0
 800246a:	f04f 0100 	mov.w	r1, #0
 800246e:	4618      	mov	r0, r3
 8002470:	f7fe fe92 	bl	8001198 <__aeabi_fcmplt>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d001      	beq.n	800247e <HAL_TIM_PeriodElapsedCallback+0x5c6>
 800247a:	2300      	movs	r3, #0
 800247c:	e00c      	b.n	8002498 <HAL_TIM_PeriodElapsedCallback+0x5e0>
 800247e:	69b8      	ldr	r0, [r7, #24]
 8002480:	f7fe fc98 	bl	8000db4 <__aeabi_i2f>
 8002484:	4603      	mov	r3, r0
 8002486:	4619      	mov	r1, r3
 8002488:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800248a:	f7fe fbdd 	bl	8000c48 <__aeabi_fsub>
 800248e:	4603      	mov	r3, r0
 8002490:	4618      	mov	r0, r3
 8002492:	f7fe fea9 	bl	80011e8 <__aeabi_f2iz>
 8002496:	4603      	mov	r3, r0
 8002498:	613b      	str	r3, [r7, #16]
	    		pwm[3]=Ori_pwm+pwmphi>1000?1000:Ori_pwm+pwmphi;
 800249a:	69b8      	ldr	r0, [r7, #24]
 800249c:	f7fe fc8a 	bl	8000db4 <__aeabi_i2f>
 80024a0:	4603      	mov	r3, r0
 80024a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80024a4:	4618      	mov	r0, r3
 80024a6:	f7fe fbd1 	bl	8000c4c <__addsf3>
 80024aa:	4603      	mov	r3, r0
 80024ac:	4904      	ldr	r1, [pc, #16]	; (80024c0 <HAL_TIM_PeriodElapsedCallback+0x608>)
 80024ae:	4618      	mov	r0, r3
 80024b0:	f7fe fe90 	bl	80011d4 <__aeabi_fcmpgt>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d00e      	beq.n	80024d8 <HAL_TIM_PeriodElapsedCallback+0x620>
 80024ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024be:	e018      	b.n	80024f2 <HAL_TIM_PeriodElapsedCallback+0x63a>
 80024c0:	447a0000 	.word	0x447a0000
 80024c4:	20000524 	.word	0x20000524
 80024c8:	20000520 	.word	0x20000520
 80024cc:	41200000 	.word	0x41200000
 80024d0:	43b40000 	.word	0x43b40000
 80024d4:	43340000 	.word	0x43340000
 80024d8:	69b8      	ldr	r0, [r7, #24]
 80024da:	f7fe fc6b 	bl	8000db4 <__aeabi_i2f>
 80024de:	4603      	mov	r3, r0
 80024e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80024e2:	4618      	mov	r0, r3
 80024e4:	f7fe fbb2 	bl	8000c4c <__addsf3>
 80024e8:	4603      	mov	r3, r0
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7fe fe7c 	bl	80011e8 <__aeabi_f2iz>
 80024f0:	4603      	mov	r3, r0
 80024f2:	617b      	str	r3, [r7, #20]
	    	if(yaw<360&&yaw>180){
 80024f4:	e2bb      	b.n	8002a6e <HAL_TIM_PeriodElapsedCallback+0xbb6>
	    	}
	    }
	    else if(dir==1&&vset>10){
 80024f6:	4b9d      	ldr	r3, [pc, #628]	; (800276c <HAL_TIM_PeriodElapsedCallback+0x8b4>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	f040 8142 	bne.w	8002784 <HAL_TIM_PeriodElapsedCallback+0x8cc>
 8002500:	4b9b      	ldr	r3, [pc, #620]	; (8002770 <HAL_TIM_PeriodElapsedCallback+0x8b8>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	499b      	ldr	r1, [pc, #620]	; (8002774 <HAL_TIM_PeriodElapsedCallback+0x8bc>)
 8002506:	4618      	mov	r0, r3
 8002508:	f7fe fe64 	bl	80011d4 <__aeabi_fcmpgt>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	f000 8138 	beq.w	8002784 <HAL_TIM_PeriodElapsedCallback+0x8cc>
	    	if(yaw<360&&yaw>180){
 8002514:	4998      	ldr	r1, [pc, #608]	; (8002778 <HAL_TIM_PeriodElapsedCallback+0x8c0>)
 8002516:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002518:	f7fe fe3e 	bl	8001198 <__aeabi_fcmplt>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	f000 808d 	beq.w	800263e <HAL_TIM_PeriodElapsedCallback+0x786>
 8002524:	4995      	ldr	r1, [pc, #596]	; (800277c <HAL_TIM_PeriodElapsedCallback+0x8c4>)
 8002526:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002528:	f7fe fe54 	bl	80011d4 <__aeabi_fcmpgt>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	f000 8085 	beq.w	800263e <HAL_TIM_PeriodElapsedCallback+0x786>
	    		pwm[0]=Ori_pwm+pwmphi>1000?1000:Ori_pwm+pwmphi;
 8002534:	69b8      	ldr	r0, [r7, #24]
 8002536:	f7fe fc3d 	bl	8000db4 <__aeabi_i2f>
 800253a:	4603      	mov	r3, r0
 800253c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800253e:	4618      	mov	r0, r3
 8002540:	f7fe fb84 	bl	8000c4c <__addsf3>
 8002544:	4603      	mov	r3, r0
 8002546:	498e      	ldr	r1, [pc, #568]	; (8002780 <HAL_TIM_PeriodElapsedCallback+0x8c8>)
 8002548:	4618      	mov	r0, r3
 800254a:	f7fe fe43 	bl	80011d4 <__aeabi_fcmpgt>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d002      	beq.n	800255a <HAL_TIM_PeriodElapsedCallback+0x6a2>
 8002554:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002558:	e00c      	b.n	8002574 <HAL_TIM_PeriodElapsedCallback+0x6bc>
 800255a:	69b8      	ldr	r0, [r7, #24]
 800255c:	f7fe fc2a 	bl	8000db4 <__aeabi_i2f>
 8002560:	4603      	mov	r3, r0
 8002562:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002564:	4618      	mov	r0, r3
 8002566:	f7fe fb71 	bl	8000c4c <__addsf3>
 800256a:	4603      	mov	r3, r0
 800256c:	4618      	mov	r0, r3
 800256e:	f7fe fe3b 	bl	80011e8 <__aeabi_f2iz>
 8002572:	4603      	mov	r3, r0
 8002574:	60bb      	str	r3, [r7, #8]
	    		pwm[2]=Ori_pwm-pwmphi<0?0:Ori_pwm-pwmphi;
 8002576:	69b8      	ldr	r0, [r7, #24]
 8002578:	f7fe fc1c 	bl	8000db4 <__aeabi_i2f>
 800257c:	4603      	mov	r3, r0
 800257e:	4619      	mov	r1, r3
 8002580:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002582:	f7fe fb61 	bl	8000c48 <__aeabi_fsub>
 8002586:	4603      	mov	r3, r0
 8002588:	f04f 0100 	mov.w	r1, #0
 800258c:	4618      	mov	r0, r3
 800258e:	f7fe fe03 	bl	8001198 <__aeabi_fcmplt>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d001      	beq.n	800259c <HAL_TIM_PeriodElapsedCallback+0x6e4>
 8002598:	2300      	movs	r3, #0
 800259a:	e00c      	b.n	80025b6 <HAL_TIM_PeriodElapsedCallback+0x6fe>
 800259c:	69b8      	ldr	r0, [r7, #24]
 800259e:	f7fe fc09 	bl	8000db4 <__aeabi_i2f>
 80025a2:	4603      	mov	r3, r0
 80025a4:	4619      	mov	r1, r3
 80025a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80025a8:	f7fe fb4e 	bl	8000c48 <__aeabi_fsub>
 80025ac:	4603      	mov	r3, r0
 80025ae:	4618      	mov	r0, r3
 80025b0:	f7fe fe1a 	bl	80011e8 <__aeabi_f2iz>
 80025b4:	4603      	mov	r3, r0
 80025b6:	613b      	str	r3, [r7, #16]
	    		pwm[1]=Ori_pwm+pwmphi>1000?1000:Ori_pwm+pwmphi;
 80025b8:	69b8      	ldr	r0, [r7, #24]
 80025ba:	f7fe fbfb 	bl	8000db4 <__aeabi_i2f>
 80025be:	4603      	mov	r3, r0
 80025c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80025c2:	4618      	mov	r0, r3
 80025c4:	f7fe fb42 	bl	8000c4c <__addsf3>
 80025c8:	4603      	mov	r3, r0
 80025ca:	496d      	ldr	r1, [pc, #436]	; (8002780 <HAL_TIM_PeriodElapsedCallback+0x8c8>)
 80025cc:	4618      	mov	r0, r3
 80025ce:	f7fe fe01 	bl	80011d4 <__aeabi_fcmpgt>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d002      	beq.n	80025de <HAL_TIM_PeriodElapsedCallback+0x726>
 80025d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025dc:	e00c      	b.n	80025f8 <HAL_TIM_PeriodElapsedCallback+0x740>
 80025de:	69b8      	ldr	r0, [r7, #24]
 80025e0:	f7fe fbe8 	bl	8000db4 <__aeabi_i2f>
 80025e4:	4603      	mov	r3, r0
 80025e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80025e8:	4618      	mov	r0, r3
 80025ea:	f7fe fb2f 	bl	8000c4c <__addsf3>
 80025ee:	4603      	mov	r3, r0
 80025f0:	4618      	mov	r0, r3
 80025f2:	f7fe fdf9 	bl	80011e8 <__aeabi_f2iz>
 80025f6:	4603      	mov	r3, r0
 80025f8:	60fb      	str	r3, [r7, #12]
	    		pwm[3]=Ori_pwm-pwmphi<0?0:Ori_pwm-pwmphi;
 80025fa:	69b8      	ldr	r0, [r7, #24]
 80025fc:	f7fe fbda 	bl	8000db4 <__aeabi_i2f>
 8002600:	4603      	mov	r3, r0
 8002602:	4619      	mov	r1, r3
 8002604:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002606:	f7fe fb1f 	bl	8000c48 <__aeabi_fsub>
 800260a:	4603      	mov	r3, r0
 800260c:	f04f 0100 	mov.w	r1, #0
 8002610:	4618      	mov	r0, r3
 8002612:	f7fe fdc1 	bl	8001198 <__aeabi_fcmplt>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d001      	beq.n	8002620 <HAL_TIM_PeriodElapsedCallback+0x768>
 800261c:	2300      	movs	r3, #0
 800261e:	e00c      	b.n	800263a <HAL_TIM_PeriodElapsedCallback+0x782>
 8002620:	69b8      	ldr	r0, [r7, #24]
 8002622:	f7fe fbc7 	bl	8000db4 <__aeabi_i2f>
 8002626:	4603      	mov	r3, r0
 8002628:	4619      	mov	r1, r3
 800262a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800262c:	f7fe fb0c 	bl	8000c48 <__aeabi_fsub>
 8002630:	4603      	mov	r3, r0
 8002632:	4618      	mov	r0, r3
 8002634:	f7fe fdd8 	bl	80011e8 <__aeabi_f2iz>
 8002638:	4603      	mov	r3, r0
 800263a:	617b      	str	r3, [r7, #20]
	    	if(yaw<360&&yaw>180){
 800263c:	e217      	b.n	8002a6e <HAL_TIM_PeriodElapsedCallback+0xbb6>
	    	}
	    	else if(yaw>0&&yaw<180){
 800263e:	f04f 0100 	mov.w	r1, #0
 8002642:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002644:	f7fe fdc6 	bl	80011d4 <__aeabi_fcmpgt>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d100      	bne.n	8002650 <HAL_TIM_PeriodElapsedCallback+0x798>
	    	if(yaw<360&&yaw>180){
 800264e:	e20e      	b.n	8002a6e <HAL_TIM_PeriodElapsedCallback+0xbb6>
	    	else if(yaw>0&&yaw<180){
 8002650:	494a      	ldr	r1, [pc, #296]	; (800277c <HAL_TIM_PeriodElapsedCallback+0x8c4>)
 8002652:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002654:	f7fe fda0 	bl	8001198 <__aeabi_fcmplt>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d100      	bne.n	8002660 <HAL_TIM_PeriodElapsedCallback+0x7a8>
	    	if(yaw<360&&yaw>180){
 800265e:	e206      	b.n	8002a6e <HAL_TIM_PeriodElapsedCallback+0xbb6>
	    		pwm[0]=Ori_pwm-pwmphi<0?0:Ori_pwm-pwmphi;
 8002660:	69b8      	ldr	r0, [r7, #24]
 8002662:	f7fe fba7 	bl	8000db4 <__aeabi_i2f>
 8002666:	4603      	mov	r3, r0
 8002668:	4619      	mov	r1, r3
 800266a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800266c:	f7fe faec 	bl	8000c48 <__aeabi_fsub>
 8002670:	4603      	mov	r3, r0
 8002672:	f04f 0100 	mov.w	r1, #0
 8002676:	4618      	mov	r0, r3
 8002678:	f7fe fd8e 	bl	8001198 <__aeabi_fcmplt>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d001      	beq.n	8002686 <HAL_TIM_PeriodElapsedCallback+0x7ce>
 8002682:	2300      	movs	r3, #0
 8002684:	e00c      	b.n	80026a0 <HAL_TIM_PeriodElapsedCallback+0x7e8>
 8002686:	69b8      	ldr	r0, [r7, #24]
 8002688:	f7fe fb94 	bl	8000db4 <__aeabi_i2f>
 800268c:	4603      	mov	r3, r0
 800268e:	4619      	mov	r1, r3
 8002690:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002692:	f7fe fad9 	bl	8000c48 <__aeabi_fsub>
 8002696:	4603      	mov	r3, r0
 8002698:	4618      	mov	r0, r3
 800269a:	f7fe fda5 	bl	80011e8 <__aeabi_f2iz>
 800269e:	4603      	mov	r3, r0
 80026a0:	60bb      	str	r3, [r7, #8]
	    		pwm[2]=Ori_pwm+pwmphi>1000?1000:Ori_pwm+pwmphi;
 80026a2:	69b8      	ldr	r0, [r7, #24]
 80026a4:	f7fe fb86 	bl	8000db4 <__aeabi_i2f>
 80026a8:	4603      	mov	r3, r0
 80026aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80026ac:	4618      	mov	r0, r3
 80026ae:	f7fe facd 	bl	8000c4c <__addsf3>
 80026b2:	4603      	mov	r3, r0
 80026b4:	4932      	ldr	r1, [pc, #200]	; (8002780 <HAL_TIM_PeriodElapsedCallback+0x8c8>)
 80026b6:	4618      	mov	r0, r3
 80026b8:	f7fe fd8c 	bl	80011d4 <__aeabi_fcmpgt>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d002      	beq.n	80026c8 <HAL_TIM_PeriodElapsedCallback+0x810>
 80026c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026c6:	e00c      	b.n	80026e2 <HAL_TIM_PeriodElapsedCallback+0x82a>
 80026c8:	69b8      	ldr	r0, [r7, #24]
 80026ca:	f7fe fb73 	bl	8000db4 <__aeabi_i2f>
 80026ce:	4603      	mov	r3, r0
 80026d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80026d2:	4618      	mov	r0, r3
 80026d4:	f7fe faba 	bl	8000c4c <__addsf3>
 80026d8:	4603      	mov	r3, r0
 80026da:	4618      	mov	r0, r3
 80026dc:	f7fe fd84 	bl	80011e8 <__aeabi_f2iz>
 80026e0:	4603      	mov	r3, r0
 80026e2:	613b      	str	r3, [r7, #16]
	    		pwm[1]=Ori_pwm-pwmphi<0?0:Ori_pwm-pwmphi;
 80026e4:	69b8      	ldr	r0, [r7, #24]
 80026e6:	f7fe fb65 	bl	8000db4 <__aeabi_i2f>
 80026ea:	4603      	mov	r3, r0
 80026ec:	4619      	mov	r1, r3
 80026ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80026f0:	f7fe faaa 	bl	8000c48 <__aeabi_fsub>
 80026f4:	4603      	mov	r3, r0
 80026f6:	f04f 0100 	mov.w	r1, #0
 80026fa:	4618      	mov	r0, r3
 80026fc:	f7fe fd4c 	bl	8001198 <__aeabi_fcmplt>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d001      	beq.n	800270a <HAL_TIM_PeriodElapsedCallback+0x852>
 8002706:	2300      	movs	r3, #0
 8002708:	e00c      	b.n	8002724 <HAL_TIM_PeriodElapsedCallback+0x86c>
 800270a:	69b8      	ldr	r0, [r7, #24]
 800270c:	f7fe fb52 	bl	8000db4 <__aeabi_i2f>
 8002710:	4603      	mov	r3, r0
 8002712:	4619      	mov	r1, r3
 8002714:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002716:	f7fe fa97 	bl	8000c48 <__aeabi_fsub>
 800271a:	4603      	mov	r3, r0
 800271c:	4618      	mov	r0, r3
 800271e:	f7fe fd63 	bl	80011e8 <__aeabi_f2iz>
 8002722:	4603      	mov	r3, r0
 8002724:	60fb      	str	r3, [r7, #12]
	    		pwm[3]=Ori_pwm+pwmphi>1000?1000:Ori_pwm+pwmphi;
 8002726:	69b8      	ldr	r0, [r7, #24]
 8002728:	f7fe fb44 	bl	8000db4 <__aeabi_i2f>
 800272c:	4603      	mov	r3, r0
 800272e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002730:	4618      	mov	r0, r3
 8002732:	f7fe fa8b 	bl	8000c4c <__addsf3>
 8002736:	4603      	mov	r3, r0
 8002738:	4911      	ldr	r1, [pc, #68]	; (8002780 <HAL_TIM_PeriodElapsedCallback+0x8c8>)
 800273a:	4618      	mov	r0, r3
 800273c:	f7fe fd4a 	bl	80011d4 <__aeabi_fcmpgt>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d002      	beq.n	800274c <HAL_TIM_PeriodElapsedCallback+0x894>
 8002746:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800274a:	e00c      	b.n	8002766 <HAL_TIM_PeriodElapsedCallback+0x8ae>
 800274c:	69b8      	ldr	r0, [r7, #24]
 800274e:	f7fe fb31 	bl	8000db4 <__aeabi_i2f>
 8002752:	4603      	mov	r3, r0
 8002754:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002756:	4618      	mov	r0, r3
 8002758:	f7fe fa78 	bl	8000c4c <__addsf3>
 800275c:	4603      	mov	r3, r0
 800275e:	4618      	mov	r0, r3
 8002760:	f7fe fd42 	bl	80011e8 <__aeabi_f2iz>
 8002764:	4603      	mov	r3, r0
 8002766:	617b      	str	r3, [r7, #20]
	    	if(yaw<360&&yaw>180){
 8002768:	e181      	b.n	8002a6e <HAL_TIM_PeriodElapsedCallback+0xbb6>
 800276a:	bf00      	nop
 800276c:	20000524 	.word	0x20000524
 8002770:	20000520 	.word	0x20000520
 8002774:	41200000 	.word	0x41200000
 8002778:	43b40000 	.word	0x43b40000
 800277c:	43340000 	.word	0x43340000
 8002780:	447a0000 	.word	0x447a0000
	    	}
	    }
	    else if(dir==0&&vset>10){
 8002784:	4ba3      	ldr	r3, [pc, #652]	; (8002a14 <HAL_TIM_PeriodElapsedCallback+0xb5c>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	2b00      	cmp	r3, #0
 800278a:	f040 8135 	bne.w	80029f8 <HAL_TIM_PeriodElapsedCallback+0xb40>
 800278e:	4ba2      	ldr	r3, [pc, #648]	; (8002a18 <HAL_TIM_PeriodElapsedCallback+0xb60>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	49a2      	ldr	r1, [pc, #648]	; (8002a1c <HAL_TIM_PeriodElapsedCallback+0xb64>)
 8002794:	4618      	mov	r0, r3
 8002796:	f7fe fd1d 	bl	80011d4 <__aeabi_fcmpgt>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	f000 812b 	beq.w	80029f8 <HAL_TIM_PeriodElapsedCallback+0xb40>
	    	if(yaw>0&&yaw<180){
 80027a2:	f04f 0100 	mov.w	r1, #0
 80027a6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80027a8:	f7fe fd14 	bl	80011d4 <__aeabi_fcmpgt>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	f000 808d 	beq.w	80028ce <HAL_TIM_PeriodElapsedCallback+0xa16>
 80027b4:	499a      	ldr	r1, [pc, #616]	; (8002a20 <HAL_TIM_PeriodElapsedCallback+0xb68>)
 80027b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80027b8:	f7fe fcee 	bl	8001198 <__aeabi_fcmplt>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	f000 8085 	beq.w	80028ce <HAL_TIM_PeriodElapsedCallback+0xa16>
	    		pwm[0]=Ori_pwm+pwmphi>1000?1000:Ori_pwm+pwmphi;
 80027c4:	69b8      	ldr	r0, [r7, #24]
 80027c6:	f7fe faf5 	bl	8000db4 <__aeabi_i2f>
 80027ca:	4603      	mov	r3, r0
 80027cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80027ce:	4618      	mov	r0, r3
 80027d0:	f7fe fa3c 	bl	8000c4c <__addsf3>
 80027d4:	4603      	mov	r3, r0
 80027d6:	4993      	ldr	r1, [pc, #588]	; (8002a24 <HAL_TIM_PeriodElapsedCallback+0xb6c>)
 80027d8:	4618      	mov	r0, r3
 80027da:	f7fe fcfb 	bl	80011d4 <__aeabi_fcmpgt>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d002      	beq.n	80027ea <HAL_TIM_PeriodElapsedCallback+0x932>
 80027e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027e8:	e00c      	b.n	8002804 <HAL_TIM_PeriodElapsedCallback+0x94c>
 80027ea:	69b8      	ldr	r0, [r7, #24]
 80027ec:	f7fe fae2 	bl	8000db4 <__aeabi_i2f>
 80027f0:	4603      	mov	r3, r0
 80027f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80027f4:	4618      	mov	r0, r3
 80027f6:	f7fe fa29 	bl	8000c4c <__addsf3>
 80027fa:	4603      	mov	r3, r0
 80027fc:	4618      	mov	r0, r3
 80027fe:	f7fe fcf3 	bl	80011e8 <__aeabi_f2iz>
 8002802:	4603      	mov	r3, r0
 8002804:	60bb      	str	r3, [r7, #8]
	    		pwm[2]=Ori_pwm-pwmphi<0?0:Ori_pwm-pwmphi;
 8002806:	69b8      	ldr	r0, [r7, #24]
 8002808:	f7fe fad4 	bl	8000db4 <__aeabi_i2f>
 800280c:	4603      	mov	r3, r0
 800280e:	4619      	mov	r1, r3
 8002810:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002812:	f7fe fa19 	bl	8000c48 <__aeabi_fsub>
 8002816:	4603      	mov	r3, r0
 8002818:	f04f 0100 	mov.w	r1, #0
 800281c:	4618      	mov	r0, r3
 800281e:	f7fe fcbb 	bl	8001198 <__aeabi_fcmplt>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d001      	beq.n	800282c <HAL_TIM_PeriodElapsedCallback+0x974>
 8002828:	2300      	movs	r3, #0
 800282a:	e00c      	b.n	8002846 <HAL_TIM_PeriodElapsedCallback+0x98e>
 800282c:	69b8      	ldr	r0, [r7, #24]
 800282e:	f7fe fac1 	bl	8000db4 <__aeabi_i2f>
 8002832:	4603      	mov	r3, r0
 8002834:	4619      	mov	r1, r3
 8002836:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002838:	f7fe fa06 	bl	8000c48 <__aeabi_fsub>
 800283c:	4603      	mov	r3, r0
 800283e:	4618      	mov	r0, r3
 8002840:	f7fe fcd2 	bl	80011e8 <__aeabi_f2iz>
 8002844:	4603      	mov	r3, r0
 8002846:	613b      	str	r3, [r7, #16]
	    		pwm[1]=Ori_pwm+pwmphi>1000?1000:Ori_pwm+pwmphi;
 8002848:	69b8      	ldr	r0, [r7, #24]
 800284a:	f7fe fab3 	bl	8000db4 <__aeabi_i2f>
 800284e:	4603      	mov	r3, r0
 8002850:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002852:	4618      	mov	r0, r3
 8002854:	f7fe f9fa 	bl	8000c4c <__addsf3>
 8002858:	4603      	mov	r3, r0
 800285a:	4972      	ldr	r1, [pc, #456]	; (8002a24 <HAL_TIM_PeriodElapsedCallback+0xb6c>)
 800285c:	4618      	mov	r0, r3
 800285e:	f7fe fcb9 	bl	80011d4 <__aeabi_fcmpgt>
 8002862:	4603      	mov	r3, r0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d002      	beq.n	800286e <HAL_TIM_PeriodElapsedCallback+0x9b6>
 8002868:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800286c:	e00c      	b.n	8002888 <HAL_TIM_PeriodElapsedCallback+0x9d0>
 800286e:	69b8      	ldr	r0, [r7, #24]
 8002870:	f7fe faa0 	bl	8000db4 <__aeabi_i2f>
 8002874:	4603      	mov	r3, r0
 8002876:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002878:	4618      	mov	r0, r3
 800287a:	f7fe f9e7 	bl	8000c4c <__addsf3>
 800287e:	4603      	mov	r3, r0
 8002880:	4618      	mov	r0, r3
 8002882:	f7fe fcb1 	bl	80011e8 <__aeabi_f2iz>
 8002886:	4603      	mov	r3, r0
 8002888:	60fb      	str	r3, [r7, #12]
	    		pwm[3]=Ori_pwm-pwmphi<0?0:Ori_pwm-pwmphi;
 800288a:	69b8      	ldr	r0, [r7, #24]
 800288c:	f7fe fa92 	bl	8000db4 <__aeabi_i2f>
 8002890:	4603      	mov	r3, r0
 8002892:	4619      	mov	r1, r3
 8002894:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002896:	f7fe f9d7 	bl	8000c48 <__aeabi_fsub>
 800289a:	4603      	mov	r3, r0
 800289c:	f04f 0100 	mov.w	r1, #0
 80028a0:	4618      	mov	r0, r3
 80028a2:	f7fe fc79 	bl	8001198 <__aeabi_fcmplt>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d001      	beq.n	80028b0 <HAL_TIM_PeriodElapsedCallback+0x9f8>
 80028ac:	2300      	movs	r3, #0
 80028ae:	e00c      	b.n	80028ca <HAL_TIM_PeriodElapsedCallback+0xa12>
 80028b0:	69b8      	ldr	r0, [r7, #24]
 80028b2:	f7fe fa7f 	bl	8000db4 <__aeabi_i2f>
 80028b6:	4603      	mov	r3, r0
 80028b8:	4619      	mov	r1, r3
 80028ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028bc:	f7fe f9c4 	bl	8000c48 <__aeabi_fsub>
 80028c0:	4603      	mov	r3, r0
 80028c2:	4618      	mov	r0, r3
 80028c4:	f7fe fc90 	bl	80011e8 <__aeabi_f2iz>
 80028c8:	4603      	mov	r3, r0
 80028ca:	617b      	str	r3, [r7, #20]
	    	if(yaw>0&&yaw<180){
 80028cc:	e0cf      	b.n	8002a6e <HAL_TIM_PeriodElapsedCallback+0xbb6>
	    	}
	    	else if(yaw<360&&yaw>180){
 80028ce:	4956      	ldr	r1, [pc, #344]	; (8002a28 <HAL_TIM_PeriodElapsedCallback+0xb70>)
 80028d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80028d2:	f7fe fc61 	bl	8001198 <__aeabi_fcmplt>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d100      	bne.n	80028de <HAL_TIM_PeriodElapsedCallback+0xa26>
	    	if(yaw>0&&yaw<180){
 80028dc:	e0c7      	b.n	8002a6e <HAL_TIM_PeriodElapsedCallback+0xbb6>
	    	else if(yaw<360&&yaw>180){
 80028de:	4950      	ldr	r1, [pc, #320]	; (8002a20 <HAL_TIM_PeriodElapsedCallback+0xb68>)
 80028e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80028e2:	f7fe fc77 	bl	80011d4 <__aeabi_fcmpgt>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d100      	bne.n	80028ee <HAL_TIM_PeriodElapsedCallback+0xa36>
	    	if(yaw>0&&yaw<180){
 80028ec:	e0bf      	b.n	8002a6e <HAL_TIM_PeriodElapsedCallback+0xbb6>
	    		pwm[0]=Ori_pwm-pwmphi<0?0:Ori_pwm-pwmphi;
 80028ee:	69b8      	ldr	r0, [r7, #24]
 80028f0:	f7fe fa60 	bl	8000db4 <__aeabi_i2f>
 80028f4:	4603      	mov	r3, r0
 80028f6:	4619      	mov	r1, r3
 80028f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028fa:	f7fe f9a5 	bl	8000c48 <__aeabi_fsub>
 80028fe:	4603      	mov	r3, r0
 8002900:	f04f 0100 	mov.w	r1, #0
 8002904:	4618      	mov	r0, r3
 8002906:	f7fe fc47 	bl	8001198 <__aeabi_fcmplt>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d001      	beq.n	8002914 <HAL_TIM_PeriodElapsedCallback+0xa5c>
 8002910:	2300      	movs	r3, #0
 8002912:	e00c      	b.n	800292e <HAL_TIM_PeriodElapsedCallback+0xa76>
 8002914:	69b8      	ldr	r0, [r7, #24]
 8002916:	f7fe fa4d 	bl	8000db4 <__aeabi_i2f>
 800291a:	4603      	mov	r3, r0
 800291c:	4619      	mov	r1, r3
 800291e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002920:	f7fe f992 	bl	8000c48 <__aeabi_fsub>
 8002924:	4603      	mov	r3, r0
 8002926:	4618      	mov	r0, r3
 8002928:	f7fe fc5e 	bl	80011e8 <__aeabi_f2iz>
 800292c:	4603      	mov	r3, r0
 800292e:	60bb      	str	r3, [r7, #8]
	    		pwm[2]=Ori_pwm+pwmphi>1000?1000:Ori_pwm+pwmphi;
 8002930:	69b8      	ldr	r0, [r7, #24]
 8002932:	f7fe fa3f 	bl	8000db4 <__aeabi_i2f>
 8002936:	4603      	mov	r3, r0
 8002938:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800293a:	4618      	mov	r0, r3
 800293c:	f7fe f986 	bl	8000c4c <__addsf3>
 8002940:	4603      	mov	r3, r0
 8002942:	4938      	ldr	r1, [pc, #224]	; (8002a24 <HAL_TIM_PeriodElapsedCallback+0xb6c>)
 8002944:	4618      	mov	r0, r3
 8002946:	f7fe fc45 	bl	80011d4 <__aeabi_fcmpgt>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d002      	beq.n	8002956 <HAL_TIM_PeriodElapsedCallback+0xa9e>
 8002950:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002954:	e00c      	b.n	8002970 <HAL_TIM_PeriodElapsedCallback+0xab8>
 8002956:	69b8      	ldr	r0, [r7, #24]
 8002958:	f7fe fa2c 	bl	8000db4 <__aeabi_i2f>
 800295c:	4603      	mov	r3, r0
 800295e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002960:	4618      	mov	r0, r3
 8002962:	f7fe f973 	bl	8000c4c <__addsf3>
 8002966:	4603      	mov	r3, r0
 8002968:	4618      	mov	r0, r3
 800296a:	f7fe fc3d 	bl	80011e8 <__aeabi_f2iz>
 800296e:	4603      	mov	r3, r0
 8002970:	613b      	str	r3, [r7, #16]
	    		pwm[1]=Ori_pwm-pwmphi<0?0:Ori_pwm-pwmphi;
 8002972:	69b8      	ldr	r0, [r7, #24]
 8002974:	f7fe fa1e 	bl	8000db4 <__aeabi_i2f>
 8002978:	4603      	mov	r3, r0
 800297a:	4619      	mov	r1, r3
 800297c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800297e:	f7fe f963 	bl	8000c48 <__aeabi_fsub>
 8002982:	4603      	mov	r3, r0
 8002984:	f04f 0100 	mov.w	r1, #0
 8002988:	4618      	mov	r0, r3
 800298a:	f7fe fc05 	bl	8001198 <__aeabi_fcmplt>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d001      	beq.n	8002998 <HAL_TIM_PeriodElapsedCallback+0xae0>
 8002994:	2300      	movs	r3, #0
 8002996:	e00c      	b.n	80029b2 <HAL_TIM_PeriodElapsedCallback+0xafa>
 8002998:	69b8      	ldr	r0, [r7, #24]
 800299a:	f7fe fa0b 	bl	8000db4 <__aeabi_i2f>
 800299e:	4603      	mov	r3, r0
 80029a0:	4619      	mov	r1, r3
 80029a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029a4:	f7fe f950 	bl	8000c48 <__aeabi_fsub>
 80029a8:	4603      	mov	r3, r0
 80029aa:	4618      	mov	r0, r3
 80029ac:	f7fe fc1c 	bl	80011e8 <__aeabi_f2iz>
 80029b0:	4603      	mov	r3, r0
 80029b2:	60fb      	str	r3, [r7, #12]
	    		pwm[3]=Ori_pwm+pwmphi>1000?1000:Ori_pwm+pwmphi;
 80029b4:	69b8      	ldr	r0, [r7, #24]
 80029b6:	f7fe f9fd 	bl	8000db4 <__aeabi_i2f>
 80029ba:	4603      	mov	r3, r0
 80029bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80029be:	4618      	mov	r0, r3
 80029c0:	f7fe f944 	bl	8000c4c <__addsf3>
 80029c4:	4603      	mov	r3, r0
 80029c6:	4917      	ldr	r1, [pc, #92]	; (8002a24 <HAL_TIM_PeriodElapsedCallback+0xb6c>)
 80029c8:	4618      	mov	r0, r3
 80029ca:	f7fe fc03 	bl	80011d4 <__aeabi_fcmpgt>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d002      	beq.n	80029da <HAL_TIM_PeriodElapsedCallback+0xb22>
 80029d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029d8:	e00c      	b.n	80029f4 <HAL_TIM_PeriodElapsedCallback+0xb3c>
 80029da:	69b8      	ldr	r0, [r7, #24]
 80029dc:	f7fe f9ea 	bl	8000db4 <__aeabi_i2f>
 80029e0:	4603      	mov	r3, r0
 80029e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80029e4:	4618      	mov	r0, r3
 80029e6:	f7fe f931 	bl	8000c4c <__addsf3>
 80029ea:	4603      	mov	r3, r0
 80029ec:	4618      	mov	r0, r3
 80029ee:	f7fe fbfb 	bl	80011e8 <__aeabi_f2iz>
 80029f2:	4603      	mov	r3, r0
 80029f4:	617b      	str	r3, [r7, #20]
	    	if(yaw>0&&yaw<180){
 80029f6:	e03a      	b.n	8002a6e <HAL_TIM_PeriodElapsedCallback+0xbb6>
	    	}
	    }
	    else if(vset==0){
 80029f8:	4b07      	ldr	r3, [pc, #28]	; (8002a18 <HAL_TIM_PeriodElapsedCallback+0xb60>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f04f 0100 	mov.w	r1, #0
 8002a00:	4618      	mov	r0, r3
 8002a02:	f7fe fbbf 	bl	8001184 <__aeabi_fcmpeq>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d01d      	beq.n	8002a48 <HAL_TIM_PeriodElapsedCallback+0xb90>
	    	for(int i=0;i<4;i++){//不偏航等情况
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a10:	e016      	b.n	8002a40 <HAL_TIM_PeriodElapsedCallback+0xb88>
 8002a12:	bf00      	nop
 8002a14:	20000524 	.word	0x20000524
 8002a18:	20000520 	.word	0x20000520
 8002a1c:	41200000 	.word	0x41200000
 8002a20:	43340000 	.word	0x43340000
 8002a24:	447a0000 	.word	0x447a0000
 8002a28:	43b40000 	.word	0x43b40000
	    		pwm[i]=0;
 8002a2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	3340      	adds	r3, #64	; 0x40
 8002a32:	443b      	add	r3, r7
 8002a34:	2200      	movs	r2, #0
 8002a36:	f843 2c38 	str.w	r2, [r3, #-56]
	    	for(int i=0;i<4;i++){//不偏航等情况
 8002a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a3c:	3301      	adds	r3, #1
 8002a3e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a42:	2b03      	cmp	r3, #3
 8002a44:	ddf2      	ble.n	8002a2c <HAL_TIM_PeriodElapsedCallback+0xb74>
 8002a46:	e012      	b.n	8002a6e <HAL_TIM_PeriodElapsedCallback+0xbb6>
	    	}
	    }
	    else{
	    	for(int i=0;i<4;i++){//不偏航等情况
 8002a48:	2300      	movs	r3, #0
 8002a4a:	637b      	str	r3, [r7, #52]	; 0x34
 8002a4c:	e00c      	b.n	8002a68 <HAL_TIM_PeriodElapsedCallback+0xbb0>
	    		pwm[i]=Ori_pwm;
 8002a4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a50:	f7fe fbca 	bl	80011e8 <__aeabi_f2iz>
 8002a54:	4602      	mov	r2, r0
 8002a56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	3340      	adds	r3, #64	; 0x40
 8002a5c:	443b      	add	r3, r7
 8002a5e:	f843 2c38 	str.w	r2, [r3, #-56]
	    	for(int i=0;i<4;i++){//不偏航等情况
 8002a62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a64:	3301      	adds	r3, #1
 8002a66:	637b      	str	r3, [r7, #52]	; 0x34
 8002a68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a6a:	2b03      	cmp	r3, #3
 8002a6c:	ddef      	ble.n	8002a4e <HAL_TIM_PeriodElapsedCallback+0xb96>
	    	}
	    }

	    //u1_printf("%f\n",pwm);
	    __HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_1, pwm[0]);
 8002a6e:	68ba      	ldr	r2, [r7, #8]
 8002a70:	4b0a      	ldr	r3, [pc, #40]	; (8002a9c <HAL_TIM_PeriodElapsedCallback+0xbe4>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	635a      	str	r2, [r3, #52]	; 0x34
	    __HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_2, pwm[1]);
 8002a76:	68fa      	ldr	r2, [r7, #12]
 8002a78:	4b08      	ldr	r3, [pc, #32]	; (8002a9c <HAL_TIM_PeriodElapsedCallback+0xbe4>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	639a      	str	r2, [r3, #56]	; 0x38
	    __HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_3, pwm[2]);
 8002a7e:	693a      	ldr	r2, [r7, #16]
 8002a80:	4b06      	ldr	r3, [pc, #24]	; (8002a9c <HAL_TIM_PeriodElapsedCallback+0xbe4>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	63da      	str	r2, [r3, #60]	; 0x3c
	    __HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_4, pwm[3]);
 8002a86:	697a      	ldr	r2, [r7, #20]
 8002a88:	4b04      	ldr	r3, [pc, #16]	; (8002a9c <HAL_TIM_PeriodElapsedCallback+0xbe4>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	641a      	str	r2, [r3, #64]	; 0x40

	    getPosition(&my_pos);
 8002a8e:	4804      	ldr	r0, [pc, #16]	; (8002aa0 <HAL_TIM_PeriodElapsedCallback+0xbe8>)
 8002a90:	f001 fbe6 	bl	8004260 <getPosition>

	   }



}
 8002a94:	bf00      	nop
 8002a96:	3740      	adds	r7, #64	; 0x40
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	2000052c 	.word	0x2000052c
 8002aa0:	20000284 	.word	0x20000284

08002aa4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b086      	sub	sp, #24
 8002aa8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002aaa:	f001 fc7d 	bl	80043a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002aae:	f000 f919 	bl	8002ce4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002ab2:	f7fe fc31 	bl	8001318 <MX_GPIO_Init>
  MX_DMA_Init();
 8002ab6:	f7fe fbf5 	bl	80012a4 <MX_DMA_Init>
  MX_TIM1_Init();
 8002aba:	f000 fd35 	bl	8003528 <MX_TIM1_Init>
  MX_TIM2_Init();
 8002abe:	f000 fdf7 	bl	80036b0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002ac2:	f000 fe41 	bl	8003748 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8002ac6:	f000 ff67 	bl	8003998 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8002aca:	f000 ff8f 	bl	80039ec <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8002ace:	f000 ffb7 	bl	8003a40 <MX_USART3_UART_Init>
  MX_UART4_Init();
 8002ad2:	f000 ff37 	bl	8003944 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2); // 使能定时�??????2
 8002ad6:	4874      	ldr	r0, [pc, #464]	; (8002ca8 <main+0x204>)
 8002ad8:	f003 f88a 	bl	8005bf0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);// 使能定定时器1的�?�道1，设定为PWM输出
 8002adc:	2100      	movs	r1, #0
 8002ade:	4873      	ldr	r0, [pc, #460]	; (8002cac <main+0x208>)
 8002ae0:	f003 f93e 	bl	8005d60 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8002ae4:	2104      	movs	r1, #4
 8002ae6:	4871      	ldr	r0, [pc, #452]	; (8002cac <main+0x208>)
 8002ae8:	f003 f93a 	bl	8005d60 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8002aec:	2108      	movs	r1, #8
 8002aee:	486f      	ldr	r0, [pc, #444]	; (8002cac <main+0x208>)
 8002af0:	f003 f936 	bl	8005d60 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8002af4:	210c      	movs	r1, #12
 8002af6:	486d      	ldr	r0, [pc, #436]	; (8002cac <main+0x208>)
 8002af8:	f003 f932 	bl	8005d60 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL); //使能编码器时�??????3
 8002afc:	213c      	movs	r1, #60	; 0x3c
 8002afe:	486c      	ldr	r0, [pc, #432]	; (8002cb0 <main+0x20c>)
 8002b00:	f003 fa8a 	bl	8006018 <HAL_TIM_Encoder_Start>

  int flag=1;
 8002b04:	2301      	movs	r3, #1
 8002b06:	617b      	str	r3, [r7, #20]
  int flag1=1;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	613b      	str	r3, [r7, #16]

  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_SET);//设置四个电机的转�??????
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	2101      	movs	r1, #1
 8002b10:	4868      	ldr	r0, [pc, #416]	; (8002cb4 <main+0x210>)
 8002b12:	f002 fbf5 	bl	8005300 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8002b16:	2200      	movs	r2, #0
 8002b18:	2102      	movs	r1, #2
 8002b1a:	4866      	ldr	r0, [pc, #408]	; (8002cb4 <main+0x210>)
 8002b1c:	f002 fbf0 	bl	8005300 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_2,GPIO_PIN_SET);
 8002b20:	2201      	movs	r2, #1
 8002b22:	2104      	movs	r1, #4
 8002b24:	4863      	ldr	r0, [pc, #396]	; (8002cb4 <main+0x210>)
 8002b26:	f002 fbeb 	bl	8005300 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_3,GPIO_PIN_RESET);
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	2108      	movs	r1, #8
 8002b2e:	4861      	ldr	r0, [pc, #388]	; (8002cb4 <main+0x210>)
 8002b30:	f002 fbe6 	bl	8005300 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,GPIO_PIN_SET);
 8002b34:	2201      	movs	r2, #1
 8002b36:	2110      	movs	r1, #16
 8002b38:	485e      	ldr	r0, [pc, #376]	; (8002cb4 <main+0x210>)
 8002b3a:	f002 fbe1 	bl	8005300 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_5,GPIO_PIN_RESET);
 8002b3e:	2200      	movs	r2, #0
 8002b40:	2120      	movs	r1, #32
 8002b42:	485c      	ldr	r0, [pc, #368]	; (8002cb4 <main+0x210>)
 8002b44:	f002 fbdc 	bl	8005300 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_6,GPIO_PIN_SET);
 8002b48:	2201      	movs	r2, #1
 8002b4a:	2140      	movs	r1, #64	; 0x40
 8002b4c:	4859      	ldr	r0, [pc, #356]	; (8002cb4 <main+0x210>)
 8002b4e:	f002 fbd7 	bl	8005300 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_RESET);
 8002b52:	2200      	movs	r2, #0
 8002b54:	2180      	movs	r1, #128	; 0x80
 8002b56:	4857      	ldr	r0, [pc, #348]	; (8002cb4 <main+0x210>)
 8002b58:	f002 fbd2 	bl	8005300 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  SetBaud(115200);
 8002b5c:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 8002b60:	f7fe fc8e 	bl	8001480 <SetBaud>
  SetVertical();
 8002b64:	f7fe fcb2 	bl	80014cc <SetVertical>
  InitAngle();
 8002b68:	f7fe fcc0 	bl	80014ec <InitAngle>
  Calibrate();
 8002b6c:	f7fe fcce 	bl	800150c <Calibrate>
  SleepOrAwake();
 8002b70:	f7fe fcdc 	bl	800152c <SleepOrAwake>
  jy62_Init(&huart2);
 8002b74:	4850      	ldr	r0, [pc, #320]	; (8002cb8 <main+0x214>)
 8002b76:	f7fe fc25 	bl	80013c4 <jy62_Init>
  zigbee_Init(&huart3);
 8002b7a:	4850      	ldr	r0, [pc, #320]	; (8002cbc <main+0x218>)
 8002b7c:	f001 f9aa 	bl	8003ed4 <zigbee_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //gameRun();

	  if(GetPitch()!=0&&flag){
 8002b80:	f7fe fce4 	bl	800154c <GetPitch>
 8002b84:	4603      	mov	r3, r0
 8002b86:	f04f 0100 	mov.w	r1, #0
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f7fe fafa 	bl	8001184 <__aeabi_fcmpeq>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d10b      	bne.n	8002bae <main+0x10a>
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d008      	beq.n	8002bae <main+0x10a>
		  move_time(0,100,30);
 8002b9c:	221e      	movs	r2, #30
 8002b9e:	2164      	movs	r1, #100	; 0x64
 8002ba0:	2000      	movs	r0, #0
 8002ba2:	f000 f90b 	bl	8002dbc <move_time>
		  flag=0;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	617b      	str	r3, [r7, #20]
		  InitAngle();
 8002baa:	f7fe fc9f 	bl	80014ec <InitAngle>



//	  u1_printf("(%f,%f)\n",curr.posx,curr.posy);

	  if(getGameStage()==1 && getGameTime() < 20*60*9){
 8002bae:	f001 fb39 	bl	8004224 <getGameStage>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d1e3      	bne.n	8002b80 <main+0xdc>
 8002bb8:	f001 fb26 	bl	8004208 <getGameTime>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	f642 222f 	movw	r2, #10799	; 0x2a2f
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	dcdc      	bgt.n	8002b80 <main+0xdc>
		  //setv(30);
		  InitBase();
 8002bc6:	f7fe ffcf 	bl	8001b68 <InitBase>
		  if(flag1){
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d029      	beq.n	8002c24 <main+0x180>
			  Position_edc25 tmp;
			  if(Base.posx==0.5){
 8002bd0:	4b3b      	ldr	r3, [pc, #236]	; (8002cc0 <main+0x21c>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f7fe fad3 	bl	8001184 <__aeabi_fcmpeq>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d006      	beq.n	8002bf2 <main+0x14e>
				  tmp.posx = 0.5;
 8002be4:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8002be8:	603b      	str	r3, [r7, #0]
				  tmp.posy = 1.5;
 8002bea:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8002bee:	607b      	str	r3, [r7, #4]
 8002bf0:	e003      	b.n	8002bfa <main+0x156>
			  }else {
				  tmp.posx = 7.5;
 8002bf2:	4b34      	ldr	r3, [pc, #208]	; (8002cc4 <main+0x220>)
 8002bf4:	603b      	str	r3, [r7, #0]
				  tmp.posy = 6.5;
 8002bf6:	4b34      	ldr	r3, [pc, #208]	; (8002cc8 <main+0x224>)
 8002bf8:	607b      	str	r3, [r7, #4]
			  }
			  move_target(&my_pos, &tmp,20);
 8002bfa:	463b      	mov	r3, r7
 8002bfc:	2214      	movs	r2, #20
 8002bfe:	4619      	mov	r1, r3
 8002c00:	4832      	ldr	r0, [pc, #200]	; (8002ccc <main+0x228>)
 8002c02:	f7fe fef9 	bl	80019f8 <move_target>
			  HAL_Delay(8500);
 8002c06:	f242 1034 	movw	r0, #8500	; 0x2134
 8002c0a:	f001 fc2f 	bl	800446c <HAL_Delay>
			  move_target(&my_pos, &Base,20);
 8002c0e:	2214      	movs	r2, #20
 8002c10:	492b      	ldr	r1, [pc, #172]	; (8002cc0 <main+0x21c>)
 8002c12:	482e      	ldr	r0, [pc, #184]	; (8002ccc <main+0x228>)
 8002c14:	f7fe fef0 	bl	80019f8 <move_target>
			  HAL_Delay(8500);
 8002c18:	f242 1034 	movw	r0, #8500	; 0x2134
 8002c1c:	f001 fc26 	bl	800446c <HAL_Delay>
			  flag1 = 0;
 8002c20:	2300      	movs	r3, #0
 8002c22:	613b      	str	r3, [r7, #16]
		  }

		  make_choice();
 8002c24:	f7fe ffca 	bl	8001bbc <make_choice>

		  for(int i=0;i<pathlen;i++){
 8002c28:	2300      	movs	r3, #0
 8002c2a:	60fb      	str	r3, [r7, #12]
 8002c2c:	e034      	b.n	8002c98 <main+0x1f4>
			  int id = getMapId_new(path+i);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	00db      	lsls	r3, r3, #3
 8002c32:	4a27      	ldr	r2, [pc, #156]	; (8002cd0 <main+0x22c>)
 8002c34:	4413      	add	r3, r2
 8002c36:	4618      	mov	r0, r3
 8002c38:	f7fe fe22 	bl	8001880 <getMapId_new>
 8002c3c:	60b8      	str	r0, [r7, #8]
			  if(!getHeightOfId(id))
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	4618      	mov	r0, r3
 8002c44:	f001 fafc 	bl	8004240 <getHeightOfId>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d104      	bne.n	8002c58 <main+0x1b4>
				  place_block_id(id);
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	4618      	mov	r0, r3
 8002c54:	f001 fb36 	bl	80042c4 <place_block_id>
			  HAL_Delay(300);//这两句测试放羊
 8002c58:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002c5c:	f001 fc06 	bl	800446c <HAL_Delay>
			  move_target(&my_pos,path+i,15);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	00db      	lsls	r3, r3, #3
 8002c64:	4a1a      	ldr	r2, [pc, #104]	; (8002cd0 <main+0x22c>)
 8002c66:	4413      	add	r3, r2
 8002c68:	220f      	movs	r2, #15
 8002c6a:	4619      	mov	r1, r3
 8002c6c:	4817      	ldr	r0, [pc, #92]	; (8002ccc <main+0x228>)
 8002c6e:	f7fe fec3 	bl	80019f8 <move_target>
			  u1_printf("maMap[%d]: %d", id, myMap_new[id]);
 8002c72:	4a18      	ldr	r2, [pc, #96]	; (8002cd4 <main+0x230>)
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	68b9      	ldr	r1, [r7, #8]
 8002c7e:	4816      	ldr	r0, [pc, #88]	; (8002cd8 <main+0x234>)
 8002c80:	f001 f8ae 	bl	8003de0 <u1_printf>
			  //u1_printf("over!(%f,%f)\n",my_pos.posx,my_pos.posy);
			  HAL_Delay(300);
 8002c84:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002c88:	f001 fbf0 	bl	800446c <HAL_Delay>
			  check_yaw(3);
 8002c8c:	4813      	ldr	r0, [pc, #76]	; (8002cdc <main+0x238>)
 8002c8e:	f000 f8c7 	bl	8002e20 <check_yaw>
		  for(int i=0;i<pathlen;i++){
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	3301      	adds	r3, #1
 8002c96:	60fb      	str	r3, [r7, #12]
 8002c98:	4b11      	ldr	r3, [pc, #68]	; (8002ce0 <main+0x23c>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	68fa      	ldr	r2, [r7, #12]
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	dbc5      	blt.n	8002c2e <main+0x18a>
		  }

		  Trade();
 8002ca2:	f7ff f87f 	bl	8001da4 <Trade>
	  if(GetPitch()!=0&&flag){
 8002ca6:	e76b      	b.n	8002b80 <main+0xdc>
 8002ca8:	20000574 	.word	0x20000574
 8002cac:	2000052c 	.word	0x2000052c
 8002cb0:	200005bc 	.word	0x200005bc
 8002cb4:	40011000 	.word	0x40011000
 8002cb8:	20000694 	.word	0x20000694
 8002cbc:	200006dc 	.word	0x200006dc
 8002cc0:	2000027c 	.word	0x2000027c
 8002cc4:	40f00000 	.word	0x40f00000
 8002cc8:	40d00000 	.word	0x40d00000
 8002ccc:	20000284 	.word	0x20000284
 8002cd0:	2000028c 	.word	0x2000028c
 8002cd4:	20000420 	.word	0x20000420
 8002cd8:	0800c750 	.word	0x0800c750
 8002cdc:	40400000 	.word	0x40400000
 8002ce0:	2000041c 	.word	0x2000041c

08002ce4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b090      	sub	sp, #64	; 0x40
 8002ce8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002cea:	f107 0318 	add.w	r3, r7, #24
 8002cee:	2228      	movs	r2, #40	; 0x28
 8002cf0:	2100      	movs	r1, #0
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f005 f8c2 	bl	8007e7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002cf8:	1d3b      	adds	r3, r7, #4
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	601a      	str	r2, [r3, #0]
 8002cfe:	605a      	str	r2, [r3, #4]
 8002d00:	609a      	str	r2, [r3, #8]
 8002d02:	60da      	str	r2, [r3, #12]
 8002d04:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002d06:	2301      	movs	r3, #1
 8002d08:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002d0a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d0e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002d10:	2300      	movs	r3, #0
 8002d12:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002d14:	2301      	movs	r3, #1
 8002d16:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d18:	2302      	movs	r3, #2
 8002d1a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002d1c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d20:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002d22:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002d26:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d28:	f107 0318 	add.w	r3, r7, #24
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f002 faff 	bl	8005330 <HAL_RCC_OscConfig>
 8002d32:	4603      	mov	r3, r0
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d001      	beq.n	8002d3c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8002d38:	f000 f819 	bl	8002d6e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d3c:	230f      	movs	r3, #15
 8002d3e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d40:	2302      	movs	r3, #2
 8002d42:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d44:	2300      	movs	r3, #0
 8002d46:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002d48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d4c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002d52:	1d3b      	adds	r3, r7, #4
 8002d54:	2102      	movs	r1, #2
 8002d56:	4618      	mov	r0, r3
 8002d58:	f002 fd6c 	bl	8005834 <HAL_RCC_ClockConfig>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d001      	beq.n	8002d66 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8002d62:	f000 f804 	bl	8002d6e <Error_Handler>
  }
}
 8002d66:	bf00      	nop
 8002d68:	3740      	adds	r7, #64	; 0x40
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}

08002d6e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d6e:	b480      	push	{r7}
 8002d70:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002d72:	b672      	cpsid	i
}
 8002d74:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002d76:	e7fe      	b.n	8002d76 <Error_Handler+0x8>

08002d78 <setv>:
unsigned int my_time = 0;
pidstr pidparm = { 0,0,100,5,200 };
pidstr pidparm1 = {0,0,10,0.02,3};
int dir=0;

void setv(float v) {
 8002d78:	b480      	push	{r7}
 8002d7a:	b083      	sub	sp, #12
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
	pidparm.lr = 0.0;
 8002d80:	4b0b      	ldr	r3, [pc, #44]	; (8002db0 <setv+0x38>)
 8002d82:	f04f 0200 	mov.w	r2, #0
 8002d86:	605a      	str	r2, [r3, #4]
	pidparm.sum = 0.0;//每一次设置速度时都要把pid参数中的lr和sum归零，减少误差
 8002d88:	4b09      	ldr	r3, [pc, #36]	; (8002db0 <setv+0x38>)
 8002d8a:	f04f 0200 	mov.w	r2, #0
 8002d8e:	601a      	str	r2, [r3, #0]
	pidparm1.lr=0.0;
 8002d90:	4b08      	ldr	r3, [pc, #32]	; (8002db4 <setv+0x3c>)
 8002d92:	f04f 0200 	mov.w	r2, #0
 8002d96:	605a      	str	r2, [r3, #4]
	pidparm1.sum=0.0;
 8002d98:	4b06      	ldr	r3, [pc, #24]	; (8002db4 <setv+0x3c>)
 8002d9a:	f04f 0200 	mov.w	r2, #0
 8002d9e:	601a      	str	r2, [r3, #0]
	vset = v;
 8002da0:	4a05      	ldr	r2, [pc, #20]	; (8002db8 <setv+0x40>)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6013      	str	r3, [r2, #0]
}
 8002da6:	bf00      	nop
 8002da8:	370c      	adds	r7, #12
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bc80      	pop	{r7}
 8002dae:	4770      	bx	lr
 8002db0:	20000014 	.word	0x20000014
 8002db4:	20000028 	.word	0x20000028
 8002db8:	20000520 	.word	0x20000520

08002dbc <move_time>:

void move_time(int d, int t, int v) {
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b084      	sub	sp, #16
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	60f8      	str	r0, [r7, #12]
 8002dc4:	60b9      	str	r1, [r7, #8]
 8002dc6:	607a      	str	r2, [r7, #4]

	setdir(d);
 8002dc8:	68f8      	ldr	r0, [r7, #12]
 8002dca:	f000 f8d9 	bl	8002f80 <setdir>
	dir=d;
 8002dce:	4a11      	ldr	r2, [pc, #68]	; (8002e14 <move_time+0x58>)
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	6013      	str	r3, [r2, #0]
	setv(10);
 8002dd4:	4810      	ldr	r0, [pc, #64]	; (8002e18 <move_time+0x5c>)
 8002dd6:	f7ff ffcf 	bl	8002d78 <setv>
	HAL_Delay(100);
 8002dda:	2064      	movs	r0, #100	; 0x64
 8002ddc:	f001 fb46 	bl	800446c <HAL_Delay>
	setv(20);
 8002de0:	480e      	ldr	r0, [pc, #56]	; (8002e1c <move_time+0x60>)
 8002de2:	f7ff ffc9 	bl	8002d78 <setv>
	HAL_Delay(100);
 8002de6:	2064      	movs	r0, #100	; 0x64
 8002de8:	f001 fb40 	bl	800446c <HAL_Delay>
	setv(v);
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	f7fd ffe1 	bl	8000db4 <__aeabi_i2f>
 8002df2:	4603      	mov	r3, r0
 8002df4:	4618      	mov	r0, r3
 8002df6:	f7ff ffbf 	bl	8002d78 <setv>

	HAL_Delay(t);
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f001 fb35 	bl	800446c <HAL_Delay>
	setv(0);
 8002e02:	f04f 0000 	mov.w	r0, #0
 8002e06:	f7ff ffb7 	bl	8002d78 <setv>
}
 8002e0a:	bf00      	nop
 8002e0c:	3710      	adds	r7, #16
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	20000524 	.word	0x20000524
 8002e18:	41200000 	.word	0x41200000
 8002e1c:	41a00000 	.word	0x41a00000

08002e20 <check_yaw>:

void check_yaw(float max_err){
 8002e20:	b5b0      	push	{r4, r5, r7, lr}
 8002e22:	b084      	sub	sp, #16
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
	float Yaw = GetYaw();
 8002e28:	f7fe fb9a 	bl	8001560 <GetYaw>
 8002e2c:	60f8      	str	r0, [r7, #12]
	while (Yaw==0){
 8002e2e:	e002      	b.n	8002e36 <check_yaw+0x16>
		Yaw = GetYaw();
 8002e30:	f7fe fb96 	bl	8001560 <GetYaw>
 8002e34:	60f8      	str	r0, [r7, #12]
	while (Yaw==0){
 8002e36:	f04f 0100 	mov.w	r1, #0
 8002e3a:	68f8      	ldr	r0, [r7, #12]
 8002e3c:	f7fe f9a2 	bl	8001184 <__aeabi_fcmpeq>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d1f4      	bne.n	8002e30 <check_yaw+0x10>
	}
	if(((Yaw>=0.0&&Yaw<=max_err)||(Yaw < 360&&Yaw>360-max_err))){
 8002e46:	f04f 0100 	mov.w	r1, #0
 8002e4a:	68f8      	ldr	r0, [r7, #12]
 8002e4c:	f7fe f9b8 	bl	80011c0 <__aeabi_fcmpge>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d006      	beq.n	8002e64 <check_yaw+0x44>
 8002e56:	6879      	ldr	r1, [r7, #4]
 8002e58:	68f8      	ldr	r0, [r7, #12]
 8002e5a:	f7fe f9a7 	bl	80011ac <__aeabi_fcmple>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d17c      	bne.n	8002f5e <check_yaw+0x13e>
 8002e64:	4940      	ldr	r1, [pc, #256]	; (8002f68 <check_yaw+0x148>)
 8002e66:	68f8      	ldr	r0, [r7, #12]
 8002e68:	f7fe f996 	bl	8001198 <__aeabi_fcmplt>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d00b      	beq.n	8002e8a <check_yaw+0x6a>
 8002e72:	6879      	ldr	r1, [r7, #4]
 8002e74:	483c      	ldr	r0, [pc, #240]	; (8002f68 <check_yaw+0x148>)
 8002e76:	f7fd fee7 	bl	8000c48 <__aeabi_fsub>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	68f8      	ldr	r0, [r7, #12]
 8002e80:	f7fe f9a8 	bl	80011d4 <__aeabi_fcmpgt>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d169      	bne.n	8002f5e <check_yaw+0x13e>
		//InitAngle();
		return ;
	}
	else{
		if(Yaw<360.0-Yaw){
 8002e8a:	68f8      	ldr	r0, [r7, #12]
 8002e8c:	f7fd fb38 	bl	8000500 <__aeabi_f2d>
 8002e90:	4604      	mov	r4, r0
 8002e92:	460d      	mov	r5, r1
 8002e94:	68f8      	ldr	r0, [r7, #12]
 8002e96:	f7fd fb33 	bl	8000500 <__aeabi_f2d>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	460b      	mov	r3, r1
 8002e9e:	f04f 0000 	mov.w	r0, #0
 8002ea2:	4932      	ldr	r1, [pc, #200]	; (8002f6c <check_yaw+0x14c>)
 8002ea4:	f7fd f9cc 	bl	8000240 <__aeabi_dsub>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	460b      	mov	r3, r1
 8002eac:	4620      	mov	r0, r4
 8002eae:	4629      	mov	r1, r5
 8002eb0:	f7fd fdf0 	bl	8000a94 <__aeabi_dcmplt>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d028      	beq.n	8002f0c <check_yaw+0xec>
			while(Yaw>3.0&&Yaw<180.0){
 8002eba:	e014      	b.n	8002ee6 <check_yaw+0xc6>
				setdir(3);
 8002ebc:	2003      	movs	r0, #3
 8002ebe:	f000 f85f 	bl	8002f80 <setdir>
				setv(10);
 8002ec2:	482b      	ldr	r0, [pc, #172]	; (8002f70 <check_yaw+0x150>)
 8002ec4:	f7ff ff58 	bl	8002d78 <setv>
				Yaw = GetYaw();
 8002ec8:	f7fe fb4a 	bl	8001560 <GetYaw>
 8002ecc:	60f8      	str	r0, [r7, #12]
				while (Yaw==0){
 8002ece:	e002      	b.n	8002ed6 <check_yaw+0xb6>
					Yaw = GetYaw();
 8002ed0:	f7fe fb46 	bl	8001560 <GetYaw>
 8002ed4:	60f8      	str	r0, [r7, #12]
				while (Yaw==0){
 8002ed6:	f04f 0100 	mov.w	r1, #0
 8002eda:	68f8      	ldr	r0, [r7, #12]
 8002edc:	f7fe f952 	bl	8001184 <__aeabi_fcmpeq>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d1f4      	bne.n	8002ed0 <check_yaw+0xb0>
			while(Yaw>3.0&&Yaw<180.0){
 8002ee6:	4923      	ldr	r1, [pc, #140]	; (8002f74 <check_yaw+0x154>)
 8002ee8:	68f8      	ldr	r0, [r7, #12]
 8002eea:	f7fe f973 	bl	80011d4 <__aeabi_fcmpgt>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d006      	beq.n	8002f02 <check_yaw+0xe2>
 8002ef4:	4920      	ldr	r1, [pc, #128]	; (8002f78 <check_yaw+0x158>)
 8002ef6:	68f8      	ldr	r0, [r7, #12]
 8002ef8:	f7fe f94e 	bl	8001198 <__aeabi_fcmplt>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d1dc      	bne.n	8002ebc <check_yaw+0x9c>
				}
			}
			setv(0);
 8002f02:	f04f 0000 	mov.w	r0, #0
 8002f06:	f7ff ff37 	bl	8002d78 <setv>
 8002f0a:	e029      	b.n	8002f60 <check_yaw+0x140>
		}
		else{
			while(Yaw<360.0-3.0&&Yaw>180.0){
 8002f0c:	e014      	b.n	8002f38 <check_yaw+0x118>
				setdir(2);
 8002f0e:	2002      	movs	r0, #2
 8002f10:	f000 f836 	bl	8002f80 <setdir>
				setv(10);
 8002f14:	4816      	ldr	r0, [pc, #88]	; (8002f70 <check_yaw+0x150>)
 8002f16:	f7ff ff2f 	bl	8002d78 <setv>
				Yaw = GetYaw();
 8002f1a:	f7fe fb21 	bl	8001560 <GetYaw>
 8002f1e:	60f8      	str	r0, [r7, #12]
				while (Yaw==0){
 8002f20:	e002      	b.n	8002f28 <check_yaw+0x108>
					Yaw = GetYaw();
 8002f22:	f7fe fb1d 	bl	8001560 <GetYaw>
 8002f26:	60f8      	str	r0, [r7, #12]
				while (Yaw==0){
 8002f28:	f04f 0100 	mov.w	r1, #0
 8002f2c:	68f8      	ldr	r0, [r7, #12]
 8002f2e:	f7fe f929 	bl	8001184 <__aeabi_fcmpeq>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d1f4      	bne.n	8002f22 <check_yaw+0x102>
			while(Yaw<360.0-3.0&&Yaw>180.0){
 8002f38:	4910      	ldr	r1, [pc, #64]	; (8002f7c <check_yaw+0x15c>)
 8002f3a:	68f8      	ldr	r0, [r7, #12]
 8002f3c:	f7fe f92c 	bl	8001198 <__aeabi_fcmplt>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d006      	beq.n	8002f54 <check_yaw+0x134>
 8002f46:	490c      	ldr	r1, [pc, #48]	; (8002f78 <check_yaw+0x158>)
 8002f48:	68f8      	ldr	r0, [r7, #12]
 8002f4a:	f7fe f943 	bl	80011d4 <__aeabi_fcmpgt>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d1dc      	bne.n	8002f0e <check_yaw+0xee>
				}
			}
			setv(0);
 8002f54:	f04f 0000 	mov.w	r0, #0
 8002f58:	f7ff ff0e 	bl	8002d78 <setv>
 8002f5c:	e000      	b.n	8002f60 <check_yaw+0x140>
		return ;
 8002f5e:	bf00      	nop
		}
	}
	//InitAngle();
}
 8002f60:	3710      	adds	r7, #16
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bdb0      	pop	{r4, r5, r7, pc}
 8002f66:	bf00      	nop
 8002f68:	43b40000 	.word	0x43b40000
 8002f6c:	40768000 	.word	0x40768000
 8002f70:	41200000 	.word	0x41200000
 8002f74:	40400000 	.word	0x40400000
 8002f78:	43340000 	.word	0x43340000
 8002f7c:	43b28000 	.word	0x43b28000

08002f80 <setdir>:
void setdir(int d) {
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b082      	sub	sp, #8
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
	dir=d;
 8002f88:	4ab2      	ldr	r2, [pc, #712]	; (8003254 <setdir+0x2d4>)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6013      	str	r3, [r2, #0]
	if (d == 0) {//前进
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d128      	bne.n	8002fe6 <setdir+0x66>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);//设置四个电机的转向?
 8002f94:	2201      	movs	r2, #1
 8002f96:	2101      	movs	r1, #1
 8002f98:	48af      	ldr	r0, [pc, #700]	; (8003258 <setdir+0x2d8>)
 8002f9a:	f002 f9b1 	bl	8005300 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	2102      	movs	r1, #2
 8002fa2:	48ad      	ldr	r0, [pc, #692]	; (8003258 <setdir+0x2d8>)
 8002fa4:	f002 f9ac 	bl	8005300 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8002fa8:	2201      	movs	r2, #1
 8002faa:	2104      	movs	r1, #4
 8002fac:	48aa      	ldr	r0, [pc, #680]	; (8003258 <setdir+0x2d8>)
 8002fae:	f002 f9a7 	bl	8005300 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	2108      	movs	r1, #8
 8002fb6:	48a8      	ldr	r0, [pc, #672]	; (8003258 <setdir+0x2d8>)
 8002fb8:	f002 f9a2 	bl	8005300 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	2110      	movs	r1, #16
 8002fc0:	48a5      	ldr	r0, [pc, #660]	; (8003258 <setdir+0x2d8>)
 8002fc2:	f002 f99d 	bl	8005300 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	2120      	movs	r1, #32
 8002fca:	48a3      	ldr	r0, [pc, #652]	; (8003258 <setdir+0x2d8>)
 8002fcc:	f002 f998 	bl	8005300 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	2140      	movs	r1, #64	; 0x40
 8002fd4:	48a0      	ldr	r0, [pc, #640]	; (8003258 <setdir+0x2d8>)
 8002fd6:	f002 f993 	bl	8005300 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8002fda:	2200      	movs	r2, #0
 8002fdc:	2180      	movs	r1, #128	; 0x80
 8002fde:	489e      	ldr	r0, [pc, #632]	; (8003258 <setdir+0x2d8>)
 8002fe0:	f002 f98e 	bl	8005300 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
	}
}
 8002fe4:	e132      	b.n	800324c <setdir+0x2cc>
	else if (d == 1) {//后退
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d128      	bne.n	800303e <setdir+0xbe>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);//设置四个电机的转�?
 8002fec:	2201      	movs	r2, #1
 8002fee:	2102      	movs	r1, #2
 8002ff0:	4899      	ldr	r0, [pc, #612]	; (8003258 <setdir+0x2d8>)
 8002ff2:	f002 f985 	bl	8005300 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	2101      	movs	r1, #1
 8002ffa:	4897      	ldr	r0, [pc, #604]	; (8003258 <setdir+0x2d8>)
 8002ffc:	f002 f980 	bl	8005300 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 8003000:	2201      	movs	r2, #1
 8003002:	2108      	movs	r1, #8
 8003004:	4894      	ldr	r0, [pc, #592]	; (8003258 <setdir+0x2d8>)
 8003006:	f002 f97b 	bl	8005300 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 800300a:	2200      	movs	r2, #0
 800300c:	2104      	movs	r1, #4
 800300e:	4892      	ldr	r0, [pc, #584]	; (8003258 <setdir+0x2d8>)
 8003010:	f002 f976 	bl	8005300 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 8003014:	2201      	movs	r2, #1
 8003016:	2120      	movs	r1, #32
 8003018:	488f      	ldr	r0, [pc, #572]	; (8003258 <setdir+0x2d8>)
 800301a:	f002 f971 	bl	8005300 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 800301e:	2200      	movs	r2, #0
 8003020:	2110      	movs	r1, #16
 8003022:	488d      	ldr	r0, [pc, #564]	; (8003258 <setdir+0x2d8>)
 8003024:	f002 f96c 	bl	8005300 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8003028:	2201      	movs	r2, #1
 800302a:	2180      	movs	r1, #128	; 0x80
 800302c:	488a      	ldr	r0, [pc, #552]	; (8003258 <setdir+0x2d8>)
 800302e:	f002 f967 	bl	8005300 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8003032:	2200      	movs	r2, #0
 8003034:	2140      	movs	r1, #64	; 0x40
 8003036:	4888      	ldr	r0, [pc, #544]	; (8003258 <setdir+0x2d8>)
 8003038:	f002 f962 	bl	8005300 <HAL_GPIO_WritePin>
}
 800303c:	e106      	b.n	800324c <setdir+0x2cc>
	} else if (d == 2) {//left
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2b02      	cmp	r3, #2
 8003042:	d128      	bne.n	8003096 <setdir+0x116>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);//设置四个电机的转�?
 8003044:	2201      	movs	r2, #1
 8003046:	2102      	movs	r1, #2
 8003048:	4883      	ldr	r0, [pc, #524]	; (8003258 <setdir+0x2d8>)
 800304a:	f002 f959 	bl	8005300 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 800304e:	2200      	movs	r2, #0
 8003050:	2101      	movs	r1, #1
 8003052:	4881      	ldr	r0, [pc, #516]	; (8003258 <setdir+0x2d8>)
 8003054:	f002 f954 	bl	8005300 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8003058:	2201      	movs	r2, #1
 800305a:	2104      	movs	r1, #4
 800305c:	487e      	ldr	r0, [pc, #504]	; (8003258 <setdir+0x2d8>)
 800305e:	f002 f94f 	bl	8005300 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8003062:	2200      	movs	r2, #0
 8003064:	2108      	movs	r1, #8
 8003066:	487c      	ldr	r0, [pc, #496]	; (8003258 <setdir+0x2d8>)
 8003068:	f002 f94a 	bl	8005300 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 800306c:	2201      	movs	r2, #1
 800306e:	2120      	movs	r1, #32
 8003070:	4879      	ldr	r0, [pc, #484]	; (8003258 <setdir+0x2d8>)
 8003072:	f002 f945 	bl	8005300 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 8003076:	2200      	movs	r2, #0
 8003078:	2110      	movs	r1, #16
 800307a:	4877      	ldr	r0, [pc, #476]	; (8003258 <setdir+0x2d8>)
 800307c:	f002 f940 	bl	8005300 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8003080:	2201      	movs	r2, #1
 8003082:	2140      	movs	r1, #64	; 0x40
 8003084:	4874      	ldr	r0, [pc, #464]	; (8003258 <setdir+0x2d8>)
 8003086:	f002 f93b 	bl	8005300 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 800308a:	2200      	movs	r2, #0
 800308c:	2180      	movs	r1, #128	; 0x80
 800308e:	4872      	ldr	r0, [pc, #456]	; (8003258 <setdir+0x2d8>)
 8003090:	f002 f936 	bl	8005300 <HAL_GPIO_WritePin>
}
 8003094:	e0da      	b.n	800324c <setdir+0x2cc>
	} else if (d == 3) {//right
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2b03      	cmp	r3, #3
 800309a:	d128      	bne.n	80030ee <setdir+0x16e>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);//设置四个电机的转�?
 800309c:	2201      	movs	r2, #1
 800309e:	2101      	movs	r1, #1
 80030a0:	486d      	ldr	r0, [pc, #436]	; (8003258 <setdir+0x2d8>)
 80030a2:	f002 f92d 	bl	8005300 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 80030a6:	2200      	movs	r2, #0
 80030a8:	2102      	movs	r1, #2
 80030aa:	486b      	ldr	r0, [pc, #428]	; (8003258 <setdir+0x2d8>)
 80030ac:	f002 f928 	bl	8005300 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 80030b0:	2201      	movs	r2, #1
 80030b2:	2108      	movs	r1, #8
 80030b4:	4868      	ldr	r0, [pc, #416]	; (8003258 <setdir+0x2d8>)
 80030b6:	f002 f923 	bl	8005300 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 80030ba:	2200      	movs	r2, #0
 80030bc:	2104      	movs	r1, #4
 80030be:	4866      	ldr	r0, [pc, #408]	; (8003258 <setdir+0x2d8>)
 80030c0:	f002 f91e 	bl	8005300 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 80030c4:	2201      	movs	r2, #1
 80030c6:	2110      	movs	r1, #16
 80030c8:	4863      	ldr	r0, [pc, #396]	; (8003258 <setdir+0x2d8>)
 80030ca:	f002 f919 	bl	8005300 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 80030ce:	2200      	movs	r2, #0
 80030d0:	2120      	movs	r1, #32
 80030d2:	4861      	ldr	r0, [pc, #388]	; (8003258 <setdir+0x2d8>)
 80030d4:	f002 f914 	bl	8005300 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 80030d8:	2201      	movs	r2, #1
 80030da:	2180      	movs	r1, #128	; 0x80
 80030dc:	485e      	ldr	r0, [pc, #376]	; (8003258 <setdir+0x2d8>)
 80030de:	f002 f90f 	bl	8005300 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 80030e2:	2200      	movs	r2, #0
 80030e4:	2140      	movs	r1, #64	; 0x40
 80030e6:	485c      	ldr	r0, [pc, #368]	; (8003258 <setdir+0x2d8>)
 80030e8:	f002 f90a 	bl	8005300 <HAL_GPIO_WritePin>
}
 80030ec:	e0ae      	b.n	800324c <setdir+0x2cc>
	else if(d ==4){//向左平移
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2b04      	cmp	r3, #4
 80030f2:	d128      	bne.n	8003146 <setdir+0x1c6>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);//设置四个电机的转向?
 80030f4:	2201      	movs	r2, #1
 80030f6:	2102      	movs	r1, #2
 80030f8:	4857      	ldr	r0, [pc, #348]	; (8003258 <setdir+0x2d8>)
 80030fa:	f002 f901 	bl	8005300 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 80030fe:	2200      	movs	r2, #0
 8003100:	2101      	movs	r1, #1
 8003102:	4855      	ldr	r0, [pc, #340]	; (8003258 <setdir+0x2d8>)
 8003104:	f002 f8fc 	bl	8005300 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 8003108:	2201      	movs	r2, #1
 800310a:	2108      	movs	r1, #8
 800310c:	4852      	ldr	r0, [pc, #328]	; (8003258 <setdir+0x2d8>)
 800310e:	f002 f8f7 	bl	8005300 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8003112:	2200      	movs	r2, #0
 8003114:	2104      	movs	r1, #4
 8003116:	4850      	ldr	r0, [pc, #320]	; (8003258 <setdir+0x2d8>)
 8003118:	f002 f8f2 	bl	8005300 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 800311c:	2201      	movs	r2, #1
 800311e:	2110      	movs	r1, #16
 8003120:	484d      	ldr	r0, [pc, #308]	; (8003258 <setdir+0x2d8>)
 8003122:	f002 f8ed 	bl	8005300 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8003126:	2200      	movs	r2, #0
 8003128:	2120      	movs	r1, #32
 800312a:	484b      	ldr	r0, [pc, #300]	; (8003258 <setdir+0x2d8>)
 800312c:	f002 f8e8 	bl	8005300 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8003130:	2201      	movs	r2, #1
 8003132:	2140      	movs	r1, #64	; 0x40
 8003134:	4848      	ldr	r0, [pc, #288]	; (8003258 <setdir+0x2d8>)
 8003136:	f002 f8e3 	bl	8005300 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 800313a:	2200      	movs	r2, #0
 800313c:	2180      	movs	r1, #128	; 0x80
 800313e:	4846      	ldr	r0, [pc, #280]	; (8003258 <setdir+0x2d8>)
 8003140:	f002 f8de 	bl	8005300 <HAL_GPIO_WritePin>
}
 8003144:	e082      	b.n	800324c <setdir+0x2cc>
	else if(d == 5){//向右平移
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2b05      	cmp	r3, #5
 800314a:	d128      	bne.n	800319e <setdir+0x21e>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);//设置四个电机的转�?
 800314c:	2201      	movs	r2, #1
 800314e:	2101      	movs	r1, #1
 8003150:	4841      	ldr	r0, [pc, #260]	; (8003258 <setdir+0x2d8>)
 8003152:	f002 f8d5 	bl	8005300 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8003156:	2200      	movs	r2, #0
 8003158:	2102      	movs	r1, #2
 800315a:	483f      	ldr	r0, [pc, #252]	; (8003258 <setdir+0x2d8>)
 800315c:	f002 f8d0 	bl	8005300 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8003160:	2201      	movs	r2, #1
 8003162:	2104      	movs	r1, #4
 8003164:	483c      	ldr	r0, [pc, #240]	; (8003258 <setdir+0x2d8>)
 8003166:	f002 f8cb 	bl	8005300 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 800316a:	2200      	movs	r2, #0
 800316c:	2108      	movs	r1, #8
 800316e:	483a      	ldr	r0, [pc, #232]	; (8003258 <setdir+0x2d8>)
 8003170:	f002 f8c6 	bl	8005300 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 8003174:	2201      	movs	r2, #1
 8003176:	2120      	movs	r1, #32
 8003178:	4837      	ldr	r0, [pc, #220]	; (8003258 <setdir+0x2d8>)
 800317a:	f002 f8c1 	bl	8005300 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 800317e:	2200      	movs	r2, #0
 8003180:	2110      	movs	r1, #16
 8003182:	4835      	ldr	r0, [pc, #212]	; (8003258 <setdir+0x2d8>)
 8003184:	f002 f8bc 	bl	8005300 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8003188:	2201      	movs	r2, #1
 800318a:	2180      	movs	r1, #128	; 0x80
 800318c:	4832      	ldr	r0, [pc, #200]	; (8003258 <setdir+0x2d8>)
 800318e:	f002 f8b7 	bl	8005300 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8003192:	2200      	movs	r2, #0
 8003194:	2140      	movs	r1, #64	; 0x40
 8003196:	4830      	ldr	r0, [pc, #192]	; (8003258 <setdir+0x2d8>)
 8003198:	f002 f8b2 	bl	8005300 <HAL_GPIO_WritePin>
}
 800319c:	e056      	b.n	800324c <setdir+0x2cc>
	else if(d == 6){//向左校准
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2b06      	cmp	r3, #6
 80031a2:	d128      	bne.n	80031f6 <setdir+0x276>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);//设置四个电机的转向?
 80031a4:	2201      	movs	r2, #1
 80031a6:	2102      	movs	r1, #2
 80031a8:	482b      	ldr	r0, [pc, #172]	; (8003258 <setdir+0x2d8>)
 80031aa:	f002 f8a9 	bl	8005300 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 80031ae:	2200      	movs	r2, #0
 80031b0:	2101      	movs	r1, #1
 80031b2:	4829      	ldr	r0, [pc, #164]	; (8003258 <setdir+0x2d8>)
 80031b4:	f002 f8a4 	bl	8005300 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 80031b8:	2200      	movs	r2, #0
 80031ba:	2104      	movs	r1, #4
 80031bc:	4826      	ldr	r0, [pc, #152]	; (8003258 <setdir+0x2d8>)
 80031be:	f002 f89f 	bl	8005300 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 80031c2:	2200      	movs	r2, #0
 80031c4:	2108      	movs	r1, #8
 80031c6:	4824      	ldr	r0, [pc, #144]	; (8003258 <setdir+0x2d8>)
 80031c8:	f002 f89a 	bl	8005300 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 80031cc:	2200      	movs	r2, #0
 80031ce:	2110      	movs	r1, #16
 80031d0:	4821      	ldr	r0, [pc, #132]	; (8003258 <setdir+0x2d8>)
 80031d2:	f002 f895 	bl	8005300 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 80031d6:	2200      	movs	r2, #0
 80031d8:	2120      	movs	r1, #32
 80031da:	481f      	ldr	r0, [pc, #124]	; (8003258 <setdir+0x2d8>)
 80031dc:	f002 f890 	bl	8005300 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 80031e0:	2200      	movs	r2, #0
 80031e2:	2140      	movs	r1, #64	; 0x40
 80031e4:	481c      	ldr	r0, [pc, #112]	; (8003258 <setdir+0x2d8>)
 80031e6:	f002 f88b 	bl	8005300 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80031ea:	2200      	movs	r2, #0
 80031ec:	2180      	movs	r1, #128	; 0x80
 80031ee:	481a      	ldr	r0, [pc, #104]	; (8003258 <setdir+0x2d8>)
 80031f0:	f002 f886 	bl	8005300 <HAL_GPIO_WritePin>
}
 80031f4:	e02a      	b.n	800324c <setdir+0x2cc>
	else if(d ==7){//向右校准
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2b07      	cmp	r3, #7
 80031fa:	d127      	bne.n	800324c <setdir+0x2cc>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);//设置四个电机的转向?
 80031fc:	2201      	movs	r2, #1
 80031fe:	2101      	movs	r1, #1
 8003200:	4815      	ldr	r0, [pc, #84]	; (8003258 <setdir+0x2d8>)
 8003202:	f002 f87d 	bl	8005300 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8003206:	2200      	movs	r2, #0
 8003208:	2102      	movs	r1, #2
 800320a:	4813      	ldr	r0, [pc, #76]	; (8003258 <setdir+0x2d8>)
 800320c:	f002 f878 	bl	8005300 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8003210:	2200      	movs	r2, #0
 8003212:	2104      	movs	r1, #4
 8003214:	4810      	ldr	r0, [pc, #64]	; (8003258 <setdir+0x2d8>)
 8003216:	f002 f873 	bl	8005300 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 800321a:	2200      	movs	r2, #0
 800321c:	2108      	movs	r1, #8
 800321e:	480e      	ldr	r0, [pc, #56]	; (8003258 <setdir+0x2d8>)
 8003220:	f002 f86e 	bl	8005300 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 8003224:	2200      	movs	r2, #0
 8003226:	2110      	movs	r1, #16
 8003228:	480b      	ldr	r0, [pc, #44]	; (8003258 <setdir+0x2d8>)
 800322a:	f002 f869 	bl	8005300 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 800322e:	2200      	movs	r2, #0
 8003230:	2120      	movs	r1, #32
 8003232:	4809      	ldr	r0, [pc, #36]	; (8003258 <setdir+0x2d8>)
 8003234:	f002 f864 	bl	8005300 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8003238:	2200      	movs	r2, #0
 800323a:	2140      	movs	r1, #64	; 0x40
 800323c:	4806      	ldr	r0, [pc, #24]	; (8003258 <setdir+0x2d8>)
 800323e:	f002 f85f 	bl	8005300 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8003242:	2200      	movs	r2, #0
 8003244:	2180      	movs	r1, #128	; 0x80
 8003246:	4804      	ldr	r0, [pc, #16]	; (8003258 <setdir+0x2d8>)
 8003248:	f002 f85a 	bl	8005300 <HAL_GPIO_WritePin>
}
 800324c:	bf00      	nop
 800324e:	3708      	adds	r7, #8
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}
 8003254:	20000524 	.word	0x20000524
 8003258:	40011000 	.word	0x40011000

0800325c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800325c:	b480      	push	{r7}
 800325e:	b085      	sub	sp, #20
 8003260:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003262:	4b15      	ldr	r3, [pc, #84]	; (80032b8 <HAL_MspInit+0x5c>)
 8003264:	699b      	ldr	r3, [r3, #24]
 8003266:	4a14      	ldr	r2, [pc, #80]	; (80032b8 <HAL_MspInit+0x5c>)
 8003268:	f043 0301 	orr.w	r3, r3, #1
 800326c:	6193      	str	r3, [r2, #24]
 800326e:	4b12      	ldr	r3, [pc, #72]	; (80032b8 <HAL_MspInit+0x5c>)
 8003270:	699b      	ldr	r3, [r3, #24]
 8003272:	f003 0301 	and.w	r3, r3, #1
 8003276:	60bb      	str	r3, [r7, #8]
 8003278:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800327a:	4b0f      	ldr	r3, [pc, #60]	; (80032b8 <HAL_MspInit+0x5c>)
 800327c:	69db      	ldr	r3, [r3, #28]
 800327e:	4a0e      	ldr	r2, [pc, #56]	; (80032b8 <HAL_MspInit+0x5c>)
 8003280:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003284:	61d3      	str	r3, [r2, #28]
 8003286:	4b0c      	ldr	r3, [pc, #48]	; (80032b8 <HAL_MspInit+0x5c>)
 8003288:	69db      	ldr	r3, [r3, #28]
 800328a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800328e:	607b      	str	r3, [r7, #4]
 8003290:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003292:	4b0a      	ldr	r3, [pc, #40]	; (80032bc <HAL_MspInit+0x60>)
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	60fb      	str	r3, [r7, #12]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800329e:	60fb      	str	r3, [r7, #12]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80032a6:	60fb      	str	r3, [r7, #12]
 80032a8:	4a04      	ldr	r2, [pc, #16]	; (80032bc <HAL_MspInit+0x60>)
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80032ae:	bf00      	nop
 80032b0:	3714      	adds	r7, #20
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bc80      	pop	{r7}
 80032b6:	4770      	bx	lr
 80032b8:	40021000 	.word	0x40021000
 80032bc:	40010000 	.word	0x40010000

080032c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80032c0:	b480      	push	{r7}
 80032c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80032c4:	e7fe      	b.n	80032c4 <NMI_Handler+0x4>

080032c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80032c6:	b480      	push	{r7}
 80032c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80032ca:	e7fe      	b.n	80032ca <HardFault_Handler+0x4>

080032cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80032cc:	b480      	push	{r7}
 80032ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80032d0:	e7fe      	b.n	80032d0 <MemManage_Handler+0x4>

080032d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80032d2:	b480      	push	{r7}
 80032d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80032d6:	e7fe      	b.n	80032d6 <BusFault_Handler+0x4>

080032d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80032d8:	b480      	push	{r7}
 80032da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80032dc:	e7fe      	b.n	80032dc <UsageFault_Handler+0x4>

080032de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80032de:	b480      	push	{r7}
 80032e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80032e2:	bf00      	nop
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bc80      	pop	{r7}
 80032e8:	4770      	bx	lr

080032ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80032ea:	b480      	push	{r7}
 80032ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80032ee:	bf00      	nop
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bc80      	pop	{r7}
 80032f4:	4770      	bx	lr

080032f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80032f6:	b480      	push	{r7}
 80032f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80032fa:	bf00      	nop
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bc80      	pop	{r7}
 8003300:	4770      	bx	lr

08003302 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003302:	b580      	push	{r7, lr}
 8003304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003306:	f001 f895 	bl	8004434 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800330a:	bf00      	nop
 800330c:	bd80      	pop	{r7, pc}
	...

08003310 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003314:	4802      	ldr	r0, [pc, #8]	; (8003320 <DMA1_Channel3_IRQHandler+0x10>)
 8003316:	f001 fbf5 	bl	8004b04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800331a:	bf00      	nop
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	200007ac 	.word	0x200007ac

08003324 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003328:	4802      	ldr	r0, [pc, #8]	; (8003334 <DMA1_Channel6_IRQHandler+0x10>)
 800332a:	f001 fbeb 	bl	8004b04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800332e:	bf00      	nop
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	20000768 	.word	0x20000768

08003338 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800333c:	4802      	ldr	r0, [pc, #8]	; (8003348 <TIM2_IRQHandler+0x10>)
 800333e:	f002 fef9 	bl	8006134 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003342:	bf00      	nop
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	20000574 	.word	0x20000574

0800334c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003350:	4802      	ldr	r0, [pc, #8]	; (800335c <USART2_IRQHandler+0x10>)
 8003352:	f003 fe4d 	bl	8006ff0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003356:	bf00      	nop
 8003358:	bd80      	pop	{r7, pc}
 800335a:	bf00      	nop
 800335c:	20000694 	.word	0x20000694

08003360 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003364:	4802      	ldr	r0, [pc, #8]	; (8003370 <USART3_IRQHandler+0x10>)
 8003366:	f003 fe43 	bl	8006ff0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800336a:	bf00      	nop
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	200006dc 	.word	0x200006dc

08003374 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8003378:	4802      	ldr	r0, [pc, #8]	; (8003384 <UART4_IRQHandler+0x10>)
 800337a:	f003 fe39 	bl	8006ff0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800337e:	bf00      	nop
 8003380:	bd80      	pop	{r7, pc}
 8003382:	bf00      	nop
 8003384:	20000604 	.word	0x20000604

08003388 <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 800338c:	4802      	ldr	r0, [pc, #8]	; (8003398 <DMA2_Channel3_IRQHandler+0x10>)
 800338e:	f001 fbb9 	bl	8004b04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 8003392:	bf00      	nop
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	20000724 	.word	0x20000724

0800339c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800339c:	b480      	push	{r7}
 800339e:	af00      	add	r7, sp, #0
  return 1;
 80033a0:	2301      	movs	r3, #1
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bc80      	pop	{r7}
 80033a8:	4770      	bx	lr

080033aa <_kill>:

int _kill(int pid, int sig)
{
 80033aa:	b580      	push	{r7, lr}
 80033ac:	b082      	sub	sp, #8
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	6078      	str	r0, [r7, #4]
 80033b2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80033b4:	f004 fd22 	bl	8007dfc <__errno>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2216      	movs	r2, #22
 80033bc:	601a      	str	r2, [r3, #0]
  return -1;
 80033be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3708      	adds	r7, #8
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}

080033ca <_exit>:

void _exit (int status)
{
 80033ca:	b580      	push	{r7, lr}
 80033cc:	b082      	sub	sp, #8
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80033d2:	f04f 31ff 	mov.w	r1, #4294967295
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f7ff ffe7 	bl	80033aa <_kill>
  while (1) {}    /* Make sure we hang here */
 80033dc:	e7fe      	b.n	80033dc <_exit+0x12>

080033de <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80033de:	b580      	push	{r7, lr}
 80033e0:	b086      	sub	sp, #24
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	60f8      	str	r0, [r7, #12]
 80033e6:	60b9      	str	r1, [r7, #8]
 80033e8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033ea:	2300      	movs	r3, #0
 80033ec:	617b      	str	r3, [r7, #20]
 80033ee:	e00a      	b.n	8003406 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80033f0:	f3af 8000 	nop.w
 80033f4:	4601      	mov	r1, r0
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	1c5a      	adds	r2, r3, #1
 80033fa:	60ba      	str	r2, [r7, #8]
 80033fc:	b2ca      	uxtb	r2, r1
 80033fe:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	3301      	adds	r3, #1
 8003404:	617b      	str	r3, [r7, #20]
 8003406:	697a      	ldr	r2, [r7, #20]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	429a      	cmp	r2, r3
 800340c:	dbf0      	blt.n	80033f0 <_read+0x12>
  }

  return len;
 800340e:	687b      	ldr	r3, [r7, #4]
}
 8003410:	4618      	mov	r0, r3
 8003412:	3718      	adds	r7, #24
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}

08003418 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b086      	sub	sp, #24
 800341c:	af00      	add	r7, sp, #0
 800341e:	60f8      	str	r0, [r7, #12]
 8003420:	60b9      	str	r1, [r7, #8]
 8003422:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003424:	2300      	movs	r3, #0
 8003426:	617b      	str	r3, [r7, #20]
 8003428:	e009      	b.n	800343e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	1c5a      	adds	r2, r3, #1
 800342e:	60ba      	str	r2, [r7, #8]
 8003430:	781b      	ldrb	r3, [r3, #0]
 8003432:	4618      	mov	r0, r3
 8003434:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	3301      	adds	r3, #1
 800343c:	617b      	str	r3, [r7, #20]
 800343e:	697a      	ldr	r2, [r7, #20]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	429a      	cmp	r2, r3
 8003444:	dbf1      	blt.n	800342a <_write+0x12>
  }
  return len;
 8003446:	687b      	ldr	r3, [r7, #4]
}
 8003448:	4618      	mov	r0, r3
 800344a:	3718      	adds	r7, #24
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}

08003450 <_close>:

int _close(int file)
{
 8003450:	b480      	push	{r7}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003458:	f04f 33ff 	mov.w	r3, #4294967295
}
 800345c:	4618      	mov	r0, r3
 800345e:	370c      	adds	r7, #12
 8003460:	46bd      	mov	sp, r7
 8003462:	bc80      	pop	{r7}
 8003464:	4770      	bx	lr

08003466 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003466:	b480      	push	{r7}
 8003468:	b083      	sub	sp, #12
 800346a:	af00      	add	r7, sp, #0
 800346c:	6078      	str	r0, [r7, #4]
 800346e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003476:	605a      	str	r2, [r3, #4]
  return 0;
 8003478:	2300      	movs	r3, #0
}
 800347a:	4618      	mov	r0, r3
 800347c:	370c      	adds	r7, #12
 800347e:	46bd      	mov	sp, r7
 8003480:	bc80      	pop	{r7}
 8003482:	4770      	bx	lr

08003484 <_isatty>:

int _isatty(int file)
{
 8003484:	b480      	push	{r7}
 8003486:	b083      	sub	sp, #12
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800348c:	2301      	movs	r3, #1
}
 800348e:	4618      	mov	r0, r3
 8003490:	370c      	adds	r7, #12
 8003492:	46bd      	mov	sp, r7
 8003494:	bc80      	pop	{r7}
 8003496:	4770      	bx	lr

08003498 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003498:	b480      	push	{r7}
 800349a:	b085      	sub	sp, #20
 800349c:	af00      	add	r7, sp, #0
 800349e:	60f8      	str	r0, [r7, #12]
 80034a0:	60b9      	str	r1, [r7, #8]
 80034a2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80034a4:	2300      	movs	r3, #0
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3714      	adds	r7, #20
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bc80      	pop	{r7}
 80034ae:	4770      	bx	lr

080034b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b086      	sub	sp, #24
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80034b8:	4a14      	ldr	r2, [pc, #80]	; (800350c <_sbrk+0x5c>)
 80034ba:	4b15      	ldr	r3, [pc, #84]	; (8003510 <_sbrk+0x60>)
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80034c4:	4b13      	ldr	r3, [pc, #76]	; (8003514 <_sbrk+0x64>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d102      	bne.n	80034d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80034cc:	4b11      	ldr	r3, [pc, #68]	; (8003514 <_sbrk+0x64>)
 80034ce:	4a12      	ldr	r2, [pc, #72]	; (8003518 <_sbrk+0x68>)
 80034d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80034d2:	4b10      	ldr	r3, [pc, #64]	; (8003514 <_sbrk+0x64>)
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	4413      	add	r3, r2
 80034da:	693a      	ldr	r2, [r7, #16]
 80034dc:	429a      	cmp	r2, r3
 80034de:	d207      	bcs.n	80034f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80034e0:	f004 fc8c 	bl	8007dfc <__errno>
 80034e4:	4603      	mov	r3, r0
 80034e6:	220c      	movs	r2, #12
 80034e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80034ea:	f04f 33ff 	mov.w	r3, #4294967295
 80034ee:	e009      	b.n	8003504 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80034f0:	4b08      	ldr	r3, [pc, #32]	; (8003514 <_sbrk+0x64>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80034f6:	4b07      	ldr	r3, [pc, #28]	; (8003514 <_sbrk+0x64>)
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4413      	add	r3, r2
 80034fe:	4a05      	ldr	r2, [pc, #20]	; (8003514 <_sbrk+0x64>)
 8003500:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003502:	68fb      	ldr	r3, [r7, #12]
}
 8003504:	4618      	mov	r0, r3
 8003506:	3718      	adds	r7, #24
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}
 800350c:	2000c000 	.word	0x2000c000
 8003510:	00000400 	.word	0x00000400
 8003514:	20000528 	.word	0x20000528
 8003518:	20000a70 	.word	0x20000a70

0800351c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800351c:	b480      	push	{r7}
 800351e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003520:	bf00      	nop
 8003522:	46bd      	mov	sp, r7
 8003524:	bc80      	pop	{r7}
 8003526:	4770      	bx	lr

08003528 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b096      	sub	sp, #88	; 0x58
 800352c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800352e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003532:	2200      	movs	r2, #0
 8003534:	601a      	str	r2, [r3, #0]
 8003536:	605a      	str	r2, [r3, #4]
 8003538:	609a      	str	r2, [r3, #8]
 800353a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800353c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003540:	2200      	movs	r2, #0
 8003542:	601a      	str	r2, [r3, #0]
 8003544:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003546:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800354a:	2200      	movs	r2, #0
 800354c:	601a      	str	r2, [r3, #0]
 800354e:	605a      	str	r2, [r3, #4]
 8003550:	609a      	str	r2, [r3, #8]
 8003552:	60da      	str	r2, [r3, #12]
 8003554:	611a      	str	r2, [r3, #16]
 8003556:	615a      	str	r2, [r3, #20]
 8003558:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800355a:	1d3b      	adds	r3, r7, #4
 800355c:	2220      	movs	r2, #32
 800355e:	2100      	movs	r1, #0
 8003560:	4618      	mov	r0, r3
 8003562:	f004 fc8b 	bl	8007e7c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003566:	4b50      	ldr	r3, [pc, #320]	; (80036a8 <MX_TIM1_Init+0x180>)
 8003568:	4a50      	ldr	r2, [pc, #320]	; (80036ac <MX_TIM1_Init+0x184>)
 800356a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 800356c:	4b4e      	ldr	r3, [pc, #312]	; (80036a8 <MX_TIM1_Init+0x180>)
 800356e:	2247      	movs	r2, #71	; 0x47
 8003570:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003572:	4b4d      	ldr	r3, [pc, #308]	; (80036a8 <MX_TIM1_Init+0x180>)
 8003574:	2200      	movs	r2, #0
 8003576:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8003578:	4b4b      	ldr	r3, [pc, #300]	; (80036a8 <MX_TIM1_Init+0x180>)
 800357a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800357e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003580:	4b49      	ldr	r3, [pc, #292]	; (80036a8 <MX_TIM1_Init+0x180>)
 8003582:	2200      	movs	r2, #0
 8003584:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003586:	4b48      	ldr	r3, [pc, #288]	; (80036a8 <MX_TIM1_Init+0x180>)
 8003588:	2200      	movs	r2, #0
 800358a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800358c:	4b46      	ldr	r3, [pc, #280]	; (80036a8 <MX_TIM1_Init+0x180>)
 800358e:	2200      	movs	r2, #0
 8003590:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003592:	4845      	ldr	r0, [pc, #276]	; (80036a8 <MX_TIM1_Init+0x180>)
 8003594:	f002 fadc 	bl	8005b50 <HAL_TIM_Base_Init>
 8003598:	4603      	mov	r3, r0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d001      	beq.n	80035a2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800359e:	f7ff fbe6 	bl	8002d6e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80035a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80035a6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80035a8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80035ac:	4619      	mov	r1, r3
 80035ae:	483e      	ldr	r0, [pc, #248]	; (80036a8 <MX_TIM1_Init+0x180>)
 80035b0:	f002 ff8a 	bl	80064c8 <HAL_TIM_ConfigClockSource>
 80035b4:	4603      	mov	r3, r0
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d001      	beq.n	80035be <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80035ba:	f7ff fbd8 	bl	8002d6e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80035be:	483a      	ldr	r0, [pc, #232]	; (80036a8 <MX_TIM1_Init+0x180>)
 80035c0:	f002 fb76 	bl	8005cb0 <HAL_TIM_PWM_Init>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d001      	beq.n	80035ce <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80035ca:	f7ff fbd0 	bl	8002d6e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80035ce:	2300      	movs	r3, #0
 80035d0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035d2:	2300      	movs	r3, #0
 80035d4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80035d6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80035da:	4619      	mov	r1, r3
 80035dc:	4832      	ldr	r0, [pc, #200]	; (80036a8 <MX_TIM1_Init+0x180>)
 80035de:	f003 fb3f 	bl	8006c60 <HAL_TIMEx_MasterConfigSynchronization>
 80035e2:	4603      	mov	r3, r0
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d001      	beq.n	80035ec <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80035e8:	f7ff fbc1 	bl	8002d6e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80035ec:	2360      	movs	r3, #96	; 0x60
 80035ee:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80035f0:	2300      	movs	r3, #0
 80035f2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80035f4:	2300      	movs	r3, #0
 80035f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80035f8:	2300      	movs	r3, #0
 80035fa:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80035fc:	2300      	movs	r3, #0
 80035fe:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003600:	2300      	movs	r3, #0
 8003602:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003604:	2300      	movs	r3, #0
 8003606:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003608:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800360c:	2200      	movs	r2, #0
 800360e:	4619      	mov	r1, r3
 8003610:	4825      	ldr	r0, [pc, #148]	; (80036a8 <MX_TIM1_Init+0x180>)
 8003612:	f002 fe97 	bl	8006344 <HAL_TIM_PWM_ConfigChannel>
 8003616:	4603      	mov	r3, r0
 8003618:	2b00      	cmp	r3, #0
 800361a:	d001      	beq.n	8003620 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 800361c:	f7ff fba7 	bl	8002d6e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003620:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003624:	2204      	movs	r2, #4
 8003626:	4619      	mov	r1, r3
 8003628:	481f      	ldr	r0, [pc, #124]	; (80036a8 <MX_TIM1_Init+0x180>)
 800362a:	f002 fe8b 	bl	8006344 <HAL_TIM_PWM_ConfigChannel>
 800362e:	4603      	mov	r3, r0
 8003630:	2b00      	cmp	r3, #0
 8003632:	d001      	beq.n	8003638 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8003634:	f7ff fb9b 	bl	8002d6e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003638:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800363c:	2208      	movs	r2, #8
 800363e:	4619      	mov	r1, r3
 8003640:	4819      	ldr	r0, [pc, #100]	; (80036a8 <MX_TIM1_Init+0x180>)
 8003642:	f002 fe7f 	bl	8006344 <HAL_TIM_PWM_ConfigChannel>
 8003646:	4603      	mov	r3, r0
 8003648:	2b00      	cmp	r3, #0
 800364a:	d001      	beq.n	8003650 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 800364c:	f7ff fb8f 	bl	8002d6e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003650:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003654:	220c      	movs	r2, #12
 8003656:	4619      	mov	r1, r3
 8003658:	4813      	ldr	r0, [pc, #76]	; (80036a8 <MX_TIM1_Init+0x180>)
 800365a:	f002 fe73 	bl	8006344 <HAL_TIM_PWM_ConfigChannel>
 800365e:	4603      	mov	r3, r0
 8003660:	2b00      	cmp	r3, #0
 8003662:	d001      	beq.n	8003668 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8003664:	f7ff fb83 	bl	8002d6e <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003668:	2300      	movs	r3, #0
 800366a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800366c:	2300      	movs	r3, #0
 800366e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003670:	2300      	movs	r3, #0
 8003672:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003674:	2300      	movs	r3, #0
 8003676:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003678:	2300      	movs	r3, #0
 800367a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800367c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003680:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003682:	2300      	movs	r3, #0
 8003684:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003686:	1d3b      	adds	r3, r7, #4
 8003688:	4619      	mov	r1, r3
 800368a:	4807      	ldr	r0, [pc, #28]	; (80036a8 <MX_TIM1_Init+0x180>)
 800368c:	f003 fb54 	bl	8006d38 <HAL_TIMEx_ConfigBreakDeadTime>
 8003690:	4603      	mov	r3, r0
 8003692:	2b00      	cmp	r3, #0
 8003694:	d001      	beq.n	800369a <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8003696:	f7ff fb6a 	bl	8002d6e <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800369a:	4803      	ldr	r0, [pc, #12]	; (80036a8 <MX_TIM1_Init+0x180>)
 800369c:	f000 f91e 	bl	80038dc <HAL_TIM_MspPostInit>

}
 80036a0:	bf00      	nop
 80036a2:	3758      	adds	r7, #88	; 0x58
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}
 80036a8:	2000052c 	.word	0x2000052c
 80036ac:	40012c00 	.word	0x40012c00

080036b0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b086      	sub	sp, #24
 80036b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80036b6:	f107 0308 	add.w	r3, r7, #8
 80036ba:	2200      	movs	r2, #0
 80036bc:	601a      	str	r2, [r3, #0]
 80036be:	605a      	str	r2, [r3, #4]
 80036c0:	609a      	str	r2, [r3, #8]
 80036c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80036c4:	463b      	mov	r3, r7
 80036c6:	2200      	movs	r2, #0
 80036c8:	601a      	str	r2, [r3, #0]
 80036ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80036cc:	4b1d      	ldr	r3, [pc, #116]	; (8003744 <MX_TIM2_Init+0x94>)
 80036ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80036d2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 80036d4:	4b1b      	ldr	r3, [pc, #108]	; (8003744 <MX_TIM2_Init+0x94>)
 80036d6:	2247      	movs	r2, #71	; 0x47
 80036d8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036da:	4b1a      	ldr	r3, [pc, #104]	; (8003744 <MX_TIM2_Init+0x94>)
 80036dc:	2200      	movs	r2, #0
 80036de:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 80036e0:	4b18      	ldr	r3, [pc, #96]	; (8003744 <MX_TIM2_Init+0x94>)
 80036e2:	f242 720f 	movw	r2, #9999	; 0x270f
 80036e6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036e8:	4b16      	ldr	r3, [pc, #88]	; (8003744 <MX_TIM2_Init+0x94>)
 80036ea:	2200      	movs	r2, #0
 80036ec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036ee:	4b15      	ldr	r3, [pc, #84]	; (8003744 <MX_TIM2_Init+0x94>)
 80036f0:	2200      	movs	r2, #0
 80036f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80036f4:	4813      	ldr	r0, [pc, #76]	; (8003744 <MX_TIM2_Init+0x94>)
 80036f6:	f002 fa2b 	bl	8005b50 <HAL_TIM_Base_Init>
 80036fa:	4603      	mov	r3, r0
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d001      	beq.n	8003704 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8003700:	f7ff fb35 	bl	8002d6e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003704:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003708:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800370a:	f107 0308 	add.w	r3, r7, #8
 800370e:	4619      	mov	r1, r3
 8003710:	480c      	ldr	r0, [pc, #48]	; (8003744 <MX_TIM2_Init+0x94>)
 8003712:	f002 fed9 	bl	80064c8 <HAL_TIM_ConfigClockSource>
 8003716:	4603      	mov	r3, r0
 8003718:	2b00      	cmp	r3, #0
 800371a:	d001      	beq.n	8003720 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800371c:	f7ff fb27 	bl	8002d6e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003720:	2300      	movs	r3, #0
 8003722:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003724:	2300      	movs	r3, #0
 8003726:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003728:	463b      	mov	r3, r7
 800372a:	4619      	mov	r1, r3
 800372c:	4805      	ldr	r0, [pc, #20]	; (8003744 <MX_TIM2_Init+0x94>)
 800372e:	f003 fa97 	bl	8006c60 <HAL_TIMEx_MasterConfigSynchronization>
 8003732:	4603      	mov	r3, r0
 8003734:	2b00      	cmp	r3, #0
 8003736:	d001      	beq.n	800373c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8003738:	f7ff fb19 	bl	8002d6e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800373c:	bf00      	nop
 800373e:	3718      	adds	r7, #24
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}
 8003744:	20000574 	.word	0x20000574

08003748 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b08c      	sub	sp, #48	; 0x30
 800374c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800374e:	f107 030c 	add.w	r3, r7, #12
 8003752:	2224      	movs	r2, #36	; 0x24
 8003754:	2100      	movs	r1, #0
 8003756:	4618      	mov	r0, r3
 8003758:	f004 fb90 	bl	8007e7c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800375c:	1d3b      	adds	r3, r7, #4
 800375e:	2200      	movs	r2, #0
 8003760:	601a      	str	r2, [r3, #0]
 8003762:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003764:	4b20      	ldr	r3, [pc, #128]	; (80037e8 <MX_TIM3_Init+0xa0>)
 8003766:	4a21      	ldr	r2, [pc, #132]	; (80037ec <MX_TIM3_Init+0xa4>)
 8003768:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800376a:	4b1f      	ldr	r3, [pc, #124]	; (80037e8 <MX_TIM3_Init+0xa0>)
 800376c:	2200      	movs	r2, #0
 800376e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003770:	4b1d      	ldr	r3, [pc, #116]	; (80037e8 <MX_TIM3_Init+0xa0>)
 8003772:	2200      	movs	r2, #0
 8003774:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003776:	4b1c      	ldr	r3, [pc, #112]	; (80037e8 <MX_TIM3_Init+0xa0>)
 8003778:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800377c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800377e:	4b1a      	ldr	r3, [pc, #104]	; (80037e8 <MX_TIM3_Init+0xa0>)
 8003780:	2200      	movs	r2, #0
 8003782:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003784:	4b18      	ldr	r3, [pc, #96]	; (80037e8 <MX_TIM3_Init+0xa0>)
 8003786:	2200      	movs	r2, #0
 8003788:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800378a:	2303      	movs	r3, #3
 800378c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800378e:	2300      	movs	r3, #0
 8003790:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003792:	2301      	movs	r3, #1
 8003794:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003796:	2300      	movs	r3, #0
 8003798:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800379a:	2300      	movs	r3, #0
 800379c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800379e:	2300      	movs	r3, #0
 80037a0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80037a2:	2301      	movs	r3, #1
 80037a4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80037a6:	2300      	movs	r3, #0
 80037a8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80037aa:	2300      	movs	r3, #0
 80037ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80037ae:	f107 030c 	add.w	r3, r7, #12
 80037b2:	4619      	mov	r1, r3
 80037b4:	480c      	ldr	r0, [pc, #48]	; (80037e8 <MX_TIM3_Init+0xa0>)
 80037b6:	f002 fb8d 	bl	8005ed4 <HAL_TIM_Encoder_Init>
 80037ba:	4603      	mov	r3, r0
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d001      	beq.n	80037c4 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80037c0:	f7ff fad5 	bl	8002d6e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80037c4:	2300      	movs	r3, #0
 80037c6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80037c8:	2300      	movs	r3, #0
 80037ca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80037cc:	1d3b      	adds	r3, r7, #4
 80037ce:	4619      	mov	r1, r3
 80037d0:	4805      	ldr	r0, [pc, #20]	; (80037e8 <MX_TIM3_Init+0xa0>)
 80037d2:	f003 fa45 	bl	8006c60 <HAL_TIMEx_MasterConfigSynchronization>
 80037d6:	4603      	mov	r3, r0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d001      	beq.n	80037e0 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80037dc:	f7ff fac7 	bl	8002d6e <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80037e0:	bf00      	nop
 80037e2:	3730      	adds	r7, #48	; 0x30
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}
 80037e8:	200005bc 	.word	0x200005bc
 80037ec:	40000400 	.word	0x40000400

080037f0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a16      	ldr	r2, [pc, #88]	; (8003858 <HAL_TIM_Base_MspInit+0x68>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d10c      	bne.n	800381c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003802:	4b16      	ldr	r3, [pc, #88]	; (800385c <HAL_TIM_Base_MspInit+0x6c>)
 8003804:	699b      	ldr	r3, [r3, #24]
 8003806:	4a15      	ldr	r2, [pc, #84]	; (800385c <HAL_TIM_Base_MspInit+0x6c>)
 8003808:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800380c:	6193      	str	r3, [r2, #24]
 800380e:	4b13      	ldr	r3, [pc, #76]	; (800385c <HAL_TIM_Base_MspInit+0x6c>)
 8003810:	699b      	ldr	r3, [r3, #24]
 8003812:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003816:	60fb      	str	r3, [r7, #12]
 8003818:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800381a:	e018      	b.n	800384e <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM2)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003824:	d113      	bne.n	800384e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003826:	4b0d      	ldr	r3, [pc, #52]	; (800385c <HAL_TIM_Base_MspInit+0x6c>)
 8003828:	69db      	ldr	r3, [r3, #28]
 800382a:	4a0c      	ldr	r2, [pc, #48]	; (800385c <HAL_TIM_Base_MspInit+0x6c>)
 800382c:	f043 0301 	orr.w	r3, r3, #1
 8003830:	61d3      	str	r3, [r2, #28]
 8003832:	4b0a      	ldr	r3, [pc, #40]	; (800385c <HAL_TIM_Base_MspInit+0x6c>)
 8003834:	69db      	ldr	r3, [r3, #28]
 8003836:	f003 0301 	and.w	r3, r3, #1
 800383a:	60bb      	str	r3, [r7, #8]
 800383c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800383e:	2200      	movs	r2, #0
 8003840:	2100      	movs	r1, #0
 8003842:	201c      	movs	r0, #28
 8003844:	f000 ff0d 	bl	8004662 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003848:	201c      	movs	r0, #28
 800384a:	f000 ff26 	bl	800469a <HAL_NVIC_EnableIRQ>
}
 800384e:	bf00      	nop
 8003850:	3710      	adds	r7, #16
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	40012c00 	.word	0x40012c00
 800385c:	40021000 	.word	0x40021000

08003860 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b088      	sub	sp, #32
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003868:	f107 0310 	add.w	r3, r7, #16
 800386c:	2200      	movs	r2, #0
 800386e:	601a      	str	r2, [r3, #0]
 8003870:	605a      	str	r2, [r3, #4]
 8003872:	609a      	str	r2, [r3, #8]
 8003874:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM3)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a15      	ldr	r2, [pc, #84]	; (80038d0 <HAL_TIM_Encoder_MspInit+0x70>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d123      	bne.n	80038c8 <HAL_TIM_Encoder_MspInit+0x68>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003880:	4b14      	ldr	r3, [pc, #80]	; (80038d4 <HAL_TIM_Encoder_MspInit+0x74>)
 8003882:	69db      	ldr	r3, [r3, #28]
 8003884:	4a13      	ldr	r2, [pc, #76]	; (80038d4 <HAL_TIM_Encoder_MspInit+0x74>)
 8003886:	f043 0302 	orr.w	r3, r3, #2
 800388a:	61d3      	str	r3, [r2, #28]
 800388c:	4b11      	ldr	r3, [pc, #68]	; (80038d4 <HAL_TIM_Encoder_MspInit+0x74>)
 800388e:	69db      	ldr	r3, [r3, #28]
 8003890:	f003 0302 	and.w	r3, r3, #2
 8003894:	60fb      	str	r3, [r7, #12]
 8003896:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003898:	4b0e      	ldr	r3, [pc, #56]	; (80038d4 <HAL_TIM_Encoder_MspInit+0x74>)
 800389a:	699b      	ldr	r3, [r3, #24]
 800389c:	4a0d      	ldr	r2, [pc, #52]	; (80038d4 <HAL_TIM_Encoder_MspInit+0x74>)
 800389e:	f043 0304 	orr.w	r3, r3, #4
 80038a2:	6193      	str	r3, [r2, #24]
 80038a4:	4b0b      	ldr	r3, [pc, #44]	; (80038d4 <HAL_TIM_Encoder_MspInit+0x74>)
 80038a6:	699b      	ldr	r3, [r3, #24]
 80038a8:	f003 0304 	and.w	r3, r3, #4
 80038ac:	60bb      	str	r3, [r7, #8]
 80038ae:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80038b0:	23c0      	movs	r3, #192	; 0xc0
 80038b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80038b4:	2300      	movs	r3, #0
 80038b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038b8:	2300      	movs	r3, #0
 80038ba:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038bc:	f107 0310 	add.w	r3, r7, #16
 80038c0:	4619      	mov	r1, r3
 80038c2:	4805      	ldr	r0, [pc, #20]	; (80038d8 <HAL_TIM_Encoder_MspInit+0x78>)
 80038c4:	f001 fb88 	bl	8004fd8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80038c8:	bf00      	nop
 80038ca:	3720      	adds	r7, #32
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	40000400 	.word	0x40000400
 80038d4:	40021000 	.word	0x40021000
 80038d8:	40010800 	.word	0x40010800

080038dc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b088      	sub	sp, #32
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038e4:	f107 0310 	add.w	r3, r7, #16
 80038e8:	2200      	movs	r2, #0
 80038ea:	601a      	str	r2, [r3, #0]
 80038ec:	605a      	str	r2, [r3, #4]
 80038ee:	609a      	str	r2, [r3, #8]
 80038f0:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a10      	ldr	r2, [pc, #64]	; (8003938 <HAL_TIM_MspPostInit+0x5c>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d118      	bne.n	800392e <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038fc:	4b0f      	ldr	r3, [pc, #60]	; (800393c <HAL_TIM_MspPostInit+0x60>)
 80038fe:	699b      	ldr	r3, [r3, #24]
 8003900:	4a0e      	ldr	r2, [pc, #56]	; (800393c <HAL_TIM_MspPostInit+0x60>)
 8003902:	f043 0304 	orr.w	r3, r3, #4
 8003906:	6193      	str	r3, [r2, #24]
 8003908:	4b0c      	ldr	r3, [pc, #48]	; (800393c <HAL_TIM_MspPostInit+0x60>)
 800390a:	699b      	ldr	r3, [r3, #24]
 800390c:	f003 0304 	and.w	r3, r3, #4
 8003910:	60fb      	str	r3, [r7, #12]
 8003912:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8003914:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8003918:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800391a:	2302      	movs	r3, #2
 800391c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800391e:	2302      	movs	r3, #2
 8003920:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003922:	f107 0310 	add.w	r3, r7, #16
 8003926:	4619      	mov	r1, r3
 8003928:	4805      	ldr	r0, [pc, #20]	; (8003940 <HAL_TIM_MspPostInit+0x64>)
 800392a:	f001 fb55 	bl	8004fd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800392e:	bf00      	nop
 8003930:	3720      	adds	r7, #32
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	40012c00 	.word	0x40012c00
 800393c:	40021000 	.word	0x40021000
 8003940:	40010800 	.word	0x40010800

08003944 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart2_rx;
DMA_HandleTypeDef hdma_usart3_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8003948:	4b11      	ldr	r3, [pc, #68]	; (8003990 <MX_UART4_Init+0x4c>)
 800394a:	4a12      	ldr	r2, [pc, #72]	; (8003994 <MX_UART4_Init+0x50>)
 800394c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800394e:	4b10      	ldr	r3, [pc, #64]	; (8003990 <MX_UART4_Init+0x4c>)
 8003950:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003954:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8003956:	4b0e      	ldr	r3, [pc, #56]	; (8003990 <MX_UART4_Init+0x4c>)
 8003958:	2200      	movs	r2, #0
 800395a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800395c:	4b0c      	ldr	r3, [pc, #48]	; (8003990 <MX_UART4_Init+0x4c>)
 800395e:	2200      	movs	r2, #0
 8003960:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8003962:	4b0b      	ldr	r3, [pc, #44]	; (8003990 <MX_UART4_Init+0x4c>)
 8003964:	2200      	movs	r2, #0
 8003966:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003968:	4b09      	ldr	r3, [pc, #36]	; (8003990 <MX_UART4_Init+0x4c>)
 800396a:	220c      	movs	r2, #12
 800396c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800396e:	4b08      	ldr	r3, [pc, #32]	; (8003990 <MX_UART4_Init+0x4c>)
 8003970:	2200      	movs	r2, #0
 8003972:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8003974:	4b06      	ldr	r3, [pc, #24]	; (8003990 <MX_UART4_Init+0x4c>)
 8003976:	2200      	movs	r2, #0
 8003978:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800397a:	4805      	ldr	r0, [pc, #20]	; (8003990 <MX_UART4_Init+0x4c>)
 800397c:	f003 fa3f 	bl	8006dfe <HAL_UART_Init>
 8003980:	4603      	mov	r3, r0
 8003982:	2b00      	cmp	r3, #0
 8003984:	d001      	beq.n	800398a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8003986:	f7ff f9f2 	bl	8002d6e <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800398a:	bf00      	nop
 800398c:	bd80      	pop	{r7, pc}
 800398e:	bf00      	nop
 8003990:	20000604 	.word	0x20000604
 8003994:	40004c00 	.word	0x40004c00

08003998 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800399c:	4b11      	ldr	r3, [pc, #68]	; (80039e4 <MX_USART1_UART_Init+0x4c>)
 800399e:	4a12      	ldr	r2, [pc, #72]	; (80039e8 <MX_USART1_UART_Init+0x50>)
 80039a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80039a2:	4b10      	ldr	r3, [pc, #64]	; (80039e4 <MX_USART1_UART_Init+0x4c>)
 80039a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80039a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80039aa:	4b0e      	ldr	r3, [pc, #56]	; (80039e4 <MX_USART1_UART_Init+0x4c>)
 80039ac:	2200      	movs	r2, #0
 80039ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80039b0:	4b0c      	ldr	r3, [pc, #48]	; (80039e4 <MX_USART1_UART_Init+0x4c>)
 80039b2:	2200      	movs	r2, #0
 80039b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80039b6:	4b0b      	ldr	r3, [pc, #44]	; (80039e4 <MX_USART1_UART_Init+0x4c>)
 80039b8:	2200      	movs	r2, #0
 80039ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80039bc:	4b09      	ldr	r3, [pc, #36]	; (80039e4 <MX_USART1_UART_Init+0x4c>)
 80039be:	220c      	movs	r2, #12
 80039c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80039c2:	4b08      	ldr	r3, [pc, #32]	; (80039e4 <MX_USART1_UART_Init+0x4c>)
 80039c4:	2200      	movs	r2, #0
 80039c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80039c8:	4b06      	ldr	r3, [pc, #24]	; (80039e4 <MX_USART1_UART_Init+0x4c>)
 80039ca:	2200      	movs	r2, #0
 80039cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80039ce:	4805      	ldr	r0, [pc, #20]	; (80039e4 <MX_USART1_UART_Init+0x4c>)
 80039d0:	f003 fa15 	bl	8006dfe <HAL_UART_Init>
 80039d4:	4603      	mov	r3, r0
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d001      	beq.n	80039de <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80039da:	f7ff f9c8 	bl	8002d6e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80039de:	bf00      	nop
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	bf00      	nop
 80039e4:	2000064c 	.word	0x2000064c
 80039e8:	40013800 	.word	0x40013800

080039ec <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80039f0:	4b11      	ldr	r3, [pc, #68]	; (8003a38 <MX_USART2_UART_Init+0x4c>)
 80039f2:	4a12      	ldr	r2, [pc, #72]	; (8003a3c <MX_USART2_UART_Init+0x50>)
 80039f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80039f6:	4b10      	ldr	r3, [pc, #64]	; (8003a38 <MX_USART2_UART_Init+0x4c>)
 80039f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80039fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80039fe:	4b0e      	ldr	r3, [pc, #56]	; (8003a38 <MX_USART2_UART_Init+0x4c>)
 8003a00:	2200      	movs	r2, #0
 8003a02:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003a04:	4b0c      	ldr	r3, [pc, #48]	; (8003a38 <MX_USART2_UART_Init+0x4c>)
 8003a06:	2200      	movs	r2, #0
 8003a08:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003a0a:	4b0b      	ldr	r3, [pc, #44]	; (8003a38 <MX_USART2_UART_Init+0x4c>)
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003a10:	4b09      	ldr	r3, [pc, #36]	; (8003a38 <MX_USART2_UART_Init+0x4c>)
 8003a12:	220c      	movs	r2, #12
 8003a14:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003a16:	4b08      	ldr	r3, [pc, #32]	; (8003a38 <MX_USART2_UART_Init+0x4c>)
 8003a18:	2200      	movs	r2, #0
 8003a1a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003a1c:	4b06      	ldr	r3, [pc, #24]	; (8003a38 <MX_USART2_UART_Init+0x4c>)
 8003a1e:	2200      	movs	r2, #0
 8003a20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003a22:	4805      	ldr	r0, [pc, #20]	; (8003a38 <MX_USART2_UART_Init+0x4c>)
 8003a24:	f003 f9eb 	bl	8006dfe <HAL_UART_Init>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d001      	beq.n	8003a32 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003a2e:	f7ff f99e 	bl	8002d6e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003a32:	bf00      	nop
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	20000694 	.word	0x20000694
 8003a3c:	40004400 	.word	0x40004400

08003a40 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003a44:	4b11      	ldr	r3, [pc, #68]	; (8003a8c <MX_USART3_UART_Init+0x4c>)
 8003a46:	4a12      	ldr	r2, [pc, #72]	; (8003a90 <MX_USART3_UART_Init+0x50>)
 8003a48:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003a4a:	4b10      	ldr	r3, [pc, #64]	; (8003a8c <MX_USART3_UART_Init+0x4c>)
 8003a4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003a50:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003a52:	4b0e      	ldr	r3, [pc, #56]	; (8003a8c <MX_USART3_UART_Init+0x4c>)
 8003a54:	2200      	movs	r2, #0
 8003a56:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003a58:	4b0c      	ldr	r3, [pc, #48]	; (8003a8c <MX_USART3_UART_Init+0x4c>)
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003a5e:	4b0b      	ldr	r3, [pc, #44]	; (8003a8c <MX_USART3_UART_Init+0x4c>)
 8003a60:	2200      	movs	r2, #0
 8003a62:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003a64:	4b09      	ldr	r3, [pc, #36]	; (8003a8c <MX_USART3_UART_Init+0x4c>)
 8003a66:	220c      	movs	r2, #12
 8003a68:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003a6a:	4b08      	ldr	r3, [pc, #32]	; (8003a8c <MX_USART3_UART_Init+0x4c>)
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003a70:	4b06      	ldr	r3, [pc, #24]	; (8003a8c <MX_USART3_UART_Init+0x4c>)
 8003a72:	2200      	movs	r2, #0
 8003a74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003a76:	4805      	ldr	r0, [pc, #20]	; (8003a8c <MX_USART3_UART_Init+0x4c>)
 8003a78:	f003 f9c1 	bl	8006dfe <HAL_UART_Init>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d001      	beq.n	8003a86 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8003a82:	f7ff f974 	bl	8002d6e <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003a86:	bf00      	nop
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	200006dc 	.word	0x200006dc
 8003a90:	40004800 	.word	0x40004800

08003a94 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b090      	sub	sp, #64	; 0x40
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a9c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	601a      	str	r2, [r3, #0]
 8003aa4:	605a      	str	r2, [r3, #4]
 8003aa6:	609a      	str	r2, [r3, #8]
 8003aa8:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==UART4)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a86      	ldr	r2, [pc, #536]	; (8003cc8 <HAL_UART_MspInit+0x234>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d160      	bne.n	8003b76 <HAL_UART_MspInit+0xe2>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003ab4:	4b85      	ldr	r3, [pc, #532]	; (8003ccc <HAL_UART_MspInit+0x238>)
 8003ab6:	69db      	ldr	r3, [r3, #28]
 8003ab8:	4a84      	ldr	r2, [pc, #528]	; (8003ccc <HAL_UART_MspInit+0x238>)
 8003aba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003abe:	61d3      	str	r3, [r2, #28]
 8003ac0:	4b82      	ldr	r3, [pc, #520]	; (8003ccc <HAL_UART_MspInit+0x238>)
 8003ac2:	69db      	ldr	r3, [r3, #28]
 8003ac4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ac8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003aca:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003acc:	4b7f      	ldr	r3, [pc, #508]	; (8003ccc <HAL_UART_MspInit+0x238>)
 8003ace:	699b      	ldr	r3, [r3, #24]
 8003ad0:	4a7e      	ldr	r2, [pc, #504]	; (8003ccc <HAL_UART_MspInit+0x238>)
 8003ad2:	f043 0310 	orr.w	r3, r3, #16
 8003ad6:	6193      	str	r3, [r2, #24]
 8003ad8:	4b7c      	ldr	r3, [pc, #496]	; (8003ccc <HAL_UART_MspInit+0x238>)
 8003ada:	699b      	ldr	r3, [r3, #24]
 8003adc:	f003 0310 	and.w	r3, r3, #16
 8003ae0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003ae4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aea:	2302      	movs	r3, #2
 8003aec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003aee:	2303      	movs	r3, #3
 8003af0:	63bb      	str	r3, [r7, #56]	; 0x38
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003af2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003af6:	4619      	mov	r1, r3
 8003af8:	4875      	ldr	r0, [pc, #468]	; (8003cd0 <HAL_UART_MspInit+0x23c>)
 8003afa:	f001 fa6d 	bl	8004fd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003afe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003b02:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003b04:	2300      	movs	r3, #0
 8003b06:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b0c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b10:	4619      	mov	r1, r3
 8003b12:	486f      	ldr	r0, [pc, #444]	; (8003cd0 <HAL_UART_MspInit+0x23c>)
 8003b14:	f001 fa60 	bl	8004fd8 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA2_Channel3;
 8003b18:	4b6e      	ldr	r3, [pc, #440]	; (8003cd4 <HAL_UART_MspInit+0x240>)
 8003b1a:	4a6f      	ldr	r2, [pc, #444]	; (8003cd8 <HAL_UART_MspInit+0x244>)
 8003b1c:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003b1e:	4b6d      	ldr	r3, [pc, #436]	; (8003cd4 <HAL_UART_MspInit+0x240>)
 8003b20:	2200      	movs	r2, #0
 8003b22:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b24:	4b6b      	ldr	r3, [pc, #428]	; (8003cd4 <HAL_UART_MspInit+0x240>)
 8003b26:	2200      	movs	r2, #0
 8003b28:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003b2a:	4b6a      	ldr	r3, [pc, #424]	; (8003cd4 <HAL_UART_MspInit+0x240>)
 8003b2c:	2280      	movs	r2, #128	; 0x80
 8003b2e:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003b30:	4b68      	ldr	r3, [pc, #416]	; (8003cd4 <HAL_UART_MspInit+0x240>)
 8003b32:	2200      	movs	r2, #0
 8003b34:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003b36:	4b67      	ldr	r3, [pc, #412]	; (8003cd4 <HAL_UART_MspInit+0x240>)
 8003b38:	2200      	movs	r2, #0
 8003b3a:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8003b3c:	4b65      	ldr	r3, [pc, #404]	; (8003cd4 <HAL_UART_MspInit+0x240>)
 8003b3e:	2200      	movs	r2, #0
 8003b40:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003b42:	4b64      	ldr	r3, [pc, #400]	; (8003cd4 <HAL_UART_MspInit+0x240>)
 8003b44:	2200      	movs	r2, #0
 8003b46:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8003b48:	4862      	ldr	r0, [pc, #392]	; (8003cd4 <HAL_UART_MspInit+0x240>)
 8003b4a:	f000 fdc1 	bl	80046d0 <HAL_DMA_Init>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d001      	beq.n	8003b58 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8003b54:	f7ff f90b 	bl	8002d6e <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	4a5e      	ldr	r2, [pc, #376]	; (8003cd4 <HAL_UART_MspInit+0x240>)
 8003b5c:	63da      	str	r2, [r3, #60]	; 0x3c
 8003b5e:	4a5d      	ldr	r2, [pc, #372]	; (8003cd4 <HAL_UART_MspInit+0x240>)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6253      	str	r3, [r2, #36]	; 0x24

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8003b64:	2200      	movs	r2, #0
 8003b66:	2100      	movs	r1, #0
 8003b68:	2034      	movs	r0, #52	; 0x34
 8003b6a:	f000 fd7a 	bl	8004662 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8003b6e:	2034      	movs	r0, #52	; 0x34
 8003b70:	f000 fd93 	bl	800469a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8003b74:	e125      	b.n	8003dc2 <HAL_UART_MspInit+0x32e>
  else if(uartHandle->Instance==USART1)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a58      	ldr	r2, [pc, #352]	; (8003cdc <HAL_UART_MspInit+0x248>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d13e      	bne.n	8003bfe <HAL_UART_MspInit+0x16a>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003b80:	4b52      	ldr	r3, [pc, #328]	; (8003ccc <HAL_UART_MspInit+0x238>)
 8003b82:	699b      	ldr	r3, [r3, #24]
 8003b84:	4a51      	ldr	r2, [pc, #324]	; (8003ccc <HAL_UART_MspInit+0x238>)
 8003b86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b8a:	6193      	str	r3, [r2, #24]
 8003b8c:	4b4f      	ldr	r3, [pc, #316]	; (8003ccc <HAL_UART_MspInit+0x238>)
 8003b8e:	699b      	ldr	r3, [r3, #24]
 8003b90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b94:	623b      	str	r3, [r7, #32]
 8003b96:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b98:	4b4c      	ldr	r3, [pc, #304]	; (8003ccc <HAL_UART_MspInit+0x238>)
 8003b9a:	699b      	ldr	r3, [r3, #24]
 8003b9c:	4a4b      	ldr	r2, [pc, #300]	; (8003ccc <HAL_UART_MspInit+0x238>)
 8003b9e:	f043 0308 	orr.w	r3, r3, #8
 8003ba2:	6193      	str	r3, [r2, #24]
 8003ba4:	4b49      	ldr	r3, [pc, #292]	; (8003ccc <HAL_UART_MspInit+0x238>)
 8003ba6:	699b      	ldr	r3, [r3, #24]
 8003ba8:	f003 0308 	and.w	r3, r3, #8
 8003bac:	61fb      	str	r3, [r7, #28]
 8003bae:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003bb0:	2340      	movs	r3, #64	; 0x40
 8003bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bb4:	2302      	movs	r3, #2
 8003bb6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003bb8:	2303      	movs	r3, #3
 8003bba:	63bb      	str	r3, [r7, #56]	; 0x38
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bbc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003bc0:	4619      	mov	r1, r3
 8003bc2:	4847      	ldr	r0, [pc, #284]	; (8003ce0 <HAL_UART_MspInit+0x24c>)
 8003bc4:	f001 fa08 	bl	8004fd8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003bc8:	2380      	movs	r3, #128	; 0x80
 8003bca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bd4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003bd8:	4619      	mov	r1, r3
 8003bda:	4841      	ldr	r0, [pc, #260]	; (8003ce0 <HAL_UART_MspInit+0x24c>)
 8003bdc:	f001 f9fc 	bl	8004fd8 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART1_ENABLE();
 8003be0:	4b40      	ldr	r3, [pc, #256]	; (8003ce4 <HAL_UART_MspInit+0x250>)
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003be6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003be8:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003bec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bf0:	f043 0304 	orr.w	r3, r3, #4
 8003bf4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bf6:	4a3b      	ldr	r2, [pc, #236]	; (8003ce4 <HAL_UART_MspInit+0x250>)
 8003bf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bfa:	6053      	str	r3, [r2, #4]
}
 8003bfc:	e0e1      	b.n	8003dc2 <HAL_UART_MspInit+0x32e>
  else if(uartHandle->Instance==USART2)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a39      	ldr	r2, [pc, #228]	; (8003ce8 <HAL_UART_MspInit+0x254>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d177      	bne.n	8003cf8 <HAL_UART_MspInit+0x264>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003c08:	4b30      	ldr	r3, [pc, #192]	; (8003ccc <HAL_UART_MspInit+0x238>)
 8003c0a:	69db      	ldr	r3, [r3, #28]
 8003c0c:	4a2f      	ldr	r2, [pc, #188]	; (8003ccc <HAL_UART_MspInit+0x238>)
 8003c0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c12:	61d3      	str	r3, [r2, #28]
 8003c14:	4b2d      	ldr	r3, [pc, #180]	; (8003ccc <HAL_UART_MspInit+0x238>)
 8003c16:	69db      	ldr	r3, [r3, #28]
 8003c18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c1c:	61bb      	str	r3, [r7, #24]
 8003c1e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c20:	4b2a      	ldr	r3, [pc, #168]	; (8003ccc <HAL_UART_MspInit+0x238>)
 8003c22:	699b      	ldr	r3, [r3, #24]
 8003c24:	4a29      	ldr	r2, [pc, #164]	; (8003ccc <HAL_UART_MspInit+0x238>)
 8003c26:	f043 0304 	orr.w	r3, r3, #4
 8003c2a:	6193      	str	r3, [r2, #24]
 8003c2c:	4b27      	ldr	r3, [pc, #156]	; (8003ccc <HAL_UART_MspInit+0x238>)
 8003c2e:	699b      	ldr	r3, [r3, #24]
 8003c30:	f003 0304 	and.w	r3, r3, #4
 8003c34:	617b      	str	r3, [r7, #20]
 8003c36:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003c38:	2304      	movs	r3, #4
 8003c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c3c:	2302      	movs	r3, #2
 8003c3e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003c40:	2303      	movs	r3, #3
 8003c42:	63bb      	str	r3, [r7, #56]	; 0x38
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003c48:	4619      	mov	r1, r3
 8003c4a:	4828      	ldr	r0, [pc, #160]	; (8003cec <HAL_UART_MspInit+0x258>)
 8003c4c:	f001 f9c4 	bl	8004fd8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003c50:	2308      	movs	r3, #8
 8003c52:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c54:	2300      	movs	r3, #0
 8003c56:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c5c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003c60:	4619      	mov	r1, r3
 8003c62:	4822      	ldr	r0, [pc, #136]	; (8003cec <HAL_UART_MspInit+0x258>)
 8003c64:	f001 f9b8 	bl	8004fd8 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8003c68:	4b21      	ldr	r3, [pc, #132]	; (8003cf0 <HAL_UART_MspInit+0x25c>)
 8003c6a:	4a22      	ldr	r2, [pc, #136]	; (8003cf4 <HAL_UART_MspInit+0x260>)
 8003c6c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003c6e:	4b20      	ldr	r3, [pc, #128]	; (8003cf0 <HAL_UART_MspInit+0x25c>)
 8003c70:	2200      	movs	r2, #0
 8003c72:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c74:	4b1e      	ldr	r3, [pc, #120]	; (8003cf0 <HAL_UART_MspInit+0x25c>)
 8003c76:	2200      	movs	r2, #0
 8003c78:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003c7a:	4b1d      	ldr	r3, [pc, #116]	; (8003cf0 <HAL_UART_MspInit+0x25c>)
 8003c7c:	2280      	movs	r2, #128	; 0x80
 8003c7e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003c80:	4b1b      	ldr	r3, [pc, #108]	; (8003cf0 <HAL_UART_MspInit+0x25c>)
 8003c82:	2200      	movs	r2, #0
 8003c84:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003c86:	4b1a      	ldr	r3, [pc, #104]	; (8003cf0 <HAL_UART_MspInit+0x25c>)
 8003c88:	2200      	movs	r2, #0
 8003c8a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8003c8c:	4b18      	ldr	r3, [pc, #96]	; (8003cf0 <HAL_UART_MspInit+0x25c>)
 8003c8e:	2220      	movs	r2, #32
 8003c90:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003c92:	4b17      	ldr	r3, [pc, #92]	; (8003cf0 <HAL_UART_MspInit+0x25c>)
 8003c94:	2200      	movs	r2, #0
 8003c96:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003c98:	4815      	ldr	r0, [pc, #84]	; (8003cf0 <HAL_UART_MspInit+0x25c>)
 8003c9a:	f000 fd19 	bl	80046d0 <HAL_DMA_Init>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d001      	beq.n	8003ca8 <HAL_UART_MspInit+0x214>
      Error_Handler();
 8003ca4:	f7ff f863 	bl	8002d6e <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	4a11      	ldr	r2, [pc, #68]	; (8003cf0 <HAL_UART_MspInit+0x25c>)
 8003cac:	63da      	str	r2, [r3, #60]	; 0x3c
 8003cae:	4a10      	ldr	r2, [pc, #64]	; (8003cf0 <HAL_UART_MspInit+0x25c>)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	2100      	movs	r1, #0
 8003cb8:	2026      	movs	r0, #38	; 0x26
 8003cba:	f000 fcd2 	bl	8004662 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003cbe:	2026      	movs	r0, #38	; 0x26
 8003cc0:	f000 fceb 	bl	800469a <HAL_NVIC_EnableIRQ>
}
 8003cc4:	e07d      	b.n	8003dc2 <HAL_UART_MspInit+0x32e>
 8003cc6:	bf00      	nop
 8003cc8:	40004c00 	.word	0x40004c00
 8003ccc:	40021000 	.word	0x40021000
 8003cd0:	40011000 	.word	0x40011000
 8003cd4:	20000724 	.word	0x20000724
 8003cd8:	40020430 	.word	0x40020430
 8003cdc:	40013800 	.word	0x40013800
 8003ce0:	40010c00 	.word	0x40010c00
 8003ce4:	40010000 	.word	0x40010000
 8003ce8:	40004400 	.word	0x40004400
 8003cec:	40010800 	.word	0x40010800
 8003cf0:	20000768 	.word	0x20000768
 8003cf4:	4002006c 	.word	0x4002006c
  else if(uartHandle->Instance==USART3)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a33      	ldr	r2, [pc, #204]	; (8003dcc <HAL_UART_MspInit+0x338>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d15f      	bne.n	8003dc2 <HAL_UART_MspInit+0x32e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003d02:	4b33      	ldr	r3, [pc, #204]	; (8003dd0 <HAL_UART_MspInit+0x33c>)
 8003d04:	69db      	ldr	r3, [r3, #28]
 8003d06:	4a32      	ldr	r2, [pc, #200]	; (8003dd0 <HAL_UART_MspInit+0x33c>)
 8003d08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d0c:	61d3      	str	r3, [r2, #28]
 8003d0e:	4b30      	ldr	r3, [pc, #192]	; (8003dd0 <HAL_UART_MspInit+0x33c>)
 8003d10:	69db      	ldr	r3, [r3, #28]
 8003d12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d16:	613b      	str	r3, [r7, #16]
 8003d18:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d1a:	4b2d      	ldr	r3, [pc, #180]	; (8003dd0 <HAL_UART_MspInit+0x33c>)
 8003d1c:	699b      	ldr	r3, [r3, #24]
 8003d1e:	4a2c      	ldr	r2, [pc, #176]	; (8003dd0 <HAL_UART_MspInit+0x33c>)
 8003d20:	f043 0308 	orr.w	r3, r3, #8
 8003d24:	6193      	str	r3, [r2, #24]
 8003d26:	4b2a      	ldr	r3, [pc, #168]	; (8003dd0 <HAL_UART_MspInit+0x33c>)
 8003d28:	699b      	ldr	r3, [r3, #24]
 8003d2a:	f003 0308 	and.w	r3, r3, #8
 8003d2e:	60fb      	str	r3, [r7, #12]
 8003d30:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003d32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d36:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d38:	2302      	movs	r3, #2
 8003d3a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003d3c:	2303      	movs	r3, #3
 8003d3e:	63bb      	str	r3, [r7, #56]	; 0x38
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d40:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003d44:	4619      	mov	r1, r3
 8003d46:	4823      	ldr	r0, [pc, #140]	; (8003dd4 <HAL_UART_MspInit+0x340>)
 8003d48:	f001 f946 	bl	8004fd8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003d4c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003d50:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003d52:	2300      	movs	r3, #0
 8003d54:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d56:	2300      	movs	r3, #0
 8003d58:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d5a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003d5e:	4619      	mov	r1, r3
 8003d60:	481c      	ldr	r0, [pc, #112]	; (8003dd4 <HAL_UART_MspInit+0x340>)
 8003d62:	f001 f939 	bl	8004fd8 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8003d66:	4b1c      	ldr	r3, [pc, #112]	; (8003dd8 <HAL_UART_MspInit+0x344>)
 8003d68:	4a1c      	ldr	r2, [pc, #112]	; (8003ddc <HAL_UART_MspInit+0x348>)
 8003d6a:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003d6c:	4b1a      	ldr	r3, [pc, #104]	; (8003dd8 <HAL_UART_MspInit+0x344>)
 8003d6e:	2200      	movs	r2, #0
 8003d70:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d72:	4b19      	ldr	r3, [pc, #100]	; (8003dd8 <HAL_UART_MspInit+0x344>)
 8003d74:	2200      	movs	r2, #0
 8003d76:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003d78:	4b17      	ldr	r3, [pc, #92]	; (8003dd8 <HAL_UART_MspInit+0x344>)
 8003d7a:	2280      	movs	r2, #128	; 0x80
 8003d7c:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003d7e:	4b16      	ldr	r3, [pc, #88]	; (8003dd8 <HAL_UART_MspInit+0x344>)
 8003d80:	2200      	movs	r2, #0
 8003d82:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003d84:	4b14      	ldr	r3, [pc, #80]	; (8003dd8 <HAL_UART_MspInit+0x344>)
 8003d86:	2200      	movs	r2, #0
 8003d88:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8003d8a:	4b13      	ldr	r3, [pc, #76]	; (8003dd8 <HAL_UART_MspInit+0x344>)
 8003d8c:	2220      	movs	r2, #32
 8003d8e:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003d90:	4b11      	ldr	r3, [pc, #68]	; (8003dd8 <HAL_UART_MspInit+0x344>)
 8003d92:	2200      	movs	r2, #0
 8003d94:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003d96:	4810      	ldr	r0, [pc, #64]	; (8003dd8 <HAL_UART_MspInit+0x344>)
 8003d98:	f000 fc9a 	bl	80046d0 <HAL_DMA_Init>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d001      	beq.n	8003da6 <HAL_UART_MspInit+0x312>
      Error_Handler();
 8003da2:	f7fe ffe4 	bl	8002d6e <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	4a0b      	ldr	r2, [pc, #44]	; (8003dd8 <HAL_UART_MspInit+0x344>)
 8003daa:	63da      	str	r2, [r3, #60]	; 0x3c
 8003dac:	4a0a      	ldr	r2, [pc, #40]	; (8003dd8 <HAL_UART_MspInit+0x344>)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003db2:	2200      	movs	r2, #0
 8003db4:	2100      	movs	r1, #0
 8003db6:	2027      	movs	r0, #39	; 0x27
 8003db8:	f000 fc53 	bl	8004662 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003dbc:	2027      	movs	r0, #39	; 0x27
 8003dbe:	f000 fc6c 	bl	800469a <HAL_NVIC_EnableIRQ>
}
 8003dc2:	bf00      	nop
 8003dc4:	3740      	adds	r7, #64	; 0x40
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	bf00      	nop
 8003dcc:	40004800 	.word	0x40004800
 8003dd0:	40021000 	.word	0x40021000
 8003dd4:	40010c00 	.word	0x40010c00
 8003dd8:	200007ac 	.word	0x200007ac
 8003ddc:	40020030 	.word	0x40020030

08003de0 <u1_printf>:
  /* USER CODE END USART3_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void u1_printf(char* fmt, ...) {
 8003de0:	b40f      	push	{r0, r1, r2, r3}
 8003de2:	b580      	push	{r7, lr}
 8003de4:	b0b4      	sub	sp, #208	; 0xd0
 8003de6:	af00      	add	r7, sp, #0
  uint16_t len;
  va_list ap;
  va_start(ap, fmt);
 8003de8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003dec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  uint8_t buf[200];
  vsprintf((char*)buf, fmt, ap);
 8003df0:	463b      	mov	r3, r7
 8003df2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003df6:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f005 fe7e 	bl	8009afc <vsiprintf>
  va_end(ap);
  len = strlen((char*)buf);
 8003e00:	463b      	mov	r3, r7
 8003e02:	4618      	mov	r0, r3
 8003e04:	f7fc fa10 	bl	8000228 <strlen>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
  HAL_UART_Transmit(&huart1, buf, len, HAL_MAX_DELAY);
 8003e0e:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 8003e12:	4639      	mov	r1, r7
 8003e14:	f04f 33ff 	mov.w	r3, #4294967295
 8003e18:	4804      	ldr	r0, [pc, #16]	; (8003e2c <u1_printf+0x4c>)
 8003e1a:	f003 f840 	bl	8006e9e <HAL_UART_Transmit>
}
 8003e1e:	bf00      	nop
 8003e20:	37d0      	adds	r7, #208	; 0xd0
 8003e22:	46bd      	mov	sp, r7
 8003e24:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003e28:	b004      	add	sp, #16
 8003e2a:	4770      	bx	lr
 8003e2c:	2000064c 	.word	0x2000064c

08003e30 <modularAdd>:
uint8_t gameStatusMessage[MAX_STATUS_LEN];

UART_HandleTypeDef* zigbee_huart;

int32_t modularAdd(int32_t a, int32_t b, int32_t max) // In case modular does not work for negative numbers
{
 8003e30:	b480      	push	{r7}
 8003e32:	b087      	sub	sp, #28
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	60f8      	str	r0, [r7, #12]
 8003e38:	60b9      	str	r1, [r7, #8]
 8003e3a:	607a      	str	r2, [r7, #4]
    int32_t c;
    c = a + b;
 8003e3c:	68fa      	ldr	r2, [r7, #12]
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	4413      	add	r3, r2
 8003e42:	617b      	str	r3, [r7, #20]
    if (c >= max)
 8003e44:	697a      	ldr	r2, [r7, #20]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	db03      	blt.n	8003e54 <modularAdd+0x24>
        c -= max;
 8003e4c:	697a      	ldr	r2, [r7, #20]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	617b      	str	r3, [r7, #20]
    if (c < 0)
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	da03      	bge.n	8003e62 <modularAdd+0x32>
        c += max;
 8003e5a:	697a      	ldr	r2, [r7, #20]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	4413      	add	r3, r2
 8003e60:	617b      	str	r3, [r7, #20]
    return c;
 8003e62:	697b      	ldr	r3, [r7, #20]
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	371c      	adds	r7, #28
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bc80      	pop	{r7}
 8003e6c:	4770      	bx	lr

08003e6e <calculateChecksum>:

static uint8_t calculateChecksum(uint8_t tempMessage[], int32_t start_idx, int32_t count) {
 8003e6e:	b580      	push	{r7, lr}
 8003e70:	b086      	sub	sp, #24
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	60f8      	str	r0, [r7, #12]
 8003e76:	60b9      	str	r1, [r7, #8]
 8003e78:	607a      	str	r2, [r7, #4]
    uint8_t checksum = 0;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	75fb      	strb	r3, [r7, #23]
    for (int32_t i = 0; i < count; ++i) {
 8003e7e:	2300      	movs	r3, #0
 8003e80:	613b      	str	r3, [r7, #16]
 8003e82:	e010      	b.n	8003ea6 <calculateChecksum+0x38>
        checksum ^= tempMessage[modularAdd(i, start_idx, MAX_MSG_LEN * 2)];
 8003e84:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003e88:	68b9      	ldr	r1, [r7, #8]
 8003e8a:	6938      	ldr	r0, [r7, #16]
 8003e8c:	f7ff ffd0 	bl	8003e30 <modularAdd>
 8003e90:	4603      	mov	r3, r0
 8003e92:	461a      	mov	r2, r3
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	4413      	add	r3, r2
 8003e98:	781a      	ldrb	r2, [r3, #0]
 8003e9a:	7dfb      	ldrb	r3, [r7, #23]
 8003e9c:	4053      	eors	r3, r2
 8003e9e:	75fb      	strb	r3, [r7, #23]
    for (int32_t i = 0; i < count; ++i) {
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	3301      	adds	r3, #1
 8003ea4:	613b      	str	r3, [r7, #16]
 8003ea6:	693a      	ldr	r2, [r7, #16]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	dbea      	blt.n	8003e84 <calculateChecksum+0x16>
    }
    return checksum;
 8003eae:	7dfb      	ldrb	r3, [r7, #23]
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3718      	adds	r7, #24
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}

08003eb8 <changeFloatData>:

static float changeFloatData(uint8_t* dat) {
 8003eb8:	b480      	push	{r7}
 8003eba:	b085      	sub	sp, #20
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
    float float_data;
    float_data = *((float*)dat);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	60fb      	str	r3, [r7, #12]
    return float_data;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3714      	adds	r7, #20
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bc80      	pop	{r7}
 8003ed0:	4770      	bx	lr
	...

08003ed4 <zigbee_Init>:


void zigbee_Init(UART_HandleTypeDef* huart) {
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b082      	sub	sp, #8
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
    memset(zigbeeMessage, 0x00, MAX_MSG_LEN);
 8003edc:	2296      	movs	r2, #150	; 0x96
 8003ede:	2100      	movs	r1, #0
 8003ee0:	480d      	ldr	r0, [pc, #52]	; (8003f18 <zigbee_Init+0x44>)
 8003ee2:	f003 ffcb 	bl	8007e7c <memset>
    memset(zigbeeRaw, 0x00, MAX_MSG_LEN);
 8003ee6:	2296      	movs	r2, #150	; 0x96
 8003ee8:	2100      	movs	r1, #0
 8003eea:	480c      	ldr	r0, [pc, #48]	; (8003f1c <zigbee_Init+0x48>)
 8003eec:	f003 ffc6 	bl	8007e7c <memset>
    memset(gameStatusMessage, 0x00, MAX_STATUS_LEN);
 8003ef0:	2296      	movs	r2, #150	; 0x96
 8003ef2:	2100      	movs	r1, #0
 8003ef4:	480a      	ldr	r0, [pc, #40]	; (8003f20 <zigbee_Init+0x4c>)
 8003ef6:	f003 ffc1 	bl	8007e7c <memset>
    zigbee_huart = huart;
 8003efa:	4a0a      	ldr	r2, [pc, #40]	; (8003f24 <zigbee_Init+0x50>)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6013      	str	r3, [r2, #0]
    HAL_UART_Receive_DMA(zigbee_huart, zigbeeRaw, MAX_MSG_LEN);
 8003f00:	4b08      	ldr	r3, [pc, #32]	; (8003f24 <zigbee_Init+0x50>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	2296      	movs	r2, #150	; 0x96
 8003f06:	4905      	ldr	r1, [pc, #20]	; (8003f1c <zigbee_Init+0x48>)
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f003 f84b 	bl	8006fa4 <HAL_UART_Receive_DMA>
}
 8003f0e:	bf00      	nop
 8003f10:	3708      	adds	r7, #8
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	bf00      	nop
 8003f18:	20000888 	.word	0x20000888
 8003f1c:	200007f0 	.word	0x200007f0
 8003f20:	200009bc 	.word	0x200009bc
 8003f24:	20000a54 	.word	0x20000a54

08003f28 <HAL_UART_RxHalfCpltCallback>:

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef* huart) {
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b084      	sub	sp, #16
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
    if (huart == zigbee_huart) {
 8003f30:	4b10      	ldr	r3, [pc, #64]	; (8003f74 <HAL_UART_RxHalfCpltCallback+0x4c>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	687a      	ldr	r2, [r7, #4]
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d118      	bne.n	8003f6c <HAL_UART_RxHalfCpltCallback+0x44>
        uint8_t* zigbeeMsgPtr = &zigbeeMessage[memPtr];
 8003f3a:	4b0f      	ldr	r3, [pc, #60]	; (8003f78 <HAL_UART_RxHalfCpltCallback+0x50>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a0f      	ldr	r2, [pc, #60]	; (8003f7c <HAL_UART_RxHalfCpltCallback+0x54>)
 8003f40:	4413      	add	r3, r2
 8003f42:	60fb      	str	r3, [r7, #12]
        uint8_t* rawPtr = &zigbeeRaw[0];
 8003f44:	4b0e      	ldr	r3, [pc, #56]	; (8003f80 <HAL_UART_RxHalfCpltCallback+0x58>)
 8003f46:	60bb      	str	r3, [r7, #8]
        memcpy(zigbeeMsgPtr, rawPtr, sizeof(uint8_t) * MAX_MSG_LEN / 2);
 8003f48:	224b      	movs	r2, #75	; 0x4b
 8003f4a:	68b9      	ldr	r1, [r7, #8]
 8003f4c:	68f8      	ldr	r0, [r7, #12]
 8003f4e:	f003 ff87 	bl	8007e60 <memcpy>
        memPtr = modularAdd(MAX_MSG_LEN / 2, memPtr, MAX_MSG_LEN * 2);
 8003f52:	4b09      	ldr	r3, [pc, #36]	; (8003f78 <HAL_UART_RxHalfCpltCallback+0x50>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003f5a:	4619      	mov	r1, r3
 8003f5c:	204b      	movs	r0, #75	; 0x4b
 8003f5e:	f7ff ff67 	bl	8003e30 <modularAdd>
 8003f62:	4603      	mov	r3, r0
 8003f64:	4a04      	ldr	r2, [pc, #16]	; (8003f78 <HAL_UART_RxHalfCpltCallback+0x50>)
 8003f66:	6013      	str	r3, [r2, #0]
        zigbeeMessageRecord();
 8003f68:	f000 f844 	bl	8003ff4 <zigbeeMessageRecord>
        // zigbeeMessageRecord is completed almost instantly in the callback function.
        // Please don't add u1_printf into the function.
    }
}
 8003f6c:	bf00      	nop
 8003f6e:	3710      	adds	r7, #16
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}
 8003f74:	20000a54 	.word	0x20000a54
 8003f78:	200009b4 	.word	0x200009b4
 8003f7c:	20000888 	.word	0x20000888
 8003f80:	200007f0 	.word	0x200007f0

08003f84 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart) {
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b084      	sub	sp, #16
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
    if (huart == zigbee_huart) {
 8003f8c:	4b14      	ldr	r3, [pc, #80]	; (8003fe0 <HAL_UART_RxCpltCallback+0x5c>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d119      	bne.n	8003fca <HAL_UART_RxCpltCallback+0x46>
        uint8_t* zigbeeMsgPtr = &zigbeeMessage[memPtr];
 8003f96:	4b13      	ldr	r3, [pc, #76]	; (8003fe4 <HAL_UART_RxCpltCallback+0x60>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a13      	ldr	r2, [pc, #76]	; (8003fe8 <HAL_UART_RxCpltCallback+0x64>)
 8003f9c:	4413      	add	r3, r2
 8003f9e:	60fb      	str	r3, [r7, #12]
        uint8_t* rawPtr = &zigbeeRaw[MAX_MSG_LEN / 2];
 8003fa0:	4b12      	ldr	r3, [pc, #72]	; (8003fec <HAL_UART_RxCpltCallback+0x68>)
 8003fa2:	60bb      	str	r3, [r7, #8]
        memcpy(zigbeeMsgPtr, rawPtr, sizeof(uint8_t) * MAX_MSG_LEN / 2);
 8003fa4:	224b      	movs	r2, #75	; 0x4b
 8003fa6:	68b9      	ldr	r1, [r7, #8]
 8003fa8:	68f8      	ldr	r0, [r7, #12]
 8003faa:	f003 ff59 	bl	8007e60 <memcpy>
        memPtr = modularAdd(MAX_MSG_LEN / 2, memPtr, MAX_MSG_LEN * 2);
 8003fae:	4b0d      	ldr	r3, [pc, #52]	; (8003fe4 <HAL_UART_RxCpltCallback+0x60>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003fb6:	4619      	mov	r1, r3
 8003fb8:	204b      	movs	r0, #75	; 0x4b
 8003fba:	f7ff ff39 	bl	8003e30 <modularAdd>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	4a08      	ldr	r2, [pc, #32]	; (8003fe4 <HAL_UART_RxCpltCallback+0x60>)
 8003fc2:	6013      	str	r3, [r2, #0]
        zigbeeMessageRecord();
 8003fc4:	f000 f816 	bl	8003ff4 <zigbeeMessageRecord>
    {
        //u1_printf("callback!");
        jy62MessageRecord();
        //HAL_UART_Receive_DMA(huart,jy62Receive,JY62_MESSAGE_LENTH);
    }
}
 8003fc8:	e005      	b.n	8003fd6 <HAL_UART_RxCpltCallback+0x52>
    } else if (huart == &huart2)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	4a08      	ldr	r2, [pc, #32]	; (8003ff0 <HAL_UART_RxCpltCallback+0x6c>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d101      	bne.n	8003fd6 <HAL_UART_RxCpltCallback+0x52>
        jy62MessageRecord();
 8003fd2:	f7fd fa0d 	bl	80013f0 <jy62MessageRecord>
}
 8003fd6:	bf00      	nop
 8003fd8:	3710      	adds	r7, #16
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}
 8003fde:	bf00      	nop
 8003fe0:	20000a54 	.word	0x20000a54
 8003fe4:	200009b4 	.word	0x200009b4
 8003fe8:	20000888 	.word	0x20000888
 8003fec:	2000083b 	.word	0x2000083b
 8003ff0:	20000694 	.word	0x20000694

08003ff4 <zigbeeMessageRecord>:
    int32_t x = (int)Pos->posx;
    int32_t y = (int)Pos->posy;
    return 8 * x + y;
}

uint8_t zigbeeMessageRecord() {
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b0d4      	sub	sp, #336	; 0x150
 8003ff8:	af00      	add	r7, sp, #0

    int32_t msgIndex = 0;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
    uint8_t tempZigbeeMessage[MAX_MSG_LEN * 2];
    memcpy(tempZigbeeMessage, zigbeeMessage, MAX_MSG_LEN * 2);
 8004000:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8004004:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004008:	4a7b      	ldr	r2, [pc, #492]	; (80041f8 <zigbeeMessageRecord+0x204>)
 800400a:	4618      	mov	r0, r3
 800400c:	4611      	mov	r1, r2
 800400e:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8004012:	461a      	mov	r2, r3
 8004014:	f003 ff24 	bl	8007e60 <memcpy>
    // In case zigbeeMessage updates in the interrupt during the loop

    int32_t prevMemPtr = memPtr; // In case memPtr changes in the interrupt during the loop
 8004018:	4b78      	ldr	r3, [pc, #480]	; (80041fc <zigbeeMessageRecord+0x208>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
    int16_t byteNum;
    // find the first 0x55 of msgType
    for (msgIndex = modularAdd(prevMemPtr, -MAX_SINGLE_MSG, MAX_MSG_LEN * 2); msgIndex != prevMemPtr;)
 8004020:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004024:	f06f 015e 	mvn.w	r1, #94	; 0x5e
 8004028:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 800402c:	f7ff ff00 	bl	8003e30 <modularAdd>
 8004030:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c
 8004034:	e066      	b.n	8004104 <zigbeeMessageRecord+0x110>
        // A message is at most 30 bytes long. We find the header of the first full message
    {
        if (tempZigbeeMessage[msgIndex] == 0x55 &&
 8004036:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800403a:	f5a3 72a6 	sub.w	r2, r3, #332	; 0x14c
 800403e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004042:	4413      	add	r3, r2
 8004044:	781b      	ldrb	r3, [r3, #0]
 8004046:	2b55      	cmp	r3, #85	; 0x55
 8004048:	d152      	bne.n	80040f0 <zigbeeMessageRecord+0xfc>
            tempZigbeeMessage[modularAdd(msgIndex, 1, MAX_MSG_LEN * 2)] == 0xAA) {
 800404a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800404e:	2101      	movs	r1, #1
 8004050:	f8d7 014c 	ldr.w	r0, [r7, #332]	; 0x14c
 8004054:	f7ff feec 	bl	8003e30 <modularAdd>
 8004058:	4602      	mov	r2, r0
 800405a:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800405e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004062:	5c9b      	ldrb	r3, [r3, r2]
        if (tempZigbeeMessage[msgIndex] == 0x55 &&
 8004064:	2baa      	cmp	r3, #170	; 0xaa
 8004066:	d143      	bne.n	80040f0 <zigbeeMessageRecord+0xfc>


            cutavoid[0] = tempZigbeeMessage[modularAdd(msgIndex, 2, MAX_MSG_LEN * 2)];
 8004068:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800406c:	2102      	movs	r1, #2
 800406e:	f8d7 014c 	ldr.w	r0, [r7, #332]	; 0x14c
 8004072:	f7ff fedd 	bl	8003e30 <modularAdd>
 8004076:	4602      	mov	r2, r0
 8004078:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800407c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004080:	5c9a      	ldrb	r2, [r3, r2]
 8004082:	4b5f      	ldr	r3, [pc, #380]	; (8004200 <zigbeeMessageRecord+0x20c>)
 8004084:	701a      	strb	r2, [r3, #0]
            cutavoid[1] = tempZigbeeMessage[modularAdd(msgIndex, 3, MAX_MSG_LEN * 2)];
 8004086:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800408a:	2103      	movs	r1, #3
 800408c:	f8d7 014c 	ldr.w	r0, [r7, #332]	; 0x14c
 8004090:	f7ff fece 	bl	8003e30 <modularAdd>
 8004094:	4602      	mov	r2, r0
 8004096:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800409a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800409e:	5c9a      	ldrb	r2, [r3, r2]
 80040a0:	4b57      	ldr	r3, [pc, #348]	; (8004200 <zigbeeMessageRecord+0x20c>)
 80040a2:	705a      	strb	r2, [r3, #1]
            byteNum = *((int16_t*)(cutavoid));
 80040a4:	4b56      	ldr	r3, [pc, #344]	; (8004200 <zigbeeMessageRecord+0x20c>)
 80040a6:	881b      	ldrh	r3, [r3, #0]
 80040a8:	f8a7 314a 	strh.w	r3, [r7, #330]	; 0x14a

            uint8_t tmpchecksum;
            tmpchecksum = calculateChecksum(tempZigbeeMessage, modularAdd(msgIndex, 5, MAX_MSG_LEN * 2), byteNum);
 80040ac:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80040b0:	2105      	movs	r1, #5
 80040b2:	f8d7 014c 	ldr.w	r0, [r7, #332]	; 0x14c
 80040b6:	f7ff febb 	bl	8003e30 <modularAdd>
 80040ba:	4601      	mov	r1, r0
 80040bc:	f9b7 214a 	ldrsh.w	r2, [r7, #330]	; 0x14a
 80040c0:	1d3b      	adds	r3, r7, #4
 80040c2:	4618      	mov	r0, r3
 80040c4:	f7ff fed3 	bl	8003e6e <calculateChecksum>
 80040c8:	4603      	mov	r3, r0
 80040ca:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
            if (tmpchecksum == tempZigbeeMessage[modularAdd(msgIndex, 4, MAX_MSG_LEN * 2)]) {
 80040ce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80040d2:	2104      	movs	r1, #4
 80040d4:	f8d7 014c 	ldr.w	r0, [r7, #332]	; 0x14c
 80040d8:	f7ff feaa 	bl	8003e30 <modularAdd>
 80040dc:	4602      	mov	r2, r0
 80040de:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80040e2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80040e6:	5c9b      	ldrb	r3, [r3, r2]
 80040e8:	f897 213b 	ldrb.w	r2, [r7, #315]	; 0x13b
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d010      	beq.n	8004112 <zigbeeMessageRecord+0x11e>
                break;
            }
        }
        msgIndex = modularAdd(msgIndex, -1, MAX_MSG_LEN * 2);
 80040f0:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80040f4:	f04f 31ff 	mov.w	r1, #4294967295
 80040f8:	f8d7 014c 	ldr.w	r0, [r7, #332]	; 0x14c
 80040fc:	f7ff fe98 	bl	8003e30 <modularAdd>
 8004100:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c
    for (msgIndex = modularAdd(prevMemPtr, -MAX_SINGLE_MSG, MAX_MSG_LEN * 2); msgIndex != prevMemPtr;)
 8004104:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8004108:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800410c:	429a      	cmp	r2, r3
 800410e:	d192      	bne.n	8004036 <zigbeeMessageRecord+0x42>
 8004110:	e000      	b.n	8004114 <zigbeeMessageRecord+0x120>
                break;
 8004112:	bf00      	nop
    }
    if (msgIndex == prevMemPtr) {
 8004114:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8004118:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800411c:	429a      	cmp	r2, r3
 800411e:	d101      	bne.n	8004124 <zigbeeMessageRecord+0x130>
        return 1;
 8004120:	2301      	movs	r3, #1
 8004122:	e063      	b.n	80041ec <zigbeeMessageRecord+0x1f8>
    }

    int32_t prevTime, newTime;
    prevTime = getGameTime();
 8004124:	f000 f870 	bl	8004208 <getGameTime>
 8004128:	f8c7 0134 	str.w	r0, [r7, #308]	; 0x134
    for (int32_t i = 0; i < 4; i++) {
 800412c:	2300      	movs	r3, #0
 800412e:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8004132:	e01a      	b.n	800416a <zigbeeMessageRecord+0x176>
        cutavoid[i] = tempZigbeeMessage[modularAdd(msgIndex, 5 + 1 + i, MAX_MSG_LEN * 2)];
 8004134:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004138:	3306      	adds	r3, #6
 800413a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800413e:	4619      	mov	r1, r3
 8004140:	f8d7 014c 	ldr.w	r0, [r7, #332]	; 0x14c
 8004144:	f7ff fe74 	bl	8003e30 <modularAdd>
 8004148:	4602      	mov	r2, r0
 800414a:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800414e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004152:	5c99      	ldrb	r1, [r3, r2]
 8004154:	4a2a      	ldr	r2, [pc, #168]	; (8004200 <zigbeeMessageRecord+0x20c>)
 8004156:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800415a:	4413      	add	r3, r2
 800415c:	460a      	mov	r2, r1
 800415e:	701a      	strb	r2, [r3, #0]
    for (int32_t i = 0; i < 4; i++) {
 8004160:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004164:	3301      	adds	r3, #1
 8004166:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 800416a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800416e:	2b03      	cmp	r3, #3
 8004170:	dde0      	ble.n	8004134 <zigbeeMessageRecord+0x140>
    }
    newTime = *((int32_t*)(cutavoid));
 8004172:	4b23      	ldr	r3, [pc, #140]	; (8004200 <zigbeeMessageRecord+0x20c>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    if (newTime >= prevTime && newTime <= prevTime + 1000) {
 800417a:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800417e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004182:	429a      	cmp	r2, r3
 8004184:	db31      	blt.n	80041ea <zigbeeMessageRecord+0x1f6>
 8004186:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800418a:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800418e:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8004192:	429a      	cmp	r2, r3
 8004194:	dc29      	bgt.n	80041ea <zigbeeMessageRecord+0x1f6>
        memset(gameStatusMessage, 0x00, MAX_STATUS_LEN);
 8004196:	2296      	movs	r2, #150	; 0x96
 8004198:	2100      	movs	r1, #0
 800419a:	481a      	ldr	r0, [pc, #104]	; (8004204 <zigbeeMessageRecord+0x210>)
 800419c:	f003 fe6e 	bl	8007e7c <memset>
        for (int32_t i = 0; i < byteNum; i++) {
 80041a0:	2300      	movs	r3, #0
 80041a2:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 80041a6:	e01a      	b.n	80041de <zigbeeMessageRecord+0x1ea>
            gameStatusMessage[i] = tempZigbeeMessage[modularAdd(msgIndex, 5 + i, MAX_MSG_LEN * 2)];
 80041a8:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80041ac:	3305      	adds	r3, #5
 80041ae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80041b2:	4619      	mov	r1, r3
 80041b4:	f8d7 014c 	ldr.w	r0, [r7, #332]	; 0x14c
 80041b8:	f7ff fe3a 	bl	8003e30 <modularAdd>
 80041bc:	4602      	mov	r2, r0
 80041be:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80041c2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80041c6:	5c99      	ldrb	r1, [r3, r2]
 80041c8:	4a0e      	ldr	r2, [pc, #56]	; (8004204 <zigbeeMessageRecord+0x210>)
 80041ca:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80041ce:	4413      	add	r3, r2
 80041d0:	460a      	mov	r2, r1
 80041d2:	701a      	strb	r2, [r3, #0]
        for (int32_t i = 0; i < byteNum; i++) {
 80041d4:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80041d8:	3301      	adds	r3, #1
 80041da:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 80041de:	f9b7 314a 	ldrsh.w	r3, [r7, #330]	; 0x14a
 80041e2:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 80041e6:	429a      	cmp	r2, r3
 80041e8:	dbde      	blt.n	80041a8 <zigbeeMessageRecord+0x1b4>
        }
    }
    return 0;
 80041ea:	2300      	movs	r3, #0
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	f507 77a8 	add.w	r7, r7, #336	; 0x150
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}
 80041f6:	bf00      	nop
 80041f8:	20000888 	.word	0x20000888
 80041fc:	200009b4 	.word	0x200009b4
 8004200:	200009b8 	.word	0x200009b8
 8004204:	200009bc 	.word	0x200009bc

08004208 <getGameTime>:

int32_t getGameTime() {
 8004208:	b480      	push	{r7}
 800420a:	b083      	sub	sp, #12
 800420c:	af00      	add	r7, sp, #0
    int32_t time;
    time = *((int32_t*)(&gameStatusMessage[1]));
 800420e:	4b04      	ldr	r3, [pc, #16]	; (8004220 <getGameTime+0x18>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	607b      	str	r3, [r7, #4]
    return time;
 8004214:	687b      	ldr	r3, [r7, #4]
}
 8004216:	4618      	mov	r0, r3
 8004218:	370c      	adds	r7, #12
 800421a:	46bd      	mov	sp, r7
 800421c:	bc80      	pop	{r7}
 800421e:	4770      	bx	lr
 8004220:	200009bd 	.word	0x200009bd

08004224 <getGameStage>:

GameStage_edc25 getGameStage() {
 8004224:	b480      	push	{r7}
 8004226:	b083      	sub	sp, #12
 8004228:	af00      	add	r7, sp, #0
    uint8_t stage;
    stage = gameStatusMessage[0];
 800422a:	4b04      	ldr	r3, [pc, #16]	; (800423c <getGameStage+0x18>)
 800422c:	781b      	ldrb	r3, [r3, #0]
 800422e:	71fb      	strb	r3, [r7, #7]
    return (GameStage_edc25)stage;
 8004230:	79fb      	ldrb	r3, [r7, #7]
}
 8004232:	4618      	mov	r0, r3
 8004234:	370c      	adds	r7, #12
 8004236:	46bd      	mov	sp, r7
 8004238:	bc80      	pop	{r7}
 800423a:	4770      	bx	lr
 800423c:	200009bc 	.word	0x200009bc

08004240 <getHeightOfId>:

void getHeightOfAllChunks(uint8_t* dest) {
    memcpy(dest, gameStatusMessage[5], 64);
}

uint8_t getHeightOfId(uint8_t id) {
 8004240:	b480      	push	{r7}
 8004242:	b083      	sub	sp, #12
 8004244:	af00      	add	r7, sp, #0
 8004246:	4603      	mov	r3, r0
 8004248:	71fb      	strb	r3, [r7, #7]
    return gameStatusMessage[5 + id];
 800424a:	79fb      	ldrb	r3, [r7, #7]
 800424c:	3305      	adds	r3, #5
 800424e:	4a03      	ldr	r2, [pc, #12]	; (800425c <getHeightOfId+0x1c>)
 8004250:	5cd3      	ldrb	r3, [r2, r3]
}
 8004252:	4618      	mov	r0, r3
 8004254:	370c      	adds	r7, #12
 8004256:	46bd      	mov	sp, r7
 8004258:	bc80      	pop	{r7}
 800425a:	4770      	bx	lr
 800425c:	200009bc 	.word	0x200009bc

08004260 <getPosition>:

bool hasBedOpponent() {
    return (bool)gameStatusMessage[70];
}

void getPosition(Position_edc25* Pos) {
 8004260:	b580      	push	{r7, lr}
 8004262:	b082      	sub	sp, #8
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
    Pos->posx = changeFloatData(gameStatusMessage + 71);
 8004268:	4b08      	ldr	r3, [pc, #32]	; (800428c <getPosition+0x2c>)
 800426a:	4618      	mov	r0, r3
 800426c:	f7ff fe24 	bl	8003eb8 <changeFloatData>
 8004270:	4602      	mov	r2, r0
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	601a      	str	r2, [r3, #0]
    Pos->posy = changeFloatData(gameStatusMessage + 75);
 8004276:	4b06      	ldr	r3, [pc, #24]	; (8004290 <getPosition+0x30>)
 8004278:	4618      	mov	r0, r3
 800427a:	f7ff fe1d 	bl	8003eb8 <changeFloatData>
 800427e:	4602      	mov	r2, r0
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	605a      	str	r2, [r3, #4]
}
 8004284:	bf00      	nop
 8004286:	3708      	adds	r7, #8
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}
 800428c:	20000a03 	.word	0x20000a03
 8004290:	20000a07 	.word	0x20000a07

08004294 <getEmeraldCount>:

uint8_t getStrength() {
    return gameStatusMessage[90];
}

uint8_t getEmeraldCount() {
 8004294:	b480      	push	{r7}
 8004296:	af00      	add	r7, sp, #0
    return gameStatusMessage[91];
 8004298:	4b03      	ldr	r3, [pc, #12]	; (80042a8 <getEmeraldCount+0x14>)
 800429a:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
}
 800429e:	4618      	mov	r0, r3
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bc80      	pop	{r7}
 80042a4:	4770      	bx	lr
 80042a6:	bf00      	nop
 80042a8:	200009bc 	.word	0x200009bc

080042ac <getWoolCount>:

uint8_t getWoolCount() {
 80042ac:	b480      	push	{r7}
 80042ae:	af00      	add	r7, sp, #0
    return gameStatusMessage[92];
 80042b0:	4b03      	ldr	r3, [pc, #12]	; (80042c0 <getWoolCount+0x14>)
 80042b2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bc80      	pop	{r7}
 80042bc:	4770      	bx	lr
 80042be:	bf00      	nop
 80042c0:	200009bc 	.word	0x200009bc

080042c4 <place_block_id>:
void attack_id(uint8_t chunk_id) {
    uint8_t slaver_msg[7] = { 0x55, 0xAA, 0x02, 0x00, (uint8_t)(0 ^ chunk_id), 0, chunk_id };
    HAL_UART_Transmit(zigbee_huart, slaver_msg, 7, HAL_MAX_DELAY);
}

void place_block_id(uint8_t chunk_id) {
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b084      	sub	sp, #16
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	4603      	mov	r3, r0
 80042cc:	71fb      	strb	r3, [r7, #7]
    uint8_t slaver_msg[7] = { 0x55, 0xAA, 0x02, 0x00, (uint8_t)(1 ^ chunk_id), 1, chunk_id };
 80042ce:	2355      	movs	r3, #85	; 0x55
 80042d0:	723b      	strb	r3, [r7, #8]
 80042d2:	23aa      	movs	r3, #170	; 0xaa
 80042d4:	727b      	strb	r3, [r7, #9]
 80042d6:	2302      	movs	r3, #2
 80042d8:	72bb      	strb	r3, [r7, #10]
 80042da:	2300      	movs	r3, #0
 80042dc:	72fb      	strb	r3, [r7, #11]
 80042de:	79fb      	ldrb	r3, [r7, #7]
 80042e0:	f083 0301 	eor.w	r3, r3, #1
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	733b      	strb	r3, [r7, #12]
 80042e8:	2301      	movs	r3, #1
 80042ea:	737b      	strb	r3, [r7, #13]
 80042ec:	79fb      	ldrb	r3, [r7, #7]
 80042ee:	73bb      	strb	r3, [r7, #14]
    HAL_UART_Transmit(zigbee_huart, slaver_msg, 7, HAL_MAX_DELAY);
 80042f0:	4b06      	ldr	r3, [pc, #24]	; (800430c <place_block_id+0x48>)
 80042f2:	6818      	ldr	r0, [r3, #0]
 80042f4:	f107 0108 	add.w	r1, r7, #8
 80042f8:	f04f 33ff 	mov.w	r3, #4294967295
 80042fc:	2207      	movs	r2, #7
 80042fe:	f002 fdce 	bl	8006e9e <HAL_UART_Transmit>
}
 8004302:	bf00      	nop
 8004304:	3710      	adds	r7, #16
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}
 800430a:	bf00      	nop
 800430c:	20000a54 	.word	0x20000a54

08004310 <trade_id>:

void trade_id(uint8_t item_id) {
 8004310:	b580      	push	{r7, lr}
 8004312:	b084      	sub	sp, #16
 8004314:	af00      	add	r7, sp, #0
 8004316:	4603      	mov	r3, r0
 8004318:	71fb      	strb	r3, [r7, #7]
    uint8_t slaver_msg[7] = { 0x55, 0xAA, 0x02, 0x00, (uint8_t)(2 ^ item_id), 2, item_id };
 800431a:	2355      	movs	r3, #85	; 0x55
 800431c:	723b      	strb	r3, [r7, #8]
 800431e:	23aa      	movs	r3, #170	; 0xaa
 8004320:	727b      	strb	r3, [r7, #9]
 8004322:	2302      	movs	r3, #2
 8004324:	72bb      	strb	r3, [r7, #10]
 8004326:	2300      	movs	r3, #0
 8004328:	72fb      	strb	r3, [r7, #11]
 800432a:	79fb      	ldrb	r3, [r7, #7]
 800432c:	f083 0302 	eor.w	r3, r3, #2
 8004330:	b2db      	uxtb	r3, r3
 8004332:	733b      	strb	r3, [r7, #12]
 8004334:	2302      	movs	r3, #2
 8004336:	737b      	strb	r3, [r7, #13]
 8004338:	79fb      	ldrb	r3, [r7, #7]
 800433a:	73bb      	strb	r3, [r7, #14]
    HAL_UART_Transmit(zigbee_huart, slaver_msg, 7, HAL_MAX_DELAY);
 800433c:	4b06      	ldr	r3, [pc, #24]	; (8004358 <trade_id+0x48>)
 800433e:	6818      	ldr	r0, [r3, #0]
 8004340:	f107 0108 	add.w	r1, r7, #8
 8004344:	f04f 33ff 	mov.w	r3, #4294967295
 8004348:	2207      	movs	r2, #7
 800434a:	f002 fda8 	bl	8006e9e <HAL_UART_Transmit>
}
 800434e:	bf00      	nop
 8004350:	3710      	adds	r7, #16
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}
 8004356:	bf00      	nop
 8004358:	20000a54 	.word	0x20000a54

0800435c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800435c:	f7ff f8de 	bl	800351c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004360:	480b      	ldr	r0, [pc, #44]	; (8004390 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8004362:	490c      	ldr	r1, [pc, #48]	; (8004394 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8004364:	4a0c      	ldr	r2, [pc, #48]	; (8004398 <LoopFillZerobss+0x16>)
  movs r3, #0
 8004366:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004368:	e002      	b.n	8004370 <LoopCopyDataInit>

0800436a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800436a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800436c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800436e:	3304      	adds	r3, #4

08004370 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004370:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004372:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004374:	d3f9      	bcc.n	800436a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004376:	4a09      	ldr	r2, [pc, #36]	; (800439c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8004378:	4c09      	ldr	r4, [pc, #36]	; (80043a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800437a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800437c:	e001      	b.n	8004382 <LoopFillZerobss>

0800437e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800437e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004380:	3204      	adds	r2, #4

08004382 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004382:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004384:	d3fb      	bcc.n	800437e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004386:	f003 fd3f 	bl	8007e08 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800438a:	f7fe fb8b 	bl	8002aa4 <main>
  bx lr
 800438e:	4770      	bx	lr
  ldr r0, =_sdata
 8004390:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004394:	2000021c 	.word	0x2000021c
  ldr r2, =_sidata
 8004398:	0800cc3c 	.word	0x0800cc3c
  ldr r2, =_sbss
 800439c:	2000021c 	.word	0x2000021c
  ldr r4, =_ebss
 80043a0:	20000a6c 	.word	0x20000a6c

080043a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80043a4:	e7fe      	b.n	80043a4 <ADC1_2_IRQHandler>
	...

080043a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80043ac:	4b08      	ldr	r3, [pc, #32]	; (80043d0 <HAL_Init+0x28>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a07      	ldr	r2, [pc, #28]	; (80043d0 <HAL_Init+0x28>)
 80043b2:	f043 0310 	orr.w	r3, r3, #16
 80043b6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80043b8:	2003      	movs	r0, #3
 80043ba:	f000 f947 	bl	800464c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80043be:	200f      	movs	r0, #15
 80043c0:	f000 f808 	bl	80043d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80043c4:	f7fe ff4a 	bl	800325c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80043c8:	2300      	movs	r3, #0
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	bd80      	pop	{r7, pc}
 80043ce:	bf00      	nop
 80043d0:	40022000 	.word	0x40022000

080043d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b082      	sub	sp, #8
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80043dc:	4b12      	ldr	r3, [pc, #72]	; (8004428 <HAL_InitTick+0x54>)
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	4b12      	ldr	r3, [pc, #72]	; (800442c <HAL_InitTick+0x58>)
 80043e2:	781b      	ldrb	r3, [r3, #0]
 80043e4:	4619      	mov	r1, r3
 80043e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80043ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80043ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80043f2:	4618      	mov	r0, r3
 80043f4:	f000 f95f 	bl	80046b6 <HAL_SYSTICK_Config>
 80043f8:	4603      	mov	r3, r0
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d001      	beq.n	8004402 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	e00e      	b.n	8004420 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2b0f      	cmp	r3, #15
 8004406:	d80a      	bhi.n	800441e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004408:	2200      	movs	r2, #0
 800440a:	6879      	ldr	r1, [r7, #4]
 800440c:	f04f 30ff 	mov.w	r0, #4294967295
 8004410:	f000 f927 	bl	8004662 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004414:	4a06      	ldr	r2, [pc, #24]	; (8004430 <HAL_InitTick+0x5c>)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800441a:	2300      	movs	r3, #0
 800441c:	e000      	b.n	8004420 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800441e:	2301      	movs	r3, #1
}
 8004420:	4618      	mov	r0, r3
 8004422:	3708      	adds	r7, #8
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}
 8004428:	2000003c 	.word	0x2000003c
 800442c:	20000044 	.word	0x20000044
 8004430:	20000040 	.word	0x20000040

08004434 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004434:	b480      	push	{r7}
 8004436:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004438:	4b05      	ldr	r3, [pc, #20]	; (8004450 <HAL_IncTick+0x1c>)
 800443a:	781b      	ldrb	r3, [r3, #0]
 800443c:	461a      	mov	r2, r3
 800443e:	4b05      	ldr	r3, [pc, #20]	; (8004454 <HAL_IncTick+0x20>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4413      	add	r3, r2
 8004444:	4a03      	ldr	r2, [pc, #12]	; (8004454 <HAL_IncTick+0x20>)
 8004446:	6013      	str	r3, [r2, #0]
}
 8004448:	bf00      	nop
 800444a:	46bd      	mov	sp, r7
 800444c:	bc80      	pop	{r7}
 800444e:	4770      	bx	lr
 8004450:	20000044 	.word	0x20000044
 8004454:	20000a58 	.word	0x20000a58

08004458 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004458:	b480      	push	{r7}
 800445a:	af00      	add	r7, sp, #0
  return uwTick;
 800445c:	4b02      	ldr	r3, [pc, #8]	; (8004468 <HAL_GetTick+0x10>)
 800445e:	681b      	ldr	r3, [r3, #0]
}
 8004460:	4618      	mov	r0, r3
 8004462:	46bd      	mov	sp, r7
 8004464:	bc80      	pop	{r7}
 8004466:	4770      	bx	lr
 8004468:	20000a58 	.word	0x20000a58

0800446c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b084      	sub	sp, #16
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004474:	f7ff fff0 	bl	8004458 <HAL_GetTick>
 8004478:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004484:	d005      	beq.n	8004492 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004486:	4b0a      	ldr	r3, [pc, #40]	; (80044b0 <HAL_Delay+0x44>)
 8004488:	781b      	ldrb	r3, [r3, #0]
 800448a:	461a      	mov	r2, r3
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	4413      	add	r3, r2
 8004490:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004492:	bf00      	nop
 8004494:	f7ff ffe0 	bl	8004458 <HAL_GetTick>
 8004498:	4602      	mov	r2, r0
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	1ad3      	subs	r3, r2, r3
 800449e:	68fa      	ldr	r2, [r7, #12]
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d8f7      	bhi.n	8004494 <HAL_Delay+0x28>
  {
  }
}
 80044a4:	bf00      	nop
 80044a6:	bf00      	nop
 80044a8:	3710      	adds	r7, #16
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}
 80044ae:	bf00      	nop
 80044b0:	20000044 	.word	0x20000044

080044b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b085      	sub	sp, #20
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	f003 0307 	and.w	r3, r3, #7
 80044c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80044c4:	4b0c      	ldr	r3, [pc, #48]	; (80044f8 <__NVIC_SetPriorityGrouping+0x44>)
 80044c6:	68db      	ldr	r3, [r3, #12]
 80044c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80044ca:	68ba      	ldr	r2, [r7, #8]
 80044cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80044d0:	4013      	ands	r3, r2
 80044d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80044dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80044e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80044e6:	4a04      	ldr	r2, [pc, #16]	; (80044f8 <__NVIC_SetPriorityGrouping+0x44>)
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	60d3      	str	r3, [r2, #12]
}
 80044ec:	bf00      	nop
 80044ee:	3714      	adds	r7, #20
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bc80      	pop	{r7}
 80044f4:	4770      	bx	lr
 80044f6:	bf00      	nop
 80044f8:	e000ed00 	.word	0xe000ed00

080044fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80044fc:	b480      	push	{r7}
 80044fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004500:	4b04      	ldr	r3, [pc, #16]	; (8004514 <__NVIC_GetPriorityGrouping+0x18>)
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	0a1b      	lsrs	r3, r3, #8
 8004506:	f003 0307 	and.w	r3, r3, #7
}
 800450a:	4618      	mov	r0, r3
 800450c:	46bd      	mov	sp, r7
 800450e:	bc80      	pop	{r7}
 8004510:	4770      	bx	lr
 8004512:	bf00      	nop
 8004514:	e000ed00 	.word	0xe000ed00

08004518 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004518:	b480      	push	{r7}
 800451a:	b083      	sub	sp, #12
 800451c:	af00      	add	r7, sp, #0
 800451e:	4603      	mov	r3, r0
 8004520:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004526:	2b00      	cmp	r3, #0
 8004528:	db0b      	blt.n	8004542 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800452a:	79fb      	ldrb	r3, [r7, #7]
 800452c:	f003 021f 	and.w	r2, r3, #31
 8004530:	4906      	ldr	r1, [pc, #24]	; (800454c <__NVIC_EnableIRQ+0x34>)
 8004532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004536:	095b      	lsrs	r3, r3, #5
 8004538:	2001      	movs	r0, #1
 800453a:	fa00 f202 	lsl.w	r2, r0, r2
 800453e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004542:	bf00      	nop
 8004544:	370c      	adds	r7, #12
 8004546:	46bd      	mov	sp, r7
 8004548:	bc80      	pop	{r7}
 800454a:	4770      	bx	lr
 800454c:	e000e100 	.word	0xe000e100

08004550 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004550:	b480      	push	{r7}
 8004552:	b083      	sub	sp, #12
 8004554:	af00      	add	r7, sp, #0
 8004556:	4603      	mov	r3, r0
 8004558:	6039      	str	r1, [r7, #0]
 800455a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800455c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004560:	2b00      	cmp	r3, #0
 8004562:	db0a      	blt.n	800457a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	b2da      	uxtb	r2, r3
 8004568:	490c      	ldr	r1, [pc, #48]	; (800459c <__NVIC_SetPriority+0x4c>)
 800456a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800456e:	0112      	lsls	r2, r2, #4
 8004570:	b2d2      	uxtb	r2, r2
 8004572:	440b      	add	r3, r1
 8004574:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004578:	e00a      	b.n	8004590 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	b2da      	uxtb	r2, r3
 800457e:	4908      	ldr	r1, [pc, #32]	; (80045a0 <__NVIC_SetPriority+0x50>)
 8004580:	79fb      	ldrb	r3, [r7, #7]
 8004582:	f003 030f 	and.w	r3, r3, #15
 8004586:	3b04      	subs	r3, #4
 8004588:	0112      	lsls	r2, r2, #4
 800458a:	b2d2      	uxtb	r2, r2
 800458c:	440b      	add	r3, r1
 800458e:	761a      	strb	r2, [r3, #24]
}
 8004590:	bf00      	nop
 8004592:	370c      	adds	r7, #12
 8004594:	46bd      	mov	sp, r7
 8004596:	bc80      	pop	{r7}
 8004598:	4770      	bx	lr
 800459a:	bf00      	nop
 800459c:	e000e100 	.word	0xe000e100
 80045a0:	e000ed00 	.word	0xe000ed00

080045a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b089      	sub	sp, #36	; 0x24
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	60f8      	str	r0, [r7, #12]
 80045ac:	60b9      	str	r1, [r7, #8]
 80045ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f003 0307 	and.w	r3, r3, #7
 80045b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80045b8:	69fb      	ldr	r3, [r7, #28]
 80045ba:	f1c3 0307 	rsb	r3, r3, #7
 80045be:	2b04      	cmp	r3, #4
 80045c0:	bf28      	it	cs
 80045c2:	2304      	movcs	r3, #4
 80045c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80045c6:	69fb      	ldr	r3, [r7, #28]
 80045c8:	3304      	adds	r3, #4
 80045ca:	2b06      	cmp	r3, #6
 80045cc:	d902      	bls.n	80045d4 <NVIC_EncodePriority+0x30>
 80045ce:	69fb      	ldr	r3, [r7, #28]
 80045d0:	3b03      	subs	r3, #3
 80045d2:	e000      	b.n	80045d6 <NVIC_EncodePriority+0x32>
 80045d4:	2300      	movs	r3, #0
 80045d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045d8:	f04f 32ff 	mov.w	r2, #4294967295
 80045dc:	69bb      	ldr	r3, [r7, #24]
 80045de:	fa02 f303 	lsl.w	r3, r2, r3
 80045e2:	43da      	mvns	r2, r3
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	401a      	ands	r2, r3
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80045ec:	f04f 31ff 	mov.w	r1, #4294967295
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	fa01 f303 	lsl.w	r3, r1, r3
 80045f6:	43d9      	mvns	r1, r3
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045fc:	4313      	orrs	r3, r2
         );
}
 80045fe:	4618      	mov	r0, r3
 8004600:	3724      	adds	r7, #36	; 0x24
 8004602:	46bd      	mov	sp, r7
 8004604:	bc80      	pop	{r7}
 8004606:	4770      	bx	lr

08004608 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b082      	sub	sp, #8
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	3b01      	subs	r3, #1
 8004614:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004618:	d301      	bcc.n	800461e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800461a:	2301      	movs	r3, #1
 800461c:	e00f      	b.n	800463e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800461e:	4a0a      	ldr	r2, [pc, #40]	; (8004648 <SysTick_Config+0x40>)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	3b01      	subs	r3, #1
 8004624:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004626:	210f      	movs	r1, #15
 8004628:	f04f 30ff 	mov.w	r0, #4294967295
 800462c:	f7ff ff90 	bl	8004550 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004630:	4b05      	ldr	r3, [pc, #20]	; (8004648 <SysTick_Config+0x40>)
 8004632:	2200      	movs	r2, #0
 8004634:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004636:	4b04      	ldr	r3, [pc, #16]	; (8004648 <SysTick_Config+0x40>)
 8004638:	2207      	movs	r2, #7
 800463a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800463c:	2300      	movs	r3, #0
}
 800463e:	4618      	mov	r0, r3
 8004640:	3708      	adds	r7, #8
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}
 8004646:	bf00      	nop
 8004648:	e000e010 	.word	0xe000e010

0800464c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b082      	sub	sp, #8
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f7ff ff2d 	bl	80044b4 <__NVIC_SetPriorityGrouping>
}
 800465a:	bf00      	nop
 800465c:	3708      	adds	r7, #8
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}

08004662 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004662:	b580      	push	{r7, lr}
 8004664:	b086      	sub	sp, #24
 8004666:	af00      	add	r7, sp, #0
 8004668:	4603      	mov	r3, r0
 800466a:	60b9      	str	r1, [r7, #8]
 800466c:	607a      	str	r2, [r7, #4]
 800466e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004670:	2300      	movs	r3, #0
 8004672:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004674:	f7ff ff42 	bl	80044fc <__NVIC_GetPriorityGrouping>
 8004678:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	68b9      	ldr	r1, [r7, #8]
 800467e:	6978      	ldr	r0, [r7, #20]
 8004680:	f7ff ff90 	bl	80045a4 <NVIC_EncodePriority>
 8004684:	4602      	mov	r2, r0
 8004686:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800468a:	4611      	mov	r1, r2
 800468c:	4618      	mov	r0, r3
 800468e:	f7ff ff5f 	bl	8004550 <__NVIC_SetPriority>
}
 8004692:	bf00      	nop
 8004694:	3718      	adds	r7, #24
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}

0800469a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800469a:	b580      	push	{r7, lr}
 800469c:	b082      	sub	sp, #8
 800469e:	af00      	add	r7, sp, #0
 80046a0:	4603      	mov	r3, r0
 80046a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80046a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046a8:	4618      	mov	r0, r3
 80046aa:	f7ff ff35 	bl	8004518 <__NVIC_EnableIRQ>
}
 80046ae:	bf00      	nop
 80046b0:	3708      	adds	r7, #8
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}

080046b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80046b6:	b580      	push	{r7, lr}
 80046b8:	b082      	sub	sp, #8
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f7ff ffa2 	bl	8004608 <SysTick_Config>
 80046c4:	4603      	mov	r3, r0
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3708      	adds	r7, #8
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}
	...

080046d0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b085      	sub	sp, #20
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80046d8:	2300      	movs	r3, #0
 80046da:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d101      	bne.n	80046e6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	e059      	b.n	800479a <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	461a      	mov	r2, r3
 80046ec:	4b2d      	ldr	r3, [pc, #180]	; (80047a4 <HAL_DMA_Init+0xd4>)
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d80f      	bhi.n	8004712 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	461a      	mov	r2, r3
 80046f8:	4b2b      	ldr	r3, [pc, #172]	; (80047a8 <HAL_DMA_Init+0xd8>)
 80046fa:	4413      	add	r3, r2
 80046fc:	4a2b      	ldr	r2, [pc, #172]	; (80047ac <HAL_DMA_Init+0xdc>)
 80046fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004702:	091b      	lsrs	r3, r3, #4
 8004704:	009a      	lsls	r2, r3, #2
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	4a28      	ldr	r2, [pc, #160]	; (80047b0 <HAL_DMA_Init+0xe0>)
 800470e:	63da      	str	r2, [r3, #60]	; 0x3c
 8004710:	e00e      	b.n	8004730 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	461a      	mov	r2, r3
 8004718:	4b26      	ldr	r3, [pc, #152]	; (80047b4 <HAL_DMA_Init+0xe4>)
 800471a:	4413      	add	r3, r2
 800471c:	4a23      	ldr	r2, [pc, #140]	; (80047ac <HAL_DMA_Init+0xdc>)
 800471e:	fba2 2303 	umull	r2, r3, r2, r3
 8004722:	091b      	lsrs	r3, r3, #4
 8004724:	009a      	lsls	r2, r3, #2
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	4a22      	ldr	r2, [pc, #136]	; (80047b8 <HAL_DMA_Init+0xe8>)
 800472e:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2202      	movs	r2, #2
 8004734:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004746:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800474a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004754:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	68db      	ldr	r3, [r3, #12]
 800475a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004760:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	695b      	ldr	r3, [r3, #20]
 8004766:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800476c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	69db      	ldr	r3, [r3, #28]
 8004772:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004774:	68fa      	ldr	r2, [r7, #12]
 8004776:	4313      	orrs	r3, r2
 8004778:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	68fa      	ldr	r2, [r7, #12]
 8004780:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2200      	movs	r2, #0
 8004786:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2201      	movs	r2, #1
 800478c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2200      	movs	r2, #0
 8004794:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004798:	2300      	movs	r3, #0
}
 800479a:	4618      	mov	r0, r3
 800479c:	3714      	adds	r7, #20
 800479e:	46bd      	mov	sp, r7
 80047a0:	bc80      	pop	{r7}
 80047a2:	4770      	bx	lr
 80047a4:	40020407 	.word	0x40020407
 80047a8:	bffdfff8 	.word	0xbffdfff8
 80047ac:	cccccccd 	.word	0xcccccccd
 80047b0:	40020000 	.word	0x40020000
 80047b4:	bffdfbf8 	.word	0xbffdfbf8
 80047b8:	40020400 	.word	0x40020400

080047bc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b086      	sub	sp, #24
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	60f8      	str	r0, [r7, #12]
 80047c4:	60b9      	str	r1, [r7, #8]
 80047c6:	607a      	str	r2, [r7, #4]
 80047c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047ca:	2300      	movs	r3, #0
 80047cc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d101      	bne.n	80047dc <HAL_DMA_Start_IT+0x20>
 80047d8:	2302      	movs	r3, #2
 80047da:	e04b      	b.n	8004874 <HAL_DMA_Start_IT+0xb8>
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2201      	movs	r2, #1
 80047e0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d13a      	bne.n	8004866 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2202      	movs	r2, #2
 80047f4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2200      	movs	r2, #0
 80047fc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f022 0201 	bic.w	r2, r2, #1
 800480c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	687a      	ldr	r2, [r7, #4]
 8004812:	68b9      	ldr	r1, [r7, #8]
 8004814:	68f8      	ldr	r0, [r7, #12]
 8004816:	f000 fbb1 	bl	8004f7c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800481e:	2b00      	cmp	r3, #0
 8004820:	d008      	beq.n	8004834 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f042 020e 	orr.w	r2, r2, #14
 8004830:	601a      	str	r2, [r3, #0]
 8004832:	e00f      	b.n	8004854 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f022 0204 	bic.w	r2, r2, #4
 8004842:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f042 020a 	orr.w	r2, r2, #10
 8004852:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f042 0201 	orr.w	r2, r2, #1
 8004862:	601a      	str	r2, [r3, #0]
 8004864:	e005      	b.n	8004872 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2200      	movs	r2, #0
 800486a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800486e:	2302      	movs	r3, #2
 8004870:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8004872:	7dfb      	ldrb	r3, [r7, #23]
}
 8004874:	4618      	mov	r0, r3
 8004876:	3718      	adds	r7, #24
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}

0800487c <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800487c:	b480      	push	{r7}
 800487e:	b085      	sub	sp, #20
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004884:	2300      	movs	r3, #0
 8004886:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800488e:	b2db      	uxtb	r3, r3
 8004890:	2b02      	cmp	r3, #2
 8004892:	d008      	beq.n	80048a6 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2204      	movs	r2, #4
 8004898:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2200      	movs	r2, #0
 800489e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	e020      	b.n	80048e8 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f022 020e 	bic.w	r2, r2, #14
 80048b4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f022 0201 	bic.w	r2, r2, #1
 80048c4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048ce:	2101      	movs	r1, #1
 80048d0:	fa01 f202 	lsl.w	r2, r1, r2
 80048d4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2201      	movs	r2, #1
 80048da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2200      	movs	r2, #0
 80048e2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80048e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3714      	adds	r7, #20
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bc80      	pop	{r7}
 80048f0:	4770      	bx	lr
	...

080048f4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b084      	sub	sp, #16
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048fc:	2300      	movs	r3, #0
 80048fe:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004906:	b2db      	uxtb	r3, r3
 8004908:	2b02      	cmp	r3, #2
 800490a:	d005      	beq.n	8004918 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2204      	movs	r2, #4
 8004910:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	73fb      	strb	r3, [r7, #15]
 8004916:	e0d6      	b.n	8004ac6 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f022 020e 	bic.w	r2, r2, #14
 8004926:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f022 0201 	bic.w	r2, r2, #1
 8004936:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	461a      	mov	r2, r3
 800493e:	4b64      	ldr	r3, [pc, #400]	; (8004ad0 <HAL_DMA_Abort_IT+0x1dc>)
 8004940:	429a      	cmp	r2, r3
 8004942:	d958      	bls.n	80049f6 <HAL_DMA_Abort_IT+0x102>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a62      	ldr	r2, [pc, #392]	; (8004ad4 <HAL_DMA_Abort_IT+0x1e0>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d04f      	beq.n	80049ee <HAL_DMA_Abort_IT+0xfa>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a61      	ldr	r2, [pc, #388]	; (8004ad8 <HAL_DMA_Abort_IT+0x1e4>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d048      	beq.n	80049ea <HAL_DMA_Abort_IT+0xf6>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a5f      	ldr	r2, [pc, #380]	; (8004adc <HAL_DMA_Abort_IT+0x1e8>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d040      	beq.n	80049e4 <HAL_DMA_Abort_IT+0xf0>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a5e      	ldr	r2, [pc, #376]	; (8004ae0 <HAL_DMA_Abort_IT+0x1ec>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d038      	beq.n	80049de <HAL_DMA_Abort_IT+0xea>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a5c      	ldr	r2, [pc, #368]	; (8004ae4 <HAL_DMA_Abort_IT+0x1f0>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d030      	beq.n	80049d8 <HAL_DMA_Abort_IT+0xe4>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a5b      	ldr	r2, [pc, #364]	; (8004ae8 <HAL_DMA_Abort_IT+0x1f4>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d028      	beq.n	80049d2 <HAL_DMA_Abort_IT+0xde>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a52      	ldr	r2, [pc, #328]	; (8004ad0 <HAL_DMA_Abort_IT+0x1dc>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d020      	beq.n	80049cc <HAL_DMA_Abort_IT+0xd8>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a57      	ldr	r2, [pc, #348]	; (8004aec <HAL_DMA_Abort_IT+0x1f8>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d019      	beq.n	80049c8 <HAL_DMA_Abort_IT+0xd4>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a55      	ldr	r2, [pc, #340]	; (8004af0 <HAL_DMA_Abort_IT+0x1fc>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d012      	beq.n	80049c4 <HAL_DMA_Abort_IT+0xd0>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a54      	ldr	r2, [pc, #336]	; (8004af4 <HAL_DMA_Abort_IT+0x200>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d00a      	beq.n	80049be <HAL_DMA_Abort_IT+0xca>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a52      	ldr	r2, [pc, #328]	; (8004af8 <HAL_DMA_Abort_IT+0x204>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d102      	bne.n	80049b8 <HAL_DMA_Abort_IT+0xc4>
 80049b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80049b6:	e01b      	b.n	80049f0 <HAL_DMA_Abort_IT+0xfc>
 80049b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80049bc:	e018      	b.n	80049f0 <HAL_DMA_Abort_IT+0xfc>
 80049be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80049c2:	e015      	b.n	80049f0 <HAL_DMA_Abort_IT+0xfc>
 80049c4:	2310      	movs	r3, #16
 80049c6:	e013      	b.n	80049f0 <HAL_DMA_Abort_IT+0xfc>
 80049c8:	2301      	movs	r3, #1
 80049ca:	e011      	b.n	80049f0 <HAL_DMA_Abort_IT+0xfc>
 80049cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80049d0:	e00e      	b.n	80049f0 <HAL_DMA_Abort_IT+0xfc>
 80049d2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80049d6:	e00b      	b.n	80049f0 <HAL_DMA_Abort_IT+0xfc>
 80049d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80049dc:	e008      	b.n	80049f0 <HAL_DMA_Abort_IT+0xfc>
 80049de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80049e2:	e005      	b.n	80049f0 <HAL_DMA_Abort_IT+0xfc>
 80049e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80049e8:	e002      	b.n	80049f0 <HAL_DMA_Abort_IT+0xfc>
 80049ea:	2310      	movs	r3, #16
 80049ec:	e000      	b.n	80049f0 <HAL_DMA_Abort_IT+0xfc>
 80049ee:	2301      	movs	r3, #1
 80049f0:	4a42      	ldr	r2, [pc, #264]	; (8004afc <HAL_DMA_Abort_IT+0x208>)
 80049f2:	6053      	str	r3, [r2, #4]
 80049f4:	e057      	b.n	8004aa6 <HAL_DMA_Abort_IT+0x1b2>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a36      	ldr	r2, [pc, #216]	; (8004ad4 <HAL_DMA_Abort_IT+0x1e0>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d04f      	beq.n	8004aa0 <HAL_DMA_Abort_IT+0x1ac>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a34      	ldr	r2, [pc, #208]	; (8004ad8 <HAL_DMA_Abort_IT+0x1e4>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d048      	beq.n	8004a9c <HAL_DMA_Abort_IT+0x1a8>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a33      	ldr	r2, [pc, #204]	; (8004adc <HAL_DMA_Abort_IT+0x1e8>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d040      	beq.n	8004a96 <HAL_DMA_Abort_IT+0x1a2>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a31      	ldr	r2, [pc, #196]	; (8004ae0 <HAL_DMA_Abort_IT+0x1ec>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d038      	beq.n	8004a90 <HAL_DMA_Abort_IT+0x19c>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a30      	ldr	r2, [pc, #192]	; (8004ae4 <HAL_DMA_Abort_IT+0x1f0>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d030      	beq.n	8004a8a <HAL_DMA_Abort_IT+0x196>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a2e      	ldr	r2, [pc, #184]	; (8004ae8 <HAL_DMA_Abort_IT+0x1f4>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d028      	beq.n	8004a84 <HAL_DMA_Abort_IT+0x190>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a26      	ldr	r2, [pc, #152]	; (8004ad0 <HAL_DMA_Abort_IT+0x1dc>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d020      	beq.n	8004a7e <HAL_DMA_Abort_IT+0x18a>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a2a      	ldr	r2, [pc, #168]	; (8004aec <HAL_DMA_Abort_IT+0x1f8>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d019      	beq.n	8004a7a <HAL_DMA_Abort_IT+0x186>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a29      	ldr	r2, [pc, #164]	; (8004af0 <HAL_DMA_Abort_IT+0x1fc>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d012      	beq.n	8004a76 <HAL_DMA_Abort_IT+0x182>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a27      	ldr	r2, [pc, #156]	; (8004af4 <HAL_DMA_Abort_IT+0x200>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d00a      	beq.n	8004a70 <HAL_DMA_Abort_IT+0x17c>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a26      	ldr	r2, [pc, #152]	; (8004af8 <HAL_DMA_Abort_IT+0x204>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d102      	bne.n	8004a6a <HAL_DMA_Abort_IT+0x176>
 8004a64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004a68:	e01b      	b.n	8004aa2 <HAL_DMA_Abort_IT+0x1ae>
 8004a6a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004a6e:	e018      	b.n	8004aa2 <HAL_DMA_Abort_IT+0x1ae>
 8004a70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004a74:	e015      	b.n	8004aa2 <HAL_DMA_Abort_IT+0x1ae>
 8004a76:	2310      	movs	r3, #16
 8004a78:	e013      	b.n	8004aa2 <HAL_DMA_Abort_IT+0x1ae>
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e011      	b.n	8004aa2 <HAL_DMA_Abort_IT+0x1ae>
 8004a7e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004a82:	e00e      	b.n	8004aa2 <HAL_DMA_Abort_IT+0x1ae>
 8004a84:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004a88:	e00b      	b.n	8004aa2 <HAL_DMA_Abort_IT+0x1ae>
 8004a8a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004a8e:	e008      	b.n	8004aa2 <HAL_DMA_Abort_IT+0x1ae>
 8004a90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004a94:	e005      	b.n	8004aa2 <HAL_DMA_Abort_IT+0x1ae>
 8004a96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004a9a:	e002      	b.n	8004aa2 <HAL_DMA_Abort_IT+0x1ae>
 8004a9c:	2310      	movs	r3, #16
 8004a9e:	e000      	b.n	8004aa2 <HAL_DMA_Abort_IT+0x1ae>
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	4a17      	ldr	r2, [pc, #92]	; (8004b00 <HAL_DMA_Abort_IT+0x20c>)
 8004aa4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d003      	beq.n	8004ac6 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	4798      	blx	r3
    } 
  }
  return status;
 8004ac6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3710      	adds	r7, #16
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}
 8004ad0:	40020080 	.word	0x40020080
 8004ad4:	40020008 	.word	0x40020008
 8004ad8:	4002001c 	.word	0x4002001c
 8004adc:	40020030 	.word	0x40020030
 8004ae0:	40020044 	.word	0x40020044
 8004ae4:	40020058 	.word	0x40020058
 8004ae8:	4002006c 	.word	0x4002006c
 8004aec:	40020408 	.word	0x40020408
 8004af0:	4002041c 	.word	0x4002041c
 8004af4:	40020430 	.word	0x40020430
 8004af8:	40020444 	.word	0x40020444
 8004afc:	40020400 	.word	0x40020400
 8004b00:	40020000 	.word	0x40020000

08004b04 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b084      	sub	sp, #16
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b20:	2204      	movs	r2, #4
 8004b22:	409a      	lsls	r2, r3
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	4013      	ands	r3, r2
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	f000 80f1 	beq.w	8004d10 <HAL_DMA_IRQHandler+0x20c>
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	f003 0304 	and.w	r3, r3, #4
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	f000 80eb 	beq.w	8004d10 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f003 0320 	and.w	r3, r3, #32
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d107      	bne.n	8004b58 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f022 0204 	bic.w	r2, r2, #4
 8004b56:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	4b5f      	ldr	r3, [pc, #380]	; (8004cdc <HAL_DMA_IRQHandler+0x1d8>)
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d958      	bls.n	8004c16 <HAL_DMA_IRQHandler+0x112>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a5d      	ldr	r2, [pc, #372]	; (8004ce0 <HAL_DMA_IRQHandler+0x1dc>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d04f      	beq.n	8004c0e <HAL_DMA_IRQHandler+0x10a>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a5c      	ldr	r2, [pc, #368]	; (8004ce4 <HAL_DMA_IRQHandler+0x1e0>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d048      	beq.n	8004c0a <HAL_DMA_IRQHandler+0x106>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a5a      	ldr	r2, [pc, #360]	; (8004ce8 <HAL_DMA_IRQHandler+0x1e4>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d040      	beq.n	8004c04 <HAL_DMA_IRQHandler+0x100>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a59      	ldr	r2, [pc, #356]	; (8004cec <HAL_DMA_IRQHandler+0x1e8>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d038      	beq.n	8004bfe <HAL_DMA_IRQHandler+0xfa>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a57      	ldr	r2, [pc, #348]	; (8004cf0 <HAL_DMA_IRQHandler+0x1ec>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d030      	beq.n	8004bf8 <HAL_DMA_IRQHandler+0xf4>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a56      	ldr	r2, [pc, #344]	; (8004cf4 <HAL_DMA_IRQHandler+0x1f0>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d028      	beq.n	8004bf2 <HAL_DMA_IRQHandler+0xee>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a4d      	ldr	r2, [pc, #308]	; (8004cdc <HAL_DMA_IRQHandler+0x1d8>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d020      	beq.n	8004bec <HAL_DMA_IRQHandler+0xe8>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a52      	ldr	r2, [pc, #328]	; (8004cf8 <HAL_DMA_IRQHandler+0x1f4>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d019      	beq.n	8004be8 <HAL_DMA_IRQHandler+0xe4>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a50      	ldr	r2, [pc, #320]	; (8004cfc <HAL_DMA_IRQHandler+0x1f8>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d012      	beq.n	8004be4 <HAL_DMA_IRQHandler+0xe0>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a4f      	ldr	r2, [pc, #316]	; (8004d00 <HAL_DMA_IRQHandler+0x1fc>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d00a      	beq.n	8004bde <HAL_DMA_IRQHandler+0xda>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a4d      	ldr	r2, [pc, #308]	; (8004d04 <HAL_DMA_IRQHandler+0x200>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d102      	bne.n	8004bd8 <HAL_DMA_IRQHandler+0xd4>
 8004bd2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004bd6:	e01b      	b.n	8004c10 <HAL_DMA_IRQHandler+0x10c>
 8004bd8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004bdc:	e018      	b.n	8004c10 <HAL_DMA_IRQHandler+0x10c>
 8004bde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004be2:	e015      	b.n	8004c10 <HAL_DMA_IRQHandler+0x10c>
 8004be4:	2340      	movs	r3, #64	; 0x40
 8004be6:	e013      	b.n	8004c10 <HAL_DMA_IRQHandler+0x10c>
 8004be8:	2304      	movs	r3, #4
 8004bea:	e011      	b.n	8004c10 <HAL_DMA_IRQHandler+0x10c>
 8004bec:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004bf0:	e00e      	b.n	8004c10 <HAL_DMA_IRQHandler+0x10c>
 8004bf2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004bf6:	e00b      	b.n	8004c10 <HAL_DMA_IRQHandler+0x10c>
 8004bf8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004bfc:	e008      	b.n	8004c10 <HAL_DMA_IRQHandler+0x10c>
 8004bfe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004c02:	e005      	b.n	8004c10 <HAL_DMA_IRQHandler+0x10c>
 8004c04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c08:	e002      	b.n	8004c10 <HAL_DMA_IRQHandler+0x10c>
 8004c0a:	2340      	movs	r3, #64	; 0x40
 8004c0c:	e000      	b.n	8004c10 <HAL_DMA_IRQHandler+0x10c>
 8004c0e:	2304      	movs	r3, #4
 8004c10:	4a3d      	ldr	r2, [pc, #244]	; (8004d08 <HAL_DMA_IRQHandler+0x204>)
 8004c12:	6053      	str	r3, [r2, #4]
 8004c14:	e057      	b.n	8004cc6 <HAL_DMA_IRQHandler+0x1c2>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a31      	ldr	r2, [pc, #196]	; (8004ce0 <HAL_DMA_IRQHandler+0x1dc>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d04f      	beq.n	8004cc0 <HAL_DMA_IRQHandler+0x1bc>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a2f      	ldr	r2, [pc, #188]	; (8004ce4 <HAL_DMA_IRQHandler+0x1e0>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d048      	beq.n	8004cbc <HAL_DMA_IRQHandler+0x1b8>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a2e      	ldr	r2, [pc, #184]	; (8004ce8 <HAL_DMA_IRQHandler+0x1e4>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d040      	beq.n	8004cb6 <HAL_DMA_IRQHandler+0x1b2>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a2c      	ldr	r2, [pc, #176]	; (8004cec <HAL_DMA_IRQHandler+0x1e8>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d038      	beq.n	8004cb0 <HAL_DMA_IRQHandler+0x1ac>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a2b      	ldr	r2, [pc, #172]	; (8004cf0 <HAL_DMA_IRQHandler+0x1ec>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d030      	beq.n	8004caa <HAL_DMA_IRQHandler+0x1a6>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a29      	ldr	r2, [pc, #164]	; (8004cf4 <HAL_DMA_IRQHandler+0x1f0>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d028      	beq.n	8004ca4 <HAL_DMA_IRQHandler+0x1a0>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a21      	ldr	r2, [pc, #132]	; (8004cdc <HAL_DMA_IRQHandler+0x1d8>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d020      	beq.n	8004c9e <HAL_DMA_IRQHandler+0x19a>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a25      	ldr	r2, [pc, #148]	; (8004cf8 <HAL_DMA_IRQHandler+0x1f4>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d019      	beq.n	8004c9a <HAL_DMA_IRQHandler+0x196>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a24      	ldr	r2, [pc, #144]	; (8004cfc <HAL_DMA_IRQHandler+0x1f8>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d012      	beq.n	8004c96 <HAL_DMA_IRQHandler+0x192>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a22      	ldr	r2, [pc, #136]	; (8004d00 <HAL_DMA_IRQHandler+0x1fc>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d00a      	beq.n	8004c90 <HAL_DMA_IRQHandler+0x18c>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a21      	ldr	r2, [pc, #132]	; (8004d04 <HAL_DMA_IRQHandler+0x200>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d102      	bne.n	8004c8a <HAL_DMA_IRQHandler+0x186>
 8004c84:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004c88:	e01b      	b.n	8004cc2 <HAL_DMA_IRQHandler+0x1be>
 8004c8a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004c8e:	e018      	b.n	8004cc2 <HAL_DMA_IRQHandler+0x1be>
 8004c90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c94:	e015      	b.n	8004cc2 <HAL_DMA_IRQHandler+0x1be>
 8004c96:	2340      	movs	r3, #64	; 0x40
 8004c98:	e013      	b.n	8004cc2 <HAL_DMA_IRQHandler+0x1be>
 8004c9a:	2304      	movs	r3, #4
 8004c9c:	e011      	b.n	8004cc2 <HAL_DMA_IRQHandler+0x1be>
 8004c9e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004ca2:	e00e      	b.n	8004cc2 <HAL_DMA_IRQHandler+0x1be>
 8004ca4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004ca8:	e00b      	b.n	8004cc2 <HAL_DMA_IRQHandler+0x1be>
 8004caa:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004cae:	e008      	b.n	8004cc2 <HAL_DMA_IRQHandler+0x1be>
 8004cb0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004cb4:	e005      	b.n	8004cc2 <HAL_DMA_IRQHandler+0x1be>
 8004cb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004cba:	e002      	b.n	8004cc2 <HAL_DMA_IRQHandler+0x1be>
 8004cbc:	2340      	movs	r3, #64	; 0x40
 8004cbe:	e000      	b.n	8004cc2 <HAL_DMA_IRQHandler+0x1be>
 8004cc0:	2304      	movs	r3, #4
 8004cc2:	4a12      	ldr	r2, [pc, #72]	; (8004d0c <HAL_DMA_IRQHandler+0x208>)
 8004cc4:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	f000 8136 	beq.w	8004f3c <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8004cd8:	e130      	b.n	8004f3c <HAL_DMA_IRQHandler+0x438>
 8004cda:	bf00      	nop
 8004cdc:	40020080 	.word	0x40020080
 8004ce0:	40020008 	.word	0x40020008
 8004ce4:	4002001c 	.word	0x4002001c
 8004ce8:	40020030 	.word	0x40020030
 8004cec:	40020044 	.word	0x40020044
 8004cf0:	40020058 	.word	0x40020058
 8004cf4:	4002006c 	.word	0x4002006c
 8004cf8:	40020408 	.word	0x40020408
 8004cfc:	4002041c 	.word	0x4002041c
 8004d00:	40020430 	.word	0x40020430
 8004d04:	40020444 	.word	0x40020444
 8004d08:	40020400 	.word	0x40020400
 8004d0c:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d14:	2202      	movs	r2, #2
 8004d16:	409a      	lsls	r2, r3
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	4013      	ands	r3, r2
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	f000 80dd 	beq.w	8004edc <HAL_DMA_IRQHandler+0x3d8>
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	f003 0302 	and.w	r3, r3, #2
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	f000 80d7 	beq.w	8004edc <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 0320 	and.w	r3, r3, #32
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d10b      	bne.n	8004d54 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f022 020a 	bic.w	r2, r2, #10
 8004d4a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	461a      	mov	r2, r3
 8004d5a:	4b7b      	ldr	r3, [pc, #492]	; (8004f48 <HAL_DMA_IRQHandler+0x444>)
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d958      	bls.n	8004e12 <HAL_DMA_IRQHandler+0x30e>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a79      	ldr	r2, [pc, #484]	; (8004f4c <HAL_DMA_IRQHandler+0x448>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d04f      	beq.n	8004e0a <HAL_DMA_IRQHandler+0x306>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a78      	ldr	r2, [pc, #480]	; (8004f50 <HAL_DMA_IRQHandler+0x44c>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d048      	beq.n	8004e06 <HAL_DMA_IRQHandler+0x302>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a76      	ldr	r2, [pc, #472]	; (8004f54 <HAL_DMA_IRQHandler+0x450>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d040      	beq.n	8004e00 <HAL_DMA_IRQHandler+0x2fc>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a75      	ldr	r2, [pc, #468]	; (8004f58 <HAL_DMA_IRQHandler+0x454>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d038      	beq.n	8004dfa <HAL_DMA_IRQHandler+0x2f6>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a73      	ldr	r2, [pc, #460]	; (8004f5c <HAL_DMA_IRQHandler+0x458>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d030      	beq.n	8004df4 <HAL_DMA_IRQHandler+0x2f0>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a72      	ldr	r2, [pc, #456]	; (8004f60 <HAL_DMA_IRQHandler+0x45c>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d028      	beq.n	8004dee <HAL_DMA_IRQHandler+0x2ea>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a69      	ldr	r2, [pc, #420]	; (8004f48 <HAL_DMA_IRQHandler+0x444>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d020      	beq.n	8004de8 <HAL_DMA_IRQHandler+0x2e4>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a6e      	ldr	r2, [pc, #440]	; (8004f64 <HAL_DMA_IRQHandler+0x460>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d019      	beq.n	8004de4 <HAL_DMA_IRQHandler+0x2e0>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a6c      	ldr	r2, [pc, #432]	; (8004f68 <HAL_DMA_IRQHandler+0x464>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d012      	beq.n	8004de0 <HAL_DMA_IRQHandler+0x2dc>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a6b      	ldr	r2, [pc, #428]	; (8004f6c <HAL_DMA_IRQHandler+0x468>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d00a      	beq.n	8004dda <HAL_DMA_IRQHandler+0x2d6>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a69      	ldr	r2, [pc, #420]	; (8004f70 <HAL_DMA_IRQHandler+0x46c>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d102      	bne.n	8004dd4 <HAL_DMA_IRQHandler+0x2d0>
 8004dce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004dd2:	e01b      	b.n	8004e0c <HAL_DMA_IRQHandler+0x308>
 8004dd4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004dd8:	e018      	b.n	8004e0c <HAL_DMA_IRQHandler+0x308>
 8004dda:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004dde:	e015      	b.n	8004e0c <HAL_DMA_IRQHandler+0x308>
 8004de0:	2320      	movs	r3, #32
 8004de2:	e013      	b.n	8004e0c <HAL_DMA_IRQHandler+0x308>
 8004de4:	2302      	movs	r3, #2
 8004de6:	e011      	b.n	8004e0c <HAL_DMA_IRQHandler+0x308>
 8004de8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004dec:	e00e      	b.n	8004e0c <HAL_DMA_IRQHandler+0x308>
 8004dee:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004df2:	e00b      	b.n	8004e0c <HAL_DMA_IRQHandler+0x308>
 8004df4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004df8:	e008      	b.n	8004e0c <HAL_DMA_IRQHandler+0x308>
 8004dfa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004dfe:	e005      	b.n	8004e0c <HAL_DMA_IRQHandler+0x308>
 8004e00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e04:	e002      	b.n	8004e0c <HAL_DMA_IRQHandler+0x308>
 8004e06:	2320      	movs	r3, #32
 8004e08:	e000      	b.n	8004e0c <HAL_DMA_IRQHandler+0x308>
 8004e0a:	2302      	movs	r3, #2
 8004e0c:	4a59      	ldr	r2, [pc, #356]	; (8004f74 <HAL_DMA_IRQHandler+0x470>)
 8004e0e:	6053      	str	r3, [r2, #4]
 8004e10:	e057      	b.n	8004ec2 <HAL_DMA_IRQHandler+0x3be>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a4d      	ldr	r2, [pc, #308]	; (8004f4c <HAL_DMA_IRQHandler+0x448>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d04f      	beq.n	8004ebc <HAL_DMA_IRQHandler+0x3b8>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a4b      	ldr	r2, [pc, #300]	; (8004f50 <HAL_DMA_IRQHandler+0x44c>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d048      	beq.n	8004eb8 <HAL_DMA_IRQHandler+0x3b4>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a4a      	ldr	r2, [pc, #296]	; (8004f54 <HAL_DMA_IRQHandler+0x450>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d040      	beq.n	8004eb2 <HAL_DMA_IRQHandler+0x3ae>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a48      	ldr	r2, [pc, #288]	; (8004f58 <HAL_DMA_IRQHandler+0x454>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d038      	beq.n	8004eac <HAL_DMA_IRQHandler+0x3a8>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a47      	ldr	r2, [pc, #284]	; (8004f5c <HAL_DMA_IRQHandler+0x458>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d030      	beq.n	8004ea6 <HAL_DMA_IRQHandler+0x3a2>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a45      	ldr	r2, [pc, #276]	; (8004f60 <HAL_DMA_IRQHandler+0x45c>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d028      	beq.n	8004ea0 <HAL_DMA_IRQHandler+0x39c>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a3d      	ldr	r2, [pc, #244]	; (8004f48 <HAL_DMA_IRQHandler+0x444>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d020      	beq.n	8004e9a <HAL_DMA_IRQHandler+0x396>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a41      	ldr	r2, [pc, #260]	; (8004f64 <HAL_DMA_IRQHandler+0x460>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d019      	beq.n	8004e96 <HAL_DMA_IRQHandler+0x392>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a40      	ldr	r2, [pc, #256]	; (8004f68 <HAL_DMA_IRQHandler+0x464>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d012      	beq.n	8004e92 <HAL_DMA_IRQHandler+0x38e>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a3e      	ldr	r2, [pc, #248]	; (8004f6c <HAL_DMA_IRQHandler+0x468>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d00a      	beq.n	8004e8c <HAL_DMA_IRQHandler+0x388>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a3d      	ldr	r2, [pc, #244]	; (8004f70 <HAL_DMA_IRQHandler+0x46c>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d102      	bne.n	8004e86 <HAL_DMA_IRQHandler+0x382>
 8004e80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004e84:	e01b      	b.n	8004ebe <HAL_DMA_IRQHandler+0x3ba>
 8004e86:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004e8a:	e018      	b.n	8004ebe <HAL_DMA_IRQHandler+0x3ba>
 8004e8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e90:	e015      	b.n	8004ebe <HAL_DMA_IRQHandler+0x3ba>
 8004e92:	2320      	movs	r3, #32
 8004e94:	e013      	b.n	8004ebe <HAL_DMA_IRQHandler+0x3ba>
 8004e96:	2302      	movs	r3, #2
 8004e98:	e011      	b.n	8004ebe <HAL_DMA_IRQHandler+0x3ba>
 8004e9a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004e9e:	e00e      	b.n	8004ebe <HAL_DMA_IRQHandler+0x3ba>
 8004ea0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004ea4:	e00b      	b.n	8004ebe <HAL_DMA_IRQHandler+0x3ba>
 8004ea6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004eaa:	e008      	b.n	8004ebe <HAL_DMA_IRQHandler+0x3ba>
 8004eac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004eb0:	e005      	b.n	8004ebe <HAL_DMA_IRQHandler+0x3ba>
 8004eb2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004eb6:	e002      	b.n	8004ebe <HAL_DMA_IRQHandler+0x3ba>
 8004eb8:	2320      	movs	r3, #32
 8004eba:	e000      	b.n	8004ebe <HAL_DMA_IRQHandler+0x3ba>
 8004ebc:	2302      	movs	r3, #2
 8004ebe:	4a2e      	ldr	r2, [pc, #184]	; (8004f78 <HAL_DMA_IRQHandler+0x474>)
 8004ec0:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d034      	beq.n	8004f3c <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004eda:	e02f      	b.n	8004f3c <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee0:	2208      	movs	r2, #8
 8004ee2:	409a      	lsls	r2, r3
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	4013      	ands	r3, r2
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d028      	beq.n	8004f3e <HAL_DMA_IRQHandler+0x43a>
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	f003 0308 	and.w	r3, r3, #8
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d023      	beq.n	8004f3e <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f022 020e 	bic.w	r2, r2, #14
 8004f04:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f0e:	2101      	movs	r1, #1
 8004f10:	fa01 f202 	lsl.w	r2, r1, r2
 8004f14:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2201      	movs	r2, #1
 8004f1a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2201      	movs	r2, #1
 8004f20:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2200      	movs	r2, #0
 8004f28:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d004      	beq.n	8004f3e <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	4798      	blx	r3
    }
  }
  return;
 8004f3c:	bf00      	nop
 8004f3e:	bf00      	nop
}
 8004f40:	3710      	adds	r7, #16
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}
 8004f46:	bf00      	nop
 8004f48:	40020080 	.word	0x40020080
 8004f4c:	40020008 	.word	0x40020008
 8004f50:	4002001c 	.word	0x4002001c
 8004f54:	40020030 	.word	0x40020030
 8004f58:	40020044 	.word	0x40020044
 8004f5c:	40020058 	.word	0x40020058
 8004f60:	4002006c 	.word	0x4002006c
 8004f64:	40020408 	.word	0x40020408
 8004f68:	4002041c 	.word	0x4002041c
 8004f6c:	40020430 	.word	0x40020430
 8004f70:	40020444 	.word	0x40020444
 8004f74:	40020400 	.word	0x40020400
 8004f78:	40020000 	.word	0x40020000

08004f7c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b085      	sub	sp, #20
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	60f8      	str	r0, [r7, #12]
 8004f84:	60b9      	str	r1, [r7, #8]
 8004f86:	607a      	str	r2, [r7, #4]
 8004f88:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f92:	2101      	movs	r1, #1
 8004f94:	fa01 f202 	lsl.w	r2, r1, r2
 8004f98:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	683a      	ldr	r2, [r7, #0]
 8004fa0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	2b10      	cmp	r3, #16
 8004fa8:	d108      	bne.n	8004fbc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	687a      	ldr	r2, [r7, #4]
 8004fb0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	68ba      	ldr	r2, [r7, #8]
 8004fb8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004fba:	e007      	b.n	8004fcc <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	68ba      	ldr	r2, [r7, #8]
 8004fc2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	687a      	ldr	r2, [r7, #4]
 8004fca:	60da      	str	r2, [r3, #12]
}
 8004fcc:	bf00      	nop
 8004fce:	3714      	adds	r7, #20
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bc80      	pop	{r7}
 8004fd4:	4770      	bx	lr
	...

08004fd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b08b      	sub	sp, #44	; 0x2c
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
 8004fe0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004fea:	e179      	b.n	80052e0 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004fec:	2201      	movs	r2, #1
 8004fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ff4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	69fa      	ldr	r2, [r7, #28]
 8004ffc:	4013      	ands	r3, r2
 8004ffe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8005000:	69ba      	ldr	r2, [r7, #24]
 8005002:	69fb      	ldr	r3, [r7, #28]
 8005004:	429a      	cmp	r2, r3
 8005006:	f040 8168 	bne.w	80052da <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	4a96      	ldr	r2, [pc, #600]	; (8005268 <HAL_GPIO_Init+0x290>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d05e      	beq.n	80050d2 <HAL_GPIO_Init+0xfa>
 8005014:	4a94      	ldr	r2, [pc, #592]	; (8005268 <HAL_GPIO_Init+0x290>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d875      	bhi.n	8005106 <HAL_GPIO_Init+0x12e>
 800501a:	4a94      	ldr	r2, [pc, #592]	; (800526c <HAL_GPIO_Init+0x294>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d058      	beq.n	80050d2 <HAL_GPIO_Init+0xfa>
 8005020:	4a92      	ldr	r2, [pc, #584]	; (800526c <HAL_GPIO_Init+0x294>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d86f      	bhi.n	8005106 <HAL_GPIO_Init+0x12e>
 8005026:	4a92      	ldr	r2, [pc, #584]	; (8005270 <HAL_GPIO_Init+0x298>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d052      	beq.n	80050d2 <HAL_GPIO_Init+0xfa>
 800502c:	4a90      	ldr	r2, [pc, #576]	; (8005270 <HAL_GPIO_Init+0x298>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d869      	bhi.n	8005106 <HAL_GPIO_Init+0x12e>
 8005032:	4a90      	ldr	r2, [pc, #576]	; (8005274 <HAL_GPIO_Init+0x29c>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d04c      	beq.n	80050d2 <HAL_GPIO_Init+0xfa>
 8005038:	4a8e      	ldr	r2, [pc, #568]	; (8005274 <HAL_GPIO_Init+0x29c>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d863      	bhi.n	8005106 <HAL_GPIO_Init+0x12e>
 800503e:	4a8e      	ldr	r2, [pc, #568]	; (8005278 <HAL_GPIO_Init+0x2a0>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d046      	beq.n	80050d2 <HAL_GPIO_Init+0xfa>
 8005044:	4a8c      	ldr	r2, [pc, #560]	; (8005278 <HAL_GPIO_Init+0x2a0>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d85d      	bhi.n	8005106 <HAL_GPIO_Init+0x12e>
 800504a:	2b12      	cmp	r3, #18
 800504c:	d82a      	bhi.n	80050a4 <HAL_GPIO_Init+0xcc>
 800504e:	2b12      	cmp	r3, #18
 8005050:	d859      	bhi.n	8005106 <HAL_GPIO_Init+0x12e>
 8005052:	a201      	add	r2, pc, #4	; (adr r2, 8005058 <HAL_GPIO_Init+0x80>)
 8005054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005058:	080050d3 	.word	0x080050d3
 800505c:	080050ad 	.word	0x080050ad
 8005060:	080050bf 	.word	0x080050bf
 8005064:	08005101 	.word	0x08005101
 8005068:	08005107 	.word	0x08005107
 800506c:	08005107 	.word	0x08005107
 8005070:	08005107 	.word	0x08005107
 8005074:	08005107 	.word	0x08005107
 8005078:	08005107 	.word	0x08005107
 800507c:	08005107 	.word	0x08005107
 8005080:	08005107 	.word	0x08005107
 8005084:	08005107 	.word	0x08005107
 8005088:	08005107 	.word	0x08005107
 800508c:	08005107 	.word	0x08005107
 8005090:	08005107 	.word	0x08005107
 8005094:	08005107 	.word	0x08005107
 8005098:	08005107 	.word	0x08005107
 800509c:	080050b5 	.word	0x080050b5
 80050a0:	080050c9 	.word	0x080050c9
 80050a4:	4a75      	ldr	r2, [pc, #468]	; (800527c <HAL_GPIO_Init+0x2a4>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d013      	beq.n	80050d2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80050aa:	e02c      	b.n	8005106 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	623b      	str	r3, [r7, #32]
          break;
 80050b2:	e029      	b.n	8005108 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	68db      	ldr	r3, [r3, #12]
 80050b8:	3304      	adds	r3, #4
 80050ba:	623b      	str	r3, [r7, #32]
          break;
 80050bc:	e024      	b.n	8005108 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	68db      	ldr	r3, [r3, #12]
 80050c2:	3308      	adds	r3, #8
 80050c4:	623b      	str	r3, [r7, #32]
          break;
 80050c6:	e01f      	b.n	8005108 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	68db      	ldr	r3, [r3, #12]
 80050cc:	330c      	adds	r3, #12
 80050ce:	623b      	str	r3, [r7, #32]
          break;
 80050d0:	e01a      	b.n	8005108 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d102      	bne.n	80050e0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80050da:	2304      	movs	r3, #4
 80050dc:	623b      	str	r3, [r7, #32]
          break;
 80050de:	e013      	b.n	8005108 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	d105      	bne.n	80050f4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80050e8:	2308      	movs	r3, #8
 80050ea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	69fa      	ldr	r2, [r7, #28]
 80050f0:	611a      	str	r2, [r3, #16]
          break;
 80050f2:	e009      	b.n	8005108 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80050f4:	2308      	movs	r3, #8
 80050f6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	69fa      	ldr	r2, [r7, #28]
 80050fc:	615a      	str	r2, [r3, #20]
          break;
 80050fe:	e003      	b.n	8005108 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005100:	2300      	movs	r3, #0
 8005102:	623b      	str	r3, [r7, #32]
          break;
 8005104:	e000      	b.n	8005108 <HAL_GPIO_Init+0x130>
          break;
 8005106:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005108:	69bb      	ldr	r3, [r7, #24]
 800510a:	2bff      	cmp	r3, #255	; 0xff
 800510c:	d801      	bhi.n	8005112 <HAL_GPIO_Init+0x13a>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	e001      	b.n	8005116 <HAL_GPIO_Init+0x13e>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	3304      	adds	r3, #4
 8005116:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005118:	69bb      	ldr	r3, [r7, #24]
 800511a:	2bff      	cmp	r3, #255	; 0xff
 800511c:	d802      	bhi.n	8005124 <HAL_GPIO_Init+0x14c>
 800511e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005120:	009b      	lsls	r3, r3, #2
 8005122:	e002      	b.n	800512a <HAL_GPIO_Init+0x152>
 8005124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005126:	3b08      	subs	r3, #8
 8005128:	009b      	lsls	r3, r3, #2
 800512a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	210f      	movs	r1, #15
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	fa01 f303 	lsl.w	r3, r1, r3
 8005138:	43db      	mvns	r3, r3
 800513a:	401a      	ands	r2, r3
 800513c:	6a39      	ldr	r1, [r7, #32]
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	fa01 f303 	lsl.w	r3, r1, r3
 8005144:	431a      	orrs	r2, r3
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005152:	2b00      	cmp	r3, #0
 8005154:	f000 80c1 	beq.w	80052da <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005158:	4b49      	ldr	r3, [pc, #292]	; (8005280 <HAL_GPIO_Init+0x2a8>)
 800515a:	699b      	ldr	r3, [r3, #24]
 800515c:	4a48      	ldr	r2, [pc, #288]	; (8005280 <HAL_GPIO_Init+0x2a8>)
 800515e:	f043 0301 	orr.w	r3, r3, #1
 8005162:	6193      	str	r3, [r2, #24]
 8005164:	4b46      	ldr	r3, [pc, #280]	; (8005280 <HAL_GPIO_Init+0x2a8>)
 8005166:	699b      	ldr	r3, [r3, #24]
 8005168:	f003 0301 	and.w	r3, r3, #1
 800516c:	60bb      	str	r3, [r7, #8]
 800516e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8005170:	4a44      	ldr	r2, [pc, #272]	; (8005284 <HAL_GPIO_Init+0x2ac>)
 8005172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005174:	089b      	lsrs	r3, r3, #2
 8005176:	3302      	adds	r3, #2
 8005178:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800517c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800517e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005180:	f003 0303 	and.w	r3, r3, #3
 8005184:	009b      	lsls	r3, r3, #2
 8005186:	220f      	movs	r2, #15
 8005188:	fa02 f303 	lsl.w	r3, r2, r3
 800518c:	43db      	mvns	r3, r3
 800518e:	68fa      	ldr	r2, [r7, #12]
 8005190:	4013      	ands	r3, r2
 8005192:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	4a3c      	ldr	r2, [pc, #240]	; (8005288 <HAL_GPIO_Init+0x2b0>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d01f      	beq.n	80051dc <HAL_GPIO_Init+0x204>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	4a3b      	ldr	r2, [pc, #236]	; (800528c <HAL_GPIO_Init+0x2b4>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d019      	beq.n	80051d8 <HAL_GPIO_Init+0x200>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	4a3a      	ldr	r2, [pc, #232]	; (8005290 <HAL_GPIO_Init+0x2b8>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d013      	beq.n	80051d4 <HAL_GPIO_Init+0x1fc>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	4a39      	ldr	r2, [pc, #228]	; (8005294 <HAL_GPIO_Init+0x2bc>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d00d      	beq.n	80051d0 <HAL_GPIO_Init+0x1f8>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	4a38      	ldr	r2, [pc, #224]	; (8005298 <HAL_GPIO_Init+0x2c0>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d007      	beq.n	80051cc <HAL_GPIO_Init+0x1f4>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	4a37      	ldr	r2, [pc, #220]	; (800529c <HAL_GPIO_Init+0x2c4>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d101      	bne.n	80051c8 <HAL_GPIO_Init+0x1f0>
 80051c4:	2305      	movs	r3, #5
 80051c6:	e00a      	b.n	80051de <HAL_GPIO_Init+0x206>
 80051c8:	2306      	movs	r3, #6
 80051ca:	e008      	b.n	80051de <HAL_GPIO_Init+0x206>
 80051cc:	2304      	movs	r3, #4
 80051ce:	e006      	b.n	80051de <HAL_GPIO_Init+0x206>
 80051d0:	2303      	movs	r3, #3
 80051d2:	e004      	b.n	80051de <HAL_GPIO_Init+0x206>
 80051d4:	2302      	movs	r3, #2
 80051d6:	e002      	b.n	80051de <HAL_GPIO_Init+0x206>
 80051d8:	2301      	movs	r3, #1
 80051da:	e000      	b.n	80051de <HAL_GPIO_Init+0x206>
 80051dc:	2300      	movs	r3, #0
 80051de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051e0:	f002 0203 	and.w	r2, r2, #3
 80051e4:	0092      	lsls	r2, r2, #2
 80051e6:	4093      	lsls	r3, r2
 80051e8:	68fa      	ldr	r2, [r7, #12]
 80051ea:	4313      	orrs	r3, r2
 80051ec:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80051ee:	4925      	ldr	r1, [pc, #148]	; (8005284 <HAL_GPIO_Init+0x2ac>)
 80051f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f2:	089b      	lsrs	r3, r3, #2
 80051f4:	3302      	adds	r3, #2
 80051f6:	68fa      	ldr	r2, [r7, #12]
 80051f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005204:	2b00      	cmp	r3, #0
 8005206:	d006      	beq.n	8005216 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005208:	4b25      	ldr	r3, [pc, #148]	; (80052a0 <HAL_GPIO_Init+0x2c8>)
 800520a:	689a      	ldr	r2, [r3, #8]
 800520c:	4924      	ldr	r1, [pc, #144]	; (80052a0 <HAL_GPIO_Init+0x2c8>)
 800520e:	69bb      	ldr	r3, [r7, #24]
 8005210:	4313      	orrs	r3, r2
 8005212:	608b      	str	r3, [r1, #8]
 8005214:	e006      	b.n	8005224 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8005216:	4b22      	ldr	r3, [pc, #136]	; (80052a0 <HAL_GPIO_Init+0x2c8>)
 8005218:	689a      	ldr	r2, [r3, #8]
 800521a:	69bb      	ldr	r3, [r7, #24]
 800521c:	43db      	mvns	r3, r3
 800521e:	4920      	ldr	r1, [pc, #128]	; (80052a0 <HAL_GPIO_Init+0x2c8>)
 8005220:	4013      	ands	r3, r2
 8005222:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800522c:	2b00      	cmp	r3, #0
 800522e:	d006      	beq.n	800523e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8005230:	4b1b      	ldr	r3, [pc, #108]	; (80052a0 <HAL_GPIO_Init+0x2c8>)
 8005232:	68da      	ldr	r2, [r3, #12]
 8005234:	491a      	ldr	r1, [pc, #104]	; (80052a0 <HAL_GPIO_Init+0x2c8>)
 8005236:	69bb      	ldr	r3, [r7, #24]
 8005238:	4313      	orrs	r3, r2
 800523a:	60cb      	str	r3, [r1, #12]
 800523c:	e006      	b.n	800524c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800523e:	4b18      	ldr	r3, [pc, #96]	; (80052a0 <HAL_GPIO_Init+0x2c8>)
 8005240:	68da      	ldr	r2, [r3, #12]
 8005242:	69bb      	ldr	r3, [r7, #24]
 8005244:	43db      	mvns	r3, r3
 8005246:	4916      	ldr	r1, [pc, #88]	; (80052a0 <HAL_GPIO_Init+0x2c8>)
 8005248:	4013      	ands	r3, r2
 800524a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005254:	2b00      	cmp	r3, #0
 8005256:	d025      	beq.n	80052a4 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8005258:	4b11      	ldr	r3, [pc, #68]	; (80052a0 <HAL_GPIO_Init+0x2c8>)
 800525a:	685a      	ldr	r2, [r3, #4]
 800525c:	4910      	ldr	r1, [pc, #64]	; (80052a0 <HAL_GPIO_Init+0x2c8>)
 800525e:	69bb      	ldr	r3, [r7, #24]
 8005260:	4313      	orrs	r3, r2
 8005262:	604b      	str	r3, [r1, #4]
 8005264:	e025      	b.n	80052b2 <HAL_GPIO_Init+0x2da>
 8005266:	bf00      	nop
 8005268:	10320000 	.word	0x10320000
 800526c:	10310000 	.word	0x10310000
 8005270:	10220000 	.word	0x10220000
 8005274:	10210000 	.word	0x10210000
 8005278:	10120000 	.word	0x10120000
 800527c:	10110000 	.word	0x10110000
 8005280:	40021000 	.word	0x40021000
 8005284:	40010000 	.word	0x40010000
 8005288:	40010800 	.word	0x40010800
 800528c:	40010c00 	.word	0x40010c00
 8005290:	40011000 	.word	0x40011000
 8005294:	40011400 	.word	0x40011400
 8005298:	40011800 	.word	0x40011800
 800529c:	40011c00 	.word	0x40011c00
 80052a0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80052a4:	4b15      	ldr	r3, [pc, #84]	; (80052fc <HAL_GPIO_Init+0x324>)
 80052a6:	685a      	ldr	r2, [r3, #4]
 80052a8:	69bb      	ldr	r3, [r7, #24]
 80052aa:	43db      	mvns	r3, r3
 80052ac:	4913      	ldr	r1, [pc, #76]	; (80052fc <HAL_GPIO_Init+0x324>)
 80052ae:	4013      	ands	r3, r2
 80052b0:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d006      	beq.n	80052cc <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80052be:	4b0f      	ldr	r3, [pc, #60]	; (80052fc <HAL_GPIO_Init+0x324>)
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	490e      	ldr	r1, [pc, #56]	; (80052fc <HAL_GPIO_Init+0x324>)
 80052c4:	69bb      	ldr	r3, [r7, #24]
 80052c6:	4313      	orrs	r3, r2
 80052c8:	600b      	str	r3, [r1, #0]
 80052ca:	e006      	b.n	80052da <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80052cc:	4b0b      	ldr	r3, [pc, #44]	; (80052fc <HAL_GPIO_Init+0x324>)
 80052ce:	681a      	ldr	r2, [r3, #0]
 80052d0:	69bb      	ldr	r3, [r7, #24]
 80052d2:	43db      	mvns	r3, r3
 80052d4:	4909      	ldr	r1, [pc, #36]	; (80052fc <HAL_GPIO_Init+0x324>)
 80052d6:	4013      	ands	r3, r2
 80052d8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80052da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052dc:	3301      	adds	r3, #1
 80052de:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e6:	fa22 f303 	lsr.w	r3, r2, r3
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	f47f ae7e 	bne.w	8004fec <HAL_GPIO_Init+0x14>
  }
}
 80052f0:	bf00      	nop
 80052f2:	bf00      	nop
 80052f4:	372c      	adds	r7, #44	; 0x2c
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bc80      	pop	{r7}
 80052fa:	4770      	bx	lr
 80052fc:	40010400 	.word	0x40010400

08005300 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005300:	b480      	push	{r7}
 8005302:	b083      	sub	sp, #12
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
 8005308:	460b      	mov	r3, r1
 800530a:	807b      	strh	r3, [r7, #2]
 800530c:	4613      	mov	r3, r2
 800530e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005310:	787b      	ldrb	r3, [r7, #1]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d003      	beq.n	800531e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005316:	887a      	ldrh	r2, [r7, #2]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800531c:	e003      	b.n	8005326 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800531e:	887b      	ldrh	r3, [r7, #2]
 8005320:	041a      	lsls	r2, r3, #16
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	611a      	str	r2, [r3, #16]
}
 8005326:	bf00      	nop
 8005328:	370c      	adds	r7, #12
 800532a:	46bd      	mov	sp, r7
 800532c:	bc80      	pop	{r7}
 800532e:	4770      	bx	lr

08005330 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b086      	sub	sp, #24
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d101      	bne.n	8005342 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	e272      	b.n	8005828 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f003 0301 	and.w	r3, r3, #1
 800534a:	2b00      	cmp	r3, #0
 800534c:	f000 8087 	beq.w	800545e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005350:	4b92      	ldr	r3, [pc, #584]	; (800559c <HAL_RCC_OscConfig+0x26c>)
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	f003 030c 	and.w	r3, r3, #12
 8005358:	2b04      	cmp	r3, #4
 800535a:	d00c      	beq.n	8005376 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800535c:	4b8f      	ldr	r3, [pc, #572]	; (800559c <HAL_RCC_OscConfig+0x26c>)
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	f003 030c 	and.w	r3, r3, #12
 8005364:	2b08      	cmp	r3, #8
 8005366:	d112      	bne.n	800538e <HAL_RCC_OscConfig+0x5e>
 8005368:	4b8c      	ldr	r3, [pc, #560]	; (800559c <HAL_RCC_OscConfig+0x26c>)
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005370:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005374:	d10b      	bne.n	800538e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005376:	4b89      	ldr	r3, [pc, #548]	; (800559c <HAL_RCC_OscConfig+0x26c>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800537e:	2b00      	cmp	r3, #0
 8005380:	d06c      	beq.n	800545c <HAL_RCC_OscConfig+0x12c>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d168      	bne.n	800545c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800538a:	2301      	movs	r3, #1
 800538c:	e24c      	b.n	8005828 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005396:	d106      	bne.n	80053a6 <HAL_RCC_OscConfig+0x76>
 8005398:	4b80      	ldr	r3, [pc, #512]	; (800559c <HAL_RCC_OscConfig+0x26c>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a7f      	ldr	r2, [pc, #508]	; (800559c <HAL_RCC_OscConfig+0x26c>)
 800539e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053a2:	6013      	str	r3, [r2, #0]
 80053a4:	e02e      	b.n	8005404 <HAL_RCC_OscConfig+0xd4>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d10c      	bne.n	80053c8 <HAL_RCC_OscConfig+0x98>
 80053ae:	4b7b      	ldr	r3, [pc, #492]	; (800559c <HAL_RCC_OscConfig+0x26c>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a7a      	ldr	r2, [pc, #488]	; (800559c <HAL_RCC_OscConfig+0x26c>)
 80053b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053b8:	6013      	str	r3, [r2, #0]
 80053ba:	4b78      	ldr	r3, [pc, #480]	; (800559c <HAL_RCC_OscConfig+0x26c>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a77      	ldr	r2, [pc, #476]	; (800559c <HAL_RCC_OscConfig+0x26c>)
 80053c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80053c4:	6013      	str	r3, [r2, #0]
 80053c6:	e01d      	b.n	8005404 <HAL_RCC_OscConfig+0xd4>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80053d0:	d10c      	bne.n	80053ec <HAL_RCC_OscConfig+0xbc>
 80053d2:	4b72      	ldr	r3, [pc, #456]	; (800559c <HAL_RCC_OscConfig+0x26c>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a71      	ldr	r2, [pc, #452]	; (800559c <HAL_RCC_OscConfig+0x26c>)
 80053d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80053dc:	6013      	str	r3, [r2, #0]
 80053de:	4b6f      	ldr	r3, [pc, #444]	; (800559c <HAL_RCC_OscConfig+0x26c>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a6e      	ldr	r2, [pc, #440]	; (800559c <HAL_RCC_OscConfig+0x26c>)
 80053e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053e8:	6013      	str	r3, [r2, #0]
 80053ea:	e00b      	b.n	8005404 <HAL_RCC_OscConfig+0xd4>
 80053ec:	4b6b      	ldr	r3, [pc, #428]	; (800559c <HAL_RCC_OscConfig+0x26c>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a6a      	ldr	r2, [pc, #424]	; (800559c <HAL_RCC_OscConfig+0x26c>)
 80053f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053f6:	6013      	str	r3, [r2, #0]
 80053f8:	4b68      	ldr	r3, [pc, #416]	; (800559c <HAL_RCC_OscConfig+0x26c>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a67      	ldr	r2, [pc, #412]	; (800559c <HAL_RCC_OscConfig+0x26c>)
 80053fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005402:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d013      	beq.n	8005434 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800540c:	f7ff f824 	bl	8004458 <HAL_GetTick>
 8005410:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005412:	e008      	b.n	8005426 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005414:	f7ff f820 	bl	8004458 <HAL_GetTick>
 8005418:	4602      	mov	r2, r0
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	1ad3      	subs	r3, r2, r3
 800541e:	2b64      	cmp	r3, #100	; 0x64
 8005420:	d901      	bls.n	8005426 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005422:	2303      	movs	r3, #3
 8005424:	e200      	b.n	8005828 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005426:	4b5d      	ldr	r3, [pc, #372]	; (800559c <HAL_RCC_OscConfig+0x26c>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800542e:	2b00      	cmp	r3, #0
 8005430:	d0f0      	beq.n	8005414 <HAL_RCC_OscConfig+0xe4>
 8005432:	e014      	b.n	800545e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005434:	f7ff f810 	bl	8004458 <HAL_GetTick>
 8005438:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800543a:	e008      	b.n	800544e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800543c:	f7ff f80c 	bl	8004458 <HAL_GetTick>
 8005440:	4602      	mov	r2, r0
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	1ad3      	subs	r3, r2, r3
 8005446:	2b64      	cmp	r3, #100	; 0x64
 8005448:	d901      	bls.n	800544e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800544a:	2303      	movs	r3, #3
 800544c:	e1ec      	b.n	8005828 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800544e:	4b53      	ldr	r3, [pc, #332]	; (800559c <HAL_RCC_OscConfig+0x26c>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005456:	2b00      	cmp	r3, #0
 8005458:	d1f0      	bne.n	800543c <HAL_RCC_OscConfig+0x10c>
 800545a:	e000      	b.n	800545e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800545c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f003 0302 	and.w	r3, r3, #2
 8005466:	2b00      	cmp	r3, #0
 8005468:	d063      	beq.n	8005532 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800546a:	4b4c      	ldr	r3, [pc, #304]	; (800559c <HAL_RCC_OscConfig+0x26c>)
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	f003 030c 	and.w	r3, r3, #12
 8005472:	2b00      	cmp	r3, #0
 8005474:	d00b      	beq.n	800548e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005476:	4b49      	ldr	r3, [pc, #292]	; (800559c <HAL_RCC_OscConfig+0x26c>)
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	f003 030c 	and.w	r3, r3, #12
 800547e:	2b08      	cmp	r3, #8
 8005480:	d11c      	bne.n	80054bc <HAL_RCC_OscConfig+0x18c>
 8005482:	4b46      	ldr	r3, [pc, #280]	; (800559c <HAL_RCC_OscConfig+0x26c>)
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800548a:	2b00      	cmp	r3, #0
 800548c:	d116      	bne.n	80054bc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800548e:	4b43      	ldr	r3, [pc, #268]	; (800559c <HAL_RCC_OscConfig+0x26c>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f003 0302 	and.w	r3, r3, #2
 8005496:	2b00      	cmp	r3, #0
 8005498:	d005      	beq.n	80054a6 <HAL_RCC_OscConfig+0x176>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	691b      	ldr	r3, [r3, #16]
 800549e:	2b01      	cmp	r3, #1
 80054a0:	d001      	beq.n	80054a6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80054a2:	2301      	movs	r3, #1
 80054a4:	e1c0      	b.n	8005828 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054a6:	4b3d      	ldr	r3, [pc, #244]	; (800559c <HAL_RCC_OscConfig+0x26c>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	695b      	ldr	r3, [r3, #20]
 80054b2:	00db      	lsls	r3, r3, #3
 80054b4:	4939      	ldr	r1, [pc, #228]	; (800559c <HAL_RCC_OscConfig+0x26c>)
 80054b6:	4313      	orrs	r3, r2
 80054b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054ba:	e03a      	b.n	8005532 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	691b      	ldr	r3, [r3, #16]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d020      	beq.n	8005506 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80054c4:	4b36      	ldr	r3, [pc, #216]	; (80055a0 <HAL_RCC_OscConfig+0x270>)
 80054c6:	2201      	movs	r2, #1
 80054c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054ca:	f7fe ffc5 	bl	8004458 <HAL_GetTick>
 80054ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054d0:	e008      	b.n	80054e4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054d2:	f7fe ffc1 	bl	8004458 <HAL_GetTick>
 80054d6:	4602      	mov	r2, r0
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	1ad3      	subs	r3, r2, r3
 80054dc:	2b02      	cmp	r3, #2
 80054de:	d901      	bls.n	80054e4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80054e0:	2303      	movs	r3, #3
 80054e2:	e1a1      	b.n	8005828 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054e4:	4b2d      	ldr	r3, [pc, #180]	; (800559c <HAL_RCC_OscConfig+0x26c>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f003 0302 	and.w	r3, r3, #2
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d0f0      	beq.n	80054d2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054f0:	4b2a      	ldr	r3, [pc, #168]	; (800559c <HAL_RCC_OscConfig+0x26c>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	695b      	ldr	r3, [r3, #20]
 80054fc:	00db      	lsls	r3, r3, #3
 80054fe:	4927      	ldr	r1, [pc, #156]	; (800559c <HAL_RCC_OscConfig+0x26c>)
 8005500:	4313      	orrs	r3, r2
 8005502:	600b      	str	r3, [r1, #0]
 8005504:	e015      	b.n	8005532 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005506:	4b26      	ldr	r3, [pc, #152]	; (80055a0 <HAL_RCC_OscConfig+0x270>)
 8005508:	2200      	movs	r2, #0
 800550a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800550c:	f7fe ffa4 	bl	8004458 <HAL_GetTick>
 8005510:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005512:	e008      	b.n	8005526 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005514:	f7fe ffa0 	bl	8004458 <HAL_GetTick>
 8005518:	4602      	mov	r2, r0
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	1ad3      	subs	r3, r2, r3
 800551e:	2b02      	cmp	r3, #2
 8005520:	d901      	bls.n	8005526 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005522:	2303      	movs	r3, #3
 8005524:	e180      	b.n	8005828 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005526:	4b1d      	ldr	r3, [pc, #116]	; (800559c <HAL_RCC_OscConfig+0x26c>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f003 0302 	and.w	r3, r3, #2
 800552e:	2b00      	cmp	r3, #0
 8005530:	d1f0      	bne.n	8005514 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f003 0308 	and.w	r3, r3, #8
 800553a:	2b00      	cmp	r3, #0
 800553c:	d03a      	beq.n	80055b4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	699b      	ldr	r3, [r3, #24]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d019      	beq.n	800557a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005546:	4b17      	ldr	r3, [pc, #92]	; (80055a4 <HAL_RCC_OscConfig+0x274>)
 8005548:	2201      	movs	r2, #1
 800554a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800554c:	f7fe ff84 	bl	8004458 <HAL_GetTick>
 8005550:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005552:	e008      	b.n	8005566 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005554:	f7fe ff80 	bl	8004458 <HAL_GetTick>
 8005558:	4602      	mov	r2, r0
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	1ad3      	subs	r3, r2, r3
 800555e:	2b02      	cmp	r3, #2
 8005560:	d901      	bls.n	8005566 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005562:	2303      	movs	r3, #3
 8005564:	e160      	b.n	8005828 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005566:	4b0d      	ldr	r3, [pc, #52]	; (800559c <HAL_RCC_OscConfig+0x26c>)
 8005568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800556a:	f003 0302 	and.w	r3, r3, #2
 800556e:	2b00      	cmp	r3, #0
 8005570:	d0f0      	beq.n	8005554 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005572:	2001      	movs	r0, #1
 8005574:	f000 face 	bl	8005b14 <RCC_Delay>
 8005578:	e01c      	b.n	80055b4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800557a:	4b0a      	ldr	r3, [pc, #40]	; (80055a4 <HAL_RCC_OscConfig+0x274>)
 800557c:	2200      	movs	r2, #0
 800557e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005580:	f7fe ff6a 	bl	8004458 <HAL_GetTick>
 8005584:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005586:	e00f      	b.n	80055a8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005588:	f7fe ff66 	bl	8004458 <HAL_GetTick>
 800558c:	4602      	mov	r2, r0
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	1ad3      	subs	r3, r2, r3
 8005592:	2b02      	cmp	r3, #2
 8005594:	d908      	bls.n	80055a8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005596:	2303      	movs	r3, #3
 8005598:	e146      	b.n	8005828 <HAL_RCC_OscConfig+0x4f8>
 800559a:	bf00      	nop
 800559c:	40021000 	.word	0x40021000
 80055a0:	42420000 	.word	0x42420000
 80055a4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055a8:	4b92      	ldr	r3, [pc, #584]	; (80057f4 <HAL_RCC_OscConfig+0x4c4>)
 80055aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ac:	f003 0302 	and.w	r3, r3, #2
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d1e9      	bne.n	8005588 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f003 0304 	and.w	r3, r3, #4
 80055bc:	2b00      	cmp	r3, #0
 80055be:	f000 80a6 	beq.w	800570e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80055c2:	2300      	movs	r3, #0
 80055c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055c6:	4b8b      	ldr	r3, [pc, #556]	; (80057f4 <HAL_RCC_OscConfig+0x4c4>)
 80055c8:	69db      	ldr	r3, [r3, #28]
 80055ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d10d      	bne.n	80055ee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055d2:	4b88      	ldr	r3, [pc, #544]	; (80057f4 <HAL_RCC_OscConfig+0x4c4>)
 80055d4:	69db      	ldr	r3, [r3, #28]
 80055d6:	4a87      	ldr	r2, [pc, #540]	; (80057f4 <HAL_RCC_OscConfig+0x4c4>)
 80055d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055dc:	61d3      	str	r3, [r2, #28]
 80055de:	4b85      	ldr	r3, [pc, #532]	; (80057f4 <HAL_RCC_OscConfig+0x4c4>)
 80055e0:	69db      	ldr	r3, [r3, #28]
 80055e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055e6:	60bb      	str	r3, [r7, #8]
 80055e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80055ea:	2301      	movs	r3, #1
 80055ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055ee:	4b82      	ldr	r3, [pc, #520]	; (80057f8 <HAL_RCC_OscConfig+0x4c8>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d118      	bne.n	800562c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80055fa:	4b7f      	ldr	r3, [pc, #508]	; (80057f8 <HAL_RCC_OscConfig+0x4c8>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a7e      	ldr	r2, [pc, #504]	; (80057f8 <HAL_RCC_OscConfig+0x4c8>)
 8005600:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005604:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005606:	f7fe ff27 	bl	8004458 <HAL_GetTick>
 800560a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800560c:	e008      	b.n	8005620 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800560e:	f7fe ff23 	bl	8004458 <HAL_GetTick>
 8005612:	4602      	mov	r2, r0
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	1ad3      	subs	r3, r2, r3
 8005618:	2b64      	cmp	r3, #100	; 0x64
 800561a:	d901      	bls.n	8005620 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800561c:	2303      	movs	r3, #3
 800561e:	e103      	b.n	8005828 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005620:	4b75      	ldr	r3, [pc, #468]	; (80057f8 <HAL_RCC_OscConfig+0x4c8>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005628:	2b00      	cmp	r3, #0
 800562a:	d0f0      	beq.n	800560e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	2b01      	cmp	r3, #1
 8005632:	d106      	bne.n	8005642 <HAL_RCC_OscConfig+0x312>
 8005634:	4b6f      	ldr	r3, [pc, #444]	; (80057f4 <HAL_RCC_OscConfig+0x4c4>)
 8005636:	6a1b      	ldr	r3, [r3, #32]
 8005638:	4a6e      	ldr	r2, [pc, #440]	; (80057f4 <HAL_RCC_OscConfig+0x4c4>)
 800563a:	f043 0301 	orr.w	r3, r3, #1
 800563e:	6213      	str	r3, [r2, #32]
 8005640:	e02d      	b.n	800569e <HAL_RCC_OscConfig+0x36e>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	68db      	ldr	r3, [r3, #12]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d10c      	bne.n	8005664 <HAL_RCC_OscConfig+0x334>
 800564a:	4b6a      	ldr	r3, [pc, #424]	; (80057f4 <HAL_RCC_OscConfig+0x4c4>)
 800564c:	6a1b      	ldr	r3, [r3, #32]
 800564e:	4a69      	ldr	r2, [pc, #420]	; (80057f4 <HAL_RCC_OscConfig+0x4c4>)
 8005650:	f023 0301 	bic.w	r3, r3, #1
 8005654:	6213      	str	r3, [r2, #32]
 8005656:	4b67      	ldr	r3, [pc, #412]	; (80057f4 <HAL_RCC_OscConfig+0x4c4>)
 8005658:	6a1b      	ldr	r3, [r3, #32]
 800565a:	4a66      	ldr	r2, [pc, #408]	; (80057f4 <HAL_RCC_OscConfig+0x4c4>)
 800565c:	f023 0304 	bic.w	r3, r3, #4
 8005660:	6213      	str	r3, [r2, #32]
 8005662:	e01c      	b.n	800569e <HAL_RCC_OscConfig+0x36e>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	68db      	ldr	r3, [r3, #12]
 8005668:	2b05      	cmp	r3, #5
 800566a:	d10c      	bne.n	8005686 <HAL_RCC_OscConfig+0x356>
 800566c:	4b61      	ldr	r3, [pc, #388]	; (80057f4 <HAL_RCC_OscConfig+0x4c4>)
 800566e:	6a1b      	ldr	r3, [r3, #32]
 8005670:	4a60      	ldr	r2, [pc, #384]	; (80057f4 <HAL_RCC_OscConfig+0x4c4>)
 8005672:	f043 0304 	orr.w	r3, r3, #4
 8005676:	6213      	str	r3, [r2, #32]
 8005678:	4b5e      	ldr	r3, [pc, #376]	; (80057f4 <HAL_RCC_OscConfig+0x4c4>)
 800567a:	6a1b      	ldr	r3, [r3, #32]
 800567c:	4a5d      	ldr	r2, [pc, #372]	; (80057f4 <HAL_RCC_OscConfig+0x4c4>)
 800567e:	f043 0301 	orr.w	r3, r3, #1
 8005682:	6213      	str	r3, [r2, #32]
 8005684:	e00b      	b.n	800569e <HAL_RCC_OscConfig+0x36e>
 8005686:	4b5b      	ldr	r3, [pc, #364]	; (80057f4 <HAL_RCC_OscConfig+0x4c4>)
 8005688:	6a1b      	ldr	r3, [r3, #32]
 800568a:	4a5a      	ldr	r2, [pc, #360]	; (80057f4 <HAL_RCC_OscConfig+0x4c4>)
 800568c:	f023 0301 	bic.w	r3, r3, #1
 8005690:	6213      	str	r3, [r2, #32]
 8005692:	4b58      	ldr	r3, [pc, #352]	; (80057f4 <HAL_RCC_OscConfig+0x4c4>)
 8005694:	6a1b      	ldr	r3, [r3, #32]
 8005696:	4a57      	ldr	r2, [pc, #348]	; (80057f4 <HAL_RCC_OscConfig+0x4c4>)
 8005698:	f023 0304 	bic.w	r3, r3, #4
 800569c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	68db      	ldr	r3, [r3, #12]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d015      	beq.n	80056d2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056a6:	f7fe fed7 	bl	8004458 <HAL_GetTick>
 80056aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056ac:	e00a      	b.n	80056c4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056ae:	f7fe fed3 	bl	8004458 <HAL_GetTick>
 80056b2:	4602      	mov	r2, r0
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	1ad3      	subs	r3, r2, r3
 80056b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80056bc:	4293      	cmp	r3, r2
 80056be:	d901      	bls.n	80056c4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80056c0:	2303      	movs	r3, #3
 80056c2:	e0b1      	b.n	8005828 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056c4:	4b4b      	ldr	r3, [pc, #300]	; (80057f4 <HAL_RCC_OscConfig+0x4c4>)
 80056c6:	6a1b      	ldr	r3, [r3, #32]
 80056c8:	f003 0302 	and.w	r3, r3, #2
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d0ee      	beq.n	80056ae <HAL_RCC_OscConfig+0x37e>
 80056d0:	e014      	b.n	80056fc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056d2:	f7fe fec1 	bl	8004458 <HAL_GetTick>
 80056d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056d8:	e00a      	b.n	80056f0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056da:	f7fe febd 	bl	8004458 <HAL_GetTick>
 80056de:	4602      	mov	r2, r0
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	1ad3      	subs	r3, r2, r3
 80056e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d901      	bls.n	80056f0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80056ec:	2303      	movs	r3, #3
 80056ee:	e09b      	b.n	8005828 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056f0:	4b40      	ldr	r3, [pc, #256]	; (80057f4 <HAL_RCC_OscConfig+0x4c4>)
 80056f2:	6a1b      	ldr	r3, [r3, #32]
 80056f4:	f003 0302 	and.w	r3, r3, #2
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d1ee      	bne.n	80056da <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80056fc:	7dfb      	ldrb	r3, [r7, #23]
 80056fe:	2b01      	cmp	r3, #1
 8005700:	d105      	bne.n	800570e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005702:	4b3c      	ldr	r3, [pc, #240]	; (80057f4 <HAL_RCC_OscConfig+0x4c4>)
 8005704:	69db      	ldr	r3, [r3, #28]
 8005706:	4a3b      	ldr	r2, [pc, #236]	; (80057f4 <HAL_RCC_OscConfig+0x4c4>)
 8005708:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800570c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	69db      	ldr	r3, [r3, #28]
 8005712:	2b00      	cmp	r3, #0
 8005714:	f000 8087 	beq.w	8005826 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005718:	4b36      	ldr	r3, [pc, #216]	; (80057f4 <HAL_RCC_OscConfig+0x4c4>)
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	f003 030c 	and.w	r3, r3, #12
 8005720:	2b08      	cmp	r3, #8
 8005722:	d061      	beq.n	80057e8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	69db      	ldr	r3, [r3, #28]
 8005728:	2b02      	cmp	r3, #2
 800572a:	d146      	bne.n	80057ba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800572c:	4b33      	ldr	r3, [pc, #204]	; (80057fc <HAL_RCC_OscConfig+0x4cc>)
 800572e:	2200      	movs	r2, #0
 8005730:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005732:	f7fe fe91 	bl	8004458 <HAL_GetTick>
 8005736:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005738:	e008      	b.n	800574c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800573a:	f7fe fe8d 	bl	8004458 <HAL_GetTick>
 800573e:	4602      	mov	r2, r0
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	1ad3      	subs	r3, r2, r3
 8005744:	2b02      	cmp	r3, #2
 8005746:	d901      	bls.n	800574c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005748:	2303      	movs	r3, #3
 800574a:	e06d      	b.n	8005828 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800574c:	4b29      	ldr	r3, [pc, #164]	; (80057f4 <HAL_RCC_OscConfig+0x4c4>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005754:	2b00      	cmp	r3, #0
 8005756:	d1f0      	bne.n	800573a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6a1b      	ldr	r3, [r3, #32]
 800575c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005760:	d108      	bne.n	8005774 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005762:	4b24      	ldr	r3, [pc, #144]	; (80057f4 <HAL_RCC_OscConfig+0x4c4>)
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	689b      	ldr	r3, [r3, #8]
 800576e:	4921      	ldr	r1, [pc, #132]	; (80057f4 <HAL_RCC_OscConfig+0x4c4>)
 8005770:	4313      	orrs	r3, r2
 8005772:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005774:	4b1f      	ldr	r3, [pc, #124]	; (80057f4 <HAL_RCC_OscConfig+0x4c4>)
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6a19      	ldr	r1, [r3, #32]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005784:	430b      	orrs	r3, r1
 8005786:	491b      	ldr	r1, [pc, #108]	; (80057f4 <HAL_RCC_OscConfig+0x4c4>)
 8005788:	4313      	orrs	r3, r2
 800578a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800578c:	4b1b      	ldr	r3, [pc, #108]	; (80057fc <HAL_RCC_OscConfig+0x4cc>)
 800578e:	2201      	movs	r2, #1
 8005790:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005792:	f7fe fe61 	bl	8004458 <HAL_GetTick>
 8005796:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005798:	e008      	b.n	80057ac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800579a:	f7fe fe5d 	bl	8004458 <HAL_GetTick>
 800579e:	4602      	mov	r2, r0
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	1ad3      	subs	r3, r2, r3
 80057a4:	2b02      	cmp	r3, #2
 80057a6:	d901      	bls.n	80057ac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80057a8:	2303      	movs	r3, #3
 80057aa:	e03d      	b.n	8005828 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80057ac:	4b11      	ldr	r3, [pc, #68]	; (80057f4 <HAL_RCC_OscConfig+0x4c4>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d0f0      	beq.n	800579a <HAL_RCC_OscConfig+0x46a>
 80057b8:	e035      	b.n	8005826 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057ba:	4b10      	ldr	r3, [pc, #64]	; (80057fc <HAL_RCC_OscConfig+0x4cc>)
 80057bc:	2200      	movs	r2, #0
 80057be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057c0:	f7fe fe4a 	bl	8004458 <HAL_GetTick>
 80057c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80057c6:	e008      	b.n	80057da <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057c8:	f7fe fe46 	bl	8004458 <HAL_GetTick>
 80057cc:	4602      	mov	r2, r0
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	1ad3      	subs	r3, r2, r3
 80057d2:	2b02      	cmp	r3, #2
 80057d4:	d901      	bls.n	80057da <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80057d6:	2303      	movs	r3, #3
 80057d8:	e026      	b.n	8005828 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80057da:	4b06      	ldr	r3, [pc, #24]	; (80057f4 <HAL_RCC_OscConfig+0x4c4>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d1f0      	bne.n	80057c8 <HAL_RCC_OscConfig+0x498>
 80057e6:	e01e      	b.n	8005826 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	69db      	ldr	r3, [r3, #28]
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d107      	bne.n	8005800 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80057f0:	2301      	movs	r3, #1
 80057f2:	e019      	b.n	8005828 <HAL_RCC_OscConfig+0x4f8>
 80057f4:	40021000 	.word	0x40021000
 80057f8:	40007000 	.word	0x40007000
 80057fc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005800:	4b0b      	ldr	r3, [pc, #44]	; (8005830 <HAL_RCC_OscConfig+0x500>)
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6a1b      	ldr	r3, [r3, #32]
 8005810:	429a      	cmp	r2, r3
 8005812:	d106      	bne.n	8005822 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800581e:	429a      	cmp	r2, r3
 8005820:	d001      	beq.n	8005826 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	e000      	b.n	8005828 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005826:	2300      	movs	r3, #0
}
 8005828:	4618      	mov	r0, r3
 800582a:	3718      	adds	r7, #24
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}
 8005830:	40021000 	.word	0x40021000

08005834 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b084      	sub	sp, #16
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
 800583c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d101      	bne.n	8005848 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005844:	2301      	movs	r3, #1
 8005846:	e0d0      	b.n	80059ea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005848:	4b6a      	ldr	r3, [pc, #424]	; (80059f4 <HAL_RCC_ClockConfig+0x1c0>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f003 0307 	and.w	r3, r3, #7
 8005850:	683a      	ldr	r2, [r7, #0]
 8005852:	429a      	cmp	r2, r3
 8005854:	d910      	bls.n	8005878 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005856:	4b67      	ldr	r3, [pc, #412]	; (80059f4 <HAL_RCC_ClockConfig+0x1c0>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f023 0207 	bic.w	r2, r3, #7
 800585e:	4965      	ldr	r1, [pc, #404]	; (80059f4 <HAL_RCC_ClockConfig+0x1c0>)
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	4313      	orrs	r3, r2
 8005864:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005866:	4b63      	ldr	r3, [pc, #396]	; (80059f4 <HAL_RCC_ClockConfig+0x1c0>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f003 0307 	and.w	r3, r3, #7
 800586e:	683a      	ldr	r2, [r7, #0]
 8005870:	429a      	cmp	r2, r3
 8005872:	d001      	beq.n	8005878 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005874:	2301      	movs	r3, #1
 8005876:	e0b8      	b.n	80059ea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f003 0302 	and.w	r3, r3, #2
 8005880:	2b00      	cmp	r3, #0
 8005882:	d020      	beq.n	80058c6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f003 0304 	and.w	r3, r3, #4
 800588c:	2b00      	cmp	r3, #0
 800588e:	d005      	beq.n	800589c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005890:	4b59      	ldr	r3, [pc, #356]	; (80059f8 <HAL_RCC_ClockConfig+0x1c4>)
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	4a58      	ldr	r2, [pc, #352]	; (80059f8 <HAL_RCC_ClockConfig+0x1c4>)
 8005896:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800589a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f003 0308 	and.w	r3, r3, #8
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d005      	beq.n	80058b4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80058a8:	4b53      	ldr	r3, [pc, #332]	; (80059f8 <HAL_RCC_ClockConfig+0x1c4>)
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	4a52      	ldr	r2, [pc, #328]	; (80059f8 <HAL_RCC_ClockConfig+0x1c4>)
 80058ae:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80058b2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058b4:	4b50      	ldr	r3, [pc, #320]	; (80059f8 <HAL_RCC_ClockConfig+0x1c4>)
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	494d      	ldr	r1, [pc, #308]	; (80059f8 <HAL_RCC_ClockConfig+0x1c4>)
 80058c2:	4313      	orrs	r3, r2
 80058c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f003 0301 	and.w	r3, r3, #1
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d040      	beq.n	8005954 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	2b01      	cmp	r3, #1
 80058d8:	d107      	bne.n	80058ea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058da:	4b47      	ldr	r3, [pc, #284]	; (80059f8 <HAL_RCC_ClockConfig+0x1c4>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d115      	bne.n	8005912 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	e07f      	b.n	80059ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	2b02      	cmp	r3, #2
 80058f0:	d107      	bne.n	8005902 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058f2:	4b41      	ldr	r3, [pc, #260]	; (80059f8 <HAL_RCC_ClockConfig+0x1c4>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d109      	bne.n	8005912 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058fe:	2301      	movs	r3, #1
 8005900:	e073      	b.n	80059ea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005902:	4b3d      	ldr	r3, [pc, #244]	; (80059f8 <HAL_RCC_ClockConfig+0x1c4>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f003 0302 	and.w	r3, r3, #2
 800590a:	2b00      	cmp	r3, #0
 800590c:	d101      	bne.n	8005912 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800590e:	2301      	movs	r3, #1
 8005910:	e06b      	b.n	80059ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005912:	4b39      	ldr	r3, [pc, #228]	; (80059f8 <HAL_RCC_ClockConfig+0x1c4>)
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	f023 0203 	bic.w	r2, r3, #3
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	4936      	ldr	r1, [pc, #216]	; (80059f8 <HAL_RCC_ClockConfig+0x1c4>)
 8005920:	4313      	orrs	r3, r2
 8005922:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005924:	f7fe fd98 	bl	8004458 <HAL_GetTick>
 8005928:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800592a:	e00a      	b.n	8005942 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800592c:	f7fe fd94 	bl	8004458 <HAL_GetTick>
 8005930:	4602      	mov	r2, r0
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	1ad3      	subs	r3, r2, r3
 8005936:	f241 3288 	movw	r2, #5000	; 0x1388
 800593a:	4293      	cmp	r3, r2
 800593c:	d901      	bls.n	8005942 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800593e:	2303      	movs	r3, #3
 8005940:	e053      	b.n	80059ea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005942:	4b2d      	ldr	r3, [pc, #180]	; (80059f8 <HAL_RCC_ClockConfig+0x1c4>)
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	f003 020c 	and.w	r2, r3, #12
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	009b      	lsls	r3, r3, #2
 8005950:	429a      	cmp	r2, r3
 8005952:	d1eb      	bne.n	800592c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005954:	4b27      	ldr	r3, [pc, #156]	; (80059f4 <HAL_RCC_ClockConfig+0x1c0>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f003 0307 	and.w	r3, r3, #7
 800595c:	683a      	ldr	r2, [r7, #0]
 800595e:	429a      	cmp	r2, r3
 8005960:	d210      	bcs.n	8005984 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005962:	4b24      	ldr	r3, [pc, #144]	; (80059f4 <HAL_RCC_ClockConfig+0x1c0>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f023 0207 	bic.w	r2, r3, #7
 800596a:	4922      	ldr	r1, [pc, #136]	; (80059f4 <HAL_RCC_ClockConfig+0x1c0>)
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	4313      	orrs	r3, r2
 8005970:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005972:	4b20      	ldr	r3, [pc, #128]	; (80059f4 <HAL_RCC_ClockConfig+0x1c0>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f003 0307 	and.w	r3, r3, #7
 800597a:	683a      	ldr	r2, [r7, #0]
 800597c:	429a      	cmp	r2, r3
 800597e:	d001      	beq.n	8005984 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005980:	2301      	movs	r3, #1
 8005982:	e032      	b.n	80059ea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f003 0304 	and.w	r3, r3, #4
 800598c:	2b00      	cmp	r3, #0
 800598e:	d008      	beq.n	80059a2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005990:	4b19      	ldr	r3, [pc, #100]	; (80059f8 <HAL_RCC_ClockConfig+0x1c4>)
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	68db      	ldr	r3, [r3, #12]
 800599c:	4916      	ldr	r1, [pc, #88]	; (80059f8 <HAL_RCC_ClockConfig+0x1c4>)
 800599e:	4313      	orrs	r3, r2
 80059a0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f003 0308 	and.w	r3, r3, #8
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d009      	beq.n	80059c2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80059ae:	4b12      	ldr	r3, [pc, #72]	; (80059f8 <HAL_RCC_ClockConfig+0x1c4>)
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	691b      	ldr	r3, [r3, #16]
 80059ba:	00db      	lsls	r3, r3, #3
 80059bc:	490e      	ldr	r1, [pc, #56]	; (80059f8 <HAL_RCC_ClockConfig+0x1c4>)
 80059be:	4313      	orrs	r3, r2
 80059c0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80059c2:	f000 f821 	bl	8005a08 <HAL_RCC_GetSysClockFreq>
 80059c6:	4602      	mov	r2, r0
 80059c8:	4b0b      	ldr	r3, [pc, #44]	; (80059f8 <HAL_RCC_ClockConfig+0x1c4>)
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	091b      	lsrs	r3, r3, #4
 80059ce:	f003 030f 	and.w	r3, r3, #15
 80059d2:	490a      	ldr	r1, [pc, #40]	; (80059fc <HAL_RCC_ClockConfig+0x1c8>)
 80059d4:	5ccb      	ldrb	r3, [r1, r3]
 80059d6:	fa22 f303 	lsr.w	r3, r2, r3
 80059da:	4a09      	ldr	r2, [pc, #36]	; (8005a00 <HAL_RCC_ClockConfig+0x1cc>)
 80059dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80059de:	4b09      	ldr	r3, [pc, #36]	; (8005a04 <HAL_RCC_ClockConfig+0x1d0>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4618      	mov	r0, r3
 80059e4:	f7fe fcf6 	bl	80043d4 <HAL_InitTick>

  return HAL_OK;
 80059e8:	2300      	movs	r3, #0
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3710      	adds	r7, #16
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}
 80059f2:	bf00      	nop
 80059f4:	40022000 	.word	0x40022000
 80059f8:	40021000 	.word	0x40021000
 80059fc:	0800c760 	.word	0x0800c760
 8005a00:	2000003c 	.word	0x2000003c
 8005a04:	20000040 	.word	0x20000040

08005a08 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b087      	sub	sp, #28
 8005a0c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	60fb      	str	r3, [r7, #12]
 8005a12:	2300      	movs	r3, #0
 8005a14:	60bb      	str	r3, [r7, #8]
 8005a16:	2300      	movs	r3, #0
 8005a18:	617b      	str	r3, [r7, #20]
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005a22:	4b1e      	ldr	r3, [pc, #120]	; (8005a9c <HAL_RCC_GetSysClockFreq+0x94>)
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f003 030c 	and.w	r3, r3, #12
 8005a2e:	2b04      	cmp	r3, #4
 8005a30:	d002      	beq.n	8005a38 <HAL_RCC_GetSysClockFreq+0x30>
 8005a32:	2b08      	cmp	r3, #8
 8005a34:	d003      	beq.n	8005a3e <HAL_RCC_GetSysClockFreq+0x36>
 8005a36:	e027      	b.n	8005a88 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005a38:	4b19      	ldr	r3, [pc, #100]	; (8005aa0 <HAL_RCC_GetSysClockFreq+0x98>)
 8005a3a:	613b      	str	r3, [r7, #16]
      break;
 8005a3c:	e027      	b.n	8005a8e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	0c9b      	lsrs	r3, r3, #18
 8005a42:	f003 030f 	and.w	r3, r3, #15
 8005a46:	4a17      	ldr	r2, [pc, #92]	; (8005aa4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005a48:	5cd3      	ldrb	r3, [r2, r3]
 8005a4a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d010      	beq.n	8005a78 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005a56:	4b11      	ldr	r3, [pc, #68]	; (8005a9c <HAL_RCC_GetSysClockFreq+0x94>)
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	0c5b      	lsrs	r3, r3, #17
 8005a5c:	f003 0301 	and.w	r3, r3, #1
 8005a60:	4a11      	ldr	r2, [pc, #68]	; (8005aa8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005a62:	5cd3      	ldrb	r3, [r2, r3]
 8005a64:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	4a0d      	ldr	r2, [pc, #52]	; (8005aa0 <HAL_RCC_GetSysClockFreq+0x98>)
 8005a6a:	fb03 f202 	mul.w	r2, r3, r2
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a74:	617b      	str	r3, [r7, #20]
 8005a76:	e004      	b.n	8005a82 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	4a0c      	ldr	r2, [pc, #48]	; (8005aac <HAL_RCC_GetSysClockFreq+0xa4>)
 8005a7c:	fb02 f303 	mul.w	r3, r2, r3
 8005a80:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	613b      	str	r3, [r7, #16]
      break;
 8005a86:	e002      	b.n	8005a8e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005a88:	4b05      	ldr	r3, [pc, #20]	; (8005aa0 <HAL_RCC_GetSysClockFreq+0x98>)
 8005a8a:	613b      	str	r3, [r7, #16]
      break;
 8005a8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005a8e:	693b      	ldr	r3, [r7, #16]
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	371c      	adds	r7, #28
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bc80      	pop	{r7}
 8005a98:	4770      	bx	lr
 8005a9a:	bf00      	nop
 8005a9c:	40021000 	.word	0x40021000
 8005aa0:	007a1200 	.word	0x007a1200
 8005aa4:	0800c778 	.word	0x0800c778
 8005aa8:	0800c788 	.word	0x0800c788
 8005aac:	003d0900 	.word	0x003d0900

08005ab0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ab4:	4b02      	ldr	r3, [pc, #8]	; (8005ac0 <HAL_RCC_GetHCLKFreq+0x10>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bc80      	pop	{r7}
 8005abe:	4770      	bx	lr
 8005ac0:	2000003c 	.word	0x2000003c

08005ac4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005ac8:	f7ff fff2 	bl	8005ab0 <HAL_RCC_GetHCLKFreq>
 8005acc:	4602      	mov	r2, r0
 8005ace:	4b05      	ldr	r3, [pc, #20]	; (8005ae4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	0a1b      	lsrs	r3, r3, #8
 8005ad4:	f003 0307 	and.w	r3, r3, #7
 8005ad8:	4903      	ldr	r1, [pc, #12]	; (8005ae8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ada:	5ccb      	ldrb	r3, [r1, r3]
 8005adc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	bd80      	pop	{r7, pc}
 8005ae4:	40021000 	.word	0x40021000
 8005ae8:	0800c770 	.word	0x0800c770

08005aec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005af0:	f7ff ffde 	bl	8005ab0 <HAL_RCC_GetHCLKFreq>
 8005af4:	4602      	mov	r2, r0
 8005af6:	4b05      	ldr	r3, [pc, #20]	; (8005b0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	0adb      	lsrs	r3, r3, #11
 8005afc:	f003 0307 	and.w	r3, r3, #7
 8005b00:	4903      	ldr	r1, [pc, #12]	; (8005b10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b02:	5ccb      	ldrb	r3, [r1, r3]
 8005b04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	bd80      	pop	{r7, pc}
 8005b0c:	40021000 	.word	0x40021000
 8005b10:	0800c770 	.word	0x0800c770

08005b14 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b085      	sub	sp, #20
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005b1c:	4b0a      	ldr	r3, [pc, #40]	; (8005b48 <RCC_Delay+0x34>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a0a      	ldr	r2, [pc, #40]	; (8005b4c <RCC_Delay+0x38>)
 8005b22:	fba2 2303 	umull	r2, r3, r2, r3
 8005b26:	0a5b      	lsrs	r3, r3, #9
 8005b28:	687a      	ldr	r2, [r7, #4]
 8005b2a:	fb02 f303 	mul.w	r3, r2, r3
 8005b2e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005b30:	bf00      	nop
  }
  while (Delay --);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	1e5a      	subs	r2, r3, #1
 8005b36:	60fa      	str	r2, [r7, #12]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d1f9      	bne.n	8005b30 <RCC_Delay+0x1c>
}
 8005b3c:	bf00      	nop
 8005b3e:	bf00      	nop
 8005b40:	3714      	adds	r7, #20
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bc80      	pop	{r7}
 8005b46:	4770      	bx	lr
 8005b48:	2000003c 	.word	0x2000003c
 8005b4c:	10624dd3 	.word	0x10624dd3

08005b50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b082      	sub	sp, #8
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d101      	bne.n	8005b62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b5e:	2301      	movs	r3, #1
 8005b60:	e041      	b.n	8005be6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b68:	b2db      	uxtb	r3, r3
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d106      	bne.n	8005b7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2200      	movs	r2, #0
 8005b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f7fd fe3a 	bl	80037f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2202      	movs	r2, #2
 8005b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681a      	ldr	r2, [r3, #0]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	3304      	adds	r3, #4
 8005b8c:	4619      	mov	r1, r3
 8005b8e:	4610      	mov	r0, r2
 8005b90:	f000 fd86 	bl	80066a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2201      	movs	r2, #1
 8005b98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2201      	movs	r2, #1
 8005bb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2201      	movs	r2, #1
 8005bd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2201      	movs	r2, #1
 8005be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005be4:	2300      	movs	r3, #0
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	3708      	adds	r7, #8
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}
	...

08005bf0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b085      	sub	sp, #20
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bfe:	b2db      	uxtb	r3, r3
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	d001      	beq.n	8005c08 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005c04:	2301      	movs	r3, #1
 8005c06:	e044      	b.n	8005c92 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2202      	movs	r2, #2
 8005c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	68da      	ldr	r2, [r3, #12]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f042 0201 	orr.w	r2, r2, #1
 8005c1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a1d      	ldr	r2, [pc, #116]	; (8005c9c <HAL_TIM_Base_Start_IT+0xac>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d018      	beq.n	8005c5c <HAL_TIM_Base_Start_IT+0x6c>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a1c      	ldr	r2, [pc, #112]	; (8005ca0 <HAL_TIM_Base_Start_IT+0xb0>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d013      	beq.n	8005c5c <HAL_TIM_Base_Start_IT+0x6c>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c3c:	d00e      	beq.n	8005c5c <HAL_TIM_Base_Start_IT+0x6c>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a18      	ldr	r2, [pc, #96]	; (8005ca4 <HAL_TIM_Base_Start_IT+0xb4>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d009      	beq.n	8005c5c <HAL_TIM_Base_Start_IT+0x6c>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a16      	ldr	r2, [pc, #88]	; (8005ca8 <HAL_TIM_Base_Start_IT+0xb8>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d004      	beq.n	8005c5c <HAL_TIM_Base_Start_IT+0x6c>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a15      	ldr	r2, [pc, #84]	; (8005cac <HAL_TIM_Base_Start_IT+0xbc>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d111      	bne.n	8005c80 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	689b      	ldr	r3, [r3, #8]
 8005c62:	f003 0307 	and.w	r3, r3, #7
 8005c66:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2b06      	cmp	r3, #6
 8005c6c:	d010      	beq.n	8005c90 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	681a      	ldr	r2, [r3, #0]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f042 0201 	orr.w	r2, r2, #1
 8005c7c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c7e:	e007      	b.n	8005c90 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	681a      	ldr	r2, [r3, #0]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f042 0201 	orr.w	r2, r2, #1
 8005c8e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005c90:	2300      	movs	r3, #0
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3714      	adds	r7, #20
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bc80      	pop	{r7}
 8005c9a:	4770      	bx	lr
 8005c9c:	40012c00 	.word	0x40012c00
 8005ca0:	40013400 	.word	0x40013400
 8005ca4:	40000400 	.word	0x40000400
 8005ca8:	40000800 	.word	0x40000800
 8005cac:	40000c00 	.word	0x40000c00

08005cb0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b082      	sub	sp, #8
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d101      	bne.n	8005cc2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	e041      	b.n	8005d46 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cc8:	b2db      	uxtb	r3, r3
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d106      	bne.n	8005cdc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f000 f839 	bl	8005d4e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2202      	movs	r2, #2
 8005ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681a      	ldr	r2, [r3, #0]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	3304      	adds	r3, #4
 8005cec:	4619      	mov	r1, r3
 8005cee:	4610      	mov	r0, r2
 8005cf0:	f000 fcd6 	bl	80066a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2201      	movs	r2, #1
 8005d00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2201      	movs	r2, #1
 8005d08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2201      	movs	r2, #1
 8005d10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2201      	movs	r2, #1
 8005d18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2201      	movs	r2, #1
 8005d20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2201      	movs	r2, #1
 8005d28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2201      	movs	r2, #1
 8005d30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2201      	movs	r2, #1
 8005d38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2201      	movs	r2, #1
 8005d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d44:	2300      	movs	r3, #0
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	3708      	adds	r7, #8
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}

08005d4e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005d4e:	b480      	push	{r7}
 8005d50:	b083      	sub	sp, #12
 8005d52:	af00      	add	r7, sp, #0
 8005d54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005d56:	bf00      	nop
 8005d58:	370c      	adds	r7, #12
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bc80      	pop	{r7}
 8005d5e:	4770      	bx	lr

08005d60 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b084      	sub	sp, #16
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
 8005d68:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d109      	bne.n	8005d84 <HAL_TIM_PWM_Start+0x24>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d76:	b2db      	uxtb	r3, r3
 8005d78:	2b01      	cmp	r3, #1
 8005d7a:	bf14      	ite	ne
 8005d7c:	2301      	movne	r3, #1
 8005d7e:	2300      	moveq	r3, #0
 8005d80:	b2db      	uxtb	r3, r3
 8005d82:	e022      	b.n	8005dca <HAL_TIM_PWM_Start+0x6a>
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	2b04      	cmp	r3, #4
 8005d88:	d109      	bne.n	8005d9e <HAL_TIM_PWM_Start+0x3e>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005d90:	b2db      	uxtb	r3, r3
 8005d92:	2b01      	cmp	r3, #1
 8005d94:	bf14      	ite	ne
 8005d96:	2301      	movne	r3, #1
 8005d98:	2300      	moveq	r3, #0
 8005d9a:	b2db      	uxtb	r3, r3
 8005d9c:	e015      	b.n	8005dca <HAL_TIM_PWM_Start+0x6a>
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	2b08      	cmp	r3, #8
 8005da2:	d109      	bne.n	8005db8 <HAL_TIM_PWM_Start+0x58>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005daa:	b2db      	uxtb	r3, r3
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	bf14      	ite	ne
 8005db0:	2301      	movne	r3, #1
 8005db2:	2300      	moveq	r3, #0
 8005db4:	b2db      	uxtb	r3, r3
 8005db6:	e008      	b.n	8005dca <HAL_TIM_PWM_Start+0x6a>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005dbe:	b2db      	uxtb	r3, r3
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	bf14      	ite	ne
 8005dc4:	2301      	movne	r3, #1
 8005dc6:	2300      	moveq	r3, #0
 8005dc8:	b2db      	uxtb	r3, r3
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d001      	beq.n	8005dd2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005dce:	2301      	movs	r3, #1
 8005dd0:	e072      	b.n	8005eb8 <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d104      	bne.n	8005de2 <HAL_TIM_PWM_Start+0x82>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2202      	movs	r2, #2
 8005ddc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005de0:	e013      	b.n	8005e0a <HAL_TIM_PWM_Start+0xaa>
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	2b04      	cmp	r3, #4
 8005de6:	d104      	bne.n	8005df2 <HAL_TIM_PWM_Start+0x92>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2202      	movs	r2, #2
 8005dec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005df0:	e00b      	b.n	8005e0a <HAL_TIM_PWM_Start+0xaa>
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	2b08      	cmp	r3, #8
 8005df6:	d104      	bne.n	8005e02 <HAL_TIM_PWM_Start+0xa2>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2202      	movs	r2, #2
 8005dfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e00:	e003      	b.n	8005e0a <HAL_TIM_PWM_Start+0xaa>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2202      	movs	r2, #2
 8005e06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	2201      	movs	r2, #1
 8005e10:	6839      	ldr	r1, [r7, #0]
 8005e12:	4618      	mov	r0, r3
 8005e14:	f000 ff00 	bl	8006c18 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a28      	ldr	r2, [pc, #160]	; (8005ec0 <HAL_TIM_PWM_Start+0x160>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d004      	beq.n	8005e2c <HAL_TIM_PWM_Start+0xcc>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a27      	ldr	r2, [pc, #156]	; (8005ec4 <HAL_TIM_PWM_Start+0x164>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d101      	bne.n	8005e30 <HAL_TIM_PWM_Start+0xd0>
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	e000      	b.n	8005e32 <HAL_TIM_PWM_Start+0xd2>
 8005e30:	2300      	movs	r3, #0
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d007      	beq.n	8005e46 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005e44:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a1d      	ldr	r2, [pc, #116]	; (8005ec0 <HAL_TIM_PWM_Start+0x160>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d018      	beq.n	8005e82 <HAL_TIM_PWM_Start+0x122>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a1b      	ldr	r2, [pc, #108]	; (8005ec4 <HAL_TIM_PWM_Start+0x164>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d013      	beq.n	8005e82 <HAL_TIM_PWM_Start+0x122>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e62:	d00e      	beq.n	8005e82 <HAL_TIM_PWM_Start+0x122>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a17      	ldr	r2, [pc, #92]	; (8005ec8 <HAL_TIM_PWM_Start+0x168>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d009      	beq.n	8005e82 <HAL_TIM_PWM_Start+0x122>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a16      	ldr	r2, [pc, #88]	; (8005ecc <HAL_TIM_PWM_Start+0x16c>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d004      	beq.n	8005e82 <HAL_TIM_PWM_Start+0x122>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a14      	ldr	r2, [pc, #80]	; (8005ed0 <HAL_TIM_PWM_Start+0x170>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d111      	bne.n	8005ea6 <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	f003 0307 	and.w	r3, r3, #7
 8005e8c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	2b06      	cmp	r3, #6
 8005e92:	d010      	beq.n	8005eb6 <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	681a      	ldr	r2, [r3, #0]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f042 0201 	orr.w	r2, r2, #1
 8005ea2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ea4:	e007      	b.n	8005eb6 <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	681a      	ldr	r2, [r3, #0]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f042 0201 	orr.w	r2, r2, #1
 8005eb4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005eb6:	2300      	movs	r3, #0
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	3710      	adds	r7, #16
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bd80      	pop	{r7, pc}
 8005ec0:	40012c00 	.word	0x40012c00
 8005ec4:	40013400 	.word	0x40013400
 8005ec8:	40000400 	.word	0x40000400
 8005ecc:	40000800 	.word	0x40000800
 8005ed0:	40000c00 	.word	0x40000c00

08005ed4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b086      	sub	sp, #24
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
 8005edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d101      	bne.n	8005ee8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	e093      	b.n	8006010 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005eee:	b2db      	uxtb	r3, r3
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d106      	bne.n	8005f02 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	f7fd fcaf 	bl	8003860 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2202      	movs	r2, #2
 8005f06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	689b      	ldr	r3, [r3, #8]
 8005f10:	687a      	ldr	r2, [r7, #4]
 8005f12:	6812      	ldr	r2, [r2, #0]
 8005f14:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f18:	f023 0307 	bic.w	r3, r3, #7
 8005f1c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681a      	ldr	r2, [r3, #0]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	3304      	adds	r3, #4
 8005f26:	4619      	mov	r1, r3
 8005f28:	4610      	mov	r0, r2
 8005f2a:	f000 fbb9 	bl	80066a0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	689b      	ldr	r3, [r3, #8]
 8005f34:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	699b      	ldr	r3, [r3, #24]
 8005f3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	6a1b      	ldr	r3, [r3, #32]
 8005f44:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	697a      	ldr	r2, [r7, #20]
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f56:	f023 0303 	bic.w	r3, r3, #3
 8005f5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	689a      	ldr	r2, [r3, #8]
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	699b      	ldr	r3, [r3, #24]
 8005f64:	021b      	lsls	r3, r3, #8
 8005f66:	4313      	orrs	r3, r2
 8005f68:	693a      	ldr	r2, [r7, #16]
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005f74:	f023 030c 	bic.w	r3, r3, #12
 8005f78:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005f80:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f84:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	68da      	ldr	r2, [r3, #12]
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	69db      	ldr	r3, [r3, #28]
 8005f8e:	021b      	lsls	r3, r3, #8
 8005f90:	4313      	orrs	r3, r2
 8005f92:	693a      	ldr	r2, [r7, #16]
 8005f94:	4313      	orrs	r3, r2
 8005f96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	691b      	ldr	r3, [r3, #16]
 8005f9c:	011a      	lsls	r2, r3, #4
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	6a1b      	ldr	r3, [r3, #32]
 8005fa2:	031b      	lsls	r3, r3, #12
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	693a      	ldr	r2, [r7, #16]
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005fb2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	685a      	ldr	r2, [r3, #4]
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	695b      	ldr	r3, [r3, #20]
 8005fbc:	011b      	lsls	r3, r3, #4
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	68fa      	ldr	r2, [r7, #12]
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	697a      	ldr	r2, [r7, #20]
 8005fcc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	693a      	ldr	r2, [r7, #16]
 8005fd4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	68fa      	ldr	r2, [r7, #12]
 8005fdc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2201      	movs	r2, #1
 8005fe2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2201      	movs	r2, #1
 8005fea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2201      	movs	r2, #1
 8005ff2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2201      	movs	r2, #1
 8005ffa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2201      	movs	r2, #1
 8006002:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2201      	movs	r2, #1
 800600a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800600e:	2300      	movs	r3, #0
}
 8006010:	4618      	mov	r0, r3
 8006012:	3718      	adds	r7, #24
 8006014:	46bd      	mov	sp, r7
 8006016:	bd80      	pop	{r7, pc}

08006018 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b084      	sub	sp, #16
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
 8006020:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006028:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006030:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006038:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006040:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d110      	bne.n	800606a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006048:	7bfb      	ldrb	r3, [r7, #15]
 800604a:	2b01      	cmp	r3, #1
 800604c:	d102      	bne.n	8006054 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800604e:	7b7b      	ldrb	r3, [r7, #13]
 8006050:	2b01      	cmp	r3, #1
 8006052:	d001      	beq.n	8006058 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006054:	2301      	movs	r3, #1
 8006056:	e069      	b.n	800612c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2202      	movs	r2, #2
 800605c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2202      	movs	r2, #2
 8006064:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006068:	e031      	b.n	80060ce <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	2b04      	cmp	r3, #4
 800606e:	d110      	bne.n	8006092 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006070:	7bbb      	ldrb	r3, [r7, #14]
 8006072:	2b01      	cmp	r3, #1
 8006074:	d102      	bne.n	800607c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006076:	7b3b      	ldrb	r3, [r7, #12]
 8006078:	2b01      	cmp	r3, #1
 800607a:	d001      	beq.n	8006080 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800607c:	2301      	movs	r3, #1
 800607e:	e055      	b.n	800612c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2202      	movs	r2, #2
 8006084:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2202      	movs	r2, #2
 800608c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006090:	e01d      	b.n	80060ce <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006092:	7bfb      	ldrb	r3, [r7, #15]
 8006094:	2b01      	cmp	r3, #1
 8006096:	d108      	bne.n	80060aa <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006098:	7bbb      	ldrb	r3, [r7, #14]
 800609a:	2b01      	cmp	r3, #1
 800609c:	d105      	bne.n	80060aa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800609e:	7b7b      	ldrb	r3, [r7, #13]
 80060a0:	2b01      	cmp	r3, #1
 80060a2:	d102      	bne.n	80060aa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80060a4:	7b3b      	ldrb	r3, [r7, #12]
 80060a6:	2b01      	cmp	r3, #1
 80060a8:	d001      	beq.n	80060ae <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80060aa:	2301      	movs	r3, #1
 80060ac:	e03e      	b.n	800612c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2202      	movs	r2, #2
 80060b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2202      	movs	r2, #2
 80060ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2202      	movs	r2, #2
 80060c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2202      	movs	r2, #2
 80060ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d003      	beq.n	80060dc <HAL_TIM_Encoder_Start+0xc4>
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	2b04      	cmp	r3, #4
 80060d8:	d008      	beq.n	80060ec <HAL_TIM_Encoder_Start+0xd4>
 80060da:	e00f      	b.n	80060fc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	2201      	movs	r2, #1
 80060e2:	2100      	movs	r1, #0
 80060e4:	4618      	mov	r0, r3
 80060e6:	f000 fd97 	bl	8006c18 <TIM_CCxChannelCmd>
      break;
 80060ea:	e016      	b.n	800611a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	2201      	movs	r2, #1
 80060f2:	2104      	movs	r1, #4
 80060f4:	4618      	mov	r0, r3
 80060f6:	f000 fd8f 	bl	8006c18 <TIM_CCxChannelCmd>
      break;
 80060fa:	e00e      	b.n	800611a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	2201      	movs	r2, #1
 8006102:	2100      	movs	r1, #0
 8006104:	4618      	mov	r0, r3
 8006106:	f000 fd87 	bl	8006c18 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	2201      	movs	r2, #1
 8006110:	2104      	movs	r1, #4
 8006112:	4618      	mov	r0, r3
 8006114:	f000 fd80 	bl	8006c18 <TIM_CCxChannelCmd>
      break;
 8006118:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	681a      	ldr	r2, [r3, #0]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f042 0201 	orr.w	r2, r2, #1
 8006128:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800612a:	2300      	movs	r3, #0
}
 800612c:	4618      	mov	r0, r3
 800612e:	3710      	adds	r7, #16
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}

08006134 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b082      	sub	sp, #8
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	691b      	ldr	r3, [r3, #16]
 8006142:	f003 0302 	and.w	r3, r3, #2
 8006146:	2b02      	cmp	r3, #2
 8006148:	d122      	bne.n	8006190 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	68db      	ldr	r3, [r3, #12]
 8006150:	f003 0302 	and.w	r3, r3, #2
 8006154:	2b02      	cmp	r3, #2
 8006156:	d11b      	bne.n	8006190 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f06f 0202 	mvn.w	r2, #2
 8006160:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2201      	movs	r2, #1
 8006166:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	699b      	ldr	r3, [r3, #24]
 800616e:	f003 0303 	and.w	r3, r3, #3
 8006172:	2b00      	cmp	r3, #0
 8006174:	d003      	beq.n	800617e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f000 fa76 	bl	8006668 <HAL_TIM_IC_CaptureCallback>
 800617c:	e005      	b.n	800618a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f000 fa69 	bl	8006656 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006184:	6878      	ldr	r0, [r7, #4]
 8006186:	f000 fa78 	bl	800667a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2200      	movs	r2, #0
 800618e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	691b      	ldr	r3, [r3, #16]
 8006196:	f003 0304 	and.w	r3, r3, #4
 800619a:	2b04      	cmp	r3, #4
 800619c:	d122      	bne.n	80061e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	68db      	ldr	r3, [r3, #12]
 80061a4:	f003 0304 	and.w	r3, r3, #4
 80061a8:	2b04      	cmp	r3, #4
 80061aa:	d11b      	bne.n	80061e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f06f 0204 	mvn.w	r2, #4
 80061b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2202      	movs	r2, #2
 80061ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	699b      	ldr	r3, [r3, #24]
 80061c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d003      	beq.n	80061d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f000 fa4c 	bl	8006668 <HAL_TIM_IC_CaptureCallback>
 80061d0:	e005      	b.n	80061de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f000 fa3f 	bl	8006656 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061d8:	6878      	ldr	r0, [r7, #4]
 80061da:	f000 fa4e 	bl	800667a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2200      	movs	r2, #0
 80061e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	691b      	ldr	r3, [r3, #16]
 80061ea:	f003 0308 	and.w	r3, r3, #8
 80061ee:	2b08      	cmp	r3, #8
 80061f0:	d122      	bne.n	8006238 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	68db      	ldr	r3, [r3, #12]
 80061f8:	f003 0308 	and.w	r3, r3, #8
 80061fc:	2b08      	cmp	r3, #8
 80061fe:	d11b      	bne.n	8006238 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f06f 0208 	mvn.w	r2, #8
 8006208:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2204      	movs	r2, #4
 800620e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	69db      	ldr	r3, [r3, #28]
 8006216:	f003 0303 	and.w	r3, r3, #3
 800621a:	2b00      	cmp	r3, #0
 800621c:	d003      	beq.n	8006226 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f000 fa22 	bl	8006668 <HAL_TIM_IC_CaptureCallback>
 8006224:	e005      	b.n	8006232 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f000 fa15 	bl	8006656 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	f000 fa24 	bl	800667a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2200      	movs	r2, #0
 8006236:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	691b      	ldr	r3, [r3, #16]
 800623e:	f003 0310 	and.w	r3, r3, #16
 8006242:	2b10      	cmp	r3, #16
 8006244:	d122      	bne.n	800628c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	68db      	ldr	r3, [r3, #12]
 800624c:	f003 0310 	and.w	r3, r3, #16
 8006250:	2b10      	cmp	r3, #16
 8006252:	d11b      	bne.n	800628c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f06f 0210 	mvn.w	r2, #16
 800625c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2208      	movs	r2, #8
 8006262:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	69db      	ldr	r3, [r3, #28]
 800626a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800626e:	2b00      	cmp	r3, #0
 8006270:	d003      	beq.n	800627a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f000 f9f8 	bl	8006668 <HAL_TIM_IC_CaptureCallback>
 8006278:	e005      	b.n	8006286 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f000 f9eb 	bl	8006656 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	f000 f9fa 	bl	800667a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2200      	movs	r2, #0
 800628a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	691b      	ldr	r3, [r3, #16]
 8006292:	f003 0301 	and.w	r3, r3, #1
 8006296:	2b01      	cmp	r3, #1
 8006298:	d10e      	bne.n	80062b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	68db      	ldr	r3, [r3, #12]
 80062a0:	f003 0301 	and.w	r3, r3, #1
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	d107      	bne.n	80062b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f06f 0201 	mvn.w	r2, #1
 80062b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f7fb fe00 	bl	8001eb8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	691b      	ldr	r3, [r3, #16]
 80062be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062c2:	2b80      	cmp	r3, #128	; 0x80
 80062c4:	d10e      	bne.n	80062e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	68db      	ldr	r3, [r3, #12]
 80062cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062d0:	2b80      	cmp	r3, #128	; 0x80
 80062d2:	d107      	bne.n	80062e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80062dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f000 fd84 	bl	8006dec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	691b      	ldr	r3, [r3, #16]
 80062ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062ee:	2b40      	cmp	r3, #64	; 0x40
 80062f0:	d10e      	bne.n	8006310 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	68db      	ldr	r3, [r3, #12]
 80062f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062fc:	2b40      	cmp	r3, #64	; 0x40
 80062fe:	d107      	bne.n	8006310 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006308:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	f000 f9be 	bl	800668c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	691b      	ldr	r3, [r3, #16]
 8006316:	f003 0320 	and.w	r3, r3, #32
 800631a:	2b20      	cmp	r3, #32
 800631c:	d10e      	bne.n	800633c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	68db      	ldr	r3, [r3, #12]
 8006324:	f003 0320 	and.w	r3, r3, #32
 8006328:	2b20      	cmp	r3, #32
 800632a:	d107      	bne.n	800633c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f06f 0220 	mvn.w	r2, #32
 8006334:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f000 fd4f 	bl	8006dda <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800633c:	bf00      	nop
 800633e:	3708      	adds	r7, #8
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}

08006344 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b086      	sub	sp, #24
 8006348:	af00      	add	r7, sp, #0
 800634a:	60f8      	str	r0, [r7, #12]
 800634c:	60b9      	str	r1, [r7, #8]
 800634e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006350:	2300      	movs	r3, #0
 8006352:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800635a:	2b01      	cmp	r3, #1
 800635c:	d101      	bne.n	8006362 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800635e:	2302      	movs	r3, #2
 8006360:	e0ae      	b.n	80064c0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	2201      	movs	r2, #1
 8006366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2b0c      	cmp	r3, #12
 800636e:	f200 809f 	bhi.w	80064b0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006372:	a201      	add	r2, pc, #4	; (adr r2, 8006378 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006378:	080063ad 	.word	0x080063ad
 800637c:	080064b1 	.word	0x080064b1
 8006380:	080064b1 	.word	0x080064b1
 8006384:	080064b1 	.word	0x080064b1
 8006388:	080063ed 	.word	0x080063ed
 800638c:	080064b1 	.word	0x080064b1
 8006390:	080064b1 	.word	0x080064b1
 8006394:	080064b1 	.word	0x080064b1
 8006398:	0800642f 	.word	0x0800642f
 800639c:	080064b1 	.word	0x080064b1
 80063a0:	080064b1 	.word	0x080064b1
 80063a4:	080064b1 	.word	0x080064b1
 80063a8:	0800646f 	.word	0x0800646f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	68b9      	ldr	r1, [r7, #8]
 80063b2:	4618      	mov	r0, r3
 80063b4:	f000 f9ee 	bl	8006794 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	699a      	ldr	r2, [r3, #24]
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f042 0208 	orr.w	r2, r2, #8
 80063c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	699a      	ldr	r2, [r3, #24]
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f022 0204 	bic.w	r2, r2, #4
 80063d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	6999      	ldr	r1, [r3, #24]
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	691a      	ldr	r2, [r3, #16]
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	430a      	orrs	r2, r1
 80063e8:	619a      	str	r2, [r3, #24]
      break;
 80063ea:	e064      	b.n	80064b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	68b9      	ldr	r1, [r7, #8]
 80063f2:	4618      	mov	r0, r3
 80063f4:	f000 fa3e 	bl	8006874 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	699a      	ldr	r2, [r3, #24]
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006406:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	699a      	ldr	r2, [r3, #24]
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006416:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	6999      	ldr	r1, [r3, #24]
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	691b      	ldr	r3, [r3, #16]
 8006422:	021a      	lsls	r2, r3, #8
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	430a      	orrs	r2, r1
 800642a:	619a      	str	r2, [r3, #24]
      break;
 800642c:	e043      	b.n	80064b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	68b9      	ldr	r1, [r7, #8]
 8006434:	4618      	mov	r0, r3
 8006436:	f000 fa91 	bl	800695c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	69da      	ldr	r2, [r3, #28]
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f042 0208 	orr.w	r2, r2, #8
 8006448:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	69da      	ldr	r2, [r3, #28]
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f022 0204 	bic.w	r2, r2, #4
 8006458:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	69d9      	ldr	r1, [r3, #28]
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	691a      	ldr	r2, [r3, #16]
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	430a      	orrs	r2, r1
 800646a:	61da      	str	r2, [r3, #28]
      break;
 800646c:	e023      	b.n	80064b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	68b9      	ldr	r1, [r7, #8]
 8006474:	4618      	mov	r0, r3
 8006476:	f000 fae5 	bl	8006a44 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	69da      	ldr	r2, [r3, #28]
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006488:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	69da      	ldr	r2, [r3, #28]
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006498:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	69d9      	ldr	r1, [r3, #28]
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	691b      	ldr	r3, [r3, #16]
 80064a4:	021a      	lsls	r2, r3, #8
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	430a      	orrs	r2, r1
 80064ac:	61da      	str	r2, [r3, #28]
      break;
 80064ae:	e002      	b.n	80064b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80064b0:	2301      	movs	r3, #1
 80064b2:	75fb      	strb	r3, [r7, #23]
      break;
 80064b4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	2200      	movs	r2, #0
 80064ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80064be:	7dfb      	ldrb	r3, [r7, #23]
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	3718      	adds	r7, #24
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bd80      	pop	{r7, pc}

080064c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b084      	sub	sp, #16
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
 80064d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80064d2:	2300      	movs	r3, #0
 80064d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064dc:	2b01      	cmp	r3, #1
 80064de:	d101      	bne.n	80064e4 <HAL_TIM_ConfigClockSource+0x1c>
 80064e0:	2302      	movs	r3, #2
 80064e2:	e0b4      	b.n	800664e <HAL_TIM_ConfigClockSource+0x186>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2201      	movs	r2, #1
 80064e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2202      	movs	r2, #2
 80064f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	689b      	ldr	r3, [r3, #8]
 80064fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006502:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800650a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	68ba      	ldr	r2, [r7, #8]
 8006512:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800651c:	d03e      	beq.n	800659c <HAL_TIM_ConfigClockSource+0xd4>
 800651e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006522:	f200 8087 	bhi.w	8006634 <HAL_TIM_ConfigClockSource+0x16c>
 8006526:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800652a:	f000 8086 	beq.w	800663a <HAL_TIM_ConfigClockSource+0x172>
 800652e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006532:	d87f      	bhi.n	8006634 <HAL_TIM_ConfigClockSource+0x16c>
 8006534:	2b70      	cmp	r3, #112	; 0x70
 8006536:	d01a      	beq.n	800656e <HAL_TIM_ConfigClockSource+0xa6>
 8006538:	2b70      	cmp	r3, #112	; 0x70
 800653a:	d87b      	bhi.n	8006634 <HAL_TIM_ConfigClockSource+0x16c>
 800653c:	2b60      	cmp	r3, #96	; 0x60
 800653e:	d050      	beq.n	80065e2 <HAL_TIM_ConfigClockSource+0x11a>
 8006540:	2b60      	cmp	r3, #96	; 0x60
 8006542:	d877      	bhi.n	8006634 <HAL_TIM_ConfigClockSource+0x16c>
 8006544:	2b50      	cmp	r3, #80	; 0x50
 8006546:	d03c      	beq.n	80065c2 <HAL_TIM_ConfigClockSource+0xfa>
 8006548:	2b50      	cmp	r3, #80	; 0x50
 800654a:	d873      	bhi.n	8006634 <HAL_TIM_ConfigClockSource+0x16c>
 800654c:	2b40      	cmp	r3, #64	; 0x40
 800654e:	d058      	beq.n	8006602 <HAL_TIM_ConfigClockSource+0x13a>
 8006550:	2b40      	cmp	r3, #64	; 0x40
 8006552:	d86f      	bhi.n	8006634 <HAL_TIM_ConfigClockSource+0x16c>
 8006554:	2b30      	cmp	r3, #48	; 0x30
 8006556:	d064      	beq.n	8006622 <HAL_TIM_ConfigClockSource+0x15a>
 8006558:	2b30      	cmp	r3, #48	; 0x30
 800655a:	d86b      	bhi.n	8006634 <HAL_TIM_ConfigClockSource+0x16c>
 800655c:	2b20      	cmp	r3, #32
 800655e:	d060      	beq.n	8006622 <HAL_TIM_ConfigClockSource+0x15a>
 8006560:	2b20      	cmp	r3, #32
 8006562:	d867      	bhi.n	8006634 <HAL_TIM_ConfigClockSource+0x16c>
 8006564:	2b00      	cmp	r3, #0
 8006566:	d05c      	beq.n	8006622 <HAL_TIM_ConfigClockSource+0x15a>
 8006568:	2b10      	cmp	r3, #16
 800656a:	d05a      	beq.n	8006622 <HAL_TIM_ConfigClockSource+0x15a>
 800656c:	e062      	b.n	8006634 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6818      	ldr	r0, [r3, #0]
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	6899      	ldr	r1, [r3, #8]
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	685a      	ldr	r2, [r3, #4]
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	68db      	ldr	r3, [r3, #12]
 800657e:	f000 fb2c 	bl	8006bda <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	689b      	ldr	r3, [r3, #8]
 8006588:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006590:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	68ba      	ldr	r2, [r7, #8]
 8006598:	609a      	str	r2, [r3, #8]
      break;
 800659a:	e04f      	b.n	800663c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6818      	ldr	r0, [r3, #0]
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	6899      	ldr	r1, [r3, #8]
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	685a      	ldr	r2, [r3, #4]
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	68db      	ldr	r3, [r3, #12]
 80065ac:	f000 fb15 	bl	8006bda <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	689a      	ldr	r2, [r3, #8]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80065be:	609a      	str	r2, [r3, #8]
      break;
 80065c0:	e03c      	b.n	800663c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6818      	ldr	r0, [r3, #0]
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	6859      	ldr	r1, [r3, #4]
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	68db      	ldr	r3, [r3, #12]
 80065ce:	461a      	mov	r2, r3
 80065d0:	f000 fa8c 	bl	8006aec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	2150      	movs	r1, #80	; 0x50
 80065da:	4618      	mov	r0, r3
 80065dc:	f000 fae3 	bl	8006ba6 <TIM_ITRx_SetConfig>
      break;
 80065e0:	e02c      	b.n	800663c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6818      	ldr	r0, [r3, #0]
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	6859      	ldr	r1, [r3, #4]
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	68db      	ldr	r3, [r3, #12]
 80065ee:	461a      	mov	r2, r3
 80065f0:	f000 faaa 	bl	8006b48 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	2160      	movs	r1, #96	; 0x60
 80065fa:	4618      	mov	r0, r3
 80065fc:	f000 fad3 	bl	8006ba6 <TIM_ITRx_SetConfig>
      break;
 8006600:	e01c      	b.n	800663c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6818      	ldr	r0, [r3, #0]
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	6859      	ldr	r1, [r3, #4]
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	68db      	ldr	r3, [r3, #12]
 800660e:	461a      	mov	r2, r3
 8006610:	f000 fa6c 	bl	8006aec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	2140      	movs	r1, #64	; 0x40
 800661a:	4618      	mov	r0, r3
 800661c:	f000 fac3 	bl	8006ba6 <TIM_ITRx_SetConfig>
      break;
 8006620:	e00c      	b.n	800663c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681a      	ldr	r2, [r3, #0]
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4619      	mov	r1, r3
 800662c:	4610      	mov	r0, r2
 800662e:	f000 faba 	bl	8006ba6 <TIM_ITRx_SetConfig>
      break;
 8006632:	e003      	b.n	800663c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006634:	2301      	movs	r3, #1
 8006636:	73fb      	strb	r3, [r7, #15]
      break;
 8006638:	e000      	b.n	800663c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800663a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2201      	movs	r2, #1
 8006640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2200      	movs	r2, #0
 8006648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800664c:	7bfb      	ldrb	r3, [r7, #15]
}
 800664e:	4618      	mov	r0, r3
 8006650:	3710      	adds	r7, #16
 8006652:	46bd      	mov	sp, r7
 8006654:	bd80      	pop	{r7, pc}

08006656 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006656:	b480      	push	{r7}
 8006658:	b083      	sub	sp, #12
 800665a:	af00      	add	r7, sp, #0
 800665c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800665e:	bf00      	nop
 8006660:	370c      	adds	r7, #12
 8006662:	46bd      	mov	sp, r7
 8006664:	bc80      	pop	{r7}
 8006666:	4770      	bx	lr

08006668 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006668:	b480      	push	{r7}
 800666a:	b083      	sub	sp, #12
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006670:	bf00      	nop
 8006672:	370c      	adds	r7, #12
 8006674:	46bd      	mov	sp, r7
 8006676:	bc80      	pop	{r7}
 8006678:	4770      	bx	lr

0800667a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800667a:	b480      	push	{r7}
 800667c:	b083      	sub	sp, #12
 800667e:	af00      	add	r7, sp, #0
 8006680:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006682:	bf00      	nop
 8006684:	370c      	adds	r7, #12
 8006686:	46bd      	mov	sp, r7
 8006688:	bc80      	pop	{r7}
 800668a:	4770      	bx	lr

0800668c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800668c:	b480      	push	{r7}
 800668e:	b083      	sub	sp, #12
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006694:	bf00      	nop
 8006696:	370c      	adds	r7, #12
 8006698:	46bd      	mov	sp, r7
 800669a:	bc80      	pop	{r7}
 800669c:	4770      	bx	lr
	...

080066a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b085      	sub	sp, #20
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
 80066a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	4a33      	ldr	r2, [pc, #204]	; (8006780 <TIM_Base_SetConfig+0xe0>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d013      	beq.n	80066e0 <TIM_Base_SetConfig+0x40>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	4a32      	ldr	r2, [pc, #200]	; (8006784 <TIM_Base_SetConfig+0xe4>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d00f      	beq.n	80066e0 <TIM_Base_SetConfig+0x40>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066c6:	d00b      	beq.n	80066e0 <TIM_Base_SetConfig+0x40>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	4a2f      	ldr	r2, [pc, #188]	; (8006788 <TIM_Base_SetConfig+0xe8>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d007      	beq.n	80066e0 <TIM_Base_SetConfig+0x40>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	4a2e      	ldr	r2, [pc, #184]	; (800678c <TIM_Base_SetConfig+0xec>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d003      	beq.n	80066e0 <TIM_Base_SetConfig+0x40>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	4a2d      	ldr	r2, [pc, #180]	; (8006790 <TIM_Base_SetConfig+0xf0>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d108      	bne.n	80066f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	68fa      	ldr	r2, [r7, #12]
 80066ee:	4313      	orrs	r3, r2
 80066f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	4a22      	ldr	r2, [pc, #136]	; (8006780 <TIM_Base_SetConfig+0xe0>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d013      	beq.n	8006722 <TIM_Base_SetConfig+0x82>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	4a21      	ldr	r2, [pc, #132]	; (8006784 <TIM_Base_SetConfig+0xe4>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d00f      	beq.n	8006722 <TIM_Base_SetConfig+0x82>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006708:	d00b      	beq.n	8006722 <TIM_Base_SetConfig+0x82>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	4a1e      	ldr	r2, [pc, #120]	; (8006788 <TIM_Base_SetConfig+0xe8>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d007      	beq.n	8006722 <TIM_Base_SetConfig+0x82>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	4a1d      	ldr	r2, [pc, #116]	; (800678c <TIM_Base_SetConfig+0xec>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d003      	beq.n	8006722 <TIM_Base_SetConfig+0x82>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	4a1c      	ldr	r2, [pc, #112]	; (8006790 <TIM_Base_SetConfig+0xf0>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d108      	bne.n	8006734 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006728:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	68db      	ldr	r3, [r3, #12]
 800672e:	68fa      	ldr	r2, [r7, #12]
 8006730:	4313      	orrs	r3, r2
 8006732:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	695b      	ldr	r3, [r3, #20]
 800673e:	4313      	orrs	r3, r2
 8006740:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	68fa      	ldr	r2, [r7, #12]
 8006746:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	689a      	ldr	r2, [r3, #8]
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	681a      	ldr	r2, [r3, #0]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	4a09      	ldr	r2, [pc, #36]	; (8006780 <TIM_Base_SetConfig+0xe0>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d003      	beq.n	8006768 <TIM_Base_SetConfig+0xc8>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	4a08      	ldr	r2, [pc, #32]	; (8006784 <TIM_Base_SetConfig+0xe4>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d103      	bne.n	8006770 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	691a      	ldr	r2, [r3, #16]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2201      	movs	r2, #1
 8006774:	615a      	str	r2, [r3, #20]
}
 8006776:	bf00      	nop
 8006778:	3714      	adds	r7, #20
 800677a:	46bd      	mov	sp, r7
 800677c:	bc80      	pop	{r7}
 800677e:	4770      	bx	lr
 8006780:	40012c00 	.word	0x40012c00
 8006784:	40013400 	.word	0x40013400
 8006788:	40000400 	.word	0x40000400
 800678c:	40000800 	.word	0x40000800
 8006790:	40000c00 	.word	0x40000c00

08006794 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006794:	b480      	push	{r7}
 8006796:	b087      	sub	sp, #28
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
 800679c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6a1b      	ldr	r3, [r3, #32]
 80067a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6a1b      	ldr	r3, [r3, #32]
 80067a8:	f023 0201 	bic.w	r2, r3, #1
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	699b      	ldr	r3, [r3, #24]
 80067ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	f023 0303 	bic.w	r3, r3, #3
 80067ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	68fa      	ldr	r2, [r7, #12]
 80067d2:	4313      	orrs	r3, r2
 80067d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	f023 0302 	bic.w	r3, r3, #2
 80067dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	689b      	ldr	r3, [r3, #8]
 80067e2:	697a      	ldr	r2, [r7, #20]
 80067e4:	4313      	orrs	r3, r2
 80067e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	4a20      	ldr	r2, [pc, #128]	; (800686c <TIM_OC1_SetConfig+0xd8>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d003      	beq.n	80067f8 <TIM_OC1_SetConfig+0x64>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	4a1f      	ldr	r2, [pc, #124]	; (8006870 <TIM_OC1_SetConfig+0xdc>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d10c      	bne.n	8006812 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	f023 0308 	bic.w	r3, r3, #8
 80067fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	68db      	ldr	r3, [r3, #12]
 8006804:	697a      	ldr	r2, [r7, #20]
 8006806:	4313      	orrs	r3, r2
 8006808:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	f023 0304 	bic.w	r3, r3, #4
 8006810:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	4a15      	ldr	r2, [pc, #84]	; (800686c <TIM_OC1_SetConfig+0xd8>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d003      	beq.n	8006822 <TIM_OC1_SetConfig+0x8e>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	4a14      	ldr	r2, [pc, #80]	; (8006870 <TIM_OC1_SetConfig+0xdc>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d111      	bne.n	8006846 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006828:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800682a:	693b      	ldr	r3, [r7, #16]
 800682c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006830:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	695b      	ldr	r3, [r3, #20]
 8006836:	693a      	ldr	r2, [r7, #16]
 8006838:	4313      	orrs	r3, r2
 800683a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	699b      	ldr	r3, [r3, #24]
 8006840:	693a      	ldr	r2, [r7, #16]
 8006842:	4313      	orrs	r3, r2
 8006844:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	693a      	ldr	r2, [r7, #16]
 800684a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	68fa      	ldr	r2, [r7, #12]
 8006850:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	685a      	ldr	r2, [r3, #4]
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	697a      	ldr	r2, [r7, #20]
 800685e:	621a      	str	r2, [r3, #32]
}
 8006860:	bf00      	nop
 8006862:	371c      	adds	r7, #28
 8006864:	46bd      	mov	sp, r7
 8006866:	bc80      	pop	{r7}
 8006868:	4770      	bx	lr
 800686a:	bf00      	nop
 800686c:	40012c00 	.word	0x40012c00
 8006870:	40013400 	.word	0x40013400

08006874 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006874:	b480      	push	{r7}
 8006876:	b087      	sub	sp, #28
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
 800687c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6a1b      	ldr	r3, [r3, #32]
 8006882:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6a1b      	ldr	r3, [r3, #32]
 8006888:	f023 0210 	bic.w	r2, r3, #16
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	685b      	ldr	r3, [r3, #4]
 8006894:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	699b      	ldr	r3, [r3, #24]
 800689a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	021b      	lsls	r3, r3, #8
 80068b2:	68fa      	ldr	r2, [r7, #12]
 80068b4:	4313      	orrs	r3, r2
 80068b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	f023 0320 	bic.w	r3, r3, #32
 80068be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	689b      	ldr	r3, [r3, #8]
 80068c4:	011b      	lsls	r3, r3, #4
 80068c6:	697a      	ldr	r2, [r7, #20]
 80068c8:	4313      	orrs	r3, r2
 80068ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	4a21      	ldr	r2, [pc, #132]	; (8006954 <TIM_OC2_SetConfig+0xe0>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d003      	beq.n	80068dc <TIM_OC2_SetConfig+0x68>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	4a20      	ldr	r2, [pc, #128]	; (8006958 <TIM_OC2_SetConfig+0xe4>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d10d      	bne.n	80068f8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80068e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	68db      	ldr	r3, [r3, #12]
 80068e8:	011b      	lsls	r3, r3, #4
 80068ea:	697a      	ldr	r2, [r7, #20]
 80068ec:	4313      	orrs	r3, r2
 80068ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068f6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	4a16      	ldr	r2, [pc, #88]	; (8006954 <TIM_OC2_SetConfig+0xe0>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d003      	beq.n	8006908 <TIM_OC2_SetConfig+0x94>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	4a15      	ldr	r2, [pc, #84]	; (8006958 <TIM_OC2_SetConfig+0xe4>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d113      	bne.n	8006930 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006908:	693b      	ldr	r3, [r7, #16]
 800690a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800690e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006916:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	695b      	ldr	r3, [r3, #20]
 800691c:	009b      	lsls	r3, r3, #2
 800691e:	693a      	ldr	r2, [r7, #16]
 8006920:	4313      	orrs	r3, r2
 8006922:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	699b      	ldr	r3, [r3, #24]
 8006928:	009b      	lsls	r3, r3, #2
 800692a:	693a      	ldr	r2, [r7, #16]
 800692c:	4313      	orrs	r3, r2
 800692e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	693a      	ldr	r2, [r7, #16]
 8006934:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	68fa      	ldr	r2, [r7, #12]
 800693a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	685a      	ldr	r2, [r3, #4]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	697a      	ldr	r2, [r7, #20]
 8006948:	621a      	str	r2, [r3, #32]
}
 800694a:	bf00      	nop
 800694c:	371c      	adds	r7, #28
 800694e:	46bd      	mov	sp, r7
 8006950:	bc80      	pop	{r7}
 8006952:	4770      	bx	lr
 8006954:	40012c00 	.word	0x40012c00
 8006958:	40013400 	.word	0x40013400

0800695c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800695c:	b480      	push	{r7}
 800695e:	b087      	sub	sp, #28
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
 8006964:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6a1b      	ldr	r3, [r3, #32]
 800696a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6a1b      	ldr	r3, [r3, #32]
 8006970:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	685b      	ldr	r3, [r3, #4]
 800697c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	69db      	ldr	r3, [r3, #28]
 8006982:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800698a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	f023 0303 	bic.w	r3, r3, #3
 8006992:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	68fa      	ldr	r2, [r7, #12]
 800699a:	4313      	orrs	r3, r2
 800699c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80069a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	689b      	ldr	r3, [r3, #8]
 80069aa:	021b      	lsls	r3, r3, #8
 80069ac:	697a      	ldr	r2, [r7, #20]
 80069ae:	4313      	orrs	r3, r2
 80069b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	4a21      	ldr	r2, [pc, #132]	; (8006a3c <TIM_OC3_SetConfig+0xe0>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d003      	beq.n	80069c2 <TIM_OC3_SetConfig+0x66>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	4a20      	ldr	r2, [pc, #128]	; (8006a40 <TIM_OC3_SetConfig+0xe4>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d10d      	bne.n	80069de <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80069c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	68db      	ldr	r3, [r3, #12]
 80069ce:	021b      	lsls	r3, r3, #8
 80069d0:	697a      	ldr	r2, [r7, #20]
 80069d2:	4313      	orrs	r3, r2
 80069d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80069dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	4a16      	ldr	r2, [pc, #88]	; (8006a3c <TIM_OC3_SetConfig+0xe0>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d003      	beq.n	80069ee <TIM_OC3_SetConfig+0x92>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	4a15      	ldr	r2, [pc, #84]	; (8006a40 <TIM_OC3_SetConfig+0xe4>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d113      	bne.n	8006a16 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80069ee:	693b      	ldr	r3, [r7, #16]
 80069f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80069f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80069fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	695b      	ldr	r3, [r3, #20]
 8006a02:	011b      	lsls	r3, r3, #4
 8006a04:	693a      	ldr	r2, [r7, #16]
 8006a06:	4313      	orrs	r3, r2
 8006a08:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	699b      	ldr	r3, [r3, #24]
 8006a0e:	011b      	lsls	r3, r3, #4
 8006a10:	693a      	ldr	r2, [r7, #16]
 8006a12:	4313      	orrs	r3, r2
 8006a14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	693a      	ldr	r2, [r7, #16]
 8006a1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	68fa      	ldr	r2, [r7, #12]
 8006a20:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	685a      	ldr	r2, [r3, #4]
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	697a      	ldr	r2, [r7, #20]
 8006a2e:	621a      	str	r2, [r3, #32]
}
 8006a30:	bf00      	nop
 8006a32:	371c      	adds	r7, #28
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bc80      	pop	{r7}
 8006a38:	4770      	bx	lr
 8006a3a:	bf00      	nop
 8006a3c:	40012c00 	.word	0x40012c00
 8006a40:	40013400 	.word	0x40013400

08006a44 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a44:	b480      	push	{r7}
 8006a46:	b087      	sub	sp, #28
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
 8006a4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6a1b      	ldr	r3, [r3, #32]
 8006a52:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6a1b      	ldr	r3, [r3, #32]
 8006a58:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	69db      	ldr	r3, [r3, #28]
 8006a6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	021b      	lsls	r3, r3, #8
 8006a82:	68fa      	ldr	r2, [r7, #12]
 8006a84:	4313      	orrs	r3, r2
 8006a86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006a8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	689b      	ldr	r3, [r3, #8]
 8006a94:	031b      	lsls	r3, r3, #12
 8006a96:	693a      	ldr	r2, [r7, #16]
 8006a98:	4313      	orrs	r3, r2
 8006a9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	4a11      	ldr	r2, [pc, #68]	; (8006ae4 <TIM_OC4_SetConfig+0xa0>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d003      	beq.n	8006aac <TIM_OC4_SetConfig+0x68>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	4a10      	ldr	r2, [pc, #64]	; (8006ae8 <TIM_OC4_SetConfig+0xa4>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d109      	bne.n	8006ac0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ab2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	695b      	ldr	r3, [r3, #20]
 8006ab8:	019b      	lsls	r3, r3, #6
 8006aba:	697a      	ldr	r2, [r7, #20]
 8006abc:	4313      	orrs	r3, r2
 8006abe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	697a      	ldr	r2, [r7, #20]
 8006ac4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	68fa      	ldr	r2, [r7, #12]
 8006aca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	685a      	ldr	r2, [r3, #4]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	693a      	ldr	r2, [r7, #16]
 8006ad8:	621a      	str	r2, [r3, #32]
}
 8006ada:	bf00      	nop
 8006adc:	371c      	adds	r7, #28
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bc80      	pop	{r7}
 8006ae2:	4770      	bx	lr
 8006ae4:	40012c00 	.word	0x40012c00
 8006ae8:	40013400 	.word	0x40013400

08006aec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006aec:	b480      	push	{r7}
 8006aee:	b087      	sub	sp, #28
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	60f8      	str	r0, [r7, #12]
 8006af4:	60b9      	str	r1, [r7, #8]
 8006af6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	6a1b      	ldr	r3, [r3, #32]
 8006afc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	6a1b      	ldr	r3, [r3, #32]
 8006b02:	f023 0201 	bic.w	r2, r3, #1
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	699b      	ldr	r3, [r3, #24]
 8006b0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b10:	693b      	ldr	r3, [r7, #16]
 8006b12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	011b      	lsls	r3, r3, #4
 8006b1c:	693a      	ldr	r2, [r7, #16]
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b22:	697b      	ldr	r3, [r7, #20]
 8006b24:	f023 030a 	bic.w	r3, r3, #10
 8006b28:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006b2a:	697a      	ldr	r2, [r7, #20]
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	693a      	ldr	r2, [r7, #16]
 8006b36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	697a      	ldr	r2, [r7, #20]
 8006b3c:	621a      	str	r2, [r3, #32]
}
 8006b3e:	bf00      	nop
 8006b40:	371c      	adds	r7, #28
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bc80      	pop	{r7}
 8006b46:	4770      	bx	lr

08006b48 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b48:	b480      	push	{r7}
 8006b4a:	b087      	sub	sp, #28
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	60f8      	str	r0, [r7, #12]
 8006b50:	60b9      	str	r1, [r7, #8]
 8006b52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	6a1b      	ldr	r3, [r3, #32]
 8006b58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	6a1b      	ldr	r3, [r3, #32]
 8006b5e:	f023 0210 	bic.w	r2, r3, #16
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	699b      	ldr	r3, [r3, #24]
 8006b6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006b72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	031b      	lsls	r3, r3, #12
 8006b78:	693a      	ldr	r2, [r7, #16]
 8006b7a:	4313      	orrs	r3, r2
 8006b7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006b7e:	697b      	ldr	r3, [r7, #20]
 8006b80:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006b84:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	011b      	lsls	r3, r3, #4
 8006b8a:	697a      	ldr	r2, [r7, #20]
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	693a      	ldr	r2, [r7, #16]
 8006b94:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	697a      	ldr	r2, [r7, #20]
 8006b9a:	621a      	str	r2, [r3, #32]
}
 8006b9c:	bf00      	nop
 8006b9e:	371c      	adds	r7, #28
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bc80      	pop	{r7}
 8006ba4:	4770      	bx	lr

08006ba6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006ba6:	b480      	push	{r7}
 8006ba8:	b085      	sub	sp, #20
 8006baa:	af00      	add	r7, sp, #0
 8006bac:	6078      	str	r0, [r7, #4]
 8006bae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	689b      	ldr	r3, [r3, #8]
 8006bb4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bbc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006bbe:	683a      	ldr	r2, [r7, #0]
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	f043 0307 	orr.w	r3, r3, #7
 8006bc8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	68fa      	ldr	r2, [r7, #12]
 8006bce:	609a      	str	r2, [r3, #8]
}
 8006bd0:	bf00      	nop
 8006bd2:	3714      	adds	r7, #20
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	bc80      	pop	{r7}
 8006bd8:	4770      	bx	lr

08006bda <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006bda:	b480      	push	{r7}
 8006bdc:	b087      	sub	sp, #28
 8006bde:	af00      	add	r7, sp, #0
 8006be0:	60f8      	str	r0, [r7, #12]
 8006be2:	60b9      	str	r1, [r7, #8]
 8006be4:	607a      	str	r2, [r7, #4]
 8006be6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	689b      	ldr	r3, [r3, #8]
 8006bec:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006bee:	697b      	ldr	r3, [r7, #20]
 8006bf0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006bf4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	021a      	lsls	r2, r3, #8
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	431a      	orrs	r2, r3
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	4313      	orrs	r3, r2
 8006c02:	697a      	ldr	r2, [r7, #20]
 8006c04:	4313      	orrs	r3, r2
 8006c06:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	697a      	ldr	r2, [r7, #20]
 8006c0c:	609a      	str	r2, [r3, #8]
}
 8006c0e:	bf00      	nop
 8006c10:	371c      	adds	r7, #28
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bc80      	pop	{r7}
 8006c16:	4770      	bx	lr

08006c18 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b087      	sub	sp, #28
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	60f8      	str	r0, [r7, #12]
 8006c20:	60b9      	str	r1, [r7, #8]
 8006c22:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	f003 031f 	and.w	r3, r3, #31
 8006c2a:	2201      	movs	r2, #1
 8006c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8006c30:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	6a1a      	ldr	r2, [r3, #32]
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	43db      	mvns	r3, r3
 8006c3a:	401a      	ands	r2, r3
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	6a1a      	ldr	r2, [r3, #32]
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	f003 031f 	and.w	r3, r3, #31
 8006c4a:	6879      	ldr	r1, [r7, #4]
 8006c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8006c50:	431a      	orrs	r2, r3
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	621a      	str	r2, [r3, #32]
}
 8006c56:	bf00      	nop
 8006c58:	371c      	adds	r7, #28
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bc80      	pop	{r7}
 8006c5e:	4770      	bx	lr

08006c60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006c60:	b480      	push	{r7}
 8006c62:	b085      	sub	sp, #20
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
 8006c68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c70:	2b01      	cmp	r3, #1
 8006c72:	d101      	bne.n	8006c78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006c74:	2302      	movs	r3, #2
 8006c76:	e050      	b.n	8006d1a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2201      	movs	r2, #1
 8006c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2202      	movs	r2, #2
 8006c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	685b      	ldr	r3, [r3, #4]
 8006c8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	689b      	ldr	r3, [r3, #8]
 8006c96:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c9e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	68fa      	ldr	r2, [r7, #12]
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	68fa      	ldr	r2, [r7, #12]
 8006cb0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4a1b      	ldr	r2, [pc, #108]	; (8006d24 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d018      	beq.n	8006cee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a19      	ldr	r2, [pc, #100]	; (8006d28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d013      	beq.n	8006cee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cce:	d00e      	beq.n	8006cee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a15      	ldr	r2, [pc, #84]	; (8006d2c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d009      	beq.n	8006cee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4a14      	ldr	r2, [pc, #80]	; (8006d30 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d004      	beq.n	8006cee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a12      	ldr	r2, [pc, #72]	; (8006d34 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d10c      	bne.n	8006d08 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006cf4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	685b      	ldr	r3, [r3, #4]
 8006cfa:	68ba      	ldr	r2, [r7, #8]
 8006cfc:	4313      	orrs	r3, r2
 8006cfe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	68ba      	ldr	r2, [r7, #8]
 8006d06:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2200      	movs	r2, #0
 8006d14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006d18:	2300      	movs	r3, #0
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	3714      	adds	r7, #20
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bc80      	pop	{r7}
 8006d22:	4770      	bx	lr
 8006d24:	40012c00 	.word	0x40012c00
 8006d28:	40013400 	.word	0x40013400
 8006d2c:	40000400 	.word	0x40000400
 8006d30:	40000800 	.word	0x40000800
 8006d34:	40000c00 	.word	0x40000c00

08006d38 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b085      	sub	sp, #20
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
 8006d40:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006d42:	2300      	movs	r3, #0
 8006d44:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d4c:	2b01      	cmp	r3, #1
 8006d4e:	d101      	bne.n	8006d54 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006d50:	2302      	movs	r3, #2
 8006d52:	e03d      	b.n	8006dd0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2201      	movs	r2, #1
 8006d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	68db      	ldr	r3, [r3, #12]
 8006d66:	4313      	orrs	r3, r2
 8006d68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	689b      	ldr	r3, [r3, #8]
 8006d74:	4313      	orrs	r3, r2
 8006d76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	4313      	orrs	r3, r2
 8006d84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4313      	orrs	r3, r2
 8006d92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	691b      	ldr	r3, [r3, #16]
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	695b      	ldr	r3, [r3, #20]
 8006dac:	4313      	orrs	r3, r2
 8006dae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	69db      	ldr	r3, [r3, #28]
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	68fa      	ldr	r2, [r7, #12]
 8006dc4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2200      	movs	r2, #0
 8006dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006dce:	2300      	movs	r3, #0
}
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	3714      	adds	r7, #20
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bc80      	pop	{r7}
 8006dd8:	4770      	bx	lr

08006dda <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006dda:	b480      	push	{r7}
 8006ddc:	b083      	sub	sp, #12
 8006dde:	af00      	add	r7, sp, #0
 8006de0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006de2:	bf00      	nop
 8006de4:	370c      	adds	r7, #12
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bc80      	pop	{r7}
 8006dea:	4770      	bx	lr

08006dec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006dec:	b480      	push	{r7}
 8006dee:	b083      	sub	sp, #12
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006df4:	bf00      	nop
 8006df6:	370c      	adds	r7, #12
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bc80      	pop	{r7}
 8006dfc:	4770      	bx	lr

08006dfe <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006dfe:	b580      	push	{r7, lr}
 8006e00:	b082      	sub	sp, #8
 8006e02:	af00      	add	r7, sp, #0
 8006e04:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d101      	bne.n	8006e10 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006e0c:	2301      	movs	r3, #1
 8006e0e:	e042      	b.n	8006e96 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e16:	b2db      	uxtb	r3, r3
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d106      	bne.n	8006e2a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f7fc fe35 	bl	8003a94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2224      	movs	r2, #36	; 0x24
 8006e2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	68da      	ldr	r2, [r3, #12]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006e40:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f000 ff4c 	bl	8007ce0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	691a      	ldr	r2, [r3, #16]
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006e56:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	695a      	ldr	r2, [r3, #20]
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006e66:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	68da      	ldr	r2, [r3, #12]
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006e76:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2220      	movs	r2, #32
 8006e82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2220      	movs	r2, #32
 8006e8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2200      	movs	r2, #0
 8006e92:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006e94:	2300      	movs	r3, #0
}
 8006e96:	4618      	mov	r0, r3
 8006e98:	3708      	adds	r7, #8
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}

08006e9e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e9e:	b580      	push	{r7, lr}
 8006ea0:	b08a      	sub	sp, #40	; 0x28
 8006ea2:	af02      	add	r7, sp, #8
 8006ea4:	60f8      	str	r0, [r7, #12]
 8006ea6:	60b9      	str	r1, [r7, #8]
 8006ea8:	603b      	str	r3, [r7, #0]
 8006eaa:	4613      	mov	r3, r2
 8006eac:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006eae:	2300      	movs	r3, #0
 8006eb0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006eb8:	b2db      	uxtb	r3, r3
 8006eba:	2b20      	cmp	r3, #32
 8006ebc:	d16d      	bne.n	8006f9a <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d002      	beq.n	8006eca <HAL_UART_Transmit+0x2c>
 8006ec4:	88fb      	ldrh	r3, [r7, #6]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d101      	bne.n	8006ece <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006eca:	2301      	movs	r3, #1
 8006ecc:	e066      	b.n	8006f9c <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	2221      	movs	r2, #33	; 0x21
 8006ed8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006edc:	f7fd fabc 	bl	8004458 <HAL_GetTick>
 8006ee0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	88fa      	ldrh	r2, [r7, #6]
 8006ee6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	88fa      	ldrh	r2, [r7, #6]
 8006eec:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	689b      	ldr	r3, [r3, #8]
 8006ef2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ef6:	d108      	bne.n	8006f0a <HAL_UART_Transmit+0x6c>
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	691b      	ldr	r3, [r3, #16]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d104      	bne.n	8006f0a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006f00:	2300      	movs	r3, #0
 8006f02:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	61bb      	str	r3, [r7, #24]
 8006f08:	e003      	b.n	8006f12 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006f0e:	2300      	movs	r3, #0
 8006f10:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006f12:	e02a      	b.n	8006f6a <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	9300      	str	r3, [sp, #0]
 8006f18:	697b      	ldr	r3, [r7, #20]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	2180      	movs	r1, #128	; 0x80
 8006f1e:	68f8      	ldr	r0, [r7, #12]
 8006f20:	f000 fc13 	bl	800774a <UART_WaitOnFlagUntilTimeout>
 8006f24:	4603      	mov	r3, r0
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d001      	beq.n	8006f2e <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8006f2a:	2303      	movs	r3, #3
 8006f2c:	e036      	b.n	8006f9c <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8006f2e:	69fb      	ldr	r3, [r7, #28]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d10b      	bne.n	8006f4c <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006f34:	69bb      	ldr	r3, [r7, #24]
 8006f36:	881b      	ldrh	r3, [r3, #0]
 8006f38:	461a      	mov	r2, r3
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006f42:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006f44:	69bb      	ldr	r3, [r7, #24]
 8006f46:	3302      	adds	r3, #2
 8006f48:	61bb      	str	r3, [r7, #24]
 8006f4a:	e007      	b.n	8006f5c <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006f4c:	69fb      	ldr	r3, [r7, #28]
 8006f4e:	781a      	ldrb	r2, [r3, #0]
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006f56:	69fb      	ldr	r3, [r7, #28]
 8006f58:	3301      	adds	r3, #1
 8006f5a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006f60:	b29b      	uxth	r3, r3
 8006f62:	3b01      	subs	r3, #1
 8006f64:	b29a      	uxth	r2, r3
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006f6e:	b29b      	uxth	r3, r3
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d1cf      	bne.n	8006f14 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	9300      	str	r3, [sp, #0]
 8006f78:	697b      	ldr	r3, [r7, #20]
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	2140      	movs	r1, #64	; 0x40
 8006f7e:	68f8      	ldr	r0, [r7, #12]
 8006f80:	f000 fbe3 	bl	800774a <UART_WaitOnFlagUntilTimeout>
 8006f84:	4603      	mov	r3, r0
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d001      	beq.n	8006f8e <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8006f8a:	2303      	movs	r3, #3
 8006f8c:	e006      	b.n	8006f9c <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	2220      	movs	r2, #32
 8006f92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8006f96:	2300      	movs	r3, #0
 8006f98:	e000      	b.n	8006f9c <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8006f9a:	2302      	movs	r3, #2
  }
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	3720      	adds	r7, #32
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}

08006fa4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b084      	sub	sp, #16
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	60f8      	str	r0, [r7, #12]
 8006fac:	60b9      	str	r1, [r7, #8]
 8006fae:	4613      	mov	r3, r2
 8006fb0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006fb8:	b2db      	uxtb	r3, r3
 8006fba:	2b20      	cmp	r3, #32
 8006fbc:	d112      	bne.n	8006fe4 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d002      	beq.n	8006fca <HAL_UART_Receive_DMA+0x26>
 8006fc4:	88fb      	ldrh	r3, [r7, #6]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d101      	bne.n	8006fce <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006fca:	2301      	movs	r3, #1
 8006fcc:	e00b      	b.n	8006fe6 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006fd4:	88fb      	ldrh	r3, [r7, #6]
 8006fd6:	461a      	mov	r2, r3
 8006fd8:	68b9      	ldr	r1, [r7, #8]
 8006fda:	68f8      	ldr	r0, [r7, #12]
 8006fdc:	f000 fc24 	bl	8007828 <UART_Start_Receive_DMA>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	e000      	b.n	8006fe6 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006fe4:	2302      	movs	r3, #2
  }
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	3710      	adds	r7, #16
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd80      	pop	{r7, pc}
	...

08006ff0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b0ba      	sub	sp, #232	; 0xe8
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	68db      	ldr	r3, [r3, #12]
 8007008:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	695b      	ldr	r3, [r3, #20]
 8007012:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007016:	2300      	movs	r3, #0
 8007018:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800701c:	2300      	movs	r3, #0
 800701e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007022:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007026:	f003 030f 	and.w	r3, r3, #15
 800702a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800702e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007032:	2b00      	cmp	r3, #0
 8007034:	d10f      	bne.n	8007056 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007036:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800703a:	f003 0320 	and.w	r3, r3, #32
 800703e:	2b00      	cmp	r3, #0
 8007040:	d009      	beq.n	8007056 <HAL_UART_IRQHandler+0x66>
 8007042:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007046:	f003 0320 	and.w	r3, r3, #32
 800704a:	2b00      	cmp	r3, #0
 800704c:	d003      	beq.n	8007056 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f000 fd88 	bl	8007b64 <UART_Receive_IT>
      return;
 8007054:	e25b      	b.n	800750e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007056:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800705a:	2b00      	cmp	r3, #0
 800705c:	f000 80de 	beq.w	800721c <HAL_UART_IRQHandler+0x22c>
 8007060:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007064:	f003 0301 	and.w	r3, r3, #1
 8007068:	2b00      	cmp	r3, #0
 800706a:	d106      	bne.n	800707a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800706c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007070:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007074:	2b00      	cmp	r3, #0
 8007076:	f000 80d1 	beq.w	800721c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800707a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800707e:	f003 0301 	and.w	r3, r3, #1
 8007082:	2b00      	cmp	r3, #0
 8007084:	d00b      	beq.n	800709e <HAL_UART_IRQHandler+0xae>
 8007086:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800708a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800708e:	2b00      	cmp	r3, #0
 8007090:	d005      	beq.n	800709e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007096:	f043 0201 	orr.w	r2, r3, #1
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800709e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070a2:	f003 0304 	and.w	r3, r3, #4
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d00b      	beq.n	80070c2 <HAL_UART_IRQHandler+0xd2>
 80070aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80070ae:	f003 0301 	and.w	r3, r3, #1
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d005      	beq.n	80070c2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070ba:	f043 0202 	orr.w	r2, r3, #2
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80070c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070c6:	f003 0302 	and.w	r3, r3, #2
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d00b      	beq.n	80070e6 <HAL_UART_IRQHandler+0xf6>
 80070ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80070d2:	f003 0301 	and.w	r3, r3, #1
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d005      	beq.n	80070e6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070de:	f043 0204 	orr.w	r2, r3, #4
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80070e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070ea:	f003 0308 	and.w	r3, r3, #8
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d011      	beq.n	8007116 <HAL_UART_IRQHandler+0x126>
 80070f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070f6:	f003 0320 	and.w	r3, r3, #32
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d105      	bne.n	800710a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80070fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007102:	f003 0301 	and.w	r3, r3, #1
 8007106:	2b00      	cmp	r3, #0
 8007108:	d005      	beq.n	8007116 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800710e:	f043 0208 	orr.w	r2, r3, #8
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800711a:	2b00      	cmp	r3, #0
 800711c:	f000 81f2 	beq.w	8007504 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007120:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007124:	f003 0320 	and.w	r3, r3, #32
 8007128:	2b00      	cmp	r3, #0
 800712a:	d008      	beq.n	800713e <HAL_UART_IRQHandler+0x14e>
 800712c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007130:	f003 0320 	and.w	r3, r3, #32
 8007134:	2b00      	cmp	r3, #0
 8007136:	d002      	beq.n	800713e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f000 fd13 	bl	8007b64 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	695b      	ldr	r3, [r3, #20]
 8007144:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007148:	2b00      	cmp	r3, #0
 800714a:	bf14      	ite	ne
 800714c:	2301      	movne	r3, #1
 800714e:	2300      	moveq	r3, #0
 8007150:	b2db      	uxtb	r3, r3
 8007152:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800715a:	f003 0308 	and.w	r3, r3, #8
 800715e:	2b00      	cmp	r3, #0
 8007160:	d103      	bne.n	800716a <HAL_UART_IRQHandler+0x17a>
 8007162:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007166:	2b00      	cmp	r3, #0
 8007168:	d04f      	beq.n	800720a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	f000 fc1d 	bl	80079aa <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	695b      	ldr	r3, [r3, #20]
 8007176:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800717a:	2b00      	cmp	r3, #0
 800717c:	d041      	beq.n	8007202 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	3314      	adds	r3, #20
 8007184:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007188:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800718c:	e853 3f00 	ldrex	r3, [r3]
 8007190:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007194:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007198:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800719c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	3314      	adds	r3, #20
 80071a6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80071aa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80071ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071b2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80071b6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80071ba:	e841 2300 	strex	r3, r2, [r1]
 80071be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80071c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d1d9      	bne.n	800717e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d013      	beq.n	80071fa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071d6:	4a7e      	ldr	r2, [pc, #504]	; (80073d0 <HAL_UART_IRQHandler+0x3e0>)
 80071d8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071de:	4618      	mov	r0, r3
 80071e0:	f7fd fb88 	bl	80048f4 <HAL_DMA_Abort_IT>
 80071e4:	4603      	mov	r3, r0
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d016      	beq.n	8007218 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071f0:	687a      	ldr	r2, [r7, #4]
 80071f2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80071f4:	4610      	mov	r0, r2
 80071f6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071f8:	e00e      	b.n	8007218 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f000 f993 	bl	8007526 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007200:	e00a      	b.n	8007218 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f000 f98f 	bl	8007526 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007208:	e006      	b.n	8007218 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f000 f98b 	bl	8007526 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2200      	movs	r2, #0
 8007214:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8007216:	e175      	b.n	8007504 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007218:	bf00      	nop
    return;
 800721a:	e173      	b.n	8007504 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007220:	2b01      	cmp	r3, #1
 8007222:	f040 814f 	bne.w	80074c4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007226:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800722a:	f003 0310 	and.w	r3, r3, #16
 800722e:	2b00      	cmp	r3, #0
 8007230:	f000 8148 	beq.w	80074c4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007234:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007238:	f003 0310 	and.w	r3, r3, #16
 800723c:	2b00      	cmp	r3, #0
 800723e:	f000 8141 	beq.w	80074c4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007242:	2300      	movs	r3, #0
 8007244:	60bb      	str	r3, [r7, #8]
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	60bb      	str	r3, [r7, #8]
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	685b      	ldr	r3, [r3, #4]
 8007254:	60bb      	str	r3, [r7, #8]
 8007256:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	695b      	ldr	r3, [r3, #20]
 800725e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007262:	2b00      	cmp	r3, #0
 8007264:	f000 80b6 	beq.w	80073d4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	685b      	ldr	r3, [r3, #4]
 8007270:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007274:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007278:	2b00      	cmp	r3, #0
 800727a:	f000 8145 	beq.w	8007508 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007282:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007286:	429a      	cmp	r2, r3
 8007288:	f080 813e 	bcs.w	8007508 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007292:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007298:	699b      	ldr	r3, [r3, #24]
 800729a:	2b20      	cmp	r3, #32
 800729c:	f000 8088 	beq.w	80073b0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	330c      	adds	r3, #12
 80072a6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80072ae:	e853 3f00 	ldrex	r3, [r3]
 80072b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80072b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80072ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80072be:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	330c      	adds	r3, #12
 80072c8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80072cc:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80072d0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072d4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80072d8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80072dc:	e841 2300 	strex	r3, r2, [r1]
 80072e0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80072e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d1d9      	bne.n	80072a0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	3314      	adds	r3, #20
 80072f2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80072f6:	e853 3f00 	ldrex	r3, [r3]
 80072fa:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80072fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80072fe:	f023 0301 	bic.w	r3, r3, #1
 8007302:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	3314      	adds	r3, #20
 800730c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007310:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007314:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007316:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007318:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800731c:	e841 2300 	strex	r3, r2, [r1]
 8007320:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007322:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007324:	2b00      	cmp	r3, #0
 8007326:	d1e1      	bne.n	80072ec <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	3314      	adds	r3, #20
 800732e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007330:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007332:	e853 3f00 	ldrex	r3, [r3]
 8007336:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007338:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800733a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800733e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	3314      	adds	r3, #20
 8007348:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800734c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800734e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007350:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007352:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007354:	e841 2300 	strex	r3, r2, [r1]
 8007358:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800735a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800735c:	2b00      	cmp	r3, #0
 800735e:	d1e3      	bne.n	8007328 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2220      	movs	r2, #32
 8007364:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2200      	movs	r2, #0
 800736c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	330c      	adds	r3, #12
 8007374:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007376:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007378:	e853 3f00 	ldrex	r3, [r3]
 800737c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800737e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007380:	f023 0310 	bic.w	r3, r3, #16
 8007384:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	330c      	adds	r3, #12
 800738e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007392:	65ba      	str	r2, [r7, #88]	; 0x58
 8007394:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007396:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007398:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800739a:	e841 2300 	strex	r3, r2, [r1]
 800739e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80073a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d1e3      	bne.n	800736e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073aa:	4618      	mov	r0, r3
 80073ac:	f7fd fa66 	bl	800487c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2202      	movs	r2, #2
 80073b4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80073be:	b29b      	uxth	r3, r3
 80073c0:	1ad3      	subs	r3, r2, r3
 80073c2:	b29b      	uxth	r3, r3
 80073c4:	4619      	mov	r1, r3
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	f000 f8b6 	bl	8007538 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80073cc:	e09c      	b.n	8007508 <HAL_UART_IRQHandler+0x518>
 80073ce:	bf00      	nop
 80073d0:	08007a6f 	.word	0x08007a6f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80073dc:	b29b      	uxth	r3, r3
 80073de:	1ad3      	subs	r3, r2, r3
 80073e0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80073e8:	b29b      	uxth	r3, r3
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	f000 808e 	beq.w	800750c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80073f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	f000 8089 	beq.w	800750c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	330c      	adds	r3, #12
 8007400:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007404:	e853 3f00 	ldrex	r3, [r3]
 8007408:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800740a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800740c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007410:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	330c      	adds	r3, #12
 800741a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800741e:	647a      	str	r2, [r7, #68]	; 0x44
 8007420:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007422:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007424:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007426:	e841 2300 	strex	r3, r2, [r1]
 800742a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800742c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800742e:	2b00      	cmp	r3, #0
 8007430:	d1e3      	bne.n	80073fa <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	3314      	adds	r3, #20
 8007438:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800743a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800743c:	e853 3f00 	ldrex	r3, [r3]
 8007440:	623b      	str	r3, [r7, #32]
   return(result);
 8007442:	6a3b      	ldr	r3, [r7, #32]
 8007444:	f023 0301 	bic.w	r3, r3, #1
 8007448:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	3314      	adds	r3, #20
 8007452:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007456:	633a      	str	r2, [r7, #48]	; 0x30
 8007458:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800745a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800745c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800745e:	e841 2300 	strex	r3, r2, [r1]
 8007462:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007466:	2b00      	cmp	r3, #0
 8007468:	d1e3      	bne.n	8007432 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2220      	movs	r2, #32
 800746e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2200      	movs	r2, #0
 8007476:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	330c      	adds	r3, #12
 800747e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007480:	693b      	ldr	r3, [r7, #16]
 8007482:	e853 3f00 	ldrex	r3, [r3]
 8007486:	60fb      	str	r3, [r7, #12]
   return(result);
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	f023 0310 	bic.w	r3, r3, #16
 800748e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	330c      	adds	r3, #12
 8007498:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800749c:	61fa      	str	r2, [r7, #28]
 800749e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074a0:	69b9      	ldr	r1, [r7, #24]
 80074a2:	69fa      	ldr	r2, [r7, #28]
 80074a4:	e841 2300 	strex	r3, r2, [r1]
 80074a8:	617b      	str	r3, [r7, #20]
   return(result);
 80074aa:	697b      	ldr	r3, [r7, #20]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d1e3      	bne.n	8007478 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2202      	movs	r2, #2
 80074b4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80074b6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80074ba:	4619      	mov	r1, r3
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	f000 f83b 	bl	8007538 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80074c2:	e023      	b.n	800750c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80074c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d009      	beq.n	80074e4 <HAL_UART_IRQHandler+0x4f4>
 80074d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d003      	beq.n	80074e4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80074dc:	6878      	ldr	r0, [r7, #4]
 80074de:	f000 fada 	bl	8007a96 <UART_Transmit_IT>
    return;
 80074e2:	e014      	b.n	800750e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80074e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d00e      	beq.n	800750e <HAL_UART_IRQHandler+0x51e>
 80074f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d008      	beq.n	800750e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f000 fb19 	bl	8007b34 <UART_EndTransmit_IT>
    return;
 8007502:	e004      	b.n	800750e <HAL_UART_IRQHandler+0x51e>
    return;
 8007504:	bf00      	nop
 8007506:	e002      	b.n	800750e <HAL_UART_IRQHandler+0x51e>
      return;
 8007508:	bf00      	nop
 800750a:	e000      	b.n	800750e <HAL_UART_IRQHandler+0x51e>
      return;
 800750c:	bf00      	nop
  }
}
 800750e:	37e8      	adds	r7, #232	; 0xe8
 8007510:	46bd      	mov	sp, r7
 8007512:	bd80      	pop	{r7, pc}

08007514 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007514:	b480      	push	{r7}
 8007516:	b083      	sub	sp, #12
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800751c:	bf00      	nop
 800751e:	370c      	adds	r7, #12
 8007520:	46bd      	mov	sp, r7
 8007522:	bc80      	pop	{r7}
 8007524:	4770      	bx	lr

08007526 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007526:	b480      	push	{r7}
 8007528:	b083      	sub	sp, #12
 800752a:	af00      	add	r7, sp, #0
 800752c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800752e:	bf00      	nop
 8007530:	370c      	adds	r7, #12
 8007532:	46bd      	mov	sp, r7
 8007534:	bc80      	pop	{r7}
 8007536:	4770      	bx	lr

08007538 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007538:	b480      	push	{r7}
 800753a:	b083      	sub	sp, #12
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
 8007540:	460b      	mov	r3, r1
 8007542:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007544:	bf00      	nop
 8007546:	370c      	adds	r7, #12
 8007548:	46bd      	mov	sp, r7
 800754a:	bc80      	pop	{r7}
 800754c:	4770      	bx	lr

0800754e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800754e:	b580      	push	{r7, lr}
 8007550:	b09c      	sub	sp, #112	; 0x70
 8007552:	af00      	add	r7, sp, #0
 8007554:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800755a:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f003 0320 	and.w	r3, r3, #32
 8007566:	2b00      	cmp	r3, #0
 8007568:	d172      	bne.n	8007650 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800756a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800756c:	2200      	movs	r2, #0
 800756e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007570:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	330c      	adds	r3, #12
 8007576:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007578:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800757a:	e853 3f00 	ldrex	r3, [r3]
 800757e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007580:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007582:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007586:	66bb      	str	r3, [r7, #104]	; 0x68
 8007588:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	330c      	adds	r3, #12
 800758e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007590:	65ba      	str	r2, [r7, #88]	; 0x58
 8007592:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007594:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007596:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007598:	e841 2300 	strex	r3, r2, [r1]
 800759c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800759e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d1e5      	bne.n	8007570 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	3314      	adds	r3, #20
 80075aa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075ae:	e853 3f00 	ldrex	r3, [r3]
 80075b2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80075b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075b6:	f023 0301 	bic.w	r3, r3, #1
 80075ba:	667b      	str	r3, [r7, #100]	; 0x64
 80075bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	3314      	adds	r3, #20
 80075c2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80075c4:	647a      	str	r2, [r7, #68]	; 0x44
 80075c6:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075c8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80075ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80075cc:	e841 2300 	strex	r3, r2, [r1]
 80075d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80075d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d1e5      	bne.n	80075a4 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80075d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	3314      	adds	r3, #20
 80075de:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075e2:	e853 3f00 	ldrex	r3, [r3]
 80075e6:	623b      	str	r3, [r7, #32]
   return(result);
 80075e8:	6a3b      	ldr	r3, [r7, #32]
 80075ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075ee:	663b      	str	r3, [r7, #96]	; 0x60
 80075f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	3314      	adds	r3, #20
 80075f6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80075f8:	633a      	str	r2, [r7, #48]	; 0x30
 80075fa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075fc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80075fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007600:	e841 2300 	strex	r3, r2, [r1]
 8007604:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007608:	2b00      	cmp	r3, #0
 800760a:	d1e5      	bne.n	80075d8 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800760c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800760e:	2220      	movs	r2, #32
 8007610:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007614:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007618:	2b01      	cmp	r3, #1
 800761a:	d119      	bne.n	8007650 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800761c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	330c      	adds	r3, #12
 8007622:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007624:	693b      	ldr	r3, [r7, #16]
 8007626:	e853 3f00 	ldrex	r3, [r3]
 800762a:	60fb      	str	r3, [r7, #12]
   return(result);
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	f023 0310 	bic.w	r3, r3, #16
 8007632:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007634:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	330c      	adds	r3, #12
 800763a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800763c:	61fa      	str	r2, [r7, #28]
 800763e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007640:	69b9      	ldr	r1, [r7, #24]
 8007642:	69fa      	ldr	r2, [r7, #28]
 8007644:	e841 2300 	strex	r3, r2, [r1]
 8007648:	617b      	str	r3, [r7, #20]
   return(result);
 800764a:	697b      	ldr	r3, [r7, #20]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d1e5      	bne.n	800761c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007650:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007652:	2200      	movs	r2, #0
 8007654:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007656:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800765a:	2b01      	cmp	r3, #1
 800765c:	d106      	bne.n	800766c <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800765e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007660:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007662:	4619      	mov	r1, r3
 8007664:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007666:	f7ff ff67 	bl	8007538 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800766a:	e002      	b.n	8007672 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800766c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800766e:	f7fc fc89 	bl	8003f84 <HAL_UART_RxCpltCallback>
}
 8007672:	bf00      	nop
 8007674:	3770      	adds	r7, #112	; 0x70
 8007676:	46bd      	mov	sp, r7
 8007678:	bd80      	pop	{r7, pc}

0800767a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800767a:	b580      	push	{r7, lr}
 800767c:	b084      	sub	sp, #16
 800767e:	af00      	add	r7, sp, #0
 8007680:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007686:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	2201      	movs	r2, #1
 800768c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007692:	2b01      	cmp	r3, #1
 8007694:	d108      	bne.n	80076a8 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800769a:	085b      	lsrs	r3, r3, #1
 800769c:	b29b      	uxth	r3, r3
 800769e:	4619      	mov	r1, r3
 80076a0:	68f8      	ldr	r0, [r7, #12]
 80076a2:	f7ff ff49 	bl	8007538 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80076a6:	e002      	b.n	80076ae <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80076a8:	68f8      	ldr	r0, [r7, #12]
 80076aa:	f7fc fc3d 	bl	8003f28 <HAL_UART_RxHalfCpltCallback>
}
 80076ae:	bf00      	nop
 80076b0:	3710      	adds	r7, #16
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}

080076b6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80076b6:	b580      	push	{r7, lr}
 80076b8:	b084      	sub	sp, #16
 80076ba:	af00      	add	r7, sp, #0
 80076bc:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80076be:	2300      	movs	r3, #0
 80076c0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076c6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	695b      	ldr	r3, [r3, #20]
 80076ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	bf14      	ite	ne
 80076d6:	2301      	movne	r3, #1
 80076d8:	2300      	moveq	r3, #0
 80076da:	b2db      	uxtb	r3, r3
 80076dc:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80076e4:	b2db      	uxtb	r3, r3
 80076e6:	2b21      	cmp	r3, #33	; 0x21
 80076e8:	d108      	bne.n	80076fc <UART_DMAError+0x46>
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d005      	beq.n	80076fc <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	2200      	movs	r2, #0
 80076f4:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80076f6:	68b8      	ldr	r0, [r7, #8]
 80076f8:	f000 f930 	bl	800795c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	695b      	ldr	r3, [r3, #20]
 8007702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007706:	2b00      	cmp	r3, #0
 8007708:	bf14      	ite	ne
 800770a:	2301      	movne	r3, #1
 800770c:	2300      	moveq	r3, #0
 800770e:	b2db      	uxtb	r3, r3
 8007710:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007718:	b2db      	uxtb	r3, r3
 800771a:	2b22      	cmp	r3, #34	; 0x22
 800771c:	d108      	bne.n	8007730 <UART_DMAError+0x7a>
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d005      	beq.n	8007730 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	2200      	movs	r2, #0
 8007728:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800772a:	68b8      	ldr	r0, [r7, #8]
 800772c:	f000 f93d 	bl	80079aa <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007734:	f043 0210 	orr.w	r2, r3, #16
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800773c:	68b8      	ldr	r0, [r7, #8]
 800773e:	f7ff fef2 	bl	8007526 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007742:	bf00      	nop
 8007744:	3710      	adds	r7, #16
 8007746:	46bd      	mov	sp, r7
 8007748:	bd80      	pop	{r7, pc}

0800774a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800774a:	b580      	push	{r7, lr}
 800774c:	b090      	sub	sp, #64	; 0x40
 800774e:	af00      	add	r7, sp, #0
 8007750:	60f8      	str	r0, [r7, #12]
 8007752:	60b9      	str	r1, [r7, #8]
 8007754:	603b      	str	r3, [r7, #0]
 8007756:	4613      	mov	r3, r2
 8007758:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800775a:	e050      	b.n	80077fe <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800775c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800775e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007762:	d04c      	beq.n	80077fe <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007764:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007766:	2b00      	cmp	r3, #0
 8007768:	d007      	beq.n	800777a <UART_WaitOnFlagUntilTimeout+0x30>
 800776a:	f7fc fe75 	bl	8004458 <HAL_GetTick>
 800776e:	4602      	mov	r2, r0
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	1ad3      	subs	r3, r2, r3
 8007774:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007776:	429a      	cmp	r2, r3
 8007778:	d241      	bcs.n	80077fe <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	330c      	adds	r3, #12
 8007780:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007784:	e853 3f00 	ldrex	r3, [r3]
 8007788:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800778a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800778c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007790:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	330c      	adds	r3, #12
 8007798:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800779a:	637a      	str	r2, [r7, #52]	; 0x34
 800779c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800779e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80077a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80077a2:	e841 2300 	strex	r3, r2, [r1]
 80077a6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80077a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d1e5      	bne.n	800777a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	3314      	adds	r3, #20
 80077b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077b6:	697b      	ldr	r3, [r7, #20]
 80077b8:	e853 3f00 	ldrex	r3, [r3]
 80077bc:	613b      	str	r3, [r7, #16]
   return(result);
 80077be:	693b      	ldr	r3, [r7, #16]
 80077c0:	f023 0301 	bic.w	r3, r3, #1
 80077c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	3314      	adds	r3, #20
 80077cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80077ce:	623a      	str	r2, [r7, #32]
 80077d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077d2:	69f9      	ldr	r1, [r7, #28]
 80077d4:	6a3a      	ldr	r2, [r7, #32]
 80077d6:	e841 2300 	strex	r3, r2, [r1]
 80077da:	61bb      	str	r3, [r7, #24]
   return(result);
 80077dc:	69bb      	ldr	r3, [r7, #24]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d1e5      	bne.n	80077ae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	2220      	movs	r2, #32
 80077e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	2220      	movs	r2, #32
 80077ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	2200      	movs	r2, #0
 80077f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80077fa:	2303      	movs	r3, #3
 80077fc:	e00f      	b.n	800781e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	681a      	ldr	r2, [r3, #0]
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	4013      	ands	r3, r2
 8007808:	68ba      	ldr	r2, [r7, #8]
 800780a:	429a      	cmp	r2, r3
 800780c:	bf0c      	ite	eq
 800780e:	2301      	moveq	r3, #1
 8007810:	2300      	movne	r3, #0
 8007812:	b2db      	uxtb	r3, r3
 8007814:	461a      	mov	r2, r3
 8007816:	79fb      	ldrb	r3, [r7, #7]
 8007818:	429a      	cmp	r2, r3
 800781a:	d09f      	beq.n	800775c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800781c:	2300      	movs	r3, #0
}
 800781e:	4618      	mov	r0, r3
 8007820:	3740      	adds	r7, #64	; 0x40
 8007822:	46bd      	mov	sp, r7
 8007824:	bd80      	pop	{r7, pc}
	...

08007828 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b098      	sub	sp, #96	; 0x60
 800782c:	af00      	add	r7, sp, #0
 800782e:	60f8      	str	r0, [r7, #12]
 8007830:	60b9      	str	r1, [r7, #8]
 8007832:	4613      	mov	r3, r2
 8007834:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8007836:	68ba      	ldr	r2, [r7, #8]
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	88fa      	ldrh	r2, [r7, #6]
 8007840:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	2200      	movs	r2, #0
 8007846:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	2222      	movs	r2, #34	; 0x22
 800784c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007854:	4a3e      	ldr	r2, [pc, #248]	; (8007950 <UART_Start_Receive_DMA+0x128>)
 8007856:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800785c:	4a3d      	ldr	r2, [pc, #244]	; (8007954 <UART_Start_Receive_DMA+0x12c>)
 800785e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007864:	4a3c      	ldr	r2, [pc, #240]	; (8007958 <UART_Start_Receive_DMA+0x130>)
 8007866:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800786c:	2200      	movs	r2, #0
 800786e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007870:	f107 0308 	add.w	r3, r7, #8
 8007874:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	3304      	adds	r3, #4
 8007880:	4619      	mov	r1, r3
 8007882:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007884:	681a      	ldr	r2, [r3, #0]
 8007886:	88fb      	ldrh	r3, [r7, #6]
 8007888:	f7fc ff98 	bl	80047bc <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800788c:	2300      	movs	r3, #0
 800788e:	613b      	str	r3, [r7, #16]
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	613b      	str	r3, [r7, #16]
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	685b      	ldr	r3, [r3, #4]
 800789e:	613b      	str	r3, [r7, #16]
 80078a0:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	691b      	ldr	r3, [r3, #16]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d019      	beq.n	80078de <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	330c      	adds	r3, #12
 80078b0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078b4:	e853 3f00 	ldrex	r3, [r3]
 80078b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80078ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80078c0:	65bb      	str	r3, [r7, #88]	; 0x58
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	330c      	adds	r3, #12
 80078c8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80078ca:	64fa      	str	r2, [r7, #76]	; 0x4c
 80078cc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ce:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80078d0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80078d2:	e841 2300 	strex	r3, r2, [r1]
 80078d6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80078d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d1e5      	bne.n	80078aa <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	3314      	adds	r3, #20
 80078e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078e8:	e853 3f00 	ldrex	r3, [r3]
 80078ec:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80078ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078f0:	f043 0301 	orr.w	r3, r3, #1
 80078f4:	657b      	str	r3, [r7, #84]	; 0x54
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	3314      	adds	r3, #20
 80078fc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80078fe:	63ba      	str	r2, [r7, #56]	; 0x38
 8007900:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007902:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007904:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007906:	e841 2300 	strex	r3, r2, [r1]
 800790a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800790c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800790e:	2b00      	cmp	r3, #0
 8007910:	d1e5      	bne.n	80078de <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	3314      	adds	r3, #20
 8007918:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800791a:	69bb      	ldr	r3, [r7, #24]
 800791c:	e853 3f00 	ldrex	r3, [r3]
 8007920:	617b      	str	r3, [r7, #20]
   return(result);
 8007922:	697b      	ldr	r3, [r7, #20]
 8007924:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007928:	653b      	str	r3, [r7, #80]	; 0x50
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	3314      	adds	r3, #20
 8007930:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007932:	627a      	str	r2, [r7, #36]	; 0x24
 8007934:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007936:	6a39      	ldr	r1, [r7, #32]
 8007938:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800793a:	e841 2300 	strex	r3, r2, [r1]
 800793e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007940:	69fb      	ldr	r3, [r7, #28]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d1e5      	bne.n	8007912 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8007946:	2300      	movs	r3, #0
}
 8007948:	4618      	mov	r0, r3
 800794a:	3760      	adds	r7, #96	; 0x60
 800794c:	46bd      	mov	sp, r7
 800794e:	bd80      	pop	{r7, pc}
 8007950:	0800754f 	.word	0x0800754f
 8007954:	0800767b 	.word	0x0800767b
 8007958:	080076b7 	.word	0x080076b7

0800795c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800795c:	b480      	push	{r7}
 800795e:	b089      	sub	sp, #36	; 0x24
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	330c      	adds	r3, #12
 800796a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	e853 3f00 	ldrex	r3, [r3]
 8007972:	60bb      	str	r3, [r7, #8]
   return(result);
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800797a:	61fb      	str	r3, [r7, #28]
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	330c      	adds	r3, #12
 8007982:	69fa      	ldr	r2, [r7, #28]
 8007984:	61ba      	str	r2, [r7, #24]
 8007986:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007988:	6979      	ldr	r1, [r7, #20]
 800798a:	69ba      	ldr	r2, [r7, #24]
 800798c:	e841 2300 	strex	r3, r2, [r1]
 8007990:	613b      	str	r3, [r7, #16]
   return(result);
 8007992:	693b      	ldr	r3, [r7, #16]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d1e5      	bne.n	8007964 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2220      	movs	r2, #32
 800799c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 80079a0:	bf00      	nop
 80079a2:	3724      	adds	r7, #36	; 0x24
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bc80      	pop	{r7}
 80079a8:	4770      	bx	lr

080079aa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80079aa:	b480      	push	{r7}
 80079ac:	b095      	sub	sp, #84	; 0x54
 80079ae:	af00      	add	r7, sp, #0
 80079b0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	330c      	adds	r3, #12
 80079b8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079bc:	e853 3f00 	ldrex	r3, [r3]
 80079c0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80079c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80079c8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	330c      	adds	r3, #12
 80079d0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80079d2:	643a      	str	r2, [r7, #64]	; 0x40
 80079d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079d6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80079d8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80079da:	e841 2300 	strex	r3, r2, [r1]
 80079de:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80079e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d1e5      	bne.n	80079b2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	3314      	adds	r3, #20
 80079ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ee:	6a3b      	ldr	r3, [r7, #32]
 80079f0:	e853 3f00 	ldrex	r3, [r3]
 80079f4:	61fb      	str	r3, [r7, #28]
   return(result);
 80079f6:	69fb      	ldr	r3, [r7, #28]
 80079f8:	f023 0301 	bic.w	r3, r3, #1
 80079fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	3314      	adds	r3, #20
 8007a04:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a06:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007a08:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a0a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007a0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a0e:	e841 2300 	strex	r3, r2, [r1]
 8007a12:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d1e5      	bne.n	80079e6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a1e:	2b01      	cmp	r3, #1
 8007a20:	d119      	bne.n	8007a56 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	330c      	adds	r3, #12
 8007a28:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	e853 3f00 	ldrex	r3, [r3]
 8007a30:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	f023 0310 	bic.w	r3, r3, #16
 8007a38:	647b      	str	r3, [r7, #68]	; 0x44
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	330c      	adds	r3, #12
 8007a40:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007a42:	61ba      	str	r2, [r7, #24]
 8007a44:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a46:	6979      	ldr	r1, [r7, #20]
 8007a48:	69ba      	ldr	r2, [r7, #24]
 8007a4a:	e841 2300 	strex	r3, r2, [r1]
 8007a4e:	613b      	str	r3, [r7, #16]
   return(result);
 8007a50:	693b      	ldr	r3, [r7, #16]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d1e5      	bne.n	8007a22 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2220      	movs	r2, #32
 8007a5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2200      	movs	r2, #0
 8007a62:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007a64:	bf00      	nop
 8007a66:	3754      	adds	r7, #84	; 0x54
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	bc80      	pop	{r7}
 8007a6c:	4770      	bx	lr

08007a6e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007a6e:	b580      	push	{r7, lr}
 8007a70:	b084      	sub	sp, #16
 8007a72:	af00      	add	r7, sp, #0
 8007a74:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a7a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	2200      	movs	r2, #0
 8007a80:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	2200      	movs	r2, #0
 8007a86:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007a88:	68f8      	ldr	r0, [r7, #12]
 8007a8a:	f7ff fd4c 	bl	8007526 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a8e:	bf00      	nop
 8007a90:	3710      	adds	r7, #16
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bd80      	pop	{r7, pc}

08007a96 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007a96:	b480      	push	{r7}
 8007a98:	b085      	sub	sp, #20
 8007a9a:	af00      	add	r7, sp, #0
 8007a9c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007aa4:	b2db      	uxtb	r3, r3
 8007aa6:	2b21      	cmp	r3, #33	; 0x21
 8007aa8:	d13e      	bne.n	8007b28 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	689b      	ldr	r3, [r3, #8]
 8007aae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ab2:	d114      	bne.n	8007ade <UART_Transmit_IT+0x48>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	691b      	ldr	r3, [r3, #16]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d110      	bne.n	8007ade <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6a1b      	ldr	r3, [r3, #32]
 8007ac0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	881b      	ldrh	r3, [r3, #0]
 8007ac6:	461a      	mov	r2, r3
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007ad0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6a1b      	ldr	r3, [r3, #32]
 8007ad6:	1c9a      	adds	r2, r3, #2
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	621a      	str	r2, [r3, #32]
 8007adc:	e008      	b.n	8007af0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6a1b      	ldr	r3, [r3, #32]
 8007ae2:	1c59      	adds	r1, r3, #1
 8007ae4:	687a      	ldr	r2, [r7, #4]
 8007ae6:	6211      	str	r1, [r2, #32]
 8007ae8:	781a      	ldrb	r2, [r3, #0]
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007af4:	b29b      	uxth	r3, r3
 8007af6:	3b01      	subs	r3, #1
 8007af8:	b29b      	uxth	r3, r3
 8007afa:	687a      	ldr	r2, [r7, #4]
 8007afc:	4619      	mov	r1, r3
 8007afe:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d10f      	bne.n	8007b24 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	68da      	ldr	r2, [r3, #12]
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007b12:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	68da      	ldr	r2, [r3, #12]
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007b22:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007b24:	2300      	movs	r3, #0
 8007b26:	e000      	b.n	8007b2a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007b28:	2302      	movs	r3, #2
  }
}
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	3714      	adds	r7, #20
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	bc80      	pop	{r7}
 8007b32:	4770      	bx	lr

08007b34 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b082      	sub	sp, #8
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	68da      	ldr	r2, [r3, #12]
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b4a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2220      	movs	r2, #32
 8007b50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f7ff fcdd 	bl	8007514 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007b5a:	2300      	movs	r3, #0
}
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	3708      	adds	r7, #8
 8007b60:	46bd      	mov	sp, r7
 8007b62:	bd80      	pop	{r7, pc}

08007b64 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b08c      	sub	sp, #48	; 0x30
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007b72:	b2db      	uxtb	r3, r3
 8007b74:	2b22      	cmp	r3, #34	; 0x22
 8007b76:	f040 80ae 	bne.w	8007cd6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	689b      	ldr	r3, [r3, #8]
 8007b7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b82:	d117      	bne.n	8007bb4 <UART_Receive_IT+0x50>
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	691b      	ldr	r3, [r3, #16]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d113      	bne.n	8007bb4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b94:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	685b      	ldr	r3, [r3, #4]
 8007b9c:	b29b      	uxth	r3, r3
 8007b9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ba2:	b29a      	uxth	r2, r3
 8007ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ba6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bac:	1c9a      	adds	r2, r3, #2
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	629a      	str	r2, [r3, #40]	; 0x28
 8007bb2:	e026      	b.n	8007c02 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007bba:	2300      	movs	r3, #0
 8007bbc:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	689b      	ldr	r3, [r3, #8]
 8007bc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007bc6:	d007      	beq.n	8007bd8 <UART_Receive_IT+0x74>
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	689b      	ldr	r3, [r3, #8]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d10a      	bne.n	8007be6 <UART_Receive_IT+0x82>
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	691b      	ldr	r3, [r3, #16]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d106      	bne.n	8007be6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	685b      	ldr	r3, [r3, #4]
 8007bde:	b2da      	uxtb	r2, r3
 8007be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007be2:	701a      	strb	r2, [r3, #0]
 8007be4:	e008      	b.n	8007bf8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	685b      	ldr	r3, [r3, #4]
 8007bec:	b2db      	uxtb	r3, r3
 8007bee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007bf2:	b2da      	uxtb	r2, r3
 8007bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bf6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bfc:	1c5a      	adds	r2, r3, #1
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007c06:	b29b      	uxth	r3, r3
 8007c08:	3b01      	subs	r3, #1
 8007c0a:	b29b      	uxth	r3, r3
 8007c0c:	687a      	ldr	r2, [r7, #4]
 8007c0e:	4619      	mov	r1, r3
 8007c10:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d15d      	bne.n	8007cd2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	68da      	ldr	r2, [r3, #12]
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f022 0220 	bic.w	r2, r2, #32
 8007c24:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	68da      	ldr	r2, [r3, #12]
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007c34:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	695a      	ldr	r2, [r3, #20]
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f022 0201 	bic.w	r2, r2, #1
 8007c44:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2220      	movs	r2, #32
 8007c4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2200      	movs	r2, #0
 8007c52:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c58:	2b01      	cmp	r3, #1
 8007c5a:	d135      	bne.n	8007cc8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2200      	movs	r2, #0
 8007c60:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	330c      	adds	r3, #12
 8007c68:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c6a:	697b      	ldr	r3, [r7, #20]
 8007c6c:	e853 3f00 	ldrex	r3, [r3]
 8007c70:	613b      	str	r3, [r7, #16]
   return(result);
 8007c72:	693b      	ldr	r3, [r7, #16]
 8007c74:	f023 0310 	bic.w	r3, r3, #16
 8007c78:	627b      	str	r3, [r7, #36]	; 0x24
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	330c      	adds	r3, #12
 8007c80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c82:	623a      	str	r2, [r7, #32]
 8007c84:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c86:	69f9      	ldr	r1, [r7, #28]
 8007c88:	6a3a      	ldr	r2, [r7, #32]
 8007c8a:	e841 2300 	strex	r3, r2, [r1]
 8007c8e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007c90:	69bb      	ldr	r3, [r7, #24]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d1e5      	bne.n	8007c62 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f003 0310 	and.w	r3, r3, #16
 8007ca0:	2b10      	cmp	r3, #16
 8007ca2:	d10a      	bne.n	8007cba <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	60fb      	str	r3, [r7, #12]
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	60fb      	str	r3, [r7, #12]
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	685b      	ldr	r3, [r3, #4]
 8007cb6:	60fb      	str	r3, [r7, #12]
 8007cb8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007cbe:	4619      	mov	r1, r3
 8007cc0:	6878      	ldr	r0, [r7, #4]
 8007cc2:	f7ff fc39 	bl	8007538 <HAL_UARTEx_RxEventCallback>
 8007cc6:	e002      	b.n	8007cce <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	f7fc f95b 	bl	8003f84 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007cce:	2300      	movs	r3, #0
 8007cd0:	e002      	b.n	8007cd8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	e000      	b.n	8007cd8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007cd6:	2302      	movs	r3, #2
  }
}
 8007cd8:	4618      	mov	r0, r3
 8007cda:	3730      	adds	r7, #48	; 0x30
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bd80      	pop	{r7, pc}

08007ce0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b084      	sub	sp, #16
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	691b      	ldr	r3, [r3, #16]
 8007cee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	68da      	ldr	r2, [r3, #12]
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	430a      	orrs	r2, r1
 8007cfc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	689a      	ldr	r2, [r3, #8]
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	691b      	ldr	r3, [r3, #16]
 8007d06:	431a      	orrs	r2, r3
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	695b      	ldr	r3, [r3, #20]
 8007d0c:	4313      	orrs	r3, r2
 8007d0e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	68db      	ldr	r3, [r3, #12]
 8007d16:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8007d1a:	f023 030c 	bic.w	r3, r3, #12
 8007d1e:	687a      	ldr	r2, [r7, #4]
 8007d20:	6812      	ldr	r2, [r2, #0]
 8007d22:	68b9      	ldr	r1, [r7, #8]
 8007d24:	430b      	orrs	r3, r1
 8007d26:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	695b      	ldr	r3, [r3, #20]
 8007d2e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	699a      	ldr	r2, [r3, #24]
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	430a      	orrs	r2, r1
 8007d3c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	4a2c      	ldr	r2, [pc, #176]	; (8007df4 <UART_SetConfig+0x114>)
 8007d44:	4293      	cmp	r3, r2
 8007d46:	d103      	bne.n	8007d50 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007d48:	f7fd fed0 	bl	8005aec <HAL_RCC_GetPCLK2Freq>
 8007d4c:	60f8      	str	r0, [r7, #12]
 8007d4e:	e002      	b.n	8007d56 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007d50:	f7fd feb8 	bl	8005ac4 <HAL_RCC_GetPCLK1Freq>
 8007d54:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007d56:	68fa      	ldr	r2, [r7, #12]
 8007d58:	4613      	mov	r3, r2
 8007d5a:	009b      	lsls	r3, r3, #2
 8007d5c:	4413      	add	r3, r2
 8007d5e:	009a      	lsls	r2, r3, #2
 8007d60:	441a      	add	r2, r3
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	685b      	ldr	r3, [r3, #4]
 8007d66:	009b      	lsls	r3, r3, #2
 8007d68:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d6c:	4a22      	ldr	r2, [pc, #136]	; (8007df8 <UART_SetConfig+0x118>)
 8007d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8007d72:	095b      	lsrs	r3, r3, #5
 8007d74:	0119      	lsls	r1, r3, #4
 8007d76:	68fa      	ldr	r2, [r7, #12]
 8007d78:	4613      	mov	r3, r2
 8007d7a:	009b      	lsls	r3, r3, #2
 8007d7c:	4413      	add	r3, r2
 8007d7e:	009a      	lsls	r2, r3, #2
 8007d80:	441a      	add	r2, r3
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	685b      	ldr	r3, [r3, #4]
 8007d86:	009b      	lsls	r3, r3, #2
 8007d88:	fbb2 f2f3 	udiv	r2, r2, r3
 8007d8c:	4b1a      	ldr	r3, [pc, #104]	; (8007df8 <UART_SetConfig+0x118>)
 8007d8e:	fba3 0302 	umull	r0, r3, r3, r2
 8007d92:	095b      	lsrs	r3, r3, #5
 8007d94:	2064      	movs	r0, #100	; 0x64
 8007d96:	fb00 f303 	mul.w	r3, r0, r3
 8007d9a:	1ad3      	subs	r3, r2, r3
 8007d9c:	011b      	lsls	r3, r3, #4
 8007d9e:	3332      	adds	r3, #50	; 0x32
 8007da0:	4a15      	ldr	r2, [pc, #84]	; (8007df8 <UART_SetConfig+0x118>)
 8007da2:	fba2 2303 	umull	r2, r3, r2, r3
 8007da6:	095b      	lsrs	r3, r3, #5
 8007da8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007dac:	4419      	add	r1, r3
 8007dae:	68fa      	ldr	r2, [r7, #12]
 8007db0:	4613      	mov	r3, r2
 8007db2:	009b      	lsls	r3, r3, #2
 8007db4:	4413      	add	r3, r2
 8007db6:	009a      	lsls	r2, r3, #2
 8007db8:	441a      	add	r2, r3
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	685b      	ldr	r3, [r3, #4]
 8007dbe:	009b      	lsls	r3, r3, #2
 8007dc0:	fbb2 f2f3 	udiv	r2, r2, r3
 8007dc4:	4b0c      	ldr	r3, [pc, #48]	; (8007df8 <UART_SetConfig+0x118>)
 8007dc6:	fba3 0302 	umull	r0, r3, r3, r2
 8007dca:	095b      	lsrs	r3, r3, #5
 8007dcc:	2064      	movs	r0, #100	; 0x64
 8007dce:	fb00 f303 	mul.w	r3, r0, r3
 8007dd2:	1ad3      	subs	r3, r2, r3
 8007dd4:	011b      	lsls	r3, r3, #4
 8007dd6:	3332      	adds	r3, #50	; 0x32
 8007dd8:	4a07      	ldr	r2, [pc, #28]	; (8007df8 <UART_SetConfig+0x118>)
 8007dda:	fba2 2303 	umull	r2, r3, r2, r3
 8007dde:	095b      	lsrs	r3, r3, #5
 8007de0:	f003 020f 	and.w	r2, r3, #15
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	440a      	add	r2, r1
 8007dea:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007dec:	bf00      	nop
 8007dee:	3710      	adds	r7, #16
 8007df0:	46bd      	mov	sp, r7
 8007df2:	bd80      	pop	{r7, pc}
 8007df4:	40013800 	.word	0x40013800
 8007df8:	51eb851f 	.word	0x51eb851f

08007dfc <__errno>:
 8007dfc:	4b01      	ldr	r3, [pc, #4]	; (8007e04 <__errno+0x8>)
 8007dfe:	6818      	ldr	r0, [r3, #0]
 8007e00:	4770      	bx	lr
 8007e02:	bf00      	nop
 8007e04:	20000048 	.word	0x20000048

08007e08 <__libc_init_array>:
 8007e08:	b570      	push	{r4, r5, r6, lr}
 8007e0a:	2600      	movs	r6, #0
 8007e0c:	4d0c      	ldr	r5, [pc, #48]	; (8007e40 <__libc_init_array+0x38>)
 8007e0e:	4c0d      	ldr	r4, [pc, #52]	; (8007e44 <__libc_init_array+0x3c>)
 8007e10:	1b64      	subs	r4, r4, r5
 8007e12:	10a4      	asrs	r4, r4, #2
 8007e14:	42a6      	cmp	r6, r4
 8007e16:	d109      	bne.n	8007e2c <__libc_init_array+0x24>
 8007e18:	f004 fc72 	bl	800c700 <_init>
 8007e1c:	2600      	movs	r6, #0
 8007e1e:	4d0a      	ldr	r5, [pc, #40]	; (8007e48 <__libc_init_array+0x40>)
 8007e20:	4c0a      	ldr	r4, [pc, #40]	; (8007e4c <__libc_init_array+0x44>)
 8007e22:	1b64      	subs	r4, r4, r5
 8007e24:	10a4      	asrs	r4, r4, #2
 8007e26:	42a6      	cmp	r6, r4
 8007e28:	d105      	bne.n	8007e36 <__libc_init_array+0x2e>
 8007e2a:	bd70      	pop	{r4, r5, r6, pc}
 8007e2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e30:	4798      	blx	r3
 8007e32:	3601      	adds	r6, #1
 8007e34:	e7ee      	b.n	8007e14 <__libc_init_array+0xc>
 8007e36:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e3a:	4798      	blx	r3
 8007e3c:	3601      	adds	r6, #1
 8007e3e:	e7f2      	b.n	8007e26 <__libc_init_array+0x1e>
 8007e40:	0800cc34 	.word	0x0800cc34
 8007e44:	0800cc34 	.word	0x0800cc34
 8007e48:	0800cc34 	.word	0x0800cc34
 8007e4c:	0800cc38 	.word	0x0800cc38

08007e50 <malloc>:
 8007e50:	4b02      	ldr	r3, [pc, #8]	; (8007e5c <malloc+0xc>)
 8007e52:	4601      	mov	r1, r0
 8007e54:	6818      	ldr	r0, [r3, #0]
 8007e56:	f000 b895 	b.w	8007f84 <_malloc_r>
 8007e5a:	bf00      	nop
 8007e5c:	20000048 	.word	0x20000048

08007e60 <memcpy>:
 8007e60:	440a      	add	r2, r1
 8007e62:	4291      	cmp	r1, r2
 8007e64:	f100 33ff 	add.w	r3, r0, #4294967295
 8007e68:	d100      	bne.n	8007e6c <memcpy+0xc>
 8007e6a:	4770      	bx	lr
 8007e6c:	b510      	push	{r4, lr}
 8007e6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e72:	4291      	cmp	r1, r2
 8007e74:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e78:	d1f9      	bne.n	8007e6e <memcpy+0xe>
 8007e7a:	bd10      	pop	{r4, pc}

08007e7c <memset>:
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	4402      	add	r2, r0
 8007e80:	4293      	cmp	r3, r2
 8007e82:	d100      	bne.n	8007e86 <memset+0xa>
 8007e84:	4770      	bx	lr
 8007e86:	f803 1b01 	strb.w	r1, [r3], #1
 8007e8a:	e7f9      	b.n	8007e80 <memset+0x4>

08007e8c <_calloc_r>:
 8007e8c:	b570      	push	{r4, r5, r6, lr}
 8007e8e:	fba1 5402 	umull	r5, r4, r1, r2
 8007e92:	b934      	cbnz	r4, 8007ea2 <_calloc_r+0x16>
 8007e94:	4629      	mov	r1, r5
 8007e96:	f000 f875 	bl	8007f84 <_malloc_r>
 8007e9a:	4606      	mov	r6, r0
 8007e9c:	b928      	cbnz	r0, 8007eaa <_calloc_r+0x1e>
 8007e9e:	4630      	mov	r0, r6
 8007ea0:	bd70      	pop	{r4, r5, r6, pc}
 8007ea2:	220c      	movs	r2, #12
 8007ea4:	2600      	movs	r6, #0
 8007ea6:	6002      	str	r2, [r0, #0]
 8007ea8:	e7f9      	b.n	8007e9e <_calloc_r+0x12>
 8007eaa:	462a      	mov	r2, r5
 8007eac:	4621      	mov	r1, r4
 8007eae:	f7ff ffe5 	bl	8007e7c <memset>
 8007eb2:	e7f4      	b.n	8007e9e <_calloc_r+0x12>

08007eb4 <_free_r>:
 8007eb4:	b538      	push	{r3, r4, r5, lr}
 8007eb6:	4605      	mov	r5, r0
 8007eb8:	2900      	cmp	r1, #0
 8007eba:	d040      	beq.n	8007f3e <_free_r+0x8a>
 8007ebc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ec0:	1f0c      	subs	r4, r1, #4
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	bfb8      	it	lt
 8007ec6:	18e4      	addlt	r4, r4, r3
 8007ec8:	f003 f826 	bl	800af18 <__malloc_lock>
 8007ecc:	4a1c      	ldr	r2, [pc, #112]	; (8007f40 <_free_r+0x8c>)
 8007ece:	6813      	ldr	r3, [r2, #0]
 8007ed0:	b933      	cbnz	r3, 8007ee0 <_free_r+0x2c>
 8007ed2:	6063      	str	r3, [r4, #4]
 8007ed4:	6014      	str	r4, [r2, #0]
 8007ed6:	4628      	mov	r0, r5
 8007ed8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007edc:	f003 b822 	b.w	800af24 <__malloc_unlock>
 8007ee0:	42a3      	cmp	r3, r4
 8007ee2:	d908      	bls.n	8007ef6 <_free_r+0x42>
 8007ee4:	6820      	ldr	r0, [r4, #0]
 8007ee6:	1821      	adds	r1, r4, r0
 8007ee8:	428b      	cmp	r3, r1
 8007eea:	bf01      	itttt	eq
 8007eec:	6819      	ldreq	r1, [r3, #0]
 8007eee:	685b      	ldreq	r3, [r3, #4]
 8007ef0:	1809      	addeq	r1, r1, r0
 8007ef2:	6021      	streq	r1, [r4, #0]
 8007ef4:	e7ed      	b.n	8007ed2 <_free_r+0x1e>
 8007ef6:	461a      	mov	r2, r3
 8007ef8:	685b      	ldr	r3, [r3, #4]
 8007efa:	b10b      	cbz	r3, 8007f00 <_free_r+0x4c>
 8007efc:	42a3      	cmp	r3, r4
 8007efe:	d9fa      	bls.n	8007ef6 <_free_r+0x42>
 8007f00:	6811      	ldr	r1, [r2, #0]
 8007f02:	1850      	adds	r0, r2, r1
 8007f04:	42a0      	cmp	r0, r4
 8007f06:	d10b      	bne.n	8007f20 <_free_r+0x6c>
 8007f08:	6820      	ldr	r0, [r4, #0]
 8007f0a:	4401      	add	r1, r0
 8007f0c:	1850      	adds	r0, r2, r1
 8007f0e:	4283      	cmp	r3, r0
 8007f10:	6011      	str	r1, [r2, #0]
 8007f12:	d1e0      	bne.n	8007ed6 <_free_r+0x22>
 8007f14:	6818      	ldr	r0, [r3, #0]
 8007f16:	685b      	ldr	r3, [r3, #4]
 8007f18:	4401      	add	r1, r0
 8007f1a:	6011      	str	r1, [r2, #0]
 8007f1c:	6053      	str	r3, [r2, #4]
 8007f1e:	e7da      	b.n	8007ed6 <_free_r+0x22>
 8007f20:	d902      	bls.n	8007f28 <_free_r+0x74>
 8007f22:	230c      	movs	r3, #12
 8007f24:	602b      	str	r3, [r5, #0]
 8007f26:	e7d6      	b.n	8007ed6 <_free_r+0x22>
 8007f28:	6820      	ldr	r0, [r4, #0]
 8007f2a:	1821      	adds	r1, r4, r0
 8007f2c:	428b      	cmp	r3, r1
 8007f2e:	bf01      	itttt	eq
 8007f30:	6819      	ldreq	r1, [r3, #0]
 8007f32:	685b      	ldreq	r3, [r3, #4]
 8007f34:	1809      	addeq	r1, r1, r0
 8007f36:	6021      	streq	r1, [r4, #0]
 8007f38:	6063      	str	r3, [r4, #4]
 8007f3a:	6054      	str	r4, [r2, #4]
 8007f3c:	e7cb      	b.n	8007ed6 <_free_r+0x22>
 8007f3e:	bd38      	pop	{r3, r4, r5, pc}
 8007f40:	20000a5c 	.word	0x20000a5c

08007f44 <sbrk_aligned>:
 8007f44:	b570      	push	{r4, r5, r6, lr}
 8007f46:	4e0e      	ldr	r6, [pc, #56]	; (8007f80 <sbrk_aligned+0x3c>)
 8007f48:	460c      	mov	r4, r1
 8007f4a:	6831      	ldr	r1, [r6, #0]
 8007f4c:	4605      	mov	r5, r0
 8007f4e:	b911      	cbnz	r1, 8007f56 <sbrk_aligned+0x12>
 8007f50:	f000 fefa 	bl	8008d48 <_sbrk_r>
 8007f54:	6030      	str	r0, [r6, #0]
 8007f56:	4621      	mov	r1, r4
 8007f58:	4628      	mov	r0, r5
 8007f5a:	f000 fef5 	bl	8008d48 <_sbrk_r>
 8007f5e:	1c43      	adds	r3, r0, #1
 8007f60:	d00a      	beq.n	8007f78 <sbrk_aligned+0x34>
 8007f62:	1cc4      	adds	r4, r0, #3
 8007f64:	f024 0403 	bic.w	r4, r4, #3
 8007f68:	42a0      	cmp	r0, r4
 8007f6a:	d007      	beq.n	8007f7c <sbrk_aligned+0x38>
 8007f6c:	1a21      	subs	r1, r4, r0
 8007f6e:	4628      	mov	r0, r5
 8007f70:	f000 feea 	bl	8008d48 <_sbrk_r>
 8007f74:	3001      	adds	r0, #1
 8007f76:	d101      	bne.n	8007f7c <sbrk_aligned+0x38>
 8007f78:	f04f 34ff 	mov.w	r4, #4294967295
 8007f7c:	4620      	mov	r0, r4
 8007f7e:	bd70      	pop	{r4, r5, r6, pc}
 8007f80:	20000a60 	.word	0x20000a60

08007f84 <_malloc_r>:
 8007f84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f88:	1ccd      	adds	r5, r1, #3
 8007f8a:	f025 0503 	bic.w	r5, r5, #3
 8007f8e:	3508      	adds	r5, #8
 8007f90:	2d0c      	cmp	r5, #12
 8007f92:	bf38      	it	cc
 8007f94:	250c      	movcc	r5, #12
 8007f96:	2d00      	cmp	r5, #0
 8007f98:	4607      	mov	r7, r0
 8007f9a:	db01      	blt.n	8007fa0 <_malloc_r+0x1c>
 8007f9c:	42a9      	cmp	r1, r5
 8007f9e:	d905      	bls.n	8007fac <_malloc_r+0x28>
 8007fa0:	230c      	movs	r3, #12
 8007fa2:	2600      	movs	r6, #0
 8007fa4:	603b      	str	r3, [r7, #0]
 8007fa6:	4630      	mov	r0, r6
 8007fa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fac:	4e2e      	ldr	r6, [pc, #184]	; (8008068 <_malloc_r+0xe4>)
 8007fae:	f002 ffb3 	bl	800af18 <__malloc_lock>
 8007fb2:	6833      	ldr	r3, [r6, #0]
 8007fb4:	461c      	mov	r4, r3
 8007fb6:	bb34      	cbnz	r4, 8008006 <_malloc_r+0x82>
 8007fb8:	4629      	mov	r1, r5
 8007fba:	4638      	mov	r0, r7
 8007fbc:	f7ff ffc2 	bl	8007f44 <sbrk_aligned>
 8007fc0:	1c43      	adds	r3, r0, #1
 8007fc2:	4604      	mov	r4, r0
 8007fc4:	d14d      	bne.n	8008062 <_malloc_r+0xde>
 8007fc6:	6834      	ldr	r4, [r6, #0]
 8007fc8:	4626      	mov	r6, r4
 8007fca:	2e00      	cmp	r6, #0
 8007fcc:	d140      	bne.n	8008050 <_malloc_r+0xcc>
 8007fce:	6823      	ldr	r3, [r4, #0]
 8007fd0:	4631      	mov	r1, r6
 8007fd2:	4638      	mov	r0, r7
 8007fd4:	eb04 0803 	add.w	r8, r4, r3
 8007fd8:	f000 feb6 	bl	8008d48 <_sbrk_r>
 8007fdc:	4580      	cmp	r8, r0
 8007fde:	d13a      	bne.n	8008056 <_malloc_r+0xd2>
 8007fe0:	6821      	ldr	r1, [r4, #0]
 8007fe2:	3503      	adds	r5, #3
 8007fe4:	1a6d      	subs	r5, r5, r1
 8007fe6:	f025 0503 	bic.w	r5, r5, #3
 8007fea:	3508      	adds	r5, #8
 8007fec:	2d0c      	cmp	r5, #12
 8007fee:	bf38      	it	cc
 8007ff0:	250c      	movcc	r5, #12
 8007ff2:	4638      	mov	r0, r7
 8007ff4:	4629      	mov	r1, r5
 8007ff6:	f7ff ffa5 	bl	8007f44 <sbrk_aligned>
 8007ffa:	3001      	adds	r0, #1
 8007ffc:	d02b      	beq.n	8008056 <_malloc_r+0xd2>
 8007ffe:	6823      	ldr	r3, [r4, #0]
 8008000:	442b      	add	r3, r5
 8008002:	6023      	str	r3, [r4, #0]
 8008004:	e00e      	b.n	8008024 <_malloc_r+0xa0>
 8008006:	6822      	ldr	r2, [r4, #0]
 8008008:	1b52      	subs	r2, r2, r5
 800800a:	d41e      	bmi.n	800804a <_malloc_r+0xc6>
 800800c:	2a0b      	cmp	r2, #11
 800800e:	d916      	bls.n	800803e <_malloc_r+0xba>
 8008010:	1961      	adds	r1, r4, r5
 8008012:	42a3      	cmp	r3, r4
 8008014:	6025      	str	r5, [r4, #0]
 8008016:	bf18      	it	ne
 8008018:	6059      	strne	r1, [r3, #4]
 800801a:	6863      	ldr	r3, [r4, #4]
 800801c:	bf08      	it	eq
 800801e:	6031      	streq	r1, [r6, #0]
 8008020:	5162      	str	r2, [r4, r5]
 8008022:	604b      	str	r3, [r1, #4]
 8008024:	4638      	mov	r0, r7
 8008026:	f104 060b 	add.w	r6, r4, #11
 800802a:	f002 ff7b 	bl	800af24 <__malloc_unlock>
 800802e:	f026 0607 	bic.w	r6, r6, #7
 8008032:	1d23      	adds	r3, r4, #4
 8008034:	1af2      	subs	r2, r6, r3
 8008036:	d0b6      	beq.n	8007fa6 <_malloc_r+0x22>
 8008038:	1b9b      	subs	r3, r3, r6
 800803a:	50a3      	str	r3, [r4, r2]
 800803c:	e7b3      	b.n	8007fa6 <_malloc_r+0x22>
 800803e:	6862      	ldr	r2, [r4, #4]
 8008040:	42a3      	cmp	r3, r4
 8008042:	bf0c      	ite	eq
 8008044:	6032      	streq	r2, [r6, #0]
 8008046:	605a      	strne	r2, [r3, #4]
 8008048:	e7ec      	b.n	8008024 <_malloc_r+0xa0>
 800804a:	4623      	mov	r3, r4
 800804c:	6864      	ldr	r4, [r4, #4]
 800804e:	e7b2      	b.n	8007fb6 <_malloc_r+0x32>
 8008050:	4634      	mov	r4, r6
 8008052:	6876      	ldr	r6, [r6, #4]
 8008054:	e7b9      	b.n	8007fca <_malloc_r+0x46>
 8008056:	230c      	movs	r3, #12
 8008058:	4638      	mov	r0, r7
 800805a:	603b      	str	r3, [r7, #0]
 800805c:	f002 ff62 	bl	800af24 <__malloc_unlock>
 8008060:	e7a1      	b.n	8007fa6 <_malloc_r+0x22>
 8008062:	6025      	str	r5, [r4, #0]
 8008064:	e7de      	b.n	8008024 <_malloc_r+0xa0>
 8008066:	bf00      	nop
 8008068:	20000a5c 	.word	0x20000a5c

0800806c <__cvt>:
 800806c:	2b00      	cmp	r3, #0
 800806e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008072:	461f      	mov	r7, r3
 8008074:	bfbb      	ittet	lt
 8008076:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800807a:	461f      	movlt	r7, r3
 800807c:	2300      	movge	r3, #0
 800807e:	232d      	movlt	r3, #45	; 0x2d
 8008080:	b088      	sub	sp, #32
 8008082:	4614      	mov	r4, r2
 8008084:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008086:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8008088:	7013      	strb	r3, [r2, #0]
 800808a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800808c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8008090:	f023 0820 	bic.w	r8, r3, #32
 8008094:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008098:	d005      	beq.n	80080a6 <__cvt+0x3a>
 800809a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800809e:	d100      	bne.n	80080a2 <__cvt+0x36>
 80080a0:	3501      	adds	r5, #1
 80080a2:	2302      	movs	r3, #2
 80080a4:	e000      	b.n	80080a8 <__cvt+0x3c>
 80080a6:	2303      	movs	r3, #3
 80080a8:	aa07      	add	r2, sp, #28
 80080aa:	9204      	str	r2, [sp, #16]
 80080ac:	aa06      	add	r2, sp, #24
 80080ae:	e9cd a202 	strd	sl, r2, [sp, #8]
 80080b2:	e9cd 3500 	strd	r3, r5, [sp]
 80080b6:	4622      	mov	r2, r4
 80080b8:	463b      	mov	r3, r7
 80080ba:	f001 fdb5 	bl	8009c28 <_dtoa_r>
 80080be:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80080c2:	4606      	mov	r6, r0
 80080c4:	d102      	bne.n	80080cc <__cvt+0x60>
 80080c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80080c8:	07db      	lsls	r3, r3, #31
 80080ca:	d522      	bpl.n	8008112 <__cvt+0xa6>
 80080cc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80080d0:	eb06 0905 	add.w	r9, r6, r5
 80080d4:	d110      	bne.n	80080f8 <__cvt+0x8c>
 80080d6:	7833      	ldrb	r3, [r6, #0]
 80080d8:	2b30      	cmp	r3, #48	; 0x30
 80080da:	d10a      	bne.n	80080f2 <__cvt+0x86>
 80080dc:	2200      	movs	r2, #0
 80080de:	2300      	movs	r3, #0
 80080e0:	4620      	mov	r0, r4
 80080e2:	4639      	mov	r1, r7
 80080e4:	f7f8 fccc 	bl	8000a80 <__aeabi_dcmpeq>
 80080e8:	b918      	cbnz	r0, 80080f2 <__cvt+0x86>
 80080ea:	f1c5 0501 	rsb	r5, r5, #1
 80080ee:	f8ca 5000 	str.w	r5, [sl]
 80080f2:	f8da 3000 	ldr.w	r3, [sl]
 80080f6:	4499      	add	r9, r3
 80080f8:	2200      	movs	r2, #0
 80080fa:	2300      	movs	r3, #0
 80080fc:	4620      	mov	r0, r4
 80080fe:	4639      	mov	r1, r7
 8008100:	f7f8 fcbe 	bl	8000a80 <__aeabi_dcmpeq>
 8008104:	b108      	cbz	r0, 800810a <__cvt+0x9e>
 8008106:	f8cd 901c 	str.w	r9, [sp, #28]
 800810a:	2230      	movs	r2, #48	; 0x30
 800810c:	9b07      	ldr	r3, [sp, #28]
 800810e:	454b      	cmp	r3, r9
 8008110:	d307      	bcc.n	8008122 <__cvt+0xb6>
 8008112:	4630      	mov	r0, r6
 8008114:	9b07      	ldr	r3, [sp, #28]
 8008116:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008118:	1b9b      	subs	r3, r3, r6
 800811a:	6013      	str	r3, [r2, #0]
 800811c:	b008      	add	sp, #32
 800811e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008122:	1c59      	adds	r1, r3, #1
 8008124:	9107      	str	r1, [sp, #28]
 8008126:	701a      	strb	r2, [r3, #0]
 8008128:	e7f0      	b.n	800810c <__cvt+0xa0>

0800812a <__exponent>:
 800812a:	4603      	mov	r3, r0
 800812c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800812e:	2900      	cmp	r1, #0
 8008130:	f803 2b02 	strb.w	r2, [r3], #2
 8008134:	bfb6      	itet	lt
 8008136:	222d      	movlt	r2, #45	; 0x2d
 8008138:	222b      	movge	r2, #43	; 0x2b
 800813a:	4249      	neglt	r1, r1
 800813c:	2909      	cmp	r1, #9
 800813e:	7042      	strb	r2, [r0, #1]
 8008140:	dd2b      	ble.n	800819a <__exponent+0x70>
 8008142:	f10d 0407 	add.w	r4, sp, #7
 8008146:	46a4      	mov	ip, r4
 8008148:	270a      	movs	r7, #10
 800814a:	fb91 f6f7 	sdiv	r6, r1, r7
 800814e:	460a      	mov	r2, r1
 8008150:	46a6      	mov	lr, r4
 8008152:	fb07 1516 	mls	r5, r7, r6, r1
 8008156:	2a63      	cmp	r2, #99	; 0x63
 8008158:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800815c:	4631      	mov	r1, r6
 800815e:	f104 34ff 	add.w	r4, r4, #4294967295
 8008162:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008166:	dcf0      	bgt.n	800814a <__exponent+0x20>
 8008168:	3130      	adds	r1, #48	; 0x30
 800816a:	f1ae 0502 	sub.w	r5, lr, #2
 800816e:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008172:	4629      	mov	r1, r5
 8008174:	1c44      	adds	r4, r0, #1
 8008176:	4561      	cmp	r1, ip
 8008178:	d30a      	bcc.n	8008190 <__exponent+0x66>
 800817a:	f10d 0209 	add.w	r2, sp, #9
 800817e:	eba2 020e 	sub.w	r2, r2, lr
 8008182:	4565      	cmp	r5, ip
 8008184:	bf88      	it	hi
 8008186:	2200      	movhi	r2, #0
 8008188:	4413      	add	r3, r2
 800818a:	1a18      	subs	r0, r3, r0
 800818c:	b003      	add	sp, #12
 800818e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008190:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008194:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008198:	e7ed      	b.n	8008176 <__exponent+0x4c>
 800819a:	2330      	movs	r3, #48	; 0x30
 800819c:	3130      	adds	r1, #48	; 0x30
 800819e:	7083      	strb	r3, [r0, #2]
 80081a0:	70c1      	strb	r1, [r0, #3]
 80081a2:	1d03      	adds	r3, r0, #4
 80081a4:	e7f1      	b.n	800818a <__exponent+0x60>
	...

080081a8 <_printf_float>:
 80081a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081ac:	b091      	sub	sp, #68	; 0x44
 80081ae:	460c      	mov	r4, r1
 80081b0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80081b4:	4616      	mov	r6, r2
 80081b6:	461f      	mov	r7, r3
 80081b8:	4605      	mov	r5, r0
 80081ba:	f002 fe89 	bl	800aed0 <_localeconv_r>
 80081be:	6803      	ldr	r3, [r0, #0]
 80081c0:	4618      	mov	r0, r3
 80081c2:	9309      	str	r3, [sp, #36]	; 0x24
 80081c4:	f7f8 f830 	bl	8000228 <strlen>
 80081c8:	2300      	movs	r3, #0
 80081ca:	930e      	str	r3, [sp, #56]	; 0x38
 80081cc:	f8d8 3000 	ldr.w	r3, [r8]
 80081d0:	900a      	str	r0, [sp, #40]	; 0x28
 80081d2:	3307      	adds	r3, #7
 80081d4:	f023 0307 	bic.w	r3, r3, #7
 80081d8:	f103 0208 	add.w	r2, r3, #8
 80081dc:	f894 9018 	ldrb.w	r9, [r4, #24]
 80081e0:	f8d4 b000 	ldr.w	fp, [r4]
 80081e4:	f8c8 2000 	str.w	r2, [r8]
 80081e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ec:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80081f0:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80081f4:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80081f8:	930b      	str	r3, [sp, #44]	; 0x2c
 80081fa:	f04f 32ff 	mov.w	r2, #4294967295
 80081fe:	4640      	mov	r0, r8
 8008200:	4b9c      	ldr	r3, [pc, #624]	; (8008474 <_printf_float+0x2cc>)
 8008202:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008204:	f7f8 fc6e 	bl	8000ae4 <__aeabi_dcmpun>
 8008208:	bb70      	cbnz	r0, 8008268 <_printf_float+0xc0>
 800820a:	f04f 32ff 	mov.w	r2, #4294967295
 800820e:	4640      	mov	r0, r8
 8008210:	4b98      	ldr	r3, [pc, #608]	; (8008474 <_printf_float+0x2cc>)
 8008212:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008214:	f7f8 fc48 	bl	8000aa8 <__aeabi_dcmple>
 8008218:	bb30      	cbnz	r0, 8008268 <_printf_float+0xc0>
 800821a:	2200      	movs	r2, #0
 800821c:	2300      	movs	r3, #0
 800821e:	4640      	mov	r0, r8
 8008220:	4651      	mov	r1, sl
 8008222:	f7f8 fc37 	bl	8000a94 <__aeabi_dcmplt>
 8008226:	b110      	cbz	r0, 800822e <_printf_float+0x86>
 8008228:	232d      	movs	r3, #45	; 0x2d
 800822a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800822e:	4b92      	ldr	r3, [pc, #584]	; (8008478 <_printf_float+0x2d0>)
 8008230:	4892      	ldr	r0, [pc, #584]	; (800847c <_printf_float+0x2d4>)
 8008232:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8008236:	bf94      	ite	ls
 8008238:	4698      	movls	r8, r3
 800823a:	4680      	movhi	r8, r0
 800823c:	2303      	movs	r3, #3
 800823e:	f04f 0a00 	mov.w	sl, #0
 8008242:	6123      	str	r3, [r4, #16]
 8008244:	f02b 0304 	bic.w	r3, fp, #4
 8008248:	6023      	str	r3, [r4, #0]
 800824a:	4633      	mov	r3, r6
 800824c:	4621      	mov	r1, r4
 800824e:	4628      	mov	r0, r5
 8008250:	9700      	str	r7, [sp, #0]
 8008252:	aa0f      	add	r2, sp, #60	; 0x3c
 8008254:	f000 f9d4 	bl	8008600 <_printf_common>
 8008258:	3001      	adds	r0, #1
 800825a:	f040 8090 	bne.w	800837e <_printf_float+0x1d6>
 800825e:	f04f 30ff 	mov.w	r0, #4294967295
 8008262:	b011      	add	sp, #68	; 0x44
 8008264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008268:	4642      	mov	r2, r8
 800826a:	4653      	mov	r3, sl
 800826c:	4640      	mov	r0, r8
 800826e:	4651      	mov	r1, sl
 8008270:	f7f8 fc38 	bl	8000ae4 <__aeabi_dcmpun>
 8008274:	b148      	cbz	r0, 800828a <_printf_float+0xe2>
 8008276:	f1ba 0f00 	cmp.w	sl, #0
 800827a:	bfb8      	it	lt
 800827c:	232d      	movlt	r3, #45	; 0x2d
 800827e:	4880      	ldr	r0, [pc, #512]	; (8008480 <_printf_float+0x2d8>)
 8008280:	bfb8      	it	lt
 8008282:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008286:	4b7f      	ldr	r3, [pc, #508]	; (8008484 <_printf_float+0x2dc>)
 8008288:	e7d3      	b.n	8008232 <_printf_float+0x8a>
 800828a:	6863      	ldr	r3, [r4, #4]
 800828c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8008290:	1c5a      	adds	r2, r3, #1
 8008292:	d142      	bne.n	800831a <_printf_float+0x172>
 8008294:	2306      	movs	r3, #6
 8008296:	6063      	str	r3, [r4, #4]
 8008298:	2200      	movs	r2, #0
 800829a:	9206      	str	r2, [sp, #24]
 800829c:	aa0e      	add	r2, sp, #56	; 0x38
 800829e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80082a2:	aa0d      	add	r2, sp, #52	; 0x34
 80082a4:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80082a8:	9203      	str	r2, [sp, #12]
 80082aa:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80082ae:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80082b2:	6023      	str	r3, [r4, #0]
 80082b4:	6863      	ldr	r3, [r4, #4]
 80082b6:	4642      	mov	r2, r8
 80082b8:	9300      	str	r3, [sp, #0]
 80082ba:	4628      	mov	r0, r5
 80082bc:	4653      	mov	r3, sl
 80082be:	910b      	str	r1, [sp, #44]	; 0x2c
 80082c0:	f7ff fed4 	bl	800806c <__cvt>
 80082c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80082c6:	4680      	mov	r8, r0
 80082c8:	2947      	cmp	r1, #71	; 0x47
 80082ca:	990d      	ldr	r1, [sp, #52]	; 0x34
 80082cc:	d108      	bne.n	80082e0 <_printf_float+0x138>
 80082ce:	1cc8      	adds	r0, r1, #3
 80082d0:	db02      	blt.n	80082d8 <_printf_float+0x130>
 80082d2:	6863      	ldr	r3, [r4, #4]
 80082d4:	4299      	cmp	r1, r3
 80082d6:	dd40      	ble.n	800835a <_printf_float+0x1b2>
 80082d8:	f1a9 0902 	sub.w	r9, r9, #2
 80082dc:	fa5f f989 	uxtb.w	r9, r9
 80082e0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80082e4:	d81f      	bhi.n	8008326 <_printf_float+0x17e>
 80082e6:	464a      	mov	r2, r9
 80082e8:	3901      	subs	r1, #1
 80082ea:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80082ee:	910d      	str	r1, [sp, #52]	; 0x34
 80082f0:	f7ff ff1b 	bl	800812a <__exponent>
 80082f4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80082f6:	4682      	mov	sl, r0
 80082f8:	1813      	adds	r3, r2, r0
 80082fa:	2a01      	cmp	r2, #1
 80082fc:	6123      	str	r3, [r4, #16]
 80082fe:	dc02      	bgt.n	8008306 <_printf_float+0x15e>
 8008300:	6822      	ldr	r2, [r4, #0]
 8008302:	07d2      	lsls	r2, r2, #31
 8008304:	d501      	bpl.n	800830a <_printf_float+0x162>
 8008306:	3301      	adds	r3, #1
 8008308:	6123      	str	r3, [r4, #16]
 800830a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800830e:	2b00      	cmp	r3, #0
 8008310:	d09b      	beq.n	800824a <_printf_float+0xa2>
 8008312:	232d      	movs	r3, #45	; 0x2d
 8008314:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008318:	e797      	b.n	800824a <_printf_float+0xa2>
 800831a:	2947      	cmp	r1, #71	; 0x47
 800831c:	d1bc      	bne.n	8008298 <_printf_float+0xf0>
 800831e:	2b00      	cmp	r3, #0
 8008320:	d1ba      	bne.n	8008298 <_printf_float+0xf0>
 8008322:	2301      	movs	r3, #1
 8008324:	e7b7      	b.n	8008296 <_printf_float+0xee>
 8008326:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800832a:	d118      	bne.n	800835e <_printf_float+0x1b6>
 800832c:	2900      	cmp	r1, #0
 800832e:	6863      	ldr	r3, [r4, #4]
 8008330:	dd0b      	ble.n	800834a <_printf_float+0x1a2>
 8008332:	6121      	str	r1, [r4, #16]
 8008334:	b913      	cbnz	r3, 800833c <_printf_float+0x194>
 8008336:	6822      	ldr	r2, [r4, #0]
 8008338:	07d0      	lsls	r0, r2, #31
 800833a:	d502      	bpl.n	8008342 <_printf_float+0x19a>
 800833c:	3301      	adds	r3, #1
 800833e:	440b      	add	r3, r1
 8008340:	6123      	str	r3, [r4, #16]
 8008342:	f04f 0a00 	mov.w	sl, #0
 8008346:	65a1      	str	r1, [r4, #88]	; 0x58
 8008348:	e7df      	b.n	800830a <_printf_float+0x162>
 800834a:	b913      	cbnz	r3, 8008352 <_printf_float+0x1aa>
 800834c:	6822      	ldr	r2, [r4, #0]
 800834e:	07d2      	lsls	r2, r2, #31
 8008350:	d501      	bpl.n	8008356 <_printf_float+0x1ae>
 8008352:	3302      	adds	r3, #2
 8008354:	e7f4      	b.n	8008340 <_printf_float+0x198>
 8008356:	2301      	movs	r3, #1
 8008358:	e7f2      	b.n	8008340 <_printf_float+0x198>
 800835a:	f04f 0967 	mov.w	r9, #103	; 0x67
 800835e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008360:	4299      	cmp	r1, r3
 8008362:	db05      	blt.n	8008370 <_printf_float+0x1c8>
 8008364:	6823      	ldr	r3, [r4, #0]
 8008366:	6121      	str	r1, [r4, #16]
 8008368:	07d8      	lsls	r0, r3, #31
 800836a:	d5ea      	bpl.n	8008342 <_printf_float+0x19a>
 800836c:	1c4b      	adds	r3, r1, #1
 800836e:	e7e7      	b.n	8008340 <_printf_float+0x198>
 8008370:	2900      	cmp	r1, #0
 8008372:	bfcc      	ite	gt
 8008374:	2201      	movgt	r2, #1
 8008376:	f1c1 0202 	rsble	r2, r1, #2
 800837a:	4413      	add	r3, r2
 800837c:	e7e0      	b.n	8008340 <_printf_float+0x198>
 800837e:	6823      	ldr	r3, [r4, #0]
 8008380:	055a      	lsls	r2, r3, #21
 8008382:	d407      	bmi.n	8008394 <_printf_float+0x1ec>
 8008384:	6923      	ldr	r3, [r4, #16]
 8008386:	4642      	mov	r2, r8
 8008388:	4631      	mov	r1, r6
 800838a:	4628      	mov	r0, r5
 800838c:	47b8      	blx	r7
 800838e:	3001      	adds	r0, #1
 8008390:	d12b      	bne.n	80083ea <_printf_float+0x242>
 8008392:	e764      	b.n	800825e <_printf_float+0xb6>
 8008394:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008398:	f240 80dd 	bls.w	8008556 <_printf_float+0x3ae>
 800839c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80083a0:	2200      	movs	r2, #0
 80083a2:	2300      	movs	r3, #0
 80083a4:	f7f8 fb6c 	bl	8000a80 <__aeabi_dcmpeq>
 80083a8:	2800      	cmp	r0, #0
 80083aa:	d033      	beq.n	8008414 <_printf_float+0x26c>
 80083ac:	2301      	movs	r3, #1
 80083ae:	4631      	mov	r1, r6
 80083b0:	4628      	mov	r0, r5
 80083b2:	4a35      	ldr	r2, [pc, #212]	; (8008488 <_printf_float+0x2e0>)
 80083b4:	47b8      	blx	r7
 80083b6:	3001      	adds	r0, #1
 80083b8:	f43f af51 	beq.w	800825e <_printf_float+0xb6>
 80083bc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80083c0:	429a      	cmp	r2, r3
 80083c2:	db02      	blt.n	80083ca <_printf_float+0x222>
 80083c4:	6823      	ldr	r3, [r4, #0]
 80083c6:	07d8      	lsls	r0, r3, #31
 80083c8:	d50f      	bpl.n	80083ea <_printf_float+0x242>
 80083ca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80083ce:	4631      	mov	r1, r6
 80083d0:	4628      	mov	r0, r5
 80083d2:	47b8      	blx	r7
 80083d4:	3001      	adds	r0, #1
 80083d6:	f43f af42 	beq.w	800825e <_printf_float+0xb6>
 80083da:	f04f 0800 	mov.w	r8, #0
 80083de:	f104 091a 	add.w	r9, r4, #26
 80083e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80083e4:	3b01      	subs	r3, #1
 80083e6:	4543      	cmp	r3, r8
 80083e8:	dc09      	bgt.n	80083fe <_printf_float+0x256>
 80083ea:	6823      	ldr	r3, [r4, #0]
 80083ec:	079b      	lsls	r3, r3, #30
 80083ee:	f100 8102 	bmi.w	80085f6 <_printf_float+0x44e>
 80083f2:	68e0      	ldr	r0, [r4, #12]
 80083f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80083f6:	4298      	cmp	r0, r3
 80083f8:	bfb8      	it	lt
 80083fa:	4618      	movlt	r0, r3
 80083fc:	e731      	b.n	8008262 <_printf_float+0xba>
 80083fe:	2301      	movs	r3, #1
 8008400:	464a      	mov	r2, r9
 8008402:	4631      	mov	r1, r6
 8008404:	4628      	mov	r0, r5
 8008406:	47b8      	blx	r7
 8008408:	3001      	adds	r0, #1
 800840a:	f43f af28 	beq.w	800825e <_printf_float+0xb6>
 800840e:	f108 0801 	add.w	r8, r8, #1
 8008412:	e7e6      	b.n	80083e2 <_printf_float+0x23a>
 8008414:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008416:	2b00      	cmp	r3, #0
 8008418:	dc38      	bgt.n	800848c <_printf_float+0x2e4>
 800841a:	2301      	movs	r3, #1
 800841c:	4631      	mov	r1, r6
 800841e:	4628      	mov	r0, r5
 8008420:	4a19      	ldr	r2, [pc, #100]	; (8008488 <_printf_float+0x2e0>)
 8008422:	47b8      	blx	r7
 8008424:	3001      	adds	r0, #1
 8008426:	f43f af1a 	beq.w	800825e <_printf_float+0xb6>
 800842a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800842e:	4313      	orrs	r3, r2
 8008430:	d102      	bne.n	8008438 <_printf_float+0x290>
 8008432:	6823      	ldr	r3, [r4, #0]
 8008434:	07d9      	lsls	r1, r3, #31
 8008436:	d5d8      	bpl.n	80083ea <_printf_float+0x242>
 8008438:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800843c:	4631      	mov	r1, r6
 800843e:	4628      	mov	r0, r5
 8008440:	47b8      	blx	r7
 8008442:	3001      	adds	r0, #1
 8008444:	f43f af0b 	beq.w	800825e <_printf_float+0xb6>
 8008448:	f04f 0900 	mov.w	r9, #0
 800844c:	f104 0a1a 	add.w	sl, r4, #26
 8008450:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008452:	425b      	negs	r3, r3
 8008454:	454b      	cmp	r3, r9
 8008456:	dc01      	bgt.n	800845c <_printf_float+0x2b4>
 8008458:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800845a:	e794      	b.n	8008386 <_printf_float+0x1de>
 800845c:	2301      	movs	r3, #1
 800845e:	4652      	mov	r2, sl
 8008460:	4631      	mov	r1, r6
 8008462:	4628      	mov	r0, r5
 8008464:	47b8      	blx	r7
 8008466:	3001      	adds	r0, #1
 8008468:	f43f aef9 	beq.w	800825e <_printf_float+0xb6>
 800846c:	f109 0901 	add.w	r9, r9, #1
 8008470:	e7ee      	b.n	8008450 <_printf_float+0x2a8>
 8008472:	bf00      	nop
 8008474:	7fefffff 	.word	0x7fefffff
 8008478:	0800c790 	.word	0x0800c790
 800847c:	0800c794 	.word	0x0800c794
 8008480:	0800c79c 	.word	0x0800c79c
 8008484:	0800c798 	.word	0x0800c798
 8008488:	0800c7a0 	.word	0x0800c7a0
 800848c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800848e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008490:	429a      	cmp	r2, r3
 8008492:	bfa8      	it	ge
 8008494:	461a      	movge	r2, r3
 8008496:	2a00      	cmp	r2, #0
 8008498:	4691      	mov	r9, r2
 800849a:	dc37      	bgt.n	800850c <_printf_float+0x364>
 800849c:	f04f 0b00 	mov.w	fp, #0
 80084a0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80084a4:	f104 021a 	add.w	r2, r4, #26
 80084a8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80084ac:	ebaa 0309 	sub.w	r3, sl, r9
 80084b0:	455b      	cmp	r3, fp
 80084b2:	dc33      	bgt.n	800851c <_printf_float+0x374>
 80084b4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80084b8:	429a      	cmp	r2, r3
 80084ba:	db3b      	blt.n	8008534 <_printf_float+0x38c>
 80084bc:	6823      	ldr	r3, [r4, #0]
 80084be:	07da      	lsls	r2, r3, #31
 80084c0:	d438      	bmi.n	8008534 <_printf_float+0x38c>
 80084c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80084c4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80084c6:	eba3 020a 	sub.w	r2, r3, sl
 80084ca:	eba3 0901 	sub.w	r9, r3, r1
 80084ce:	4591      	cmp	r9, r2
 80084d0:	bfa8      	it	ge
 80084d2:	4691      	movge	r9, r2
 80084d4:	f1b9 0f00 	cmp.w	r9, #0
 80084d8:	dc34      	bgt.n	8008544 <_printf_float+0x39c>
 80084da:	f04f 0800 	mov.w	r8, #0
 80084de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80084e2:	f104 0a1a 	add.w	sl, r4, #26
 80084e6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80084ea:	1a9b      	subs	r3, r3, r2
 80084ec:	eba3 0309 	sub.w	r3, r3, r9
 80084f0:	4543      	cmp	r3, r8
 80084f2:	f77f af7a 	ble.w	80083ea <_printf_float+0x242>
 80084f6:	2301      	movs	r3, #1
 80084f8:	4652      	mov	r2, sl
 80084fa:	4631      	mov	r1, r6
 80084fc:	4628      	mov	r0, r5
 80084fe:	47b8      	blx	r7
 8008500:	3001      	adds	r0, #1
 8008502:	f43f aeac 	beq.w	800825e <_printf_float+0xb6>
 8008506:	f108 0801 	add.w	r8, r8, #1
 800850a:	e7ec      	b.n	80084e6 <_printf_float+0x33e>
 800850c:	4613      	mov	r3, r2
 800850e:	4631      	mov	r1, r6
 8008510:	4642      	mov	r2, r8
 8008512:	4628      	mov	r0, r5
 8008514:	47b8      	blx	r7
 8008516:	3001      	adds	r0, #1
 8008518:	d1c0      	bne.n	800849c <_printf_float+0x2f4>
 800851a:	e6a0      	b.n	800825e <_printf_float+0xb6>
 800851c:	2301      	movs	r3, #1
 800851e:	4631      	mov	r1, r6
 8008520:	4628      	mov	r0, r5
 8008522:	920b      	str	r2, [sp, #44]	; 0x2c
 8008524:	47b8      	blx	r7
 8008526:	3001      	adds	r0, #1
 8008528:	f43f ae99 	beq.w	800825e <_printf_float+0xb6>
 800852c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800852e:	f10b 0b01 	add.w	fp, fp, #1
 8008532:	e7b9      	b.n	80084a8 <_printf_float+0x300>
 8008534:	4631      	mov	r1, r6
 8008536:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800853a:	4628      	mov	r0, r5
 800853c:	47b8      	blx	r7
 800853e:	3001      	adds	r0, #1
 8008540:	d1bf      	bne.n	80084c2 <_printf_float+0x31a>
 8008542:	e68c      	b.n	800825e <_printf_float+0xb6>
 8008544:	464b      	mov	r3, r9
 8008546:	4631      	mov	r1, r6
 8008548:	4628      	mov	r0, r5
 800854a:	eb08 020a 	add.w	r2, r8, sl
 800854e:	47b8      	blx	r7
 8008550:	3001      	adds	r0, #1
 8008552:	d1c2      	bne.n	80084da <_printf_float+0x332>
 8008554:	e683      	b.n	800825e <_printf_float+0xb6>
 8008556:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008558:	2a01      	cmp	r2, #1
 800855a:	dc01      	bgt.n	8008560 <_printf_float+0x3b8>
 800855c:	07db      	lsls	r3, r3, #31
 800855e:	d537      	bpl.n	80085d0 <_printf_float+0x428>
 8008560:	2301      	movs	r3, #1
 8008562:	4642      	mov	r2, r8
 8008564:	4631      	mov	r1, r6
 8008566:	4628      	mov	r0, r5
 8008568:	47b8      	blx	r7
 800856a:	3001      	adds	r0, #1
 800856c:	f43f ae77 	beq.w	800825e <_printf_float+0xb6>
 8008570:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008574:	4631      	mov	r1, r6
 8008576:	4628      	mov	r0, r5
 8008578:	47b8      	blx	r7
 800857a:	3001      	adds	r0, #1
 800857c:	f43f ae6f 	beq.w	800825e <_printf_float+0xb6>
 8008580:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008584:	2200      	movs	r2, #0
 8008586:	2300      	movs	r3, #0
 8008588:	f7f8 fa7a 	bl	8000a80 <__aeabi_dcmpeq>
 800858c:	b9d8      	cbnz	r0, 80085c6 <_printf_float+0x41e>
 800858e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008590:	f108 0201 	add.w	r2, r8, #1
 8008594:	3b01      	subs	r3, #1
 8008596:	4631      	mov	r1, r6
 8008598:	4628      	mov	r0, r5
 800859a:	47b8      	blx	r7
 800859c:	3001      	adds	r0, #1
 800859e:	d10e      	bne.n	80085be <_printf_float+0x416>
 80085a0:	e65d      	b.n	800825e <_printf_float+0xb6>
 80085a2:	2301      	movs	r3, #1
 80085a4:	464a      	mov	r2, r9
 80085a6:	4631      	mov	r1, r6
 80085a8:	4628      	mov	r0, r5
 80085aa:	47b8      	blx	r7
 80085ac:	3001      	adds	r0, #1
 80085ae:	f43f ae56 	beq.w	800825e <_printf_float+0xb6>
 80085b2:	f108 0801 	add.w	r8, r8, #1
 80085b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80085b8:	3b01      	subs	r3, #1
 80085ba:	4543      	cmp	r3, r8
 80085bc:	dcf1      	bgt.n	80085a2 <_printf_float+0x3fa>
 80085be:	4653      	mov	r3, sl
 80085c0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80085c4:	e6e0      	b.n	8008388 <_printf_float+0x1e0>
 80085c6:	f04f 0800 	mov.w	r8, #0
 80085ca:	f104 091a 	add.w	r9, r4, #26
 80085ce:	e7f2      	b.n	80085b6 <_printf_float+0x40e>
 80085d0:	2301      	movs	r3, #1
 80085d2:	4642      	mov	r2, r8
 80085d4:	e7df      	b.n	8008596 <_printf_float+0x3ee>
 80085d6:	2301      	movs	r3, #1
 80085d8:	464a      	mov	r2, r9
 80085da:	4631      	mov	r1, r6
 80085dc:	4628      	mov	r0, r5
 80085de:	47b8      	blx	r7
 80085e0:	3001      	adds	r0, #1
 80085e2:	f43f ae3c 	beq.w	800825e <_printf_float+0xb6>
 80085e6:	f108 0801 	add.w	r8, r8, #1
 80085ea:	68e3      	ldr	r3, [r4, #12]
 80085ec:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80085ee:	1a5b      	subs	r3, r3, r1
 80085f0:	4543      	cmp	r3, r8
 80085f2:	dcf0      	bgt.n	80085d6 <_printf_float+0x42e>
 80085f4:	e6fd      	b.n	80083f2 <_printf_float+0x24a>
 80085f6:	f04f 0800 	mov.w	r8, #0
 80085fa:	f104 0919 	add.w	r9, r4, #25
 80085fe:	e7f4      	b.n	80085ea <_printf_float+0x442>

08008600 <_printf_common>:
 8008600:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008604:	4616      	mov	r6, r2
 8008606:	4699      	mov	r9, r3
 8008608:	688a      	ldr	r2, [r1, #8]
 800860a:	690b      	ldr	r3, [r1, #16]
 800860c:	4607      	mov	r7, r0
 800860e:	4293      	cmp	r3, r2
 8008610:	bfb8      	it	lt
 8008612:	4613      	movlt	r3, r2
 8008614:	6033      	str	r3, [r6, #0]
 8008616:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800861a:	460c      	mov	r4, r1
 800861c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008620:	b10a      	cbz	r2, 8008626 <_printf_common+0x26>
 8008622:	3301      	adds	r3, #1
 8008624:	6033      	str	r3, [r6, #0]
 8008626:	6823      	ldr	r3, [r4, #0]
 8008628:	0699      	lsls	r1, r3, #26
 800862a:	bf42      	ittt	mi
 800862c:	6833      	ldrmi	r3, [r6, #0]
 800862e:	3302      	addmi	r3, #2
 8008630:	6033      	strmi	r3, [r6, #0]
 8008632:	6825      	ldr	r5, [r4, #0]
 8008634:	f015 0506 	ands.w	r5, r5, #6
 8008638:	d106      	bne.n	8008648 <_printf_common+0x48>
 800863a:	f104 0a19 	add.w	sl, r4, #25
 800863e:	68e3      	ldr	r3, [r4, #12]
 8008640:	6832      	ldr	r2, [r6, #0]
 8008642:	1a9b      	subs	r3, r3, r2
 8008644:	42ab      	cmp	r3, r5
 8008646:	dc28      	bgt.n	800869a <_printf_common+0x9a>
 8008648:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800864c:	1e13      	subs	r3, r2, #0
 800864e:	6822      	ldr	r2, [r4, #0]
 8008650:	bf18      	it	ne
 8008652:	2301      	movne	r3, #1
 8008654:	0692      	lsls	r2, r2, #26
 8008656:	d42d      	bmi.n	80086b4 <_printf_common+0xb4>
 8008658:	4649      	mov	r1, r9
 800865a:	4638      	mov	r0, r7
 800865c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008660:	47c0      	blx	r8
 8008662:	3001      	adds	r0, #1
 8008664:	d020      	beq.n	80086a8 <_printf_common+0xa8>
 8008666:	6823      	ldr	r3, [r4, #0]
 8008668:	68e5      	ldr	r5, [r4, #12]
 800866a:	f003 0306 	and.w	r3, r3, #6
 800866e:	2b04      	cmp	r3, #4
 8008670:	bf18      	it	ne
 8008672:	2500      	movne	r5, #0
 8008674:	6832      	ldr	r2, [r6, #0]
 8008676:	f04f 0600 	mov.w	r6, #0
 800867a:	68a3      	ldr	r3, [r4, #8]
 800867c:	bf08      	it	eq
 800867e:	1aad      	subeq	r5, r5, r2
 8008680:	6922      	ldr	r2, [r4, #16]
 8008682:	bf08      	it	eq
 8008684:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008688:	4293      	cmp	r3, r2
 800868a:	bfc4      	itt	gt
 800868c:	1a9b      	subgt	r3, r3, r2
 800868e:	18ed      	addgt	r5, r5, r3
 8008690:	341a      	adds	r4, #26
 8008692:	42b5      	cmp	r5, r6
 8008694:	d11a      	bne.n	80086cc <_printf_common+0xcc>
 8008696:	2000      	movs	r0, #0
 8008698:	e008      	b.n	80086ac <_printf_common+0xac>
 800869a:	2301      	movs	r3, #1
 800869c:	4652      	mov	r2, sl
 800869e:	4649      	mov	r1, r9
 80086a0:	4638      	mov	r0, r7
 80086a2:	47c0      	blx	r8
 80086a4:	3001      	adds	r0, #1
 80086a6:	d103      	bne.n	80086b0 <_printf_common+0xb0>
 80086a8:	f04f 30ff 	mov.w	r0, #4294967295
 80086ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086b0:	3501      	adds	r5, #1
 80086b2:	e7c4      	b.n	800863e <_printf_common+0x3e>
 80086b4:	2030      	movs	r0, #48	; 0x30
 80086b6:	18e1      	adds	r1, r4, r3
 80086b8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80086bc:	1c5a      	adds	r2, r3, #1
 80086be:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80086c2:	4422      	add	r2, r4
 80086c4:	3302      	adds	r3, #2
 80086c6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80086ca:	e7c5      	b.n	8008658 <_printf_common+0x58>
 80086cc:	2301      	movs	r3, #1
 80086ce:	4622      	mov	r2, r4
 80086d0:	4649      	mov	r1, r9
 80086d2:	4638      	mov	r0, r7
 80086d4:	47c0      	blx	r8
 80086d6:	3001      	adds	r0, #1
 80086d8:	d0e6      	beq.n	80086a8 <_printf_common+0xa8>
 80086da:	3601      	adds	r6, #1
 80086dc:	e7d9      	b.n	8008692 <_printf_common+0x92>
	...

080086e0 <_printf_i>:
 80086e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80086e4:	7e0f      	ldrb	r7, [r1, #24]
 80086e6:	4691      	mov	r9, r2
 80086e8:	2f78      	cmp	r7, #120	; 0x78
 80086ea:	4680      	mov	r8, r0
 80086ec:	460c      	mov	r4, r1
 80086ee:	469a      	mov	sl, r3
 80086f0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80086f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80086f6:	d807      	bhi.n	8008708 <_printf_i+0x28>
 80086f8:	2f62      	cmp	r7, #98	; 0x62
 80086fa:	d80a      	bhi.n	8008712 <_printf_i+0x32>
 80086fc:	2f00      	cmp	r7, #0
 80086fe:	f000 80d9 	beq.w	80088b4 <_printf_i+0x1d4>
 8008702:	2f58      	cmp	r7, #88	; 0x58
 8008704:	f000 80a4 	beq.w	8008850 <_printf_i+0x170>
 8008708:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800870c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008710:	e03a      	b.n	8008788 <_printf_i+0xa8>
 8008712:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008716:	2b15      	cmp	r3, #21
 8008718:	d8f6      	bhi.n	8008708 <_printf_i+0x28>
 800871a:	a101      	add	r1, pc, #4	; (adr r1, 8008720 <_printf_i+0x40>)
 800871c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008720:	08008779 	.word	0x08008779
 8008724:	0800878d 	.word	0x0800878d
 8008728:	08008709 	.word	0x08008709
 800872c:	08008709 	.word	0x08008709
 8008730:	08008709 	.word	0x08008709
 8008734:	08008709 	.word	0x08008709
 8008738:	0800878d 	.word	0x0800878d
 800873c:	08008709 	.word	0x08008709
 8008740:	08008709 	.word	0x08008709
 8008744:	08008709 	.word	0x08008709
 8008748:	08008709 	.word	0x08008709
 800874c:	0800889b 	.word	0x0800889b
 8008750:	080087bd 	.word	0x080087bd
 8008754:	0800887d 	.word	0x0800887d
 8008758:	08008709 	.word	0x08008709
 800875c:	08008709 	.word	0x08008709
 8008760:	080088bd 	.word	0x080088bd
 8008764:	08008709 	.word	0x08008709
 8008768:	080087bd 	.word	0x080087bd
 800876c:	08008709 	.word	0x08008709
 8008770:	08008709 	.word	0x08008709
 8008774:	08008885 	.word	0x08008885
 8008778:	682b      	ldr	r3, [r5, #0]
 800877a:	1d1a      	adds	r2, r3, #4
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	602a      	str	r2, [r5, #0]
 8008780:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008784:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008788:	2301      	movs	r3, #1
 800878a:	e0a4      	b.n	80088d6 <_printf_i+0x1f6>
 800878c:	6820      	ldr	r0, [r4, #0]
 800878e:	6829      	ldr	r1, [r5, #0]
 8008790:	0606      	lsls	r6, r0, #24
 8008792:	f101 0304 	add.w	r3, r1, #4
 8008796:	d50a      	bpl.n	80087ae <_printf_i+0xce>
 8008798:	680e      	ldr	r6, [r1, #0]
 800879a:	602b      	str	r3, [r5, #0]
 800879c:	2e00      	cmp	r6, #0
 800879e:	da03      	bge.n	80087a8 <_printf_i+0xc8>
 80087a0:	232d      	movs	r3, #45	; 0x2d
 80087a2:	4276      	negs	r6, r6
 80087a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80087a8:	230a      	movs	r3, #10
 80087aa:	485e      	ldr	r0, [pc, #376]	; (8008924 <_printf_i+0x244>)
 80087ac:	e019      	b.n	80087e2 <_printf_i+0x102>
 80087ae:	680e      	ldr	r6, [r1, #0]
 80087b0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80087b4:	602b      	str	r3, [r5, #0]
 80087b6:	bf18      	it	ne
 80087b8:	b236      	sxthne	r6, r6
 80087ba:	e7ef      	b.n	800879c <_printf_i+0xbc>
 80087bc:	682b      	ldr	r3, [r5, #0]
 80087be:	6820      	ldr	r0, [r4, #0]
 80087c0:	1d19      	adds	r1, r3, #4
 80087c2:	6029      	str	r1, [r5, #0]
 80087c4:	0601      	lsls	r1, r0, #24
 80087c6:	d501      	bpl.n	80087cc <_printf_i+0xec>
 80087c8:	681e      	ldr	r6, [r3, #0]
 80087ca:	e002      	b.n	80087d2 <_printf_i+0xf2>
 80087cc:	0646      	lsls	r6, r0, #25
 80087ce:	d5fb      	bpl.n	80087c8 <_printf_i+0xe8>
 80087d0:	881e      	ldrh	r6, [r3, #0]
 80087d2:	2f6f      	cmp	r7, #111	; 0x6f
 80087d4:	bf0c      	ite	eq
 80087d6:	2308      	moveq	r3, #8
 80087d8:	230a      	movne	r3, #10
 80087da:	4852      	ldr	r0, [pc, #328]	; (8008924 <_printf_i+0x244>)
 80087dc:	2100      	movs	r1, #0
 80087de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80087e2:	6865      	ldr	r5, [r4, #4]
 80087e4:	2d00      	cmp	r5, #0
 80087e6:	bfa8      	it	ge
 80087e8:	6821      	ldrge	r1, [r4, #0]
 80087ea:	60a5      	str	r5, [r4, #8]
 80087ec:	bfa4      	itt	ge
 80087ee:	f021 0104 	bicge.w	r1, r1, #4
 80087f2:	6021      	strge	r1, [r4, #0]
 80087f4:	b90e      	cbnz	r6, 80087fa <_printf_i+0x11a>
 80087f6:	2d00      	cmp	r5, #0
 80087f8:	d04d      	beq.n	8008896 <_printf_i+0x1b6>
 80087fa:	4615      	mov	r5, r2
 80087fc:	fbb6 f1f3 	udiv	r1, r6, r3
 8008800:	fb03 6711 	mls	r7, r3, r1, r6
 8008804:	5dc7      	ldrb	r7, [r0, r7]
 8008806:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800880a:	4637      	mov	r7, r6
 800880c:	42bb      	cmp	r3, r7
 800880e:	460e      	mov	r6, r1
 8008810:	d9f4      	bls.n	80087fc <_printf_i+0x11c>
 8008812:	2b08      	cmp	r3, #8
 8008814:	d10b      	bne.n	800882e <_printf_i+0x14e>
 8008816:	6823      	ldr	r3, [r4, #0]
 8008818:	07de      	lsls	r6, r3, #31
 800881a:	d508      	bpl.n	800882e <_printf_i+0x14e>
 800881c:	6923      	ldr	r3, [r4, #16]
 800881e:	6861      	ldr	r1, [r4, #4]
 8008820:	4299      	cmp	r1, r3
 8008822:	bfde      	ittt	le
 8008824:	2330      	movle	r3, #48	; 0x30
 8008826:	f805 3c01 	strble.w	r3, [r5, #-1]
 800882a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800882e:	1b52      	subs	r2, r2, r5
 8008830:	6122      	str	r2, [r4, #16]
 8008832:	464b      	mov	r3, r9
 8008834:	4621      	mov	r1, r4
 8008836:	4640      	mov	r0, r8
 8008838:	f8cd a000 	str.w	sl, [sp]
 800883c:	aa03      	add	r2, sp, #12
 800883e:	f7ff fedf 	bl	8008600 <_printf_common>
 8008842:	3001      	adds	r0, #1
 8008844:	d14c      	bne.n	80088e0 <_printf_i+0x200>
 8008846:	f04f 30ff 	mov.w	r0, #4294967295
 800884a:	b004      	add	sp, #16
 800884c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008850:	4834      	ldr	r0, [pc, #208]	; (8008924 <_printf_i+0x244>)
 8008852:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008856:	6829      	ldr	r1, [r5, #0]
 8008858:	6823      	ldr	r3, [r4, #0]
 800885a:	f851 6b04 	ldr.w	r6, [r1], #4
 800885e:	6029      	str	r1, [r5, #0]
 8008860:	061d      	lsls	r5, r3, #24
 8008862:	d514      	bpl.n	800888e <_printf_i+0x1ae>
 8008864:	07df      	lsls	r7, r3, #31
 8008866:	bf44      	itt	mi
 8008868:	f043 0320 	orrmi.w	r3, r3, #32
 800886c:	6023      	strmi	r3, [r4, #0]
 800886e:	b91e      	cbnz	r6, 8008878 <_printf_i+0x198>
 8008870:	6823      	ldr	r3, [r4, #0]
 8008872:	f023 0320 	bic.w	r3, r3, #32
 8008876:	6023      	str	r3, [r4, #0]
 8008878:	2310      	movs	r3, #16
 800887a:	e7af      	b.n	80087dc <_printf_i+0xfc>
 800887c:	6823      	ldr	r3, [r4, #0]
 800887e:	f043 0320 	orr.w	r3, r3, #32
 8008882:	6023      	str	r3, [r4, #0]
 8008884:	2378      	movs	r3, #120	; 0x78
 8008886:	4828      	ldr	r0, [pc, #160]	; (8008928 <_printf_i+0x248>)
 8008888:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800888c:	e7e3      	b.n	8008856 <_printf_i+0x176>
 800888e:	0659      	lsls	r1, r3, #25
 8008890:	bf48      	it	mi
 8008892:	b2b6      	uxthmi	r6, r6
 8008894:	e7e6      	b.n	8008864 <_printf_i+0x184>
 8008896:	4615      	mov	r5, r2
 8008898:	e7bb      	b.n	8008812 <_printf_i+0x132>
 800889a:	682b      	ldr	r3, [r5, #0]
 800889c:	6826      	ldr	r6, [r4, #0]
 800889e:	1d18      	adds	r0, r3, #4
 80088a0:	6961      	ldr	r1, [r4, #20]
 80088a2:	6028      	str	r0, [r5, #0]
 80088a4:	0635      	lsls	r5, r6, #24
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	d501      	bpl.n	80088ae <_printf_i+0x1ce>
 80088aa:	6019      	str	r1, [r3, #0]
 80088ac:	e002      	b.n	80088b4 <_printf_i+0x1d4>
 80088ae:	0670      	lsls	r0, r6, #25
 80088b0:	d5fb      	bpl.n	80088aa <_printf_i+0x1ca>
 80088b2:	8019      	strh	r1, [r3, #0]
 80088b4:	2300      	movs	r3, #0
 80088b6:	4615      	mov	r5, r2
 80088b8:	6123      	str	r3, [r4, #16]
 80088ba:	e7ba      	b.n	8008832 <_printf_i+0x152>
 80088bc:	682b      	ldr	r3, [r5, #0]
 80088be:	2100      	movs	r1, #0
 80088c0:	1d1a      	adds	r2, r3, #4
 80088c2:	602a      	str	r2, [r5, #0]
 80088c4:	681d      	ldr	r5, [r3, #0]
 80088c6:	6862      	ldr	r2, [r4, #4]
 80088c8:	4628      	mov	r0, r5
 80088ca:	f002 fb17 	bl	800aefc <memchr>
 80088ce:	b108      	cbz	r0, 80088d4 <_printf_i+0x1f4>
 80088d0:	1b40      	subs	r0, r0, r5
 80088d2:	6060      	str	r0, [r4, #4]
 80088d4:	6863      	ldr	r3, [r4, #4]
 80088d6:	6123      	str	r3, [r4, #16]
 80088d8:	2300      	movs	r3, #0
 80088da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80088de:	e7a8      	b.n	8008832 <_printf_i+0x152>
 80088e0:	462a      	mov	r2, r5
 80088e2:	4649      	mov	r1, r9
 80088e4:	4640      	mov	r0, r8
 80088e6:	6923      	ldr	r3, [r4, #16]
 80088e8:	47d0      	blx	sl
 80088ea:	3001      	adds	r0, #1
 80088ec:	d0ab      	beq.n	8008846 <_printf_i+0x166>
 80088ee:	6823      	ldr	r3, [r4, #0]
 80088f0:	079b      	lsls	r3, r3, #30
 80088f2:	d413      	bmi.n	800891c <_printf_i+0x23c>
 80088f4:	68e0      	ldr	r0, [r4, #12]
 80088f6:	9b03      	ldr	r3, [sp, #12]
 80088f8:	4298      	cmp	r0, r3
 80088fa:	bfb8      	it	lt
 80088fc:	4618      	movlt	r0, r3
 80088fe:	e7a4      	b.n	800884a <_printf_i+0x16a>
 8008900:	2301      	movs	r3, #1
 8008902:	4632      	mov	r2, r6
 8008904:	4649      	mov	r1, r9
 8008906:	4640      	mov	r0, r8
 8008908:	47d0      	blx	sl
 800890a:	3001      	adds	r0, #1
 800890c:	d09b      	beq.n	8008846 <_printf_i+0x166>
 800890e:	3501      	adds	r5, #1
 8008910:	68e3      	ldr	r3, [r4, #12]
 8008912:	9903      	ldr	r1, [sp, #12]
 8008914:	1a5b      	subs	r3, r3, r1
 8008916:	42ab      	cmp	r3, r5
 8008918:	dcf2      	bgt.n	8008900 <_printf_i+0x220>
 800891a:	e7eb      	b.n	80088f4 <_printf_i+0x214>
 800891c:	2500      	movs	r5, #0
 800891e:	f104 0619 	add.w	r6, r4, #25
 8008922:	e7f5      	b.n	8008910 <_printf_i+0x230>
 8008924:	0800c7a2 	.word	0x0800c7a2
 8008928:	0800c7b3 	.word	0x0800c7b3

0800892c <_scanf_float>:
 800892c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008930:	b087      	sub	sp, #28
 8008932:	9303      	str	r3, [sp, #12]
 8008934:	688b      	ldr	r3, [r1, #8]
 8008936:	4617      	mov	r7, r2
 8008938:	1e5a      	subs	r2, r3, #1
 800893a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800893e:	bf85      	ittet	hi
 8008940:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008944:	195b      	addhi	r3, r3, r5
 8008946:	2300      	movls	r3, #0
 8008948:	9302      	strhi	r3, [sp, #8]
 800894a:	bf88      	it	hi
 800894c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008950:	468b      	mov	fp, r1
 8008952:	f04f 0500 	mov.w	r5, #0
 8008956:	bf8c      	ite	hi
 8008958:	608b      	strhi	r3, [r1, #8]
 800895a:	9302      	strls	r3, [sp, #8]
 800895c:	680b      	ldr	r3, [r1, #0]
 800895e:	4680      	mov	r8, r0
 8008960:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008964:	f84b 3b1c 	str.w	r3, [fp], #28
 8008968:	460c      	mov	r4, r1
 800896a:	465e      	mov	r6, fp
 800896c:	46aa      	mov	sl, r5
 800896e:	46a9      	mov	r9, r5
 8008970:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008974:	9501      	str	r5, [sp, #4]
 8008976:	68a2      	ldr	r2, [r4, #8]
 8008978:	b152      	cbz	r2, 8008990 <_scanf_float+0x64>
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	781b      	ldrb	r3, [r3, #0]
 800897e:	2b4e      	cmp	r3, #78	; 0x4e
 8008980:	d864      	bhi.n	8008a4c <_scanf_float+0x120>
 8008982:	2b40      	cmp	r3, #64	; 0x40
 8008984:	d83c      	bhi.n	8008a00 <_scanf_float+0xd4>
 8008986:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800898a:	b2c8      	uxtb	r0, r1
 800898c:	280e      	cmp	r0, #14
 800898e:	d93a      	bls.n	8008a06 <_scanf_float+0xda>
 8008990:	f1b9 0f00 	cmp.w	r9, #0
 8008994:	d003      	beq.n	800899e <_scanf_float+0x72>
 8008996:	6823      	ldr	r3, [r4, #0]
 8008998:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800899c:	6023      	str	r3, [r4, #0]
 800899e:	f10a 3aff 	add.w	sl, sl, #4294967295
 80089a2:	f1ba 0f01 	cmp.w	sl, #1
 80089a6:	f200 8113 	bhi.w	8008bd0 <_scanf_float+0x2a4>
 80089aa:	455e      	cmp	r6, fp
 80089ac:	f200 8105 	bhi.w	8008bba <_scanf_float+0x28e>
 80089b0:	2501      	movs	r5, #1
 80089b2:	4628      	mov	r0, r5
 80089b4:	b007      	add	sp, #28
 80089b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089ba:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80089be:	2a0d      	cmp	r2, #13
 80089c0:	d8e6      	bhi.n	8008990 <_scanf_float+0x64>
 80089c2:	a101      	add	r1, pc, #4	; (adr r1, 80089c8 <_scanf_float+0x9c>)
 80089c4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80089c8:	08008b07 	.word	0x08008b07
 80089cc:	08008991 	.word	0x08008991
 80089d0:	08008991 	.word	0x08008991
 80089d4:	08008991 	.word	0x08008991
 80089d8:	08008b67 	.word	0x08008b67
 80089dc:	08008b3f 	.word	0x08008b3f
 80089e0:	08008991 	.word	0x08008991
 80089e4:	08008991 	.word	0x08008991
 80089e8:	08008b15 	.word	0x08008b15
 80089ec:	08008991 	.word	0x08008991
 80089f0:	08008991 	.word	0x08008991
 80089f4:	08008991 	.word	0x08008991
 80089f8:	08008991 	.word	0x08008991
 80089fc:	08008acd 	.word	0x08008acd
 8008a00:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008a04:	e7db      	b.n	80089be <_scanf_float+0x92>
 8008a06:	290e      	cmp	r1, #14
 8008a08:	d8c2      	bhi.n	8008990 <_scanf_float+0x64>
 8008a0a:	a001      	add	r0, pc, #4	; (adr r0, 8008a10 <_scanf_float+0xe4>)
 8008a0c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008a10:	08008abf 	.word	0x08008abf
 8008a14:	08008991 	.word	0x08008991
 8008a18:	08008abf 	.word	0x08008abf
 8008a1c:	08008b53 	.word	0x08008b53
 8008a20:	08008991 	.word	0x08008991
 8008a24:	08008a6d 	.word	0x08008a6d
 8008a28:	08008aa9 	.word	0x08008aa9
 8008a2c:	08008aa9 	.word	0x08008aa9
 8008a30:	08008aa9 	.word	0x08008aa9
 8008a34:	08008aa9 	.word	0x08008aa9
 8008a38:	08008aa9 	.word	0x08008aa9
 8008a3c:	08008aa9 	.word	0x08008aa9
 8008a40:	08008aa9 	.word	0x08008aa9
 8008a44:	08008aa9 	.word	0x08008aa9
 8008a48:	08008aa9 	.word	0x08008aa9
 8008a4c:	2b6e      	cmp	r3, #110	; 0x6e
 8008a4e:	d809      	bhi.n	8008a64 <_scanf_float+0x138>
 8008a50:	2b60      	cmp	r3, #96	; 0x60
 8008a52:	d8b2      	bhi.n	80089ba <_scanf_float+0x8e>
 8008a54:	2b54      	cmp	r3, #84	; 0x54
 8008a56:	d077      	beq.n	8008b48 <_scanf_float+0x21c>
 8008a58:	2b59      	cmp	r3, #89	; 0x59
 8008a5a:	d199      	bne.n	8008990 <_scanf_float+0x64>
 8008a5c:	2d07      	cmp	r5, #7
 8008a5e:	d197      	bne.n	8008990 <_scanf_float+0x64>
 8008a60:	2508      	movs	r5, #8
 8008a62:	e029      	b.n	8008ab8 <_scanf_float+0x18c>
 8008a64:	2b74      	cmp	r3, #116	; 0x74
 8008a66:	d06f      	beq.n	8008b48 <_scanf_float+0x21c>
 8008a68:	2b79      	cmp	r3, #121	; 0x79
 8008a6a:	e7f6      	b.n	8008a5a <_scanf_float+0x12e>
 8008a6c:	6821      	ldr	r1, [r4, #0]
 8008a6e:	05c8      	lsls	r0, r1, #23
 8008a70:	d51a      	bpl.n	8008aa8 <_scanf_float+0x17c>
 8008a72:	9b02      	ldr	r3, [sp, #8]
 8008a74:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008a78:	6021      	str	r1, [r4, #0]
 8008a7a:	f109 0901 	add.w	r9, r9, #1
 8008a7e:	b11b      	cbz	r3, 8008a88 <_scanf_float+0x15c>
 8008a80:	3b01      	subs	r3, #1
 8008a82:	3201      	adds	r2, #1
 8008a84:	9302      	str	r3, [sp, #8]
 8008a86:	60a2      	str	r2, [r4, #8]
 8008a88:	68a3      	ldr	r3, [r4, #8]
 8008a8a:	3b01      	subs	r3, #1
 8008a8c:	60a3      	str	r3, [r4, #8]
 8008a8e:	6923      	ldr	r3, [r4, #16]
 8008a90:	3301      	adds	r3, #1
 8008a92:	6123      	str	r3, [r4, #16]
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	3b01      	subs	r3, #1
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	607b      	str	r3, [r7, #4]
 8008a9c:	f340 8084 	ble.w	8008ba8 <_scanf_float+0x27c>
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	3301      	adds	r3, #1
 8008aa4:	603b      	str	r3, [r7, #0]
 8008aa6:	e766      	b.n	8008976 <_scanf_float+0x4a>
 8008aa8:	eb1a 0f05 	cmn.w	sl, r5
 8008aac:	f47f af70 	bne.w	8008990 <_scanf_float+0x64>
 8008ab0:	6822      	ldr	r2, [r4, #0]
 8008ab2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8008ab6:	6022      	str	r2, [r4, #0]
 8008ab8:	f806 3b01 	strb.w	r3, [r6], #1
 8008abc:	e7e4      	b.n	8008a88 <_scanf_float+0x15c>
 8008abe:	6822      	ldr	r2, [r4, #0]
 8008ac0:	0610      	lsls	r0, r2, #24
 8008ac2:	f57f af65 	bpl.w	8008990 <_scanf_float+0x64>
 8008ac6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008aca:	e7f4      	b.n	8008ab6 <_scanf_float+0x18a>
 8008acc:	f1ba 0f00 	cmp.w	sl, #0
 8008ad0:	d10e      	bne.n	8008af0 <_scanf_float+0x1c4>
 8008ad2:	f1b9 0f00 	cmp.w	r9, #0
 8008ad6:	d10e      	bne.n	8008af6 <_scanf_float+0x1ca>
 8008ad8:	6822      	ldr	r2, [r4, #0]
 8008ada:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008ade:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008ae2:	d108      	bne.n	8008af6 <_scanf_float+0x1ca>
 8008ae4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008ae8:	f04f 0a01 	mov.w	sl, #1
 8008aec:	6022      	str	r2, [r4, #0]
 8008aee:	e7e3      	b.n	8008ab8 <_scanf_float+0x18c>
 8008af0:	f1ba 0f02 	cmp.w	sl, #2
 8008af4:	d055      	beq.n	8008ba2 <_scanf_float+0x276>
 8008af6:	2d01      	cmp	r5, #1
 8008af8:	d002      	beq.n	8008b00 <_scanf_float+0x1d4>
 8008afa:	2d04      	cmp	r5, #4
 8008afc:	f47f af48 	bne.w	8008990 <_scanf_float+0x64>
 8008b00:	3501      	adds	r5, #1
 8008b02:	b2ed      	uxtb	r5, r5
 8008b04:	e7d8      	b.n	8008ab8 <_scanf_float+0x18c>
 8008b06:	f1ba 0f01 	cmp.w	sl, #1
 8008b0a:	f47f af41 	bne.w	8008990 <_scanf_float+0x64>
 8008b0e:	f04f 0a02 	mov.w	sl, #2
 8008b12:	e7d1      	b.n	8008ab8 <_scanf_float+0x18c>
 8008b14:	b97d      	cbnz	r5, 8008b36 <_scanf_float+0x20a>
 8008b16:	f1b9 0f00 	cmp.w	r9, #0
 8008b1a:	f47f af3c 	bne.w	8008996 <_scanf_float+0x6a>
 8008b1e:	6822      	ldr	r2, [r4, #0]
 8008b20:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008b24:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008b28:	f47f af39 	bne.w	800899e <_scanf_float+0x72>
 8008b2c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008b30:	2501      	movs	r5, #1
 8008b32:	6022      	str	r2, [r4, #0]
 8008b34:	e7c0      	b.n	8008ab8 <_scanf_float+0x18c>
 8008b36:	2d03      	cmp	r5, #3
 8008b38:	d0e2      	beq.n	8008b00 <_scanf_float+0x1d4>
 8008b3a:	2d05      	cmp	r5, #5
 8008b3c:	e7de      	b.n	8008afc <_scanf_float+0x1d0>
 8008b3e:	2d02      	cmp	r5, #2
 8008b40:	f47f af26 	bne.w	8008990 <_scanf_float+0x64>
 8008b44:	2503      	movs	r5, #3
 8008b46:	e7b7      	b.n	8008ab8 <_scanf_float+0x18c>
 8008b48:	2d06      	cmp	r5, #6
 8008b4a:	f47f af21 	bne.w	8008990 <_scanf_float+0x64>
 8008b4e:	2507      	movs	r5, #7
 8008b50:	e7b2      	b.n	8008ab8 <_scanf_float+0x18c>
 8008b52:	6822      	ldr	r2, [r4, #0]
 8008b54:	0591      	lsls	r1, r2, #22
 8008b56:	f57f af1b 	bpl.w	8008990 <_scanf_float+0x64>
 8008b5a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8008b5e:	6022      	str	r2, [r4, #0]
 8008b60:	f8cd 9004 	str.w	r9, [sp, #4]
 8008b64:	e7a8      	b.n	8008ab8 <_scanf_float+0x18c>
 8008b66:	6822      	ldr	r2, [r4, #0]
 8008b68:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008b6c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008b70:	d006      	beq.n	8008b80 <_scanf_float+0x254>
 8008b72:	0550      	lsls	r0, r2, #21
 8008b74:	f57f af0c 	bpl.w	8008990 <_scanf_float+0x64>
 8008b78:	f1b9 0f00 	cmp.w	r9, #0
 8008b7c:	f43f af0f 	beq.w	800899e <_scanf_float+0x72>
 8008b80:	0591      	lsls	r1, r2, #22
 8008b82:	bf58      	it	pl
 8008b84:	9901      	ldrpl	r1, [sp, #4]
 8008b86:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008b8a:	bf58      	it	pl
 8008b8c:	eba9 0101 	subpl.w	r1, r9, r1
 8008b90:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008b94:	f04f 0900 	mov.w	r9, #0
 8008b98:	bf58      	it	pl
 8008b9a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008b9e:	6022      	str	r2, [r4, #0]
 8008ba0:	e78a      	b.n	8008ab8 <_scanf_float+0x18c>
 8008ba2:	f04f 0a03 	mov.w	sl, #3
 8008ba6:	e787      	b.n	8008ab8 <_scanf_float+0x18c>
 8008ba8:	4639      	mov	r1, r7
 8008baa:	4640      	mov	r0, r8
 8008bac:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008bb0:	4798      	blx	r3
 8008bb2:	2800      	cmp	r0, #0
 8008bb4:	f43f aedf 	beq.w	8008976 <_scanf_float+0x4a>
 8008bb8:	e6ea      	b.n	8008990 <_scanf_float+0x64>
 8008bba:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008bbe:	463a      	mov	r2, r7
 8008bc0:	4640      	mov	r0, r8
 8008bc2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008bc6:	4798      	blx	r3
 8008bc8:	6923      	ldr	r3, [r4, #16]
 8008bca:	3b01      	subs	r3, #1
 8008bcc:	6123      	str	r3, [r4, #16]
 8008bce:	e6ec      	b.n	80089aa <_scanf_float+0x7e>
 8008bd0:	1e6b      	subs	r3, r5, #1
 8008bd2:	2b06      	cmp	r3, #6
 8008bd4:	d825      	bhi.n	8008c22 <_scanf_float+0x2f6>
 8008bd6:	2d02      	cmp	r5, #2
 8008bd8:	d836      	bhi.n	8008c48 <_scanf_float+0x31c>
 8008bda:	455e      	cmp	r6, fp
 8008bdc:	f67f aee8 	bls.w	80089b0 <_scanf_float+0x84>
 8008be0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008be4:	463a      	mov	r2, r7
 8008be6:	4640      	mov	r0, r8
 8008be8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008bec:	4798      	blx	r3
 8008bee:	6923      	ldr	r3, [r4, #16]
 8008bf0:	3b01      	subs	r3, #1
 8008bf2:	6123      	str	r3, [r4, #16]
 8008bf4:	e7f1      	b.n	8008bda <_scanf_float+0x2ae>
 8008bf6:	9802      	ldr	r0, [sp, #8]
 8008bf8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008bfc:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008c00:	463a      	mov	r2, r7
 8008c02:	9002      	str	r0, [sp, #8]
 8008c04:	4640      	mov	r0, r8
 8008c06:	4798      	blx	r3
 8008c08:	6923      	ldr	r3, [r4, #16]
 8008c0a:	3b01      	subs	r3, #1
 8008c0c:	6123      	str	r3, [r4, #16]
 8008c0e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008c12:	fa5f fa8a 	uxtb.w	sl, sl
 8008c16:	f1ba 0f02 	cmp.w	sl, #2
 8008c1a:	d1ec      	bne.n	8008bf6 <_scanf_float+0x2ca>
 8008c1c:	3d03      	subs	r5, #3
 8008c1e:	b2ed      	uxtb	r5, r5
 8008c20:	1b76      	subs	r6, r6, r5
 8008c22:	6823      	ldr	r3, [r4, #0]
 8008c24:	05da      	lsls	r2, r3, #23
 8008c26:	d52f      	bpl.n	8008c88 <_scanf_float+0x35c>
 8008c28:	055b      	lsls	r3, r3, #21
 8008c2a:	d510      	bpl.n	8008c4e <_scanf_float+0x322>
 8008c2c:	455e      	cmp	r6, fp
 8008c2e:	f67f aebf 	bls.w	80089b0 <_scanf_float+0x84>
 8008c32:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008c36:	463a      	mov	r2, r7
 8008c38:	4640      	mov	r0, r8
 8008c3a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008c3e:	4798      	blx	r3
 8008c40:	6923      	ldr	r3, [r4, #16]
 8008c42:	3b01      	subs	r3, #1
 8008c44:	6123      	str	r3, [r4, #16]
 8008c46:	e7f1      	b.n	8008c2c <_scanf_float+0x300>
 8008c48:	46aa      	mov	sl, r5
 8008c4a:	9602      	str	r6, [sp, #8]
 8008c4c:	e7df      	b.n	8008c0e <_scanf_float+0x2e2>
 8008c4e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008c52:	6923      	ldr	r3, [r4, #16]
 8008c54:	2965      	cmp	r1, #101	; 0x65
 8008c56:	f103 33ff 	add.w	r3, r3, #4294967295
 8008c5a:	f106 35ff 	add.w	r5, r6, #4294967295
 8008c5e:	6123      	str	r3, [r4, #16]
 8008c60:	d00c      	beq.n	8008c7c <_scanf_float+0x350>
 8008c62:	2945      	cmp	r1, #69	; 0x45
 8008c64:	d00a      	beq.n	8008c7c <_scanf_float+0x350>
 8008c66:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008c6a:	463a      	mov	r2, r7
 8008c6c:	4640      	mov	r0, r8
 8008c6e:	4798      	blx	r3
 8008c70:	6923      	ldr	r3, [r4, #16]
 8008c72:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008c76:	3b01      	subs	r3, #1
 8008c78:	1eb5      	subs	r5, r6, #2
 8008c7a:	6123      	str	r3, [r4, #16]
 8008c7c:	463a      	mov	r2, r7
 8008c7e:	4640      	mov	r0, r8
 8008c80:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008c84:	4798      	blx	r3
 8008c86:	462e      	mov	r6, r5
 8008c88:	6825      	ldr	r5, [r4, #0]
 8008c8a:	f015 0510 	ands.w	r5, r5, #16
 8008c8e:	d155      	bne.n	8008d3c <_scanf_float+0x410>
 8008c90:	7035      	strb	r5, [r6, #0]
 8008c92:	6823      	ldr	r3, [r4, #0]
 8008c94:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008c98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c9c:	d11b      	bne.n	8008cd6 <_scanf_float+0x3aa>
 8008c9e:	9b01      	ldr	r3, [sp, #4]
 8008ca0:	454b      	cmp	r3, r9
 8008ca2:	eba3 0209 	sub.w	r2, r3, r9
 8008ca6:	d123      	bne.n	8008cf0 <_scanf_float+0x3c4>
 8008ca8:	2200      	movs	r2, #0
 8008caa:	4659      	mov	r1, fp
 8008cac:	4640      	mov	r0, r8
 8008cae:	f000 fe8b 	bl	80099c8 <_strtod_r>
 8008cb2:	6822      	ldr	r2, [r4, #0]
 8008cb4:	9b03      	ldr	r3, [sp, #12]
 8008cb6:	f012 0f02 	tst.w	r2, #2
 8008cba:	4606      	mov	r6, r0
 8008cbc:	460f      	mov	r7, r1
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	d021      	beq.n	8008d06 <_scanf_float+0x3da>
 8008cc2:	1d1a      	adds	r2, r3, #4
 8008cc4:	9903      	ldr	r1, [sp, #12]
 8008cc6:	600a      	str	r2, [r1, #0]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	e9c3 6700 	strd	r6, r7, [r3]
 8008cce:	68e3      	ldr	r3, [r4, #12]
 8008cd0:	3301      	adds	r3, #1
 8008cd2:	60e3      	str	r3, [r4, #12]
 8008cd4:	e66d      	b.n	80089b2 <_scanf_float+0x86>
 8008cd6:	9b04      	ldr	r3, [sp, #16]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d0e5      	beq.n	8008ca8 <_scanf_float+0x37c>
 8008cdc:	9905      	ldr	r1, [sp, #20]
 8008cde:	230a      	movs	r3, #10
 8008ce0:	462a      	mov	r2, r5
 8008ce2:	4640      	mov	r0, r8
 8008ce4:	3101      	adds	r1, #1
 8008ce6:	f000 fef1 	bl	8009acc <_strtol_r>
 8008cea:	9b04      	ldr	r3, [sp, #16]
 8008cec:	9e05      	ldr	r6, [sp, #20]
 8008cee:	1ac2      	subs	r2, r0, r3
 8008cf0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008cf4:	429e      	cmp	r6, r3
 8008cf6:	bf28      	it	cs
 8008cf8:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8008cfc:	4630      	mov	r0, r6
 8008cfe:	4910      	ldr	r1, [pc, #64]	; (8008d40 <_scanf_float+0x414>)
 8008d00:	f000 f836 	bl	8008d70 <siprintf>
 8008d04:	e7d0      	b.n	8008ca8 <_scanf_float+0x37c>
 8008d06:	f012 0f04 	tst.w	r2, #4
 8008d0a:	f103 0204 	add.w	r2, r3, #4
 8008d0e:	d1d9      	bne.n	8008cc4 <_scanf_float+0x398>
 8008d10:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8008d14:	f8cc 2000 	str.w	r2, [ip]
 8008d18:	f8d3 8000 	ldr.w	r8, [r3]
 8008d1c:	4602      	mov	r2, r0
 8008d1e:	460b      	mov	r3, r1
 8008d20:	f7f7 fee0 	bl	8000ae4 <__aeabi_dcmpun>
 8008d24:	b128      	cbz	r0, 8008d32 <_scanf_float+0x406>
 8008d26:	4807      	ldr	r0, [pc, #28]	; (8008d44 <_scanf_float+0x418>)
 8008d28:	f000 f81e 	bl	8008d68 <nanf>
 8008d2c:	f8c8 0000 	str.w	r0, [r8]
 8008d30:	e7cd      	b.n	8008cce <_scanf_float+0x3a2>
 8008d32:	4630      	mov	r0, r6
 8008d34:	4639      	mov	r1, r7
 8008d36:	f7f7 ff33 	bl	8000ba0 <__aeabi_d2f>
 8008d3a:	e7f7      	b.n	8008d2c <_scanf_float+0x400>
 8008d3c:	2500      	movs	r5, #0
 8008d3e:	e638      	b.n	80089b2 <_scanf_float+0x86>
 8008d40:	0800c7c4 	.word	0x0800c7c4
 8008d44:	0800cbd0 	.word	0x0800cbd0

08008d48 <_sbrk_r>:
 8008d48:	b538      	push	{r3, r4, r5, lr}
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	4d05      	ldr	r5, [pc, #20]	; (8008d64 <_sbrk_r+0x1c>)
 8008d4e:	4604      	mov	r4, r0
 8008d50:	4608      	mov	r0, r1
 8008d52:	602b      	str	r3, [r5, #0]
 8008d54:	f7fa fbac 	bl	80034b0 <_sbrk>
 8008d58:	1c43      	adds	r3, r0, #1
 8008d5a:	d102      	bne.n	8008d62 <_sbrk_r+0x1a>
 8008d5c:	682b      	ldr	r3, [r5, #0]
 8008d5e:	b103      	cbz	r3, 8008d62 <_sbrk_r+0x1a>
 8008d60:	6023      	str	r3, [r4, #0]
 8008d62:	bd38      	pop	{r3, r4, r5, pc}
 8008d64:	20000a64 	.word	0x20000a64

08008d68 <nanf>:
 8008d68:	4800      	ldr	r0, [pc, #0]	; (8008d6c <nanf+0x4>)
 8008d6a:	4770      	bx	lr
 8008d6c:	7fc00000 	.word	0x7fc00000

08008d70 <siprintf>:
 8008d70:	b40e      	push	{r1, r2, r3}
 8008d72:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008d76:	b500      	push	{lr}
 8008d78:	b09c      	sub	sp, #112	; 0x70
 8008d7a:	ab1d      	add	r3, sp, #116	; 0x74
 8008d7c:	9002      	str	r0, [sp, #8]
 8008d7e:	9006      	str	r0, [sp, #24]
 8008d80:	9107      	str	r1, [sp, #28]
 8008d82:	9104      	str	r1, [sp, #16]
 8008d84:	4808      	ldr	r0, [pc, #32]	; (8008da8 <siprintf+0x38>)
 8008d86:	4909      	ldr	r1, [pc, #36]	; (8008dac <siprintf+0x3c>)
 8008d88:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d8c:	9105      	str	r1, [sp, #20]
 8008d8e:	6800      	ldr	r0, [r0, #0]
 8008d90:	a902      	add	r1, sp, #8
 8008d92:	9301      	str	r3, [sp, #4]
 8008d94:	f002 fde0 	bl	800b958 <_svfiprintf_r>
 8008d98:	2200      	movs	r2, #0
 8008d9a:	9b02      	ldr	r3, [sp, #8]
 8008d9c:	701a      	strb	r2, [r3, #0]
 8008d9e:	b01c      	add	sp, #112	; 0x70
 8008da0:	f85d eb04 	ldr.w	lr, [sp], #4
 8008da4:	b003      	add	sp, #12
 8008da6:	4770      	bx	lr
 8008da8:	20000048 	.word	0x20000048
 8008dac:	ffff0208 	.word	0xffff0208

08008db0 <sulp>:
 8008db0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008db4:	460f      	mov	r7, r1
 8008db6:	4690      	mov	r8, r2
 8008db8:	f002 fc2a 	bl	800b610 <__ulp>
 8008dbc:	4604      	mov	r4, r0
 8008dbe:	460d      	mov	r5, r1
 8008dc0:	f1b8 0f00 	cmp.w	r8, #0
 8008dc4:	d011      	beq.n	8008dea <sulp+0x3a>
 8008dc6:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8008dca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	dd0b      	ble.n	8008dea <sulp+0x3a>
 8008dd2:	2400      	movs	r4, #0
 8008dd4:	051b      	lsls	r3, r3, #20
 8008dd6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008dda:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008dde:	4622      	mov	r2, r4
 8008de0:	462b      	mov	r3, r5
 8008de2:	f7f7 fbe5 	bl	80005b0 <__aeabi_dmul>
 8008de6:	4604      	mov	r4, r0
 8008de8:	460d      	mov	r5, r1
 8008dea:	4620      	mov	r0, r4
 8008dec:	4629      	mov	r1, r5
 8008dee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008df2:	0000      	movs	r0, r0
 8008df4:	0000      	movs	r0, r0
	...

08008df8 <_strtod_l>:
 8008df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dfc:	469b      	mov	fp, r3
 8008dfe:	2300      	movs	r3, #0
 8008e00:	b09f      	sub	sp, #124	; 0x7c
 8008e02:	931a      	str	r3, [sp, #104]	; 0x68
 8008e04:	4b9e      	ldr	r3, [pc, #632]	; (8009080 <_strtod_l+0x288>)
 8008e06:	4682      	mov	sl, r0
 8008e08:	681f      	ldr	r7, [r3, #0]
 8008e0a:	460e      	mov	r6, r1
 8008e0c:	4638      	mov	r0, r7
 8008e0e:	9215      	str	r2, [sp, #84]	; 0x54
 8008e10:	f7f7 fa0a 	bl	8000228 <strlen>
 8008e14:	f04f 0800 	mov.w	r8, #0
 8008e18:	4604      	mov	r4, r0
 8008e1a:	f04f 0900 	mov.w	r9, #0
 8008e1e:	9619      	str	r6, [sp, #100]	; 0x64
 8008e20:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008e22:	781a      	ldrb	r2, [r3, #0]
 8008e24:	2a2b      	cmp	r2, #43	; 0x2b
 8008e26:	d04c      	beq.n	8008ec2 <_strtod_l+0xca>
 8008e28:	d83a      	bhi.n	8008ea0 <_strtod_l+0xa8>
 8008e2a:	2a0d      	cmp	r2, #13
 8008e2c:	d833      	bhi.n	8008e96 <_strtod_l+0x9e>
 8008e2e:	2a08      	cmp	r2, #8
 8008e30:	d833      	bhi.n	8008e9a <_strtod_l+0xa2>
 8008e32:	2a00      	cmp	r2, #0
 8008e34:	d03d      	beq.n	8008eb2 <_strtod_l+0xba>
 8008e36:	2300      	movs	r3, #0
 8008e38:	930a      	str	r3, [sp, #40]	; 0x28
 8008e3a:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8008e3c:	782b      	ldrb	r3, [r5, #0]
 8008e3e:	2b30      	cmp	r3, #48	; 0x30
 8008e40:	f040 80aa 	bne.w	8008f98 <_strtod_l+0x1a0>
 8008e44:	786b      	ldrb	r3, [r5, #1]
 8008e46:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008e4a:	2b58      	cmp	r3, #88	; 0x58
 8008e4c:	d166      	bne.n	8008f1c <_strtod_l+0x124>
 8008e4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e50:	4650      	mov	r0, sl
 8008e52:	9301      	str	r3, [sp, #4]
 8008e54:	ab1a      	add	r3, sp, #104	; 0x68
 8008e56:	9300      	str	r3, [sp, #0]
 8008e58:	4a8a      	ldr	r2, [pc, #552]	; (8009084 <_strtod_l+0x28c>)
 8008e5a:	f8cd b008 	str.w	fp, [sp, #8]
 8008e5e:	ab1b      	add	r3, sp, #108	; 0x6c
 8008e60:	a919      	add	r1, sp, #100	; 0x64
 8008e62:	f001 fd37 	bl	800a8d4 <__gethex>
 8008e66:	f010 0607 	ands.w	r6, r0, #7
 8008e6a:	4604      	mov	r4, r0
 8008e6c:	d005      	beq.n	8008e7a <_strtod_l+0x82>
 8008e6e:	2e06      	cmp	r6, #6
 8008e70:	d129      	bne.n	8008ec6 <_strtod_l+0xce>
 8008e72:	2300      	movs	r3, #0
 8008e74:	3501      	adds	r5, #1
 8008e76:	9519      	str	r5, [sp, #100]	; 0x64
 8008e78:	930a      	str	r3, [sp, #40]	; 0x28
 8008e7a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	f040 858a 	bne.w	8009996 <_strtod_l+0xb9e>
 8008e82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e84:	b1d3      	cbz	r3, 8008ebc <_strtod_l+0xc4>
 8008e86:	4642      	mov	r2, r8
 8008e88:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008e8c:	4610      	mov	r0, r2
 8008e8e:	4619      	mov	r1, r3
 8008e90:	b01f      	add	sp, #124	; 0x7c
 8008e92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e96:	2a20      	cmp	r2, #32
 8008e98:	d1cd      	bne.n	8008e36 <_strtod_l+0x3e>
 8008e9a:	3301      	adds	r3, #1
 8008e9c:	9319      	str	r3, [sp, #100]	; 0x64
 8008e9e:	e7bf      	b.n	8008e20 <_strtod_l+0x28>
 8008ea0:	2a2d      	cmp	r2, #45	; 0x2d
 8008ea2:	d1c8      	bne.n	8008e36 <_strtod_l+0x3e>
 8008ea4:	2201      	movs	r2, #1
 8008ea6:	920a      	str	r2, [sp, #40]	; 0x28
 8008ea8:	1c5a      	adds	r2, r3, #1
 8008eaa:	9219      	str	r2, [sp, #100]	; 0x64
 8008eac:	785b      	ldrb	r3, [r3, #1]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d1c3      	bne.n	8008e3a <_strtod_l+0x42>
 8008eb2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008eb4:	9619      	str	r6, [sp, #100]	; 0x64
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	f040 856b 	bne.w	8009992 <_strtod_l+0xb9a>
 8008ebc:	4642      	mov	r2, r8
 8008ebe:	464b      	mov	r3, r9
 8008ec0:	e7e4      	b.n	8008e8c <_strtod_l+0x94>
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	e7ef      	b.n	8008ea6 <_strtod_l+0xae>
 8008ec6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008ec8:	b13a      	cbz	r2, 8008eda <_strtod_l+0xe2>
 8008eca:	2135      	movs	r1, #53	; 0x35
 8008ecc:	a81c      	add	r0, sp, #112	; 0x70
 8008ece:	f002 fca3 	bl	800b818 <__copybits>
 8008ed2:	4650      	mov	r0, sl
 8008ed4:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008ed6:	f002 f86b 	bl	800afb0 <_Bfree>
 8008eda:	3e01      	subs	r6, #1
 8008edc:	2e04      	cmp	r6, #4
 8008ede:	d806      	bhi.n	8008eee <_strtod_l+0xf6>
 8008ee0:	e8df f006 	tbb	[pc, r6]
 8008ee4:	1714030a 	.word	0x1714030a
 8008ee8:	0a          	.byte	0x0a
 8008ee9:	00          	.byte	0x00
 8008eea:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8008eee:	0721      	lsls	r1, r4, #28
 8008ef0:	d5c3      	bpl.n	8008e7a <_strtod_l+0x82>
 8008ef2:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8008ef6:	e7c0      	b.n	8008e7a <_strtod_l+0x82>
 8008ef8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008efa:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8008efe:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008f02:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008f06:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8008f0a:	e7f0      	b.n	8008eee <_strtod_l+0xf6>
 8008f0c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8009088 <_strtod_l+0x290>
 8008f10:	e7ed      	b.n	8008eee <_strtod_l+0xf6>
 8008f12:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8008f16:	f04f 38ff 	mov.w	r8, #4294967295
 8008f1a:	e7e8      	b.n	8008eee <_strtod_l+0xf6>
 8008f1c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008f1e:	1c5a      	adds	r2, r3, #1
 8008f20:	9219      	str	r2, [sp, #100]	; 0x64
 8008f22:	785b      	ldrb	r3, [r3, #1]
 8008f24:	2b30      	cmp	r3, #48	; 0x30
 8008f26:	d0f9      	beq.n	8008f1c <_strtod_l+0x124>
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d0a6      	beq.n	8008e7a <_strtod_l+0x82>
 8008f2c:	2301      	movs	r3, #1
 8008f2e:	9307      	str	r3, [sp, #28]
 8008f30:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008f32:	220a      	movs	r2, #10
 8008f34:	9308      	str	r3, [sp, #32]
 8008f36:	2300      	movs	r3, #0
 8008f38:	469b      	mov	fp, r3
 8008f3a:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8008f3e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8008f40:	7805      	ldrb	r5, [r0, #0]
 8008f42:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8008f46:	b2d9      	uxtb	r1, r3
 8008f48:	2909      	cmp	r1, #9
 8008f4a:	d927      	bls.n	8008f9c <_strtod_l+0x1a4>
 8008f4c:	4622      	mov	r2, r4
 8008f4e:	4639      	mov	r1, r7
 8008f50:	f002 fe08 	bl	800bb64 <strncmp>
 8008f54:	2800      	cmp	r0, #0
 8008f56:	d033      	beq.n	8008fc0 <_strtod_l+0x1c8>
 8008f58:	2000      	movs	r0, #0
 8008f5a:	462a      	mov	r2, r5
 8008f5c:	465c      	mov	r4, fp
 8008f5e:	4603      	mov	r3, r0
 8008f60:	9004      	str	r0, [sp, #16]
 8008f62:	2a65      	cmp	r2, #101	; 0x65
 8008f64:	d001      	beq.n	8008f6a <_strtod_l+0x172>
 8008f66:	2a45      	cmp	r2, #69	; 0x45
 8008f68:	d114      	bne.n	8008f94 <_strtod_l+0x19c>
 8008f6a:	b91c      	cbnz	r4, 8008f74 <_strtod_l+0x17c>
 8008f6c:	9a07      	ldr	r2, [sp, #28]
 8008f6e:	4302      	orrs	r2, r0
 8008f70:	d09f      	beq.n	8008eb2 <_strtod_l+0xba>
 8008f72:	2400      	movs	r4, #0
 8008f74:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8008f76:	1c72      	adds	r2, r6, #1
 8008f78:	9219      	str	r2, [sp, #100]	; 0x64
 8008f7a:	7872      	ldrb	r2, [r6, #1]
 8008f7c:	2a2b      	cmp	r2, #43	; 0x2b
 8008f7e:	d079      	beq.n	8009074 <_strtod_l+0x27c>
 8008f80:	2a2d      	cmp	r2, #45	; 0x2d
 8008f82:	f000 8083 	beq.w	800908c <_strtod_l+0x294>
 8008f86:	2700      	movs	r7, #0
 8008f88:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008f8c:	2909      	cmp	r1, #9
 8008f8e:	f240 8083 	bls.w	8009098 <_strtod_l+0x2a0>
 8008f92:	9619      	str	r6, [sp, #100]	; 0x64
 8008f94:	2500      	movs	r5, #0
 8008f96:	e09f      	b.n	80090d8 <_strtod_l+0x2e0>
 8008f98:	2300      	movs	r3, #0
 8008f9a:	e7c8      	b.n	8008f2e <_strtod_l+0x136>
 8008f9c:	f1bb 0f08 	cmp.w	fp, #8
 8008fa0:	bfd5      	itete	le
 8008fa2:	9906      	ldrle	r1, [sp, #24]
 8008fa4:	9905      	ldrgt	r1, [sp, #20]
 8008fa6:	fb02 3301 	mlale	r3, r2, r1, r3
 8008faa:	fb02 3301 	mlagt	r3, r2, r1, r3
 8008fae:	f100 0001 	add.w	r0, r0, #1
 8008fb2:	bfd4      	ite	le
 8008fb4:	9306      	strle	r3, [sp, #24]
 8008fb6:	9305      	strgt	r3, [sp, #20]
 8008fb8:	f10b 0b01 	add.w	fp, fp, #1
 8008fbc:	9019      	str	r0, [sp, #100]	; 0x64
 8008fbe:	e7be      	b.n	8008f3e <_strtod_l+0x146>
 8008fc0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008fc2:	191a      	adds	r2, r3, r4
 8008fc4:	9219      	str	r2, [sp, #100]	; 0x64
 8008fc6:	5d1a      	ldrb	r2, [r3, r4]
 8008fc8:	f1bb 0f00 	cmp.w	fp, #0
 8008fcc:	d036      	beq.n	800903c <_strtod_l+0x244>
 8008fce:	465c      	mov	r4, fp
 8008fd0:	9004      	str	r0, [sp, #16]
 8008fd2:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008fd6:	2b09      	cmp	r3, #9
 8008fd8:	d912      	bls.n	8009000 <_strtod_l+0x208>
 8008fda:	2301      	movs	r3, #1
 8008fdc:	e7c1      	b.n	8008f62 <_strtod_l+0x16a>
 8008fde:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008fe0:	3001      	adds	r0, #1
 8008fe2:	1c5a      	adds	r2, r3, #1
 8008fe4:	9219      	str	r2, [sp, #100]	; 0x64
 8008fe6:	785a      	ldrb	r2, [r3, #1]
 8008fe8:	2a30      	cmp	r2, #48	; 0x30
 8008fea:	d0f8      	beq.n	8008fde <_strtod_l+0x1e6>
 8008fec:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008ff0:	2b08      	cmp	r3, #8
 8008ff2:	f200 84d5 	bhi.w	80099a0 <_strtod_l+0xba8>
 8008ff6:	9004      	str	r0, [sp, #16]
 8008ff8:	2000      	movs	r0, #0
 8008ffa:	4604      	mov	r4, r0
 8008ffc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008ffe:	9308      	str	r3, [sp, #32]
 8009000:	3a30      	subs	r2, #48	; 0x30
 8009002:	f100 0301 	add.w	r3, r0, #1
 8009006:	d013      	beq.n	8009030 <_strtod_l+0x238>
 8009008:	9904      	ldr	r1, [sp, #16]
 800900a:	1905      	adds	r5, r0, r4
 800900c:	4419      	add	r1, r3
 800900e:	9104      	str	r1, [sp, #16]
 8009010:	4623      	mov	r3, r4
 8009012:	210a      	movs	r1, #10
 8009014:	42ab      	cmp	r3, r5
 8009016:	d113      	bne.n	8009040 <_strtod_l+0x248>
 8009018:	1823      	adds	r3, r4, r0
 800901a:	2b08      	cmp	r3, #8
 800901c:	f104 0401 	add.w	r4, r4, #1
 8009020:	4404      	add	r4, r0
 8009022:	dc1b      	bgt.n	800905c <_strtod_l+0x264>
 8009024:	230a      	movs	r3, #10
 8009026:	9906      	ldr	r1, [sp, #24]
 8009028:	fb03 2301 	mla	r3, r3, r1, r2
 800902c:	9306      	str	r3, [sp, #24]
 800902e:	2300      	movs	r3, #0
 8009030:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009032:	4618      	mov	r0, r3
 8009034:	1c51      	adds	r1, r2, #1
 8009036:	9119      	str	r1, [sp, #100]	; 0x64
 8009038:	7852      	ldrb	r2, [r2, #1]
 800903a:	e7ca      	b.n	8008fd2 <_strtod_l+0x1da>
 800903c:	4658      	mov	r0, fp
 800903e:	e7d3      	b.n	8008fe8 <_strtod_l+0x1f0>
 8009040:	2b08      	cmp	r3, #8
 8009042:	dc04      	bgt.n	800904e <_strtod_l+0x256>
 8009044:	9f06      	ldr	r7, [sp, #24]
 8009046:	434f      	muls	r7, r1
 8009048:	9706      	str	r7, [sp, #24]
 800904a:	3301      	adds	r3, #1
 800904c:	e7e2      	b.n	8009014 <_strtod_l+0x21c>
 800904e:	1c5f      	adds	r7, r3, #1
 8009050:	2f10      	cmp	r7, #16
 8009052:	bfde      	ittt	le
 8009054:	9f05      	ldrle	r7, [sp, #20]
 8009056:	434f      	mulle	r7, r1
 8009058:	9705      	strle	r7, [sp, #20]
 800905a:	e7f6      	b.n	800904a <_strtod_l+0x252>
 800905c:	2c10      	cmp	r4, #16
 800905e:	bfdf      	itttt	le
 8009060:	230a      	movle	r3, #10
 8009062:	9905      	ldrle	r1, [sp, #20]
 8009064:	fb03 2301 	mlale	r3, r3, r1, r2
 8009068:	9305      	strle	r3, [sp, #20]
 800906a:	e7e0      	b.n	800902e <_strtod_l+0x236>
 800906c:	2300      	movs	r3, #0
 800906e:	9304      	str	r3, [sp, #16]
 8009070:	2301      	movs	r3, #1
 8009072:	e77b      	b.n	8008f6c <_strtod_l+0x174>
 8009074:	2700      	movs	r7, #0
 8009076:	1cb2      	adds	r2, r6, #2
 8009078:	9219      	str	r2, [sp, #100]	; 0x64
 800907a:	78b2      	ldrb	r2, [r6, #2]
 800907c:	e784      	b.n	8008f88 <_strtod_l+0x190>
 800907e:	bf00      	nop
 8009080:	0800ca18 	.word	0x0800ca18
 8009084:	0800c7cc 	.word	0x0800c7cc
 8009088:	7ff00000 	.word	0x7ff00000
 800908c:	2701      	movs	r7, #1
 800908e:	e7f2      	b.n	8009076 <_strtod_l+0x27e>
 8009090:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009092:	1c51      	adds	r1, r2, #1
 8009094:	9119      	str	r1, [sp, #100]	; 0x64
 8009096:	7852      	ldrb	r2, [r2, #1]
 8009098:	2a30      	cmp	r2, #48	; 0x30
 800909a:	d0f9      	beq.n	8009090 <_strtod_l+0x298>
 800909c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80090a0:	2908      	cmp	r1, #8
 80090a2:	f63f af77 	bhi.w	8008f94 <_strtod_l+0x19c>
 80090a6:	f04f 0e0a 	mov.w	lr, #10
 80090aa:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 80090ae:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80090b0:	9209      	str	r2, [sp, #36]	; 0x24
 80090b2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80090b4:	1c51      	adds	r1, r2, #1
 80090b6:	9119      	str	r1, [sp, #100]	; 0x64
 80090b8:	7852      	ldrb	r2, [r2, #1]
 80090ba:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 80090be:	2d09      	cmp	r5, #9
 80090c0:	d935      	bls.n	800912e <_strtod_l+0x336>
 80090c2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80090c4:	1b49      	subs	r1, r1, r5
 80090c6:	2908      	cmp	r1, #8
 80090c8:	f644 651f 	movw	r5, #19999	; 0x4e1f
 80090cc:	dc02      	bgt.n	80090d4 <_strtod_l+0x2dc>
 80090ce:	4565      	cmp	r5, ip
 80090d0:	bfa8      	it	ge
 80090d2:	4665      	movge	r5, ip
 80090d4:	b107      	cbz	r7, 80090d8 <_strtod_l+0x2e0>
 80090d6:	426d      	negs	r5, r5
 80090d8:	2c00      	cmp	r4, #0
 80090da:	d14c      	bne.n	8009176 <_strtod_l+0x37e>
 80090dc:	9907      	ldr	r1, [sp, #28]
 80090de:	4301      	orrs	r1, r0
 80090e0:	f47f aecb 	bne.w	8008e7a <_strtod_l+0x82>
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	f47f aee4 	bne.w	8008eb2 <_strtod_l+0xba>
 80090ea:	2a69      	cmp	r2, #105	; 0x69
 80090ec:	d026      	beq.n	800913c <_strtod_l+0x344>
 80090ee:	dc23      	bgt.n	8009138 <_strtod_l+0x340>
 80090f0:	2a49      	cmp	r2, #73	; 0x49
 80090f2:	d023      	beq.n	800913c <_strtod_l+0x344>
 80090f4:	2a4e      	cmp	r2, #78	; 0x4e
 80090f6:	f47f aedc 	bne.w	8008eb2 <_strtod_l+0xba>
 80090fa:	499d      	ldr	r1, [pc, #628]	; (8009370 <_strtod_l+0x578>)
 80090fc:	a819      	add	r0, sp, #100	; 0x64
 80090fe:	f001 fe37 	bl	800ad70 <__match>
 8009102:	2800      	cmp	r0, #0
 8009104:	f43f aed5 	beq.w	8008eb2 <_strtod_l+0xba>
 8009108:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800910a:	781b      	ldrb	r3, [r3, #0]
 800910c:	2b28      	cmp	r3, #40	; 0x28
 800910e:	d12c      	bne.n	800916a <_strtod_l+0x372>
 8009110:	4998      	ldr	r1, [pc, #608]	; (8009374 <_strtod_l+0x57c>)
 8009112:	aa1c      	add	r2, sp, #112	; 0x70
 8009114:	a819      	add	r0, sp, #100	; 0x64
 8009116:	f001 fe3f 	bl	800ad98 <__hexnan>
 800911a:	2805      	cmp	r0, #5
 800911c:	d125      	bne.n	800916a <_strtod_l+0x372>
 800911e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009120:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8009124:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8009128:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800912c:	e6a5      	b.n	8008e7a <_strtod_l+0x82>
 800912e:	fb0e 2c0c 	mla	ip, lr, ip, r2
 8009132:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8009136:	e7bc      	b.n	80090b2 <_strtod_l+0x2ba>
 8009138:	2a6e      	cmp	r2, #110	; 0x6e
 800913a:	e7dc      	b.n	80090f6 <_strtod_l+0x2fe>
 800913c:	498e      	ldr	r1, [pc, #568]	; (8009378 <_strtod_l+0x580>)
 800913e:	a819      	add	r0, sp, #100	; 0x64
 8009140:	f001 fe16 	bl	800ad70 <__match>
 8009144:	2800      	cmp	r0, #0
 8009146:	f43f aeb4 	beq.w	8008eb2 <_strtod_l+0xba>
 800914a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800914c:	498b      	ldr	r1, [pc, #556]	; (800937c <_strtod_l+0x584>)
 800914e:	3b01      	subs	r3, #1
 8009150:	a819      	add	r0, sp, #100	; 0x64
 8009152:	9319      	str	r3, [sp, #100]	; 0x64
 8009154:	f001 fe0c 	bl	800ad70 <__match>
 8009158:	b910      	cbnz	r0, 8009160 <_strtod_l+0x368>
 800915a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800915c:	3301      	adds	r3, #1
 800915e:	9319      	str	r3, [sp, #100]	; 0x64
 8009160:	f04f 0800 	mov.w	r8, #0
 8009164:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8009380 <_strtod_l+0x588>
 8009168:	e687      	b.n	8008e7a <_strtod_l+0x82>
 800916a:	4886      	ldr	r0, [pc, #536]	; (8009384 <_strtod_l+0x58c>)
 800916c:	f002 fcf4 	bl	800bb58 <nan>
 8009170:	4680      	mov	r8, r0
 8009172:	4689      	mov	r9, r1
 8009174:	e681      	b.n	8008e7a <_strtod_l+0x82>
 8009176:	9b04      	ldr	r3, [sp, #16]
 8009178:	f1bb 0f00 	cmp.w	fp, #0
 800917c:	bf08      	it	eq
 800917e:	46a3      	moveq	fp, r4
 8009180:	1aeb      	subs	r3, r5, r3
 8009182:	2c10      	cmp	r4, #16
 8009184:	9806      	ldr	r0, [sp, #24]
 8009186:	4626      	mov	r6, r4
 8009188:	9307      	str	r3, [sp, #28]
 800918a:	bfa8      	it	ge
 800918c:	2610      	movge	r6, #16
 800918e:	f7f7 f995 	bl	80004bc <__aeabi_ui2d>
 8009192:	2c09      	cmp	r4, #9
 8009194:	4680      	mov	r8, r0
 8009196:	4689      	mov	r9, r1
 8009198:	dd13      	ble.n	80091c2 <_strtod_l+0x3ca>
 800919a:	4b7b      	ldr	r3, [pc, #492]	; (8009388 <_strtod_l+0x590>)
 800919c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80091a0:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80091a4:	f7f7 fa04 	bl	80005b0 <__aeabi_dmul>
 80091a8:	4680      	mov	r8, r0
 80091aa:	9805      	ldr	r0, [sp, #20]
 80091ac:	4689      	mov	r9, r1
 80091ae:	f7f7 f985 	bl	80004bc <__aeabi_ui2d>
 80091b2:	4602      	mov	r2, r0
 80091b4:	460b      	mov	r3, r1
 80091b6:	4640      	mov	r0, r8
 80091b8:	4649      	mov	r1, r9
 80091ba:	f7f7 f843 	bl	8000244 <__adddf3>
 80091be:	4680      	mov	r8, r0
 80091c0:	4689      	mov	r9, r1
 80091c2:	2c0f      	cmp	r4, #15
 80091c4:	dc36      	bgt.n	8009234 <_strtod_l+0x43c>
 80091c6:	9b07      	ldr	r3, [sp, #28]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	f43f ae56 	beq.w	8008e7a <_strtod_l+0x82>
 80091ce:	dd22      	ble.n	8009216 <_strtod_l+0x41e>
 80091d0:	2b16      	cmp	r3, #22
 80091d2:	dc09      	bgt.n	80091e8 <_strtod_l+0x3f0>
 80091d4:	496c      	ldr	r1, [pc, #432]	; (8009388 <_strtod_l+0x590>)
 80091d6:	4642      	mov	r2, r8
 80091d8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80091dc:	464b      	mov	r3, r9
 80091de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80091e2:	f7f7 f9e5 	bl	80005b0 <__aeabi_dmul>
 80091e6:	e7c3      	b.n	8009170 <_strtod_l+0x378>
 80091e8:	9a07      	ldr	r2, [sp, #28]
 80091ea:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80091ee:	4293      	cmp	r3, r2
 80091f0:	db20      	blt.n	8009234 <_strtod_l+0x43c>
 80091f2:	4d65      	ldr	r5, [pc, #404]	; (8009388 <_strtod_l+0x590>)
 80091f4:	f1c4 040f 	rsb	r4, r4, #15
 80091f8:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80091fc:	4642      	mov	r2, r8
 80091fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009202:	464b      	mov	r3, r9
 8009204:	f7f7 f9d4 	bl	80005b0 <__aeabi_dmul>
 8009208:	9b07      	ldr	r3, [sp, #28]
 800920a:	1b1c      	subs	r4, r3, r4
 800920c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8009210:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009214:	e7e5      	b.n	80091e2 <_strtod_l+0x3ea>
 8009216:	9b07      	ldr	r3, [sp, #28]
 8009218:	3316      	adds	r3, #22
 800921a:	db0b      	blt.n	8009234 <_strtod_l+0x43c>
 800921c:	9b04      	ldr	r3, [sp, #16]
 800921e:	4640      	mov	r0, r8
 8009220:	1b5d      	subs	r5, r3, r5
 8009222:	4b59      	ldr	r3, [pc, #356]	; (8009388 <_strtod_l+0x590>)
 8009224:	4649      	mov	r1, r9
 8009226:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800922a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800922e:	f7f7 fae9 	bl	8000804 <__aeabi_ddiv>
 8009232:	e79d      	b.n	8009170 <_strtod_l+0x378>
 8009234:	9b07      	ldr	r3, [sp, #28]
 8009236:	1ba6      	subs	r6, r4, r6
 8009238:	441e      	add	r6, r3
 800923a:	2e00      	cmp	r6, #0
 800923c:	dd74      	ble.n	8009328 <_strtod_l+0x530>
 800923e:	f016 030f 	ands.w	r3, r6, #15
 8009242:	d00a      	beq.n	800925a <_strtod_l+0x462>
 8009244:	4950      	ldr	r1, [pc, #320]	; (8009388 <_strtod_l+0x590>)
 8009246:	4642      	mov	r2, r8
 8009248:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800924c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009250:	464b      	mov	r3, r9
 8009252:	f7f7 f9ad 	bl	80005b0 <__aeabi_dmul>
 8009256:	4680      	mov	r8, r0
 8009258:	4689      	mov	r9, r1
 800925a:	f036 060f 	bics.w	r6, r6, #15
 800925e:	d052      	beq.n	8009306 <_strtod_l+0x50e>
 8009260:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8009264:	dd27      	ble.n	80092b6 <_strtod_l+0x4be>
 8009266:	f04f 0b00 	mov.w	fp, #0
 800926a:	f8cd b010 	str.w	fp, [sp, #16]
 800926e:	f8cd b020 	str.w	fp, [sp, #32]
 8009272:	f8cd b018 	str.w	fp, [sp, #24]
 8009276:	2322      	movs	r3, #34	; 0x22
 8009278:	f04f 0800 	mov.w	r8, #0
 800927c:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8009380 <_strtod_l+0x588>
 8009280:	f8ca 3000 	str.w	r3, [sl]
 8009284:	9b08      	ldr	r3, [sp, #32]
 8009286:	2b00      	cmp	r3, #0
 8009288:	f43f adf7 	beq.w	8008e7a <_strtod_l+0x82>
 800928c:	4650      	mov	r0, sl
 800928e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009290:	f001 fe8e 	bl	800afb0 <_Bfree>
 8009294:	4650      	mov	r0, sl
 8009296:	9906      	ldr	r1, [sp, #24]
 8009298:	f001 fe8a 	bl	800afb0 <_Bfree>
 800929c:	4650      	mov	r0, sl
 800929e:	9904      	ldr	r1, [sp, #16]
 80092a0:	f001 fe86 	bl	800afb0 <_Bfree>
 80092a4:	4650      	mov	r0, sl
 80092a6:	9908      	ldr	r1, [sp, #32]
 80092a8:	f001 fe82 	bl	800afb0 <_Bfree>
 80092ac:	4659      	mov	r1, fp
 80092ae:	4650      	mov	r0, sl
 80092b0:	f001 fe7e 	bl	800afb0 <_Bfree>
 80092b4:	e5e1      	b.n	8008e7a <_strtod_l+0x82>
 80092b6:	4b35      	ldr	r3, [pc, #212]	; (800938c <_strtod_l+0x594>)
 80092b8:	4640      	mov	r0, r8
 80092ba:	9305      	str	r3, [sp, #20]
 80092bc:	2300      	movs	r3, #0
 80092be:	4649      	mov	r1, r9
 80092c0:	461f      	mov	r7, r3
 80092c2:	1136      	asrs	r6, r6, #4
 80092c4:	2e01      	cmp	r6, #1
 80092c6:	dc21      	bgt.n	800930c <_strtod_l+0x514>
 80092c8:	b10b      	cbz	r3, 80092ce <_strtod_l+0x4d6>
 80092ca:	4680      	mov	r8, r0
 80092cc:	4689      	mov	r9, r1
 80092ce:	4b2f      	ldr	r3, [pc, #188]	; (800938c <_strtod_l+0x594>)
 80092d0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80092d4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80092d8:	4642      	mov	r2, r8
 80092da:	e9d7 0100 	ldrd	r0, r1, [r7]
 80092de:	464b      	mov	r3, r9
 80092e0:	f7f7 f966 	bl	80005b0 <__aeabi_dmul>
 80092e4:	4b26      	ldr	r3, [pc, #152]	; (8009380 <_strtod_l+0x588>)
 80092e6:	460a      	mov	r2, r1
 80092e8:	400b      	ands	r3, r1
 80092ea:	4929      	ldr	r1, [pc, #164]	; (8009390 <_strtod_l+0x598>)
 80092ec:	4680      	mov	r8, r0
 80092ee:	428b      	cmp	r3, r1
 80092f0:	d8b9      	bhi.n	8009266 <_strtod_l+0x46e>
 80092f2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80092f6:	428b      	cmp	r3, r1
 80092f8:	bf86      	itte	hi
 80092fa:	f04f 38ff 	movhi.w	r8, #4294967295
 80092fe:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8009394 <_strtod_l+0x59c>
 8009302:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8009306:	2300      	movs	r3, #0
 8009308:	9305      	str	r3, [sp, #20]
 800930a:	e07f      	b.n	800940c <_strtod_l+0x614>
 800930c:	07f2      	lsls	r2, r6, #31
 800930e:	d505      	bpl.n	800931c <_strtod_l+0x524>
 8009310:	9b05      	ldr	r3, [sp, #20]
 8009312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009316:	f7f7 f94b 	bl	80005b0 <__aeabi_dmul>
 800931a:	2301      	movs	r3, #1
 800931c:	9a05      	ldr	r2, [sp, #20]
 800931e:	3701      	adds	r7, #1
 8009320:	3208      	adds	r2, #8
 8009322:	1076      	asrs	r6, r6, #1
 8009324:	9205      	str	r2, [sp, #20]
 8009326:	e7cd      	b.n	80092c4 <_strtod_l+0x4cc>
 8009328:	d0ed      	beq.n	8009306 <_strtod_l+0x50e>
 800932a:	4276      	negs	r6, r6
 800932c:	f016 020f 	ands.w	r2, r6, #15
 8009330:	d00a      	beq.n	8009348 <_strtod_l+0x550>
 8009332:	4b15      	ldr	r3, [pc, #84]	; (8009388 <_strtod_l+0x590>)
 8009334:	4640      	mov	r0, r8
 8009336:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800933a:	4649      	mov	r1, r9
 800933c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009340:	f7f7 fa60 	bl	8000804 <__aeabi_ddiv>
 8009344:	4680      	mov	r8, r0
 8009346:	4689      	mov	r9, r1
 8009348:	1136      	asrs	r6, r6, #4
 800934a:	d0dc      	beq.n	8009306 <_strtod_l+0x50e>
 800934c:	2e1f      	cmp	r6, #31
 800934e:	dd23      	ble.n	8009398 <_strtod_l+0x5a0>
 8009350:	f04f 0b00 	mov.w	fp, #0
 8009354:	f8cd b010 	str.w	fp, [sp, #16]
 8009358:	f8cd b020 	str.w	fp, [sp, #32]
 800935c:	f8cd b018 	str.w	fp, [sp, #24]
 8009360:	2322      	movs	r3, #34	; 0x22
 8009362:	f04f 0800 	mov.w	r8, #0
 8009366:	f04f 0900 	mov.w	r9, #0
 800936a:	f8ca 3000 	str.w	r3, [sl]
 800936e:	e789      	b.n	8009284 <_strtod_l+0x48c>
 8009370:	0800c79d 	.word	0x0800c79d
 8009374:	0800c7e0 	.word	0x0800c7e0
 8009378:	0800c795 	.word	0x0800c795
 800937c:	0800c924 	.word	0x0800c924
 8009380:	7ff00000 	.word	0x7ff00000
 8009384:	0800cbd0 	.word	0x0800cbd0
 8009388:	0800cab0 	.word	0x0800cab0
 800938c:	0800ca88 	.word	0x0800ca88
 8009390:	7ca00000 	.word	0x7ca00000
 8009394:	7fefffff 	.word	0x7fefffff
 8009398:	f016 0310 	ands.w	r3, r6, #16
 800939c:	bf18      	it	ne
 800939e:	236a      	movne	r3, #106	; 0x6a
 80093a0:	4640      	mov	r0, r8
 80093a2:	9305      	str	r3, [sp, #20]
 80093a4:	4649      	mov	r1, r9
 80093a6:	2300      	movs	r3, #0
 80093a8:	4fb0      	ldr	r7, [pc, #704]	; (800966c <_strtod_l+0x874>)
 80093aa:	07f2      	lsls	r2, r6, #31
 80093ac:	d504      	bpl.n	80093b8 <_strtod_l+0x5c0>
 80093ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80093b2:	f7f7 f8fd 	bl	80005b0 <__aeabi_dmul>
 80093b6:	2301      	movs	r3, #1
 80093b8:	1076      	asrs	r6, r6, #1
 80093ba:	f107 0708 	add.w	r7, r7, #8
 80093be:	d1f4      	bne.n	80093aa <_strtod_l+0x5b2>
 80093c0:	b10b      	cbz	r3, 80093c6 <_strtod_l+0x5ce>
 80093c2:	4680      	mov	r8, r0
 80093c4:	4689      	mov	r9, r1
 80093c6:	9b05      	ldr	r3, [sp, #20]
 80093c8:	b1c3      	cbz	r3, 80093fc <_strtod_l+0x604>
 80093ca:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80093ce:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	4649      	mov	r1, r9
 80093d6:	dd11      	ble.n	80093fc <_strtod_l+0x604>
 80093d8:	2b1f      	cmp	r3, #31
 80093da:	f340 8127 	ble.w	800962c <_strtod_l+0x834>
 80093de:	2b34      	cmp	r3, #52	; 0x34
 80093e0:	bfd8      	it	le
 80093e2:	f04f 33ff 	movle.w	r3, #4294967295
 80093e6:	f04f 0800 	mov.w	r8, #0
 80093ea:	bfcf      	iteee	gt
 80093ec:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80093f0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80093f4:	fa03 f202 	lslle.w	r2, r3, r2
 80093f8:	ea02 0901 	andle.w	r9, r2, r1
 80093fc:	2200      	movs	r2, #0
 80093fe:	2300      	movs	r3, #0
 8009400:	4640      	mov	r0, r8
 8009402:	4649      	mov	r1, r9
 8009404:	f7f7 fb3c 	bl	8000a80 <__aeabi_dcmpeq>
 8009408:	2800      	cmp	r0, #0
 800940a:	d1a1      	bne.n	8009350 <_strtod_l+0x558>
 800940c:	9b06      	ldr	r3, [sp, #24]
 800940e:	465a      	mov	r2, fp
 8009410:	9300      	str	r3, [sp, #0]
 8009412:	4650      	mov	r0, sl
 8009414:	4623      	mov	r3, r4
 8009416:	9908      	ldr	r1, [sp, #32]
 8009418:	f001 fe32 	bl	800b080 <__s2b>
 800941c:	9008      	str	r0, [sp, #32]
 800941e:	2800      	cmp	r0, #0
 8009420:	f43f af21 	beq.w	8009266 <_strtod_l+0x46e>
 8009424:	9b04      	ldr	r3, [sp, #16]
 8009426:	f04f 0b00 	mov.w	fp, #0
 800942a:	1b5d      	subs	r5, r3, r5
 800942c:	9b07      	ldr	r3, [sp, #28]
 800942e:	f8cd b010 	str.w	fp, [sp, #16]
 8009432:	2b00      	cmp	r3, #0
 8009434:	bfb4      	ite	lt
 8009436:	462b      	movlt	r3, r5
 8009438:	2300      	movge	r3, #0
 800943a:	930e      	str	r3, [sp, #56]	; 0x38
 800943c:	9b07      	ldr	r3, [sp, #28]
 800943e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009442:	9314      	str	r3, [sp, #80]	; 0x50
 8009444:	9b08      	ldr	r3, [sp, #32]
 8009446:	4650      	mov	r0, sl
 8009448:	6859      	ldr	r1, [r3, #4]
 800944a:	f001 fd71 	bl	800af30 <_Balloc>
 800944e:	9006      	str	r0, [sp, #24]
 8009450:	2800      	cmp	r0, #0
 8009452:	f43f af10 	beq.w	8009276 <_strtod_l+0x47e>
 8009456:	9b08      	ldr	r3, [sp, #32]
 8009458:	300c      	adds	r0, #12
 800945a:	691a      	ldr	r2, [r3, #16]
 800945c:	f103 010c 	add.w	r1, r3, #12
 8009460:	3202      	adds	r2, #2
 8009462:	0092      	lsls	r2, r2, #2
 8009464:	f7fe fcfc 	bl	8007e60 <memcpy>
 8009468:	ab1c      	add	r3, sp, #112	; 0x70
 800946a:	9301      	str	r3, [sp, #4]
 800946c:	ab1b      	add	r3, sp, #108	; 0x6c
 800946e:	9300      	str	r3, [sp, #0]
 8009470:	4642      	mov	r2, r8
 8009472:	464b      	mov	r3, r9
 8009474:	4650      	mov	r0, sl
 8009476:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 800947a:	f002 f943 	bl	800b704 <__d2b>
 800947e:	901a      	str	r0, [sp, #104]	; 0x68
 8009480:	2800      	cmp	r0, #0
 8009482:	f43f aef8 	beq.w	8009276 <_strtod_l+0x47e>
 8009486:	2101      	movs	r1, #1
 8009488:	4650      	mov	r0, sl
 800948a:	f001 fe91 	bl	800b1b0 <__i2b>
 800948e:	4603      	mov	r3, r0
 8009490:	9004      	str	r0, [sp, #16]
 8009492:	2800      	cmp	r0, #0
 8009494:	f43f aeef 	beq.w	8009276 <_strtod_l+0x47e>
 8009498:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800949a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800949c:	2d00      	cmp	r5, #0
 800949e:	bfab      	itete	ge
 80094a0:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80094a2:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 80094a4:	18ee      	addge	r6, r5, r3
 80094a6:	1b5c      	sublt	r4, r3, r5
 80094a8:	9b05      	ldr	r3, [sp, #20]
 80094aa:	bfa8      	it	ge
 80094ac:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 80094ae:	eba5 0503 	sub.w	r5, r5, r3
 80094b2:	4415      	add	r5, r2
 80094b4:	4b6e      	ldr	r3, [pc, #440]	; (8009670 <_strtod_l+0x878>)
 80094b6:	f105 35ff 	add.w	r5, r5, #4294967295
 80094ba:	bfb8      	it	lt
 80094bc:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 80094be:	429d      	cmp	r5, r3
 80094c0:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80094c4:	f280 80c4 	bge.w	8009650 <_strtod_l+0x858>
 80094c8:	1b5b      	subs	r3, r3, r5
 80094ca:	2b1f      	cmp	r3, #31
 80094cc:	f04f 0701 	mov.w	r7, #1
 80094d0:	eba2 0203 	sub.w	r2, r2, r3
 80094d4:	f300 80b1 	bgt.w	800963a <_strtod_l+0x842>
 80094d8:	2500      	movs	r5, #0
 80094da:	fa07 f303 	lsl.w	r3, r7, r3
 80094de:	930f      	str	r3, [sp, #60]	; 0x3c
 80094e0:	18b7      	adds	r7, r6, r2
 80094e2:	9b05      	ldr	r3, [sp, #20]
 80094e4:	42be      	cmp	r6, r7
 80094e6:	4414      	add	r4, r2
 80094e8:	441c      	add	r4, r3
 80094ea:	4633      	mov	r3, r6
 80094ec:	bfa8      	it	ge
 80094ee:	463b      	movge	r3, r7
 80094f0:	42a3      	cmp	r3, r4
 80094f2:	bfa8      	it	ge
 80094f4:	4623      	movge	r3, r4
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	bfc2      	ittt	gt
 80094fa:	1aff      	subgt	r7, r7, r3
 80094fc:	1ae4      	subgt	r4, r4, r3
 80094fe:	1af6      	subgt	r6, r6, r3
 8009500:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009502:	2b00      	cmp	r3, #0
 8009504:	dd17      	ble.n	8009536 <_strtod_l+0x73e>
 8009506:	461a      	mov	r2, r3
 8009508:	4650      	mov	r0, sl
 800950a:	9904      	ldr	r1, [sp, #16]
 800950c:	f001 ff0e 	bl	800b32c <__pow5mult>
 8009510:	9004      	str	r0, [sp, #16]
 8009512:	2800      	cmp	r0, #0
 8009514:	f43f aeaf 	beq.w	8009276 <_strtod_l+0x47e>
 8009518:	4601      	mov	r1, r0
 800951a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800951c:	4650      	mov	r0, sl
 800951e:	f001 fe5d 	bl	800b1dc <__multiply>
 8009522:	9009      	str	r0, [sp, #36]	; 0x24
 8009524:	2800      	cmp	r0, #0
 8009526:	f43f aea6 	beq.w	8009276 <_strtod_l+0x47e>
 800952a:	4650      	mov	r0, sl
 800952c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800952e:	f001 fd3f 	bl	800afb0 <_Bfree>
 8009532:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009534:	931a      	str	r3, [sp, #104]	; 0x68
 8009536:	2f00      	cmp	r7, #0
 8009538:	f300 808e 	bgt.w	8009658 <_strtod_l+0x860>
 800953c:	9b07      	ldr	r3, [sp, #28]
 800953e:	2b00      	cmp	r3, #0
 8009540:	dd08      	ble.n	8009554 <_strtod_l+0x75c>
 8009542:	4650      	mov	r0, sl
 8009544:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009546:	9906      	ldr	r1, [sp, #24]
 8009548:	f001 fef0 	bl	800b32c <__pow5mult>
 800954c:	9006      	str	r0, [sp, #24]
 800954e:	2800      	cmp	r0, #0
 8009550:	f43f ae91 	beq.w	8009276 <_strtod_l+0x47e>
 8009554:	2c00      	cmp	r4, #0
 8009556:	dd08      	ble.n	800956a <_strtod_l+0x772>
 8009558:	4622      	mov	r2, r4
 800955a:	4650      	mov	r0, sl
 800955c:	9906      	ldr	r1, [sp, #24]
 800955e:	f001 ff3f 	bl	800b3e0 <__lshift>
 8009562:	9006      	str	r0, [sp, #24]
 8009564:	2800      	cmp	r0, #0
 8009566:	f43f ae86 	beq.w	8009276 <_strtod_l+0x47e>
 800956a:	2e00      	cmp	r6, #0
 800956c:	dd08      	ble.n	8009580 <_strtod_l+0x788>
 800956e:	4632      	mov	r2, r6
 8009570:	4650      	mov	r0, sl
 8009572:	9904      	ldr	r1, [sp, #16]
 8009574:	f001 ff34 	bl	800b3e0 <__lshift>
 8009578:	9004      	str	r0, [sp, #16]
 800957a:	2800      	cmp	r0, #0
 800957c:	f43f ae7b 	beq.w	8009276 <_strtod_l+0x47e>
 8009580:	4650      	mov	r0, sl
 8009582:	9a06      	ldr	r2, [sp, #24]
 8009584:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009586:	f001 ffb7 	bl	800b4f8 <__mdiff>
 800958a:	4683      	mov	fp, r0
 800958c:	2800      	cmp	r0, #0
 800958e:	f43f ae72 	beq.w	8009276 <_strtod_l+0x47e>
 8009592:	2400      	movs	r4, #0
 8009594:	68c3      	ldr	r3, [r0, #12]
 8009596:	9904      	ldr	r1, [sp, #16]
 8009598:	60c4      	str	r4, [r0, #12]
 800959a:	930b      	str	r3, [sp, #44]	; 0x2c
 800959c:	f001 ff90 	bl	800b4c0 <__mcmp>
 80095a0:	42a0      	cmp	r0, r4
 80095a2:	da6b      	bge.n	800967c <_strtod_l+0x884>
 80095a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80095a6:	ea53 0308 	orrs.w	r3, r3, r8
 80095aa:	f040 8091 	bne.w	80096d0 <_strtod_l+0x8d8>
 80095ae:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	f040 808c 	bne.w	80096d0 <_strtod_l+0x8d8>
 80095b8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80095bc:	0d1b      	lsrs	r3, r3, #20
 80095be:	051b      	lsls	r3, r3, #20
 80095c0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80095c4:	f240 8084 	bls.w	80096d0 <_strtod_l+0x8d8>
 80095c8:	f8db 3014 	ldr.w	r3, [fp, #20]
 80095cc:	b91b      	cbnz	r3, 80095d6 <_strtod_l+0x7de>
 80095ce:	f8db 3010 	ldr.w	r3, [fp, #16]
 80095d2:	2b01      	cmp	r3, #1
 80095d4:	dd7c      	ble.n	80096d0 <_strtod_l+0x8d8>
 80095d6:	4659      	mov	r1, fp
 80095d8:	2201      	movs	r2, #1
 80095da:	4650      	mov	r0, sl
 80095dc:	f001 ff00 	bl	800b3e0 <__lshift>
 80095e0:	9904      	ldr	r1, [sp, #16]
 80095e2:	4683      	mov	fp, r0
 80095e4:	f001 ff6c 	bl	800b4c0 <__mcmp>
 80095e8:	2800      	cmp	r0, #0
 80095ea:	dd71      	ble.n	80096d0 <_strtod_l+0x8d8>
 80095ec:	9905      	ldr	r1, [sp, #20]
 80095ee:	464b      	mov	r3, r9
 80095f0:	4a20      	ldr	r2, [pc, #128]	; (8009674 <_strtod_l+0x87c>)
 80095f2:	2900      	cmp	r1, #0
 80095f4:	f000 808c 	beq.w	8009710 <_strtod_l+0x918>
 80095f8:	ea02 0109 	and.w	r1, r2, r9
 80095fc:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009600:	f300 8086 	bgt.w	8009710 <_strtod_l+0x918>
 8009604:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009608:	f77f aeaa 	ble.w	8009360 <_strtod_l+0x568>
 800960c:	4640      	mov	r0, r8
 800960e:	4649      	mov	r1, r9
 8009610:	4b19      	ldr	r3, [pc, #100]	; (8009678 <_strtod_l+0x880>)
 8009612:	2200      	movs	r2, #0
 8009614:	f7f6 ffcc 	bl	80005b0 <__aeabi_dmul>
 8009618:	460b      	mov	r3, r1
 800961a:	4303      	orrs	r3, r0
 800961c:	bf08      	it	eq
 800961e:	2322      	moveq	r3, #34	; 0x22
 8009620:	4680      	mov	r8, r0
 8009622:	4689      	mov	r9, r1
 8009624:	bf08      	it	eq
 8009626:	f8ca 3000 	streq.w	r3, [sl]
 800962a:	e62f      	b.n	800928c <_strtod_l+0x494>
 800962c:	f04f 32ff 	mov.w	r2, #4294967295
 8009630:	fa02 f303 	lsl.w	r3, r2, r3
 8009634:	ea03 0808 	and.w	r8, r3, r8
 8009638:	e6e0      	b.n	80093fc <_strtod_l+0x604>
 800963a:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800963e:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8009642:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8009646:	35e2      	adds	r5, #226	; 0xe2
 8009648:	fa07 f505 	lsl.w	r5, r7, r5
 800964c:	970f      	str	r7, [sp, #60]	; 0x3c
 800964e:	e747      	b.n	80094e0 <_strtod_l+0x6e8>
 8009650:	2301      	movs	r3, #1
 8009652:	2500      	movs	r5, #0
 8009654:	930f      	str	r3, [sp, #60]	; 0x3c
 8009656:	e743      	b.n	80094e0 <_strtod_l+0x6e8>
 8009658:	463a      	mov	r2, r7
 800965a:	4650      	mov	r0, sl
 800965c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800965e:	f001 febf 	bl	800b3e0 <__lshift>
 8009662:	901a      	str	r0, [sp, #104]	; 0x68
 8009664:	2800      	cmp	r0, #0
 8009666:	f47f af69 	bne.w	800953c <_strtod_l+0x744>
 800966a:	e604      	b.n	8009276 <_strtod_l+0x47e>
 800966c:	0800c7f8 	.word	0x0800c7f8
 8009670:	fffffc02 	.word	0xfffffc02
 8009674:	7ff00000 	.word	0x7ff00000
 8009678:	39500000 	.word	0x39500000
 800967c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8009680:	d165      	bne.n	800974e <_strtod_l+0x956>
 8009682:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009684:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009688:	b35a      	cbz	r2, 80096e2 <_strtod_l+0x8ea>
 800968a:	4a99      	ldr	r2, [pc, #612]	; (80098f0 <_strtod_l+0xaf8>)
 800968c:	4293      	cmp	r3, r2
 800968e:	d12b      	bne.n	80096e8 <_strtod_l+0x8f0>
 8009690:	9b05      	ldr	r3, [sp, #20]
 8009692:	4641      	mov	r1, r8
 8009694:	b303      	cbz	r3, 80096d8 <_strtod_l+0x8e0>
 8009696:	464a      	mov	r2, r9
 8009698:	4b96      	ldr	r3, [pc, #600]	; (80098f4 <_strtod_l+0xafc>)
 800969a:	4013      	ands	r3, r2
 800969c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80096a0:	f04f 32ff 	mov.w	r2, #4294967295
 80096a4:	d81b      	bhi.n	80096de <_strtod_l+0x8e6>
 80096a6:	0d1b      	lsrs	r3, r3, #20
 80096a8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80096ac:	fa02 f303 	lsl.w	r3, r2, r3
 80096b0:	4299      	cmp	r1, r3
 80096b2:	d119      	bne.n	80096e8 <_strtod_l+0x8f0>
 80096b4:	4b90      	ldr	r3, [pc, #576]	; (80098f8 <_strtod_l+0xb00>)
 80096b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80096b8:	429a      	cmp	r2, r3
 80096ba:	d102      	bne.n	80096c2 <_strtod_l+0x8ca>
 80096bc:	3101      	adds	r1, #1
 80096be:	f43f adda 	beq.w	8009276 <_strtod_l+0x47e>
 80096c2:	f04f 0800 	mov.w	r8, #0
 80096c6:	4b8b      	ldr	r3, [pc, #556]	; (80098f4 <_strtod_l+0xafc>)
 80096c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80096ca:	401a      	ands	r2, r3
 80096cc:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 80096d0:	9b05      	ldr	r3, [sp, #20]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d19a      	bne.n	800960c <_strtod_l+0x814>
 80096d6:	e5d9      	b.n	800928c <_strtod_l+0x494>
 80096d8:	f04f 33ff 	mov.w	r3, #4294967295
 80096dc:	e7e8      	b.n	80096b0 <_strtod_l+0x8b8>
 80096de:	4613      	mov	r3, r2
 80096e0:	e7e6      	b.n	80096b0 <_strtod_l+0x8b8>
 80096e2:	ea53 0308 	orrs.w	r3, r3, r8
 80096e6:	d081      	beq.n	80095ec <_strtod_l+0x7f4>
 80096e8:	b1e5      	cbz	r5, 8009724 <_strtod_l+0x92c>
 80096ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096ec:	421d      	tst	r5, r3
 80096ee:	d0ef      	beq.n	80096d0 <_strtod_l+0x8d8>
 80096f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80096f2:	4640      	mov	r0, r8
 80096f4:	4649      	mov	r1, r9
 80096f6:	9a05      	ldr	r2, [sp, #20]
 80096f8:	b1c3      	cbz	r3, 800972c <_strtod_l+0x934>
 80096fa:	f7ff fb59 	bl	8008db0 <sulp>
 80096fe:	4602      	mov	r2, r0
 8009700:	460b      	mov	r3, r1
 8009702:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009706:	f7f6 fd9d 	bl	8000244 <__adddf3>
 800970a:	4680      	mov	r8, r0
 800970c:	4689      	mov	r9, r1
 800970e:	e7df      	b.n	80096d0 <_strtod_l+0x8d8>
 8009710:	4013      	ands	r3, r2
 8009712:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009716:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800971a:	f04f 38ff 	mov.w	r8, #4294967295
 800971e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8009722:	e7d5      	b.n	80096d0 <_strtod_l+0x8d8>
 8009724:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009726:	ea13 0f08 	tst.w	r3, r8
 800972a:	e7e0      	b.n	80096ee <_strtod_l+0x8f6>
 800972c:	f7ff fb40 	bl	8008db0 <sulp>
 8009730:	4602      	mov	r2, r0
 8009732:	460b      	mov	r3, r1
 8009734:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009738:	f7f6 fd82 	bl	8000240 <__aeabi_dsub>
 800973c:	2200      	movs	r2, #0
 800973e:	2300      	movs	r3, #0
 8009740:	4680      	mov	r8, r0
 8009742:	4689      	mov	r9, r1
 8009744:	f7f7 f99c 	bl	8000a80 <__aeabi_dcmpeq>
 8009748:	2800      	cmp	r0, #0
 800974a:	d0c1      	beq.n	80096d0 <_strtod_l+0x8d8>
 800974c:	e608      	b.n	8009360 <_strtod_l+0x568>
 800974e:	4658      	mov	r0, fp
 8009750:	9904      	ldr	r1, [sp, #16]
 8009752:	f002 f833 	bl	800b7bc <__ratio>
 8009756:	2200      	movs	r2, #0
 8009758:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800975c:	4606      	mov	r6, r0
 800975e:	460f      	mov	r7, r1
 8009760:	f7f7 f9a2 	bl	8000aa8 <__aeabi_dcmple>
 8009764:	2800      	cmp	r0, #0
 8009766:	d070      	beq.n	800984a <_strtod_l+0xa52>
 8009768:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800976a:	2b00      	cmp	r3, #0
 800976c:	d042      	beq.n	80097f4 <_strtod_l+0x9fc>
 800976e:	2600      	movs	r6, #0
 8009770:	4f62      	ldr	r7, [pc, #392]	; (80098fc <_strtod_l+0xb04>)
 8009772:	4d62      	ldr	r5, [pc, #392]	; (80098fc <_strtod_l+0xb04>)
 8009774:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009776:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800977a:	0d1b      	lsrs	r3, r3, #20
 800977c:	051b      	lsls	r3, r3, #20
 800977e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009780:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009782:	4b5f      	ldr	r3, [pc, #380]	; (8009900 <_strtod_l+0xb08>)
 8009784:	429a      	cmp	r2, r3
 8009786:	f040 80c3 	bne.w	8009910 <_strtod_l+0xb18>
 800978a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800978c:	4640      	mov	r0, r8
 800978e:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8009792:	4649      	mov	r1, r9
 8009794:	f001 ff3c 	bl	800b610 <__ulp>
 8009798:	4602      	mov	r2, r0
 800979a:	460b      	mov	r3, r1
 800979c:	4630      	mov	r0, r6
 800979e:	4639      	mov	r1, r7
 80097a0:	f7f6 ff06 	bl	80005b0 <__aeabi_dmul>
 80097a4:	4642      	mov	r2, r8
 80097a6:	464b      	mov	r3, r9
 80097a8:	f7f6 fd4c 	bl	8000244 <__adddf3>
 80097ac:	460b      	mov	r3, r1
 80097ae:	4951      	ldr	r1, [pc, #324]	; (80098f4 <_strtod_l+0xafc>)
 80097b0:	4a54      	ldr	r2, [pc, #336]	; (8009904 <_strtod_l+0xb0c>)
 80097b2:	4019      	ands	r1, r3
 80097b4:	4291      	cmp	r1, r2
 80097b6:	4680      	mov	r8, r0
 80097b8:	d95d      	bls.n	8009876 <_strtod_l+0xa7e>
 80097ba:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80097bc:	4b4e      	ldr	r3, [pc, #312]	; (80098f8 <_strtod_l+0xb00>)
 80097be:	429a      	cmp	r2, r3
 80097c0:	d103      	bne.n	80097ca <_strtod_l+0x9d2>
 80097c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80097c4:	3301      	adds	r3, #1
 80097c6:	f43f ad56 	beq.w	8009276 <_strtod_l+0x47e>
 80097ca:	f04f 38ff 	mov.w	r8, #4294967295
 80097ce:	f8df 9128 	ldr.w	r9, [pc, #296]	; 80098f8 <_strtod_l+0xb00>
 80097d2:	4650      	mov	r0, sl
 80097d4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80097d6:	f001 fbeb 	bl	800afb0 <_Bfree>
 80097da:	4650      	mov	r0, sl
 80097dc:	9906      	ldr	r1, [sp, #24]
 80097de:	f001 fbe7 	bl	800afb0 <_Bfree>
 80097e2:	4650      	mov	r0, sl
 80097e4:	9904      	ldr	r1, [sp, #16]
 80097e6:	f001 fbe3 	bl	800afb0 <_Bfree>
 80097ea:	4659      	mov	r1, fp
 80097ec:	4650      	mov	r0, sl
 80097ee:	f001 fbdf 	bl	800afb0 <_Bfree>
 80097f2:	e627      	b.n	8009444 <_strtod_l+0x64c>
 80097f4:	f1b8 0f00 	cmp.w	r8, #0
 80097f8:	d119      	bne.n	800982e <_strtod_l+0xa36>
 80097fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009800:	b9e3      	cbnz	r3, 800983c <_strtod_l+0xa44>
 8009802:	2200      	movs	r2, #0
 8009804:	4630      	mov	r0, r6
 8009806:	4639      	mov	r1, r7
 8009808:	4b3c      	ldr	r3, [pc, #240]	; (80098fc <_strtod_l+0xb04>)
 800980a:	f7f7 f943 	bl	8000a94 <__aeabi_dcmplt>
 800980e:	b9c8      	cbnz	r0, 8009844 <_strtod_l+0xa4c>
 8009810:	2200      	movs	r2, #0
 8009812:	4630      	mov	r0, r6
 8009814:	4639      	mov	r1, r7
 8009816:	4b3c      	ldr	r3, [pc, #240]	; (8009908 <_strtod_l+0xb10>)
 8009818:	f7f6 feca 	bl	80005b0 <__aeabi_dmul>
 800981c:	4604      	mov	r4, r0
 800981e:	460d      	mov	r5, r1
 8009820:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8009824:	9416      	str	r4, [sp, #88]	; 0x58
 8009826:	9317      	str	r3, [sp, #92]	; 0x5c
 8009828:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 800982c:	e7a2      	b.n	8009774 <_strtod_l+0x97c>
 800982e:	f1b8 0f01 	cmp.w	r8, #1
 8009832:	d103      	bne.n	800983c <_strtod_l+0xa44>
 8009834:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009836:	2b00      	cmp	r3, #0
 8009838:	f43f ad92 	beq.w	8009360 <_strtod_l+0x568>
 800983c:	2600      	movs	r6, #0
 800983e:	2400      	movs	r4, #0
 8009840:	4f32      	ldr	r7, [pc, #200]	; (800990c <_strtod_l+0xb14>)
 8009842:	e796      	b.n	8009772 <_strtod_l+0x97a>
 8009844:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8009846:	4d30      	ldr	r5, [pc, #192]	; (8009908 <_strtod_l+0xb10>)
 8009848:	e7ea      	b.n	8009820 <_strtod_l+0xa28>
 800984a:	4b2f      	ldr	r3, [pc, #188]	; (8009908 <_strtod_l+0xb10>)
 800984c:	2200      	movs	r2, #0
 800984e:	4630      	mov	r0, r6
 8009850:	4639      	mov	r1, r7
 8009852:	f7f6 fead 	bl	80005b0 <__aeabi_dmul>
 8009856:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009858:	4604      	mov	r4, r0
 800985a:	460d      	mov	r5, r1
 800985c:	b933      	cbnz	r3, 800986c <_strtod_l+0xa74>
 800985e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009862:	9010      	str	r0, [sp, #64]	; 0x40
 8009864:	9311      	str	r3, [sp, #68]	; 0x44
 8009866:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800986a:	e783      	b.n	8009774 <_strtod_l+0x97c>
 800986c:	4602      	mov	r2, r0
 800986e:	460b      	mov	r3, r1
 8009870:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8009874:	e7f7      	b.n	8009866 <_strtod_l+0xa6e>
 8009876:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800987a:	9b05      	ldr	r3, [sp, #20]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d1a8      	bne.n	80097d2 <_strtod_l+0x9da>
 8009880:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009884:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009886:	0d1b      	lsrs	r3, r3, #20
 8009888:	051b      	lsls	r3, r3, #20
 800988a:	429a      	cmp	r2, r3
 800988c:	d1a1      	bne.n	80097d2 <_strtod_l+0x9da>
 800988e:	4620      	mov	r0, r4
 8009890:	4629      	mov	r1, r5
 8009892:	f7f7 fccf 	bl	8001234 <__aeabi_d2lz>
 8009896:	f7f6 fe5d 	bl	8000554 <__aeabi_l2d>
 800989a:	4602      	mov	r2, r0
 800989c:	460b      	mov	r3, r1
 800989e:	4620      	mov	r0, r4
 80098a0:	4629      	mov	r1, r5
 80098a2:	f7f6 fccd 	bl	8000240 <__aeabi_dsub>
 80098a6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80098a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80098ac:	ea43 0308 	orr.w	r3, r3, r8
 80098b0:	4313      	orrs	r3, r2
 80098b2:	4604      	mov	r4, r0
 80098b4:	460d      	mov	r5, r1
 80098b6:	d066      	beq.n	8009986 <_strtod_l+0xb8e>
 80098b8:	a309      	add	r3, pc, #36	; (adr r3, 80098e0 <_strtod_l+0xae8>)
 80098ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098be:	f7f7 f8e9 	bl	8000a94 <__aeabi_dcmplt>
 80098c2:	2800      	cmp	r0, #0
 80098c4:	f47f ace2 	bne.w	800928c <_strtod_l+0x494>
 80098c8:	a307      	add	r3, pc, #28	; (adr r3, 80098e8 <_strtod_l+0xaf0>)
 80098ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ce:	4620      	mov	r0, r4
 80098d0:	4629      	mov	r1, r5
 80098d2:	f7f7 f8fd 	bl	8000ad0 <__aeabi_dcmpgt>
 80098d6:	2800      	cmp	r0, #0
 80098d8:	f43f af7b 	beq.w	80097d2 <_strtod_l+0x9da>
 80098dc:	e4d6      	b.n	800928c <_strtod_l+0x494>
 80098de:	bf00      	nop
 80098e0:	94a03595 	.word	0x94a03595
 80098e4:	3fdfffff 	.word	0x3fdfffff
 80098e8:	35afe535 	.word	0x35afe535
 80098ec:	3fe00000 	.word	0x3fe00000
 80098f0:	000fffff 	.word	0x000fffff
 80098f4:	7ff00000 	.word	0x7ff00000
 80098f8:	7fefffff 	.word	0x7fefffff
 80098fc:	3ff00000 	.word	0x3ff00000
 8009900:	7fe00000 	.word	0x7fe00000
 8009904:	7c9fffff 	.word	0x7c9fffff
 8009908:	3fe00000 	.word	0x3fe00000
 800990c:	bff00000 	.word	0xbff00000
 8009910:	9b05      	ldr	r3, [sp, #20]
 8009912:	b313      	cbz	r3, 800995a <_strtod_l+0xb62>
 8009914:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009916:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800991a:	d81e      	bhi.n	800995a <_strtod_l+0xb62>
 800991c:	a326      	add	r3, pc, #152	; (adr r3, 80099b8 <_strtod_l+0xbc0>)
 800991e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009922:	4620      	mov	r0, r4
 8009924:	4629      	mov	r1, r5
 8009926:	f7f7 f8bf 	bl	8000aa8 <__aeabi_dcmple>
 800992a:	b190      	cbz	r0, 8009952 <_strtod_l+0xb5a>
 800992c:	4629      	mov	r1, r5
 800992e:	4620      	mov	r0, r4
 8009930:	f7f7 f916 	bl	8000b60 <__aeabi_d2uiz>
 8009934:	2801      	cmp	r0, #1
 8009936:	bf38      	it	cc
 8009938:	2001      	movcc	r0, #1
 800993a:	f7f6 fdbf 	bl	80004bc <__aeabi_ui2d>
 800993e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009940:	4604      	mov	r4, r0
 8009942:	460d      	mov	r5, r1
 8009944:	b9d3      	cbnz	r3, 800997c <_strtod_l+0xb84>
 8009946:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800994a:	9012      	str	r0, [sp, #72]	; 0x48
 800994c:	9313      	str	r3, [sp, #76]	; 0x4c
 800994e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8009952:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009954:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8009958:	1a9f      	subs	r7, r3, r2
 800995a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800995e:	f001 fe57 	bl	800b610 <__ulp>
 8009962:	4602      	mov	r2, r0
 8009964:	460b      	mov	r3, r1
 8009966:	4630      	mov	r0, r6
 8009968:	4639      	mov	r1, r7
 800996a:	f7f6 fe21 	bl	80005b0 <__aeabi_dmul>
 800996e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009972:	f7f6 fc67 	bl	8000244 <__adddf3>
 8009976:	4680      	mov	r8, r0
 8009978:	4689      	mov	r9, r1
 800997a:	e77e      	b.n	800987a <_strtod_l+0xa82>
 800997c:	4602      	mov	r2, r0
 800997e:	460b      	mov	r3, r1
 8009980:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8009984:	e7e3      	b.n	800994e <_strtod_l+0xb56>
 8009986:	a30e      	add	r3, pc, #56	; (adr r3, 80099c0 <_strtod_l+0xbc8>)
 8009988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800998c:	f7f7 f882 	bl	8000a94 <__aeabi_dcmplt>
 8009990:	e7a1      	b.n	80098d6 <_strtod_l+0xade>
 8009992:	2300      	movs	r3, #0
 8009994:	930a      	str	r3, [sp, #40]	; 0x28
 8009996:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009998:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800999a:	6013      	str	r3, [r2, #0]
 800999c:	f7ff ba71 	b.w	8008e82 <_strtod_l+0x8a>
 80099a0:	2a65      	cmp	r2, #101	; 0x65
 80099a2:	f43f ab63 	beq.w	800906c <_strtod_l+0x274>
 80099a6:	2a45      	cmp	r2, #69	; 0x45
 80099a8:	f43f ab60 	beq.w	800906c <_strtod_l+0x274>
 80099ac:	2301      	movs	r3, #1
 80099ae:	f7ff bb95 	b.w	80090dc <_strtod_l+0x2e4>
 80099b2:	bf00      	nop
 80099b4:	f3af 8000 	nop.w
 80099b8:	ffc00000 	.word	0xffc00000
 80099bc:	41dfffff 	.word	0x41dfffff
 80099c0:	94a03595 	.word	0x94a03595
 80099c4:	3fcfffff 	.word	0x3fcfffff

080099c8 <_strtod_r>:
 80099c8:	4b01      	ldr	r3, [pc, #4]	; (80099d0 <_strtod_r+0x8>)
 80099ca:	f7ff ba15 	b.w	8008df8 <_strtod_l>
 80099ce:	bf00      	nop
 80099d0:	200000b0 	.word	0x200000b0

080099d4 <_strtol_l.constprop.0>:
 80099d4:	2b01      	cmp	r3, #1
 80099d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099da:	4680      	mov	r8, r0
 80099dc:	d001      	beq.n	80099e2 <_strtol_l.constprop.0+0xe>
 80099de:	2b24      	cmp	r3, #36	; 0x24
 80099e0:	d906      	bls.n	80099f0 <_strtol_l.constprop.0+0x1c>
 80099e2:	f7fe fa0b 	bl	8007dfc <__errno>
 80099e6:	2316      	movs	r3, #22
 80099e8:	6003      	str	r3, [r0, #0]
 80099ea:	2000      	movs	r0, #0
 80099ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099f0:	460d      	mov	r5, r1
 80099f2:	4f35      	ldr	r7, [pc, #212]	; (8009ac8 <_strtol_l.constprop.0+0xf4>)
 80099f4:	4628      	mov	r0, r5
 80099f6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80099fa:	5de6      	ldrb	r6, [r4, r7]
 80099fc:	f016 0608 	ands.w	r6, r6, #8
 8009a00:	d1f8      	bne.n	80099f4 <_strtol_l.constprop.0+0x20>
 8009a02:	2c2d      	cmp	r4, #45	; 0x2d
 8009a04:	d12f      	bne.n	8009a66 <_strtol_l.constprop.0+0x92>
 8009a06:	2601      	movs	r6, #1
 8009a08:	782c      	ldrb	r4, [r5, #0]
 8009a0a:	1c85      	adds	r5, r0, #2
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d057      	beq.n	8009ac0 <_strtol_l.constprop.0+0xec>
 8009a10:	2b10      	cmp	r3, #16
 8009a12:	d109      	bne.n	8009a28 <_strtol_l.constprop.0+0x54>
 8009a14:	2c30      	cmp	r4, #48	; 0x30
 8009a16:	d107      	bne.n	8009a28 <_strtol_l.constprop.0+0x54>
 8009a18:	7828      	ldrb	r0, [r5, #0]
 8009a1a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8009a1e:	2858      	cmp	r0, #88	; 0x58
 8009a20:	d149      	bne.n	8009ab6 <_strtol_l.constprop.0+0xe2>
 8009a22:	2310      	movs	r3, #16
 8009a24:	786c      	ldrb	r4, [r5, #1]
 8009a26:	3502      	adds	r5, #2
 8009a28:	2700      	movs	r7, #0
 8009a2a:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8009a2e:	f10e 3eff 	add.w	lr, lr, #4294967295
 8009a32:	fbbe f9f3 	udiv	r9, lr, r3
 8009a36:	4638      	mov	r0, r7
 8009a38:	fb03 ea19 	mls	sl, r3, r9, lr
 8009a3c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8009a40:	f1bc 0f09 	cmp.w	ip, #9
 8009a44:	d814      	bhi.n	8009a70 <_strtol_l.constprop.0+0x9c>
 8009a46:	4664      	mov	r4, ip
 8009a48:	42a3      	cmp	r3, r4
 8009a4a:	dd22      	ble.n	8009a92 <_strtol_l.constprop.0+0xbe>
 8009a4c:	2f00      	cmp	r7, #0
 8009a4e:	db1d      	blt.n	8009a8c <_strtol_l.constprop.0+0xb8>
 8009a50:	4581      	cmp	r9, r0
 8009a52:	d31b      	bcc.n	8009a8c <_strtol_l.constprop.0+0xb8>
 8009a54:	d101      	bne.n	8009a5a <_strtol_l.constprop.0+0x86>
 8009a56:	45a2      	cmp	sl, r4
 8009a58:	db18      	blt.n	8009a8c <_strtol_l.constprop.0+0xb8>
 8009a5a:	2701      	movs	r7, #1
 8009a5c:	fb00 4003 	mla	r0, r0, r3, r4
 8009a60:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009a64:	e7ea      	b.n	8009a3c <_strtol_l.constprop.0+0x68>
 8009a66:	2c2b      	cmp	r4, #43	; 0x2b
 8009a68:	bf04      	itt	eq
 8009a6a:	782c      	ldrbeq	r4, [r5, #0]
 8009a6c:	1c85      	addeq	r5, r0, #2
 8009a6e:	e7cd      	b.n	8009a0c <_strtol_l.constprop.0+0x38>
 8009a70:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8009a74:	f1bc 0f19 	cmp.w	ip, #25
 8009a78:	d801      	bhi.n	8009a7e <_strtol_l.constprop.0+0xaa>
 8009a7a:	3c37      	subs	r4, #55	; 0x37
 8009a7c:	e7e4      	b.n	8009a48 <_strtol_l.constprop.0+0x74>
 8009a7e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8009a82:	f1bc 0f19 	cmp.w	ip, #25
 8009a86:	d804      	bhi.n	8009a92 <_strtol_l.constprop.0+0xbe>
 8009a88:	3c57      	subs	r4, #87	; 0x57
 8009a8a:	e7dd      	b.n	8009a48 <_strtol_l.constprop.0+0x74>
 8009a8c:	f04f 37ff 	mov.w	r7, #4294967295
 8009a90:	e7e6      	b.n	8009a60 <_strtol_l.constprop.0+0x8c>
 8009a92:	2f00      	cmp	r7, #0
 8009a94:	da07      	bge.n	8009aa6 <_strtol_l.constprop.0+0xd2>
 8009a96:	2322      	movs	r3, #34	; 0x22
 8009a98:	4670      	mov	r0, lr
 8009a9a:	f8c8 3000 	str.w	r3, [r8]
 8009a9e:	2a00      	cmp	r2, #0
 8009aa0:	d0a4      	beq.n	80099ec <_strtol_l.constprop.0+0x18>
 8009aa2:	1e69      	subs	r1, r5, #1
 8009aa4:	e005      	b.n	8009ab2 <_strtol_l.constprop.0+0xde>
 8009aa6:	b106      	cbz	r6, 8009aaa <_strtol_l.constprop.0+0xd6>
 8009aa8:	4240      	negs	r0, r0
 8009aaa:	2a00      	cmp	r2, #0
 8009aac:	d09e      	beq.n	80099ec <_strtol_l.constprop.0+0x18>
 8009aae:	2f00      	cmp	r7, #0
 8009ab0:	d1f7      	bne.n	8009aa2 <_strtol_l.constprop.0+0xce>
 8009ab2:	6011      	str	r1, [r2, #0]
 8009ab4:	e79a      	b.n	80099ec <_strtol_l.constprop.0+0x18>
 8009ab6:	2430      	movs	r4, #48	; 0x30
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d1b5      	bne.n	8009a28 <_strtol_l.constprop.0+0x54>
 8009abc:	2308      	movs	r3, #8
 8009abe:	e7b3      	b.n	8009a28 <_strtol_l.constprop.0+0x54>
 8009ac0:	2c30      	cmp	r4, #48	; 0x30
 8009ac2:	d0a9      	beq.n	8009a18 <_strtol_l.constprop.0+0x44>
 8009ac4:	230a      	movs	r3, #10
 8009ac6:	e7af      	b.n	8009a28 <_strtol_l.constprop.0+0x54>
 8009ac8:	0800c821 	.word	0x0800c821

08009acc <_strtol_r>:
 8009acc:	f7ff bf82 	b.w	80099d4 <_strtol_l.constprop.0>

08009ad0 <_vsiprintf_r>:
 8009ad0:	b500      	push	{lr}
 8009ad2:	b09b      	sub	sp, #108	; 0x6c
 8009ad4:	9100      	str	r1, [sp, #0]
 8009ad6:	9104      	str	r1, [sp, #16]
 8009ad8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009adc:	9105      	str	r1, [sp, #20]
 8009ade:	9102      	str	r1, [sp, #8]
 8009ae0:	4905      	ldr	r1, [pc, #20]	; (8009af8 <_vsiprintf_r+0x28>)
 8009ae2:	9103      	str	r1, [sp, #12]
 8009ae4:	4669      	mov	r1, sp
 8009ae6:	f001 ff37 	bl	800b958 <_svfiprintf_r>
 8009aea:	2200      	movs	r2, #0
 8009aec:	9b00      	ldr	r3, [sp, #0]
 8009aee:	701a      	strb	r2, [r3, #0]
 8009af0:	b01b      	add	sp, #108	; 0x6c
 8009af2:	f85d fb04 	ldr.w	pc, [sp], #4
 8009af6:	bf00      	nop
 8009af8:	ffff0208 	.word	0xffff0208

08009afc <vsiprintf>:
 8009afc:	4613      	mov	r3, r2
 8009afe:	460a      	mov	r2, r1
 8009b00:	4601      	mov	r1, r0
 8009b02:	4802      	ldr	r0, [pc, #8]	; (8009b0c <vsiprintf+0x10>)
 8009b04:	6800      	ldr	r0, [r0, #0]
 8009b06:	f7ff bfe3 	b.w	8009ad0 <_vsiprintf_r>
 8009b0a:	bf00      	nop
 8009b0c:	20000048 	.word	0x20000048

08009b10 <quorem>:
 8009b10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b14:	6903      	ldr	r3, [r0, #16]
 8009b16:	690c      	ldr	r4, [r1, #16]
 8009b18:	4607      	mov	r7, r0
 8009b1a:	42a3      	cmp	r3, r4
 8009b1c:	f2c0 8082 	blt.w	8009c24 <quorem+0x114>
 8009b20:	3c01      	subs	r4, #1
 8009b22:	f100 0514 	add.w	r5, r0, #20
 8009b26:	f101 0814 	add.w	r8, r1, #20
 8009b2a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009b2e:	9301      	str	r3, [sp, #4]
 8009b30:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009b34:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009b38:	3301      	adds	r3, #1
 8009b3a:	429a      	cmp	r2, r3
 8009b3c:	fbb2 f6f3 	udiv	r6, r2, r3
 8009b40:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009b44:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009b48:	d331      	bcc.n	8009bae <quorem+0x9e>
 8009b4a:	f04f 0e00 	mov.w	lr, #0
 8009b4e:	4640      	mov	r0, r8
 8009b50:	46ac      	mov	ip, r5
 8009b52:	46f2      	mov	sl, lr
 8009b54:	f850 2b04 	ldr.w	r2, [r0], #4
 8009b58:	b293      	uxth	r3, r2
 8009b5a:	fb06 e303 	mla	r3, r6, r3, lr
 8009b5e:	0c12      	lsrs	r2, r2, #16
 8009b60:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009b64:	b29b      	uxth	r3, r3
 8009b66:	fb06 e202 	mla	r2, r6, r2, lr
 8009b6a:	ebaa 0303 	sub.w	r3, sl, r3
 8009b6e:	f8dc a000 	ldr.w	sl, [ip]
 8009b72:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009b76:	fa1f fa8a 	uxth.w	sl, sl
 8009b7a:	4453      	add	r3, sl
 8009b7c:	f8dc a000 	ldr.w	sl, [ip]
 8009b80:	b292      	uxth	r2, r2
 8009b82:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009b86:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009b8a:	b29b      	uxth	r3, r3
 8009b8c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009b90:	4581      	cmp	r9, r0
 8009b92:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009b96:	f84c 3b04 	str.w	r3, [ip], #4
 8009b9a:	d2db      	bcs.n	8009b54 <quorem+0x44>
 8009b9c:	f855 300b 	ldr.w	r3, [r5, fp]
 8009ba0:	b92b      	cbnz	r3, 8009bae <quorem+0x9e>
 8009ba2:	9b01      	ldr	r3, [sp, #4]
 8009ba4:	3b04      	subs	r3, #4
 8009ba6:	429d      	cmp	r5, r3
 8009ba8:	461a      	mov	r2, r3
 8009baa:	d32f      	bcc.n	8009c0c <quorem+0xfc>
 8009bac:	613c      	str	r4, [r7, #16]
 8009bae:	4638      	mov	r0, r7
 8009bb0:	f001 fc86 	bl	800b4c0 <__mcmp>
 8009bb4:	2800      	cmp	r0, #0
 8009bb6:	db25      	blt.n	8009c04 <quorem+0xf4>
 8009bb8:	4628      	mov	r0, r5
 8009bba:	f04f 0c00 	mov.w	ip, #0
 8009bbe:	3601      	adds	r6, #1
 8009bc0:	f858 1b04 	ldr.w	r1, [r8], #4
 8009bc4:	f8d0 e000 	ldr.w	lr, [r0]
 8009bc8:	b28b      	uxth	r3, r1
 8009bca:	ebac 0303 	sub.w	r3, ip, r3
 8009bce:	fa1f f28e 	uxth.w	r2, lr
 8009bd2:	4413      	add	r3, r2
 8009bd4:	0c0a      	lsrs	r2, r1, #16
 8009bd6:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009bda:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009bde:	b29b      	uxth	r3, r3
 8009be0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009be4:	45c1      	cmp	r9, r8
 8009be6:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009bea:	f840 3b04 	str.w	r3, [r0], #4
 8009bee:	d2e7      	bcs.n	8009bc0 <quorem+0xb0>
 8009bf0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009bf4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009bf8:	b922      	cbnz	r2, 8009c04 <quorem+0xf4>
 8009bfa:	3b04      	subs	r3, #4
 8009bfc:	429d      	cmp	r5, r3
 8009bfe:	461a      	mov	r2, r3
 8009c00:	d30a      	bcc.n	8009c18 <quorem+0x108>
 8009c02:	613c      	str	r4, [r7, #16]
 8009c04:	4630      	mov	r0, r6
 8009c06:	b003      	add	sp, #12
 8009c08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c0c:	6812      	ldr	r2, [r2, #0]
 8009c0e:	3b04      	subs	r3, #4
 8009c10:	2a00      	cmp	r2, #0
 8009c12:	d1cb      	bne.n	8009bac <quorem+0x9c>
 8009c14:	3c01      	subs	r4, #1
 8009c16:	e7c6      	b.n	8009ba6 <quorem+0x96>
 8009c18:	6812      	ldr	r2, [r2, #0]
 8009c1a:	3b04      	subs	r3, #4
 8009c1c:	2a00      	cmp	r2, #0
 8009c1e:	d1f0      	bne.n	8009c02 <quorem+0xf2>
 8009c20:	3c01      	subs	r4, #1
 8009c22:	e7eb      	b.n	8009bfc <quorem+0xec>
 8009c24:	2000      	movs	r0, #0
 8009c26:	e7ee      	b.n	8009c06 <quorem+0xf6>

08009c28 <_dtoa_r>:
 8009c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c2c:	4616      	mov	r6, r2
 8009c2e:	461f      	mov	r7, r3
 8009c30:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009c32:	b099      	sub	sp, #100	; 0x64
 8009c34:	4605      	mov	r5, r0
 8009c36:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009c3a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8009c3e:	b974      	cbnz	r4, 8009c5e <_dtoa_r+0x36>
 8009c40:	2010      	movs	r0, #16
 8009c42:	f7fe f905 	bl	8007e50 <malloc>
 8009c46:	4602      	mov	r2, r0
 8009c48:	6268      	str	r0, [r5, #36]	; 0x24
 8009c4a:	b920      	cbnz	r0, 8009c56 <_dtoa_r+0x2e>
 8009c4c:	21ea      	movs	r1, #234	; 0xea
 8009c4e:	4ba8      	ldr	r3, [pc, #672]	; (8009ef0 <_dtoa_r+0x2c8>)
 8009c50:	48a8      	ldr	r0, [pc, #672]	; (8009ef4 <_dtoa_r+0x2cc>)
 8009c52:	f001 ffa9 	bl	800bba8 <__assert_func>
 8009c56:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009c5a:	6004      	str	r4, [r0, #0]
 8009c5c:	60c4      	str	r4, [r0, #12]
 8009c5e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009c60:	6819      	ldr	r1, [r3, #0]
 8009c62:	b151      	cbz	r1, 8009c7a <_dtoa_r+0x52>
 8009c64:	685a      	ldr	r2, [r3, #4]
 8009c66:	2301      	movs	r3, #1
 8009c68:	4093      	lsls	r3, r2
 8009c6a:	604a      	str	r2, [r1, #4]
 8009c6c:	608b      	str	r3, [r1, #8]
 8009c6e:	4628      	mov	r0, r5
 8009c70:	f001 f99e 	bl	800afb0 <_Bfree>
 8009c74:	2200      	movs	r2, #0
 8009c76:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009c78:	601a      	str	r2, [r3, #0]
 8009c7a:	1e3b      	subs	r3, r7, #0
 8009c7c:	bfaf      	iteee	ge
 8009c7e:	2300      	movge	r3, #0
 8009c80:	2201      	movlt	r2, #1
 8009c82:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009c86:	9305      	strlt	r3, [sp, #20]
 8009c88:	bfa8      	it	ge
 8009c8a:	f8c8 3000 	strge.w	r3, [r8]
 8009c8e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8009c92:	4b99      	ldr	r3, [pc, #612]	; (8009ef8 <_dtoa_r+0x2d0>)
 8009c94:	bfb8      	it	lt
 8009c96:	f8c8 2000 	strlt.w	r2, [r8]
 8009c9a:	ea33 0309 	bics.w	r3, r3, r9
 8009c9e:	d119      	bne.n	8009cd4 <_dtoa_r+0xac>
 8009ca0:	f242 730f 	movw	r3, #9999	; 0x270f
 8009ca4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009ca6:	6013      	str	r3, [r2, #0]
 8009ca8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009cac:	4333      	orrs	r3, r6
 8009cae:	f000 857f 	beq.w	800a7b0 <_dtoa_r+0xb88>
 8009cb2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009cb4:	b953      	cbnz	r3, 8009ccc <_dtoa_r+0xa4>
 8009cb6:	4b91      	ldr	r3, [pc, #580]	; (8009efc <_dtoa_r+0x2d4>)
 8009cb8:	e022      	b.n	8009d00 <_dtoa_r+0xd8>
 8009cba:	4b91      	ldr	r3, [pc, #580]	; (8009f00 <_dtoa_r+0x2d8>)
 8009cbc:	9303      	str	r3, [sp, #12]
 8009cbe:	3308      	adds	r3, #8
 8009cc0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009cc2:	6013      	str	r3, [r2, #0]
 8009cc4:	9803      	ldr	r0, [sp, #12]
 8009cc6:	b019      	add	sp, #100	; 0x64
 8009cc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ccc:	4b8b      	ldr	r3, [pc, #556]	; (8009efc <_dtoa_r+0x2d4>)
 8009cce:	9303      	str	r3, [sp, #12]
 8009cd0:	3303      	adds	r3, #3
 8009cd2:	e7f5      	b.n	8009cc0 <_dtoa_r+0x98>
 8009cd4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8009cd8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8009cdc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	f7f6 fecc 	bl	8000a80 <__aeabi_dcmpeq>
 8009ce8:	4680      	mov	r8, r0
 8009cea:	b158      	cbz	r0, 8009d04 <_dtoa_r+0xdc>
 8009cec:	2301      	movs	r3, #1
 8009cee:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009cf0:	6013      	str	r3, [r2, #0]
 8009cf2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	f000 8558 	beq.w	800a7aa <_dtoa_r+0xb82>
 8009cfa:	4882      	ldr	r0, [pc, #520]	; (8009f04 <_dtoa_r+0x2dc>)
 8009cfc:	6018      	str	r0, [r3, #0]
 8009cfe:	1e43      	subs	r3, r0, #1
 8009d00:	9303      	str	r3, [sp, #12]
 8009d02:	e7df      	b.n	8009cc4 <_dtoa_r+0x9c>
 8009d04:	ab16      	add	r3, sp, #88	; 0x58
 8009d06:	9301      	str	r3, [sp, #4]
 8009d08:	ab17      	add	r3, sp, #92	; 0x5c
 8009d0a:	9300      	str	r3, [sp, #0]
 8009d0c:	4628      	mov	r0, r5
 8009d0e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009d12:	f001 fcf7 	bl	800b704 <__d2b>
 8009d16:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8009d1a:	4683      	mov	fp, r0
 8009d1c:	2c00      	cmp	r4, #0
 8009d1e:	d07f      	beq.n	8009e20 <_dtoa_r+0x1f8>
 8009d20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009d24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d26:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8009d2a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009d2e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8009d32:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8009d36:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	4b72      	ldr	r3, [pc, #456]	; (8009f08 <_dtoa_r+0x2e0>)
 8009d3e:	f7f6 fa7f 	bl	8000240 <__aeabi_dsub>
 8009d42:	a365      	add	r3, pc, #404	; (adr r3, 8009ed8 <_dtoa_r+0x2b0>)
 8009d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d48:	f7f6 fc32 	bl	80005b0 <__aeabi_dmul>
 8009d4c:	a364      	add	r3, pc, #400	; (adr r3, 8009ee0 <_dtoa_r+0x2b8>)
 8009d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d52:	f7f6 fa77 	bl	8000244 <__adddf3>
 8009d56:	4606      	mov	r6, r0
 8009d58:	4620      	mov	r0, r4
 8009d5a:	460f      	mov	r7, r1
 8009d5c:	f7f6 fbbe 	bl	80004dc <__aeabi_i2d>
 8009d60:	a361      	add	r3, pc, #388	; (adr r3, 8009ee8 <_dtoa_r+0x2c0>)
 8009d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d66:	f7f6 fc23 	bl	80005b0 <__aeabi_dmul>
 8009d6a:	4602      	mov	r2, r0
 8009d6c:	460b      	mov	r3, r1
 8009d6e:	4630      	mov	r0, r6
 8009d70:	4639      	mov	r1, r7
 8009d72:	f7f6 fa67 	bl	8000244 <__adddf3>
 8009d76:	4606      	mov	r6, r0
 8009d78:	460f      	mov	r7, r1
 8009d7a:	f7f6 fec9 	bl	8000b10 <__aeabi_d2iz>
 8009d7e:	2200      	movs	r2, #0
 8009d80:	4682      	mov	sl, r0
 8009d82:	2300      	movs	r3, #0
 8009d84:	4630      	mov	r0, r6
 8009d86:	4639      	mov	r1, r7
 8009d88:	f7f6 fe84 	bl	8000a94 <__aeabi_dcmplt>
 8009d8c:	b148      	cbz	r0, 8009da2 <_dtoa_r+0x17a>
 8009d8e:	4650      	mov	r0, sl
 8009d90:	f7f6 fba4 	bl	80004dc <__aeabi_i2d>
 8009d94:	4632      	mov	r2, r6
 8009d96:	463b      	mov	r3, r7
 8009d98:	f7f6 fe72 	bl	8000a80 <__aeabi_dcmpeq>
 8009d9c:	b908      	cbnz	r0, 8009da2 <_dtoa_r+0x17a>
 8009d9e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009da2:	f1ba 0f16 	cmp.w	sl, #22
 8009da6:	d858      	bhi.n	8009e5a <_dtoa_r+0x232>
 8009da8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009dac:	4b57      	ldr	r3, [pc, #348]	; (8009f0c <_dtoa_r+0x2e4>)
 8009dae:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009db6:	f7f6 fe6d 	bl	8000a94 <__aeabi_dcmplt>
 8009dba:	2800      	cmp	r0, #0
 8009dbc:	d04f      	beq.n	8009e5e <_dtoa_r+0x236>
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009dc4:	930f      	str	r3, [sp, #60]	; 0x3c
 8009dc6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009dc8:	1b1c      	subs	r4, r3, r4
 8009dca:	1e63      	subs	r3, r4, #1
 8009dcc:	9309      	str	r3, [sp, #36]	; 0x24
 8009dce:	bf49      	itett	mi
 8009dd0:	f1c4 0301 	rsbmi	r3, r4, #1
 8009dd4:	2300      	movpl	r3, #0
 8009dd6:	9306      	strmi	r3, [sp, #24]
 8009dd8:	2300      	movmi	r3, #0
 8009dda:	bf54      	ite	pl
 8009ddc:	9306      	strpl	r3, [sp, #24]
 8009dde:	9309      	strmi	r3, [sp, #36]	; 0x24
 8009de0:	f1ba 0f00 	cmp.w	sl, #0
 8009de4:	db3d      	blt.n	8009e62 <_dtoa_r+0x23a>
 8009de6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009de8:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8009dec:	4453      	add	r3, sl
 8009dee:	9309      	str	r3, [sp, #36]	; 0x24
 8009df0:	2300      	movs	r3, #0
 8009df2:	930a      	str	r3, [sp, #40]	; 0x28
 8009df4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009df6:	2b09      	cmp	r3, #9
 8009df8:	f200 808c 	bhi.w	8009f14 <_dtoa_r+0x2ec>
 8009dfc:	2b05      	cmp	r3, #5
 8009dfe:	bfc4      	itt	gt
 8009e00:	3b04      	subgt	r3, #4
 8009e02:	9322      	strgt	r3, [sp, #136]	; 0x88
 8009e04:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009e06:	bfc8      	it	gt
 8009e08:	2400      	movgt	r4, #0
 8009e0a:	f1a3 0302 	sub.w	r3, r3, #2
 8009e0e:	bfd8      	it	le
 8009e10:	2401      	movle	r4, #1
 8009e12:	2b03      	cmp	r3, #3
 8009e14:	f200 808a 	bhi.w	8009f2c <_dtoa_r+0x304>
 8009e18:	e8df f003 	tbb	[pc, r3]
 8009e1c:	5b4d4f2d 	.word	0x5b4d4f2d
 8009e20:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8009e24:	441c      	add	r4, r3
 8009e26:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8009e2a:	2b20      	cmp	r3, #32
 8009e2c:	bfc3      	ittte	gt
 8009e2e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009e32:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8009e36:	fa09 f303 	lslgt.w	r3, r9, r3
 8009e3a:	f1c3 0320 	rsble	r3, r3, #32
 8009e3e:	bfc6      	itte	gt
 8009e40:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009e44:	4318      	orrgt	r0, r3
 8009e46:	fa06 f003 	lslle.w	r0, r6, r3
 8009e4a:	f7f6 fb37 	bl	80004bc <__aeabi_ui2d>
 8009e4e:	2301      	movs	r3, #1
 8009e50:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8009e54:	3c01      	subs	r4, #1
 8009e56:	9313      	str	r3, [sp, #76]	; 0x4c
 8009e58:	e76f      	b.n	8009d3a <_dtoa_r+0x112>
 8009e5a:	2301      	movs	r3, #1
 8009e5c:	e7b2      	b.n	8009dc4 <_dtoa_r+0x19c>
 8009e5e:	900f      	str	r0, [sp, #60]	; 0x3c
 8009e60:	e7b1      	b.n	8009dc6 <_dtoa_r+0x19e>
 8009e62:	9b06      	ldr	r3, [sp, #24]
 8009e64:	eba3 030a 	sub.w	r3, r3, sl
 8009e68:	9306      	str	r3, [sp, #24]
 8009e6a:	f1ca 0300 	rsb	r3, sl, #0
 8009e6e:	930a      	str	r3, [sp, #40]	; 0x28
 8009e70:	2300      	movs	r3, #0
 8009e72:	930e      	str	r3, [sp, #56]	; 0x38
 8009e74:	e7be      	b.n	8009df4 <_dtoa_r+0x1cc>
 8009e76:	2300      	movs	r3, #0
 8009e78:	930b      	str	r3, [sp, #44]	; 0x2c
 8009e7a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	dc58      	bgt.n	8009f32 <_dtoa_r+0x30a>
 8009e80:	f04f 0901 	mov.w	r9, #1
 8009e84:	464b      	mov	r3, r9
 8009e86:	f8cd 9020 	str.w	r9, [sp, #32]
 8009e8a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8009e8e:	2200      	movs	r2, #0
 8009e90:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8009e92:	6042      	str	r2, [r0, #4]
 8009e94:	2204      	movs	r2, #4
 8009e96:	f102 0614 	add.w	r6, r2, #20
 8009e9a:	429e      	cmp	r6, r3
 8009e9c:	6841      	ldr	r1, [r0, #4]
 8009e9e:	d94e      	bls.n	8009f3e <_dtoa_r+0x316>
 8009ea0:	4628      	mov	r0, r5
 8009ea2:	f001 f845 	bl	800af30 <_Balloc>
 8009ea6:	9003      	str	r0, [sp, #12]
 8009ea8:	2800      	cmp	r0, #0
 8009eaa:	d14c      	bne.n	8009f46 <_dtoa_r+0x31e>
 8009eac:	4602      	mov	r2, r0
 8009eae:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009eb2:	4b17      	ldr	r3, [pc, #92]	; (8009f10 <_dtoa_r+0x2e8>)
 8009eb4:	e6cc      	b.n	8009c50 <_dtoa_r+0x28>
 8009eb6:	2301      	movs	r3, #1
 8009eb8:	e7de      	b.n	8009e78 <_dtoa_r+0x250>
 8009eba:	2300      	movs	r3, #0
 8009ebc:	930b      	str	r3, [sp, #44]	; 0x2c
 8009ebe:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009ec0:	eb0a 0903 	add.w	r9, sl, r3
 8009ec4:	f109 0301 	add.w	r3, r9, #1
 8009ec8:	2b01      	cmp	r3, #1
 8009eca:	9308      	str	r3, [sp, #32]
 8009ecc:	bfb8      	it	lt
 8009ece:	2301      	movlt	r3, #1
 8009ed0:	e7dd      	b.n	8009e8e <_dtoa_r+0x266>
 8009ed2:	2301      	movs	r3, #1
 8009ed4:	e7f2      	b.n	8009ebc <_dtoa_r+0x294>
 8009ed6:	bf00      	nop
 8009ed8:	636f4361 	.word	0x636f4361
 8009edc:	3fd287a7 	.word	0x3fd287a7
 8009ee0:	8b60c8b3 	.word	0x8b60c8b3
 8009ee4:	3fc68a28 	.word	0x3fc68a28
 8009ee8:	509f79fb 	.word	0x509f79fb
 8009eec:	3fd34413 	.word	0x3fd34413
 8009ef0:	0800c92e 	.word	0x0800c92e
 8009ef4:	0800c945 	.word	0x0800c945
 8009ef8:	7ff00000 	.word	0x7ff00000
 8009efc:	0800c92a 	.word	0x0800c92a
 8009f00:	0800c921 	.word	0x0800c921
 8009f04:	0800c7a1 	.word	0x0800c7a1
 8009f08:	3ff80000 	.word	0x3ff80000
 8009f0c:	0800cab0 	.word	0x0800cab0
 8009f10:	0800c9a0 	.word	0x0800c9a0
 8009f14:	2401      	movs	r4, #1
 8009f16:	2300      	movs	r3, #0
 8009f18:	940b      	str	r4, [sp, #44]	; 0x2c
 8009f1a:	9322      	str	r3, [sp, #136]	; 0x88
 8009f1c:	f04f 39ff 	mov.w	r9, #4294967295
 8009f20:	2200      	movs	r2, #0
 8009f22:	2312      	movs	r3, #18
 8009f24:	f8cd 9020 	str.w	r9, [sp, #32]
 8009f28:	9223      	str	r2, [sp, #140]	; 0x8c
 8009f2a:	e7b0      	b.n	8009e8e <_dtoa_r+0x266>
 8009f2c:	2301      	movs	r3, #1
 8009f2e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009f30:	e7f4      	b.n	8009f1c <_dtoa_r+0x2f4>
 8009f32:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8009f36:	464b      	mov	r3, r9
 8009f38:	f8cd 9020 	str.w	r9, [sp, #32]
 8009f3c:	e7a7      	b.n	8009e8e <_dtoa_r+0x266>
 8009f3e:	3101      	adds	r1, #1
 8009f40:	6041      	str	r1, [r0, #4]
 8009f42:	0052      	lsls	r2, r2, #1
 8009f44:	e7a7      	b.n	8009e96 <_dtoa_r+0x26e>
 8009f46:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009f48:	9a03      	ldr	r2, [sp, #12]
 8009f4a:	601a      	str	r2, [r3, #0]
 8009f4c:	9b08      	ldr	r3, [sp, #32]
 8009f4e:	2b0e      	cmp	r3, #14
 8009f50:	f200 80a8 	bhi.w	800a0a4 <_dtoa_r+0x47c>
 8009f54:	2c00      	cmp	r4, #0
 8009f56:	f000 80a5 	beq.w	800a0a4 <_dtoa_r+0x47c>
 8009f5a:	f1ba 0f00 	cmp.w	sl, #0
 8009f5e:	dd34      	ble.n	8009fca <_dtoa_r+0x3a2>
 8009f60:	4a9a      	ldr	r2, [pc, #616]	; (800a1cc <_dtoa_r+0x5a4>)
 8009f62:	f00a 030f 	and.w	r3, sl, #15
 8009f66:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009f6a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8009f6e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009f72:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8009f76:	ea4f 142a 	mov.w	r4, sl, asr #4
 8009f7a:	d016      	beq.n	8009faa <_dtoa_r+0x382>
 8009f7c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009f80:	4b93      	ldr	r3, [pc, #588]	; (800a1d0 <_dtoa_r+0x5a8>)
 8009f82:	2703      	movs	r7, #3
 8009f84:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009f88:	f7f6 fc3c 	bl	8000804 <__aeabi_ddiv>
 8009f8c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009f90:	f004 040f 	and.w	r4, r4, #15
 8009f94:	4e8e      	ldr	r6, [pc, #568]	; (800a1d0 <_dtoa_r+0x5a8>)
 8009f96:	b954      	cbnz	r4, 8009fae <_dtoa_r+0x386>
 8009f98:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009f9c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009fa0:	f7f6 fc30 	bl	8000804 <__aeabi_ddiv>
 8009fa4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009fa8:	e029      	b.n	8009ffe <_dtoa_r+0x3d6>
 8009faa:	2702      	movs	r7, #2
 8009fac:	e7f2      	b.n	8009f94 <_dtoa_r+0x36c>
 8009fae:	07e1      	lsls	r1, r4, #31
 8009fb0:	d508      	bpl.n	8009fc4 <_dtoa_r+0x39c>
 8009fb2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009fb6:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009fba:	f7f6 faf9 	bl	80005b0 <__aeabi_dmul>
 8009fbe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009fc2:	3701      	adds	r7, #1
 8009fc4:	1064      	asrs	r4, r4, #1
 8009fc6:	3608      	adds	r6, #8
 8009fc8:	e7e5      	b.n	8009f96 <_dtoa_r+0x36e>
 8009fca:	f000 80a5 	beq.w	800a118 <_dtoa_r+0x4f0>
 8009fce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009fd2:	f1ca 0400 	rsb	r4, sl, #0
 8009fd6:	4b7d      	ldr	r3, [pc, #500]	; (800a1cc <_dtoa_r+0x5a4>)
 8009fd8:	f004 020f 	and.w	r2, r4, #15
 8009fdc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fe4:	f7f6 fae4 	bl	80005b0 <__aeabi_dmul>
 8009fe8:	2702      	movs	r7, #2
 8009fea:	2300      	movs	r3, #0
 8009fec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009ff0:	4e77      	ldr	r6, [pc, #476]	; (800a1d0 <_dtoa_r+0x5a8>)
 8009ff2:	1124      	asrs	r4, r4, #4
 8009ff4:	2c00      	cmp	r4, #0
 8009ff6:	f040 8084 	bne.w	800a102 <_dtoa_r+0x4da>
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d1d2      	bne.n	8009fa4 <_dtoa_r+0x37c>
 8009ffe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a000:	2b00      	cmp	r3, #0
 800a002:	f000 808b 	beq.w	800a11c <_dtoa_r+0x4f4>
 800a006:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800a00a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800a00e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a012:	2200      	movs	r2, #0
 800a014:	4b6f      	ldr	r3, [pc, #444]	; (800a1d4 <_dtoa_r+0x5ac>)
 800a016:	f7f6 fd3d 	bl	8000a94 <__aeabi_dcmplt>
 800a01a:	2800      	cmp	r0, #0
 800a01c:	d07e      	beq.n	800a11c <_dtoa_r+0x4f4>
 800a01e:	9b08      	ldr	r3, [sp, #32]
 800a020:	2b00      	cmp	r3, #0
 800a022:	d07b      	beq.n	800a11c <_dtoa_r+0x4f4>
 800a024:	f1b9 0f00 	cmp.w	r9, #0
 800a028:	dd38      	ble.n	800a09c <_dtoa_r+0x474>
 800a02a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a02e:	2200      	movs	r2, #0
 800a030:	4b69      	ldr	r3, [pc, #420]	; (800a1d8 <_dtoa_r+0x5b0>)
 800a032:	f7f6 fabd 	bl	80005b0 <__aeabi_dmul>
 800a036:	464c      	mov	r4, r9
 800a038:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a03c:	f10a 38ff 	add.w	r8, sl, #4294967295
 800a040:	3701      	adds	r7, #1
 800a042:	4638      	mov	r0, r7
 800a044:	f7f6 fa4a 	bl	80004dc <__aeabi_i2d>
 800a048:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a04c:	f7f6 fab0 	bl	80005b0 <__aeabi_dmul>
 800a050:	2200      	movs	r2, #0
 800a052:	4b62      	ldr	r3, [pc, #392]	; (800a1dc <_dtoa_r+0x5b4>)
 800a054:	f7f6 f8f6 	bl	8000244 <__adddf3>
 800a058:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800a05c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a060:	9611      	str	r6, [sp, #68]	; 0x44
 800a062:	2c00      	cmp	r4, #0
 800a064:	d15d      	bne.n	800a122 <_dtoa_r+0x4fa>
 800a066:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a06a:	2200      	movs	r2, #0
 800a06c:	4b5c      	ldr	r3, [pc, #368]	; (800a1e0 <_dtoa_r+0x5b8>)
 800a06e:	f7f6 f8e7 	bl	8000240 <__aeabi_dsub>
 800a072:	4602      	mov	r2, r0
 800a074:	460b      	mov	r3, r1
 800a076:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a07a:	4633      	mov	r3, r6
 800a07c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a07e:	f7f6 fd27 	bl	8000ad0 <__aeabi_dcmpgt>
 800a082:	2800      	cmp	r0, #0
 800a084:	f040 829c 	bne.w	800a5c0 <_dtoa_r+0x998>
 800a088:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a08c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a08e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800a092:	f7f6 fcff 	bl	8000a94 <__aeabi_dcmplt>
 800a096:	2800      	cmp	r0, #0
 800a098:	f040 8290 	bne.w	800a5bc <_dtoa_r+0x994>
 800a09c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800a0a0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a0a4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	f2c0 8152 	blt.w	800a350 <_dtoa_r+0x728>
 800a0ac:	f1ba 0f0e 	cmp.w	sl, #14
 800a0b0:	f300 814e 	bgt.w	800a350 <_dtoa_r+0x728>
 800a0b4:	4b45      	ldr	r3, [pc, #276]	; (800a1cc <_dtoa_r+0x5a4>)
 800a0b6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a0ba:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a0be:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800a0c2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	f280 80db 	bge.w	800a280 <_dtoa_r+0x658>
 800a0ca:	9b08      	ldr	r3, [sp, #32]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	f300 80d7 	bgt.w	800a280 <_dtoa_r+0x658>
 800a0d2:	f040 8272 	bne.w	800a5ba <_dtoa_r+0x992>
 800a0d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a0da:	2200      	movs	r2, #0
 800a0dc:	4b40      	ldr	r3, [pc, #256]	; (800a1e0 <_dtoa_r+0x5b8>)
 800a0de:	f7f6 fa67 	bl	80005b0 <__aeabi_dmul>
 800a0e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a0e6:	f7f6 fce9 	bl	8000abc <__aeabi_dcmpge>
 800a0ea:	9c08      	ldr	r4, [sp, #32]
 800a0ec:	4626      	mov	r6, r4
 800a0ee:	2800      	cmp	r0, #0
 800a0f0:	f040 8248 	bne.w	800a584 <_dtoa_r+0x95c>
 800a0f4:	2331      	movs	r3, #49	; 0x31
 800a0f6:	9f03      	ldr	r7, [sp, #12]
 800a0f8:	f10a 0a01 	add.w	sl, sl, #1
 800a0fc:	f807 3b01 	strb.w	r3, [r7], #1
 800a100:	e244      	b.n	800a58c <_dtoa_r+0x964>
 800a102:	07e2      	lsls	r2, r4, #31
 800a104:	d505      	bpl.n	800a112 <_dtoa_r+0x4ea>
 800a106:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a10a:	f7f6 fa51 	bl	80005b0 <__aeabi_dmul>
 800a10e:	2301      	movs	r3, #1
 800a110:	3701      	adds	r7, #1
 800a112:	1064      	asrs	r4, r4, #1
 800a114:	3608      	adds	r6, #8
 800a116:	e76d      	b.n	8009ff4 <_dtoa_r+0x3cc>
 800a118:	2702      	movs	r7, #2
 800a11a:	e770      	b.n	8009ffe <_dtoa_r+0x3d6>
 800a11c:	46d0      	mov	r8, sl
 800a11e:	9c08      	ldr	r4, [sp, #32]
 800a120:	e78f      	b.n	800a042 <_dtoa_r+0x41a>
 800a122:	9903      	ldr	r1, [sp, #12]
 800a124:	4b29      	ldr	r3, [pc, #164]	; (800a1cc <_dtoa_r+0x5a4>)
 800a126:	4421      	add	r1, r4
 800a128:	9112      	str	r1, [sp, #72]	; 0x48
 800a12a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a12c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a130:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800a134:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a138:	2900      	cmp	r1, #0
 800a13a:	d055      	beq.n	800a1e8 <_dtoa_r+0x5c0>
 800a13c:	2000      	movs	r0, #0
 800a13e:	4929      	ldr	r1, [pc, #164]	; (800a1e4 <_dtoa_r+0x5bc>)
 800a140:	f7f6 fb60 	bl	8000804 <__aeabi_ddiv>
 800a144:	463b      	mov	r3, r7
 800a146:	4632      	mov	r2, r6
 800a148:	f7f6 f87a 	bl	8000240 <__aeabi_dsub>
 800a14c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a150:	9f03      	ldr	r7, [sp, #12]
 800a152:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a156:	f7f6 fcdb 	bl	8000b10 <__aeabi_d2iz>
 800a15a:	4604      	mov	r4, r0
 800a15c:	f7f6 f9be 	bl	80004dc <__aeabi_i2d>
 800a160:	4602      	mov	r2, r0
 800a162:	460b      	mov	r3, r1
 800a164:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a168:	f7f6 f86a 	bl	8000240 <__aeabi_dsub>
 800a16c:	4602      	mov	r2, r0
 800a16e:	460b      	mov	r3, r1
 800a170:	3430      	adds	r4, #48	; 0x30
 800a172:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a176:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a17a:	f807 4b01 	strb.w	r4, [r7], #1
 800a17e:	f7f6 fc89 	bl	8000a94 <__aeabi_dcmplt>
 800a182:	2800      	cmp	r0, #0
 800a184:	d174      	bne.n	800a270 <_dtoa_r+0x648>
 800a186:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a18a:	2000      	movs	r0, #0
 800a18c:	4911      	ldr	r1, [pc, #68]	; (800a1d4 <_dtoa_r+0x5ac>)
 800a18e:	f7f6 f857 	bl	8000240 <__aeabi_dsub>
 800a192:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a196:	f7f6 fc7d 	bl	8000a94 <__aeabi_dcmplt>
 800a19a:	2800      	cmp	r0, #0
 800a19c:	f040 80b7 	bne.w	800a30e <_dtoa_r+0x6e6>
 800a1a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a1a2:	429f      	cmp	r7, r3
 800a1a4:	f43f af7a 	beq.w	800a09c <_dtoa_r+0x474>
 800a1a8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a1ac:	2200      	movs	r2, #0
 800a1ae:	4b0a      	ldr	r3, [pc, #40]	; (800a1d8 <_dtoa_r+0x5b0>)
 800a1b0:	f7f6 f9fe 	bl	80005b0 <__aeabi_dmul>
 800a1b4:	2200      	movs	r2, #0
 800a1b6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a1ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a1be:	4b06      	ldr	r3, [pc, #24]	; (800a1d8 <_dtoa_r+0x5b0>)
 800a1c0:	f7f6 f9f6 	bl	80005b0 <__aeabi_dmul>
 800a1c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a1c8:	e7c3      	b.n	800a152 <_dtoa_r+0x52a>
 800a1ca:	bf00      	nop
 800a1cc:	0800cab0 	.word	0x0800cab0
 800a1d0:	0800ca88 	.word	0x0800ca88
 800a1d4:	3ff00000 	.word	0x3ff00000
 800a1d8:	40240000 	.word	0x40240000
 800a1dc:	401c0000 	.word	0x401c0000
 800a1e0:	40140000 	.word	0x40140000
 800a1e4:	3fe00000 	.word	0x3fe00000
 800a1e8:	4630      	mov	r0, r6
 800a1ea:	4639      	mov	r1, r7
 800a1ec:	f7f6 f9e0 	bl	80005b0 <__aeabi_dmul>
 800a1f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a1f2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a1f6:	9c03      	ldr	r4, [sp, #12]
 800a1f8:	9314      	str	r3, [sp, #80]	; 0x50
 800a1fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a1fe:	f7f6 fc87 	bl	8000b10 <__aeabi_d2iz>
 800a202:	9015      	str	r0, [sp, #84]	; 0x54
 800a204:	f7f6 f96a 	bl	80004dc <__aeabi_i2d>
 800a208:	4602      	mov	r2, r0
 800a20a:	460b      	mov	r3, r1
 800a20c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a210:	f7f6 f816 	bl	8000240 <__aeabi_dsub>
 800a214:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a216:	4606      	mov	r6, r0
 800a218:	3330      	adds	r3, #48	; 0x30
 800a21a:	f804 3b01 	strb.w	r3, [r4], #1
 800a21e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a220:	460f      	mov	r7, r1
 800a222:	429c      	cmp	r4, r3
 800a224:	f04f 0200 	mov.w	r2, #0
 800a228:	d124      	bne.n	800a274 <_dtoa_r+0x64c>
 800a22a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a22e:	4bb0      	ldr	r3, [pc, #704]	; (800a4f0 <_dtoa_r+0x8c8>)
 800a230:	f7f6 f808 	bl	8000244 <__adddf3>
 800a234:	4602      	mov	r2, r0
 800a236:	460b      	mov	r3, r1
 800a238:	4630      	mov	r0, r6
 800a23a:	4639      	mov	r1, r7
 800a23c:	f7f6 fc48 	bl	8000ad0 <__aeabi_dcmpgt>
 800a240:	2800      	cmp	r0, #0
 800a242:	d163      	bne.n	800a30c <_dtoa_r+0x6e4>
 800a244:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a248:	2000      	movs	r0, #0
 800a24a:	49a9      	ldr	r1, [pc, #676]	; (800a4f0 <_dtoa_r+0x8c8>)
 800a24c:	f7f5 fff8 	bl	8000240 <__aeabi_dsub>
 800a250:	4602      	mov	r2, r0
 800a252:	460b      	mov	r3, r1
 800a254:	4630      	mov	r0, r6
 800a256:	4639      	mov	r1, r7
 800a258:	f7f6 fc1c 	bl	8000a94 <__aeabi_dcmplt>
 800a25c:	2800      	cmp	r0, #0
 800a25e:	f43f af1d 	beq.w	800a09c <_dtoa_r+0x474>
 800a262:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800a264:	1e7b      	subs	r3, r7, #1
 800a266:	9314      	str	r3, [sp, #80]	; 0x50
 800a268:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800a26c:	2b30      	cmp	r3, #48	; 0x30
 800a26e:	d0f8      	beq.n	800a262 <_dtoa_r+0x63a>
 800a270:	46c2      	mov	sl, r8
 800a272:	e03b      	b.n	800a2ec <_dtoa_r+0x6c4>
 800a274:	4b9f      	ldr	r3, [pc, #636]	; (800a4f4 <_dtoa_r+0x8cc>)
 800a276:	f7f6 f99b 	bl	80005b0 <__aeabi_dmul>
 800a27a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a27e:	e7bc      	b.n	800a1fa <_dtoa_r+0x5d2>
 800a280:	9f03      	ldr	r7, [sp, #12]
 800a282:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800a286:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a28a:	4640      	mov	r0, r8
 800a28c:	4649      	mov	r1, r9
 800a28e:	f7f6 fab9 	bl	8000804 <__aeabi_ddiv>
 800a292:	f7f6 fc3d 	bl	8000b10 <__aeabi_d2iz>
 800a296:	4604      	mov	r4, r0
 800a298:	f7f6 f920 	bl	80004dc <__aeabi_i2d>
 800a29c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a2a0:	f7f6 f986 	bl	80005b0 <__aeabi_dmul>
 800a2a4:	4602      	mov	r2, r0
 800a2a6:	460b      	mov	r3, r1
 800a2a8:	4640      	mov	r0, r8
 800a2aa:	4649      	mov	r1, r9
 800a2ac:	f7f5 ffc8 	bl	8000240 <__aeabi_dsub>
 800a2b0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800a2b4:	f807 6b01 	strb.w	r6, [r7], #1
 800a2b8:	9e03      	ldr	r6, [sp, #12]
 800a2ba:	f8dd c020 	ldr.w	ip, [sp, #32]
 800a2be:	1bbe      	subs	r6, r7, r6
 800a2c0:	45b4      	cmp	ip, r6
 800a2c2:	4602      	mov	r2, r0
 800a2c4:	460b      	mov	r3, r1
 800a2c6:	d136      	bne.n	800a336 <_dtoa_r+0x70e>
 800a2c8:	f7f5 ffbc 	bl	8000244 <__adddf3>
 800a2cc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a2d0:	4680      	mov	r8, r0
 800a2d2:	4689      	mov	r9, r1
 800a2d4:	f7f6 fbfc 	bl	8000ad0 <__aeabi_dcmpgt>
 800a2d8:	bb58      	cbnz	r0, 800a332 <_dtoa_r+0x70a>
 800a2da:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a2de:	4640      	mov	r0, r8
 800a2e0:	4649      	mov	r1, r9
 800a2e2:	f7f6 fbcd 	bl	8000a80 <__aeabi_dcmpeq>
 800a2e6:	b108      	cbz	r0, 800a2ec <_dtoa_r+0x6c4>
 800a2e8:	07e1      	lsls	r1, r4, #31
 800a2ea:	d422      	bmi.n	800a332 <_dtoa_r+0x70a>
 800a2ec:	4628      	mov	r0, r5
 800a2ee:	4659      	mov	r1, fp
 800a2f0:	f000 fe5e 	bl	800afb0 <_Bfree>
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	703b      	strb	r3, [r7, #0]
 800a2f8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a2fa:	f10a 0001 	add.w	r0, sl, #1
 800a2fe:	6018      	str	r0, [r3, #0]
 800a300:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a302:	2b00      	cmp	r3, #0
 800a304:	f43f acde 	beq.w	8009cc4 <_dtoa_r+0x9c>
 800a308:	601f      	str	r7, [r3, #0]
 800a30a:	e4db      	b.n	8009cc4 <_dtoa_r+0x9c>
 800a30c:	4627      	mov	r7, r4
 800a30e:	463b      	mov	r3, r7
 800a310:	461f      	mov	r7, r3
 800a312:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a316:	2a39      	cmp	r2, #57	; 0x39
 800a318:	d107      	bne.n	800a32a <_dtoa_r+0x702>
 800a31a:	9a03      	ldr	r2, [sp, #12]
 800a31c:	429a      	cmp	r2, r3
 800a31e:	d1f7      	bne.n	800a310 <_dtoa_r+0x6e8>
 800a320:	2230      	movs	r2, #48	; 0x30
 800a322:	9903      	ldr	r1, [sp, #12]
 800a324:	f108 0801 	add.w	r8, r8, #1
 800a328:	700a      	strb	r2, [r1, #0]
 800a32a:	781a      	ldrb	r2, [r3, #0]
 800a32c:	3201      	adds	r2, #1
 800a32e:	701a      	strb	r2, [r3, #0]
 800a330:	e79e      	b.n	800a270 <_dtoa_r+0x648>
 800a332:	46d0      	mov	r8, sl
 800a334:	e7eb      	b.n	800a30e <_dtoa_r+0x6e6>
 800a336:	2200      	movs	r2, #0
 800a338:	4b6e      	ldr	r3, [pc, #440]	; (800a4f4 <_dtoa_r+0x8cc>)
 800a33a:	f7f6 f939 	bl	80005b0 <__aeabi_dmul>
 800a33e:	2200      	movs	r2, #0
 800a340:	2300      	movs	r3, #0
 800a342:	4680      	mov	r8, r0
 800a344:	4689      	mov	r9, r1
 800a346:	f7f6 fb9b 	bl	8000a80 <__aeabi_dcmpeq>
 800a34a:	2800      	cmp	r0, #0
 800a34c:	d09b      	beq.n	800a286 <_dtoa_r+0x65e>
 800a34e:	e7cd      	b.n	800a2ec <_dtoa_r+0x6c4>
 800a350:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a352:	2a00      	cmp	r2, #0
 800a354:	f000 80d0 	beq.w	800a4f8 <_dtoa_r+0x8d0>
 800a358:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a35a:	2a01      	cmp	r2, #1
 800a35c:	f300 80ae 	bgt.w	800a4bc <_dtoa_r+0x894>
 800a360:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a362:	2a00      	cmp	r2, #0
 800a364:	f000 80a6 	beq.w	800a4b4 <_dtoa_r+0x88c>
 800a368:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a36c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a36e:	9f06      	ldr	r7, [sp, #24]
 800a370:	9a06      	ldr	r2, [sp, #24]
 800a372:	2101      	movs	r1, #1
 800a374:	441a      	add	r2, r3
 800a376:	9206      	str	r2, [sp, #24]
 800a378:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a37a:	4628      	mov	r0, r5
 800a37c:	441a      	add	r2, r3
 800a37e:	9209      	str	r2, [sp, #36]	; 0x24
 800a380:	f000 ff16 	bl	800b1b0 <__i2b>
 800a384:	4606      	mov	r6, r0
 800a386:	2f00      	cmp	r7, #0
 800a388:	dd0c      	ble.n	800a3a4 <_dtoa_r+0x77c>
 800a38a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	dd09      	ble.n	800a3a4 <_dtoa_r+0x77c>
 800a390:	42bb      	cmp	r3, r7
 800a392:	bfa8      	it	ge
 800a394:	463b      	movge	r3, r7
 800a396:	9a06      	ldr	r2, [sp, #24]
 800a398:	1aff      	subs	r7, r7, r3
 800a39a:	1ad2      	subs	r2, r2, r3
 800a39c:	9206      	str	r2, [sp, #24]
 800a39e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a3a0:	1ad3      	subs	r3, r2, r3
 800a3a2:	9309      	str	r3, [sp, #36]	; 0x24
 800a3a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3a6:	b1f3      	cbz	r3, 800a3e6 <_dtoa_r+0x7be>
 800a3a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	f000 80a8 	beq.w	800a500 <_dtoa_r+0x8d8>
 800a3b0:	2c00      	cmp	r4, #0
 800a3b2:	dd10      	ble.n	800a3d6 <_dtoa_r+0x7ae>
 800a3b4:	4631      	mov	r1, r6
 800a3b6:	4622      	mov	r2, r4
 800a3b8:	4628      	mov	r0, r5
 800a3ba:	f000 ffb7 	bl	800b32c <__pow5mult>
 800a3be:	465a      	mov	r2, fp
 800a3c0:	4601      	mov	r1, r0
 800a3c2:	4606      	mov	r6, r0
 800a3c4:	4628      	mov	r0, r5
 800a3c6:	f000 ff09 	bl	800b1dc <__multiply>
 800a3ca:	4680      	mov	r8, r0
 800a3cc:	4659      	mov	r1, fp
 800a3ce:	4628      	mov	r0, r5
 800a3d0:	f000 fdee 	bl	800afb0 <_Bfree>
 800a3d4:	46c3      	mov	fp, r8
 800a3d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3d8:	1b1a      	subs	r2, r3, r4
 800a3da:	d004      	beq.n	800a3e6 <_dtoa_r+0x7be>
 800a3dc:	4659      	mov	r1, fp
 800a3de:	4628      	mov	r0, r5
 800a3e0:	f000 ffa4 	bl	800b32c <__pow5mult>
 800a3e4:	4683      	mov	fp, r0
 800a3e6:	2101      	movs	r1, #1
 800a3e8:	4628      	mov	r0, r5
 800a3ea:	f000 fee1 	bl	800b1b0 <__i2b>
 800a3ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a3f0:	4604      	mov	r4, r0
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	f340 8086 	ble.w	800a504 <_dtoa_r+0x8dc>
 800a3f8:	461a      	mov	r2, r3
 800a3fa:	4601      	mov	r1, r0
 800a3fc:	4628      	mov	r0, r5
 800a3fe:	f000 ff95 	bl	800b32c <__pow5mult>
 800a402:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a404:	4604      	mov	r4, r0
 800a406:	2b01      	cmp	r3, #1
 800a408:	dd7f      	ble.n	800a50a <_dtoa_r+0x8e2>
 800a40a:	f04f 0800 	mov.w	r8, #0
 800a40e:	6923      	ldr	r3, [r4, #16]
 800a410:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a414:	6918      	ldr	r0, [r3, #16]
 800a416:	f000 fe7d 	bl	800b114 <__hi0bits>
 800a41a:	f1c0 0020 	rsb	r0, r0, #32
 800a41e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a420:	4418      	add	r0, r3
 800a422:	f010 001f 	ands.w	r0, r0, #31
 800a426:	f000 8092 	beq.w	800a54e <_dtoa_r+0x926>
 800a42a:	f1c0 0320 	rsb	r3, r0, #32
 800a42e:	2b04      	cmp	r3, #4
 800a430:	f340 808a 	ble.w	800a548 <_dtoa_r+0x920>
 800a434:	f1c0 001c 	rsb	r0, r0, #28
 800a438:	9b06      	ldr	r3, [sp, #24]
 800a43a:	4407      	add	r7, r0
 800a43c:	4403      	add	r3, r0
 800a43e:	9306      	str	r3, [sp, #24]
 800a440:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a442:	4403      	add	r3, r0
 800a444:	9309      	str	r3, [sp, #36]	; 0x24
 800a446:	9b06      	ldr	r3, [sp, #24]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	dd05      	ble.n	800a458 <_dtoa_r+0x830>
 800a44c:	4659      	mov	r1, fp
 800a44e:	461a      	mov	r2, r3
 800a450:	4628      	mov	r0, r5
 800a452:	f000 ffc5 	bl	800b3e0 <__lshift>
 800a456:	4683      	mov	fp, r0
 800a458:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	dd05      	ble.n	800a46a <_dtoa_r+0x842>
 800a45e:	4621      	mov	r1, r4
 800a460:	461a      	mov	r2, r3
 800a462:	4628      	mov	r0, r5
 800a464:	f000 ffbc 	bl	800b3e0 <__lshift>
 800a468:	4604      	mov	r4, r0
 800a46a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d070      	beq.n	800a552 <_dtoa_r+0x92a>
 800a470:	4621      	mov	r1, r4
 800a472:	4658      	mov	r0, fp
 800a474:	f001 f824 	bl	800b4c0 <__mcmp>
 800a478:	2800      	cmp	r0, #0
 800a47a:	da6a      	bge.n	800a552 <_dtoa_r+0x92a>
 800a47c:	2300      	movs	r3, #0
 800a47e:	4659      	mov	r1, fp
 800a480:	220a      	movs	r2, #10
 800a482:	4628      	mov	r0, r5
 800a484:	f000 fdb6 	bl	800aff4 <__multadd>
 800a488:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a48a:	4683      	mov	fp, r0
 800a48c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a490:	2b00      	cmp	r3, #0
 800a492:	f000 8194 	beq.w	800a7be <_dtoa_r+0xb96>
 800a496:	4631      	mov	r1, r6
 800a498:	2300      	movs	r3, #0
 800a49a:	220a      	movs	r2, #10
 800a49c:	4628      	mov	r0, r5
 800a49e:	f000 fda9 	bl	800aff4 <__multadd>
 800a4a2:	f1b9 0f00 	cmp.w	r9, #0
 800a4a6:	4606      	mov	r6, r0
 800a4a8:	f300 8093 	bgt.w	800a5d2 <_dtoa_r+0x9aa>
 800a4ac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a4ae:	2b02      	cmp	r3, #2
 800a4b0:	dc57      	bgt.n	800a562 <_dtoa_r+0x93a>
 800a4b2:	e08e      	b.n	800a5d2 <_dtoa_r+0x9aa>
 800a4b4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a4b6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a4ba:	e757      	b.n	800a36c <_dtoa_r+0x744>
 800a4bc:	9b08      	ldr	r3, [sp, #32]
 800a4be:	1e5c      	subs	r4, r3, #1
 800a4c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a4c2:	42a3      	cmp	r3, r4
 800a4c4:	bfb7      	itett	lt
 800a4c6:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a4c8:	1b1c      	subge	r4, r3, r4
 800a4ca:	1ae2      	sublt	r2, r4, r3
 800a4cc:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800a4ce:	bfbe      	ittt	lt
 800a4d0:	940a      	strlt	r4, [sp, #40]	; 0x28
 800a4d2:	189b      	addlt	r3, r3, r2
 800a4d4:	930e      	strlt	r3, [sp, #56]	; 0x38
 800a4d6:	9b08      	ldr	r3, [sp, #32]
 800a4d8:	bfb8      	it	lt
 800a4da:	2400      	movlt	r4, #0
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	bfbb      	ittet	lt
 800a4e0:	9b06      	ldrlt	r3, [sp, #24]
 800a4e2:	9a08      	ldrlt	r2, [sp, #32]
 800a4e4:	9f06      	ldrge	r7, [sp, #24]
 800a4e6:	1a9f      	sublt	r7, r3, r2
 800a4e8:	bfac      	ite	ge
 800a4ea:	9b08      	ldrge	r3, [sp, #32]
 800a4ec:	2300      	movlt	r3, #0
 800a4ee:	e73f      	b.n	800a370 <_dtoa_r+0x748>
 800a4f0:	3fe00000 	.word	0x3fe00000
 800a4f4:	40240000 	.word	0x40240000
 800a4f8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a4fa:	9f06      	ldr	r7, [sp, #24]
 800a4fc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800a4fe:	e742      	b.n	800a386 <_dtoa_r+0x75e>
 800a500:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a502:	e76b      	b.n	800a3dc <_dtoa_r+0x7b4>
 800a504:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a506:	2b01      	cmp	r3, #1
 800a508:	dc19      	bgt.n	800a53e <_dtoa_r+0x916>
 800a50a:	9b04      	ldr	r3, [sp, #16]
 800a50c:	b9bb      	cbnz	r3, 800a53e <_dtoa_r+0x916>
 800a50e:	9b05      	ldr	r3, [sp, #20]
 800a510:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a514:	b99b      	cbnz	r3, 800a53e <_dtoa_r+0x916>
 800a516:	9b05      	ldr	r3, [sp, #20]
 800a518:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a51c:	0d1b      	lsrs	r3, r3, #20
 800a51e:	051b      	lsls	r3, r3, #20
 800a520:	b183      	cbz	r3, 800a544 <_dtoa_r+0x91c>
 800a522:	f04f 0801 	mov.w	r8, #1
 800a526:	9b06      	ldr	r3, [sp, #24]
 800a528:	3301      	adds	r3, #1
 800a52a:	9306      	str	r3, [sp, #24]
 800a52c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a52e:	3301      	adds	r3, #1
 800a530:	9309      	str	r3, [sp, #36]	; 0x24
 800a532:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a534:	2b00      	cmp	r3, #0
 800a536:	f47f af6a 	bne.w	800a40e <_dtoa_r+0x7e6>
 800a53a:	2001      	movs	r0, #1
 800a53c:	e76f      	b.n	800a41e <_dtoa_r+0x7f6>
 800a53e:	f04f 0800 	mov.w	r8, #0
 800a542:	e7f6      	b.n	800a532 <_dtoa_r+0x90a>
 800a544:	4698      	mov	r8, r3
 800a546:	e7f4      	b.n	800a532 <_dtoa_r+0x90a>
 800a548:	f43f af7d 	beq.w	800a446 <_dtoa_r+0x81e>
 800a54c:	4618      	mov	r0, r3
 800a54e:	301c      	adds	r0, #28
 800a550:	e772      	b.n	800a438 <_dtoa_r+0x810>
 800a552:	9b08      	ldr	r3, [sp, #32]
 800a554:	2b00      	cmp	r3, #0
 800a556:	dc36      	bgt.n	800a5c6 <_dtoa_r+0x99e>
 800a558:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a55a:	2b02      	cmp	r3, #2
 800a55c:	dd33      	ble.n	800a5c6 <_dtoa_r+0x99e>
 800a55e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a562:	f1b9 0f00 	cmp.w	r9, #0
 800a566:	d10d      	bne.n	800a584 <_dtoa_r+0x95c>
 800a568:	4621      	mov	r1, r4
 800a56a:	464b      	mov	r3, r9
 800a56c:	2205      	movs	r2, #5
 800a56e:	4628      	mov	r0, r5
 800a570:	f000 fd40 	bl	800aff4 <__multadd>
 800a574:	4601      	mov	r1, r0
 800a576:	4604      	mov	r4, r0
 800a578:	4658      	mov	r0, fp
 800a57a:	f000 ffa1 	bl	800b4c0 <__mcmp>
 800a57e:	2800      	cmp	r0, #0
 800a580:	f73f adb8 	bgt.w	800a0f4 <_dtoa_r+0x4cc>
 800a584:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a586:	9f03      	ldr	r7, [sp, #12]
 800a588:	ea6f 0a03 	mvn.w	sl, r3
 800a58c:	f04f 0800 	mov.w	r8, #0
 800a590:	4621      	mov	r1, r4
 800a592:	4628      	mov	r0, r5
 800a594:	f000 fd0c 	bl	800afb0 <_Bfree>
 800a598:	2e00      	cmp	r6, #0
 800a59a:	f43f aea7 	beq.w	800a2ec <_dtoa_r+0x6c4>
 800a59e:	f1b8 0f00 	cmp.w	r8, #0
 800a5a2:	d005      	beq.n	800a5b0 <_dtoa_r+0x988>
 800a5a4:	45b0      	cmp	r8, r6
 800a5a6:	d003      	beq.n	800a5b0 <_dtoa_r+0x988>
 800a5a8:	4641      	mov	r1, r8
 800a5aa:	4628      	mov	r0, r5
 800a5ac:	f000 fd00 	bl	800afb0 <_Bfree>
 800a5b0:	4631      	mov	r1, r6
 800a5b2:	4628      	mov	r0, r5
 800a5b4:	f000 fcfc 	bl	800afb0 <_Bfree>
 800a5b8:	e698      	b.n	800a2ec <_dtoa_r+0x6c4>
 800a5ba:	2400      	movs	r4, #0
 800a5bc:	4626      	mov	r6, r4
 800a5be:	e7e1      	b.n	800a584 <_dtoa_r+0x95c>
 800a5c0:	46c2      	mov	sl, r8
 800a5c2:	4626      	mov	r6, r4
 800a5c4:	e596      	b.n	800a0f4 <_dtoa_r+0x4cc>
 800a5c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a5c8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	f000 80fd 	beq.w	800a7cc <_dtoa_r+0xba4>
 800a5d2:	2f00      	cmp	r7, #0
 800a5d4:	dd05      	ble.n	800a5e2 <_dtoa_r+0x9ba>
 800a5d6:	4631      	mov	r1, r6
 800a5d8:	463a      	mov	r2, r7
 800a5da:	4628      	mov	r0, r5
 800a5dc:	f000 ff00 	bl	800b3e0 <__lshift>
 800a5e0:	4606      	mov	r6, r0
 800a5e2:	f1b8 0f00 	cmp.w	r8, #0
 800a5e6:	d05c      	beq.n	800a6a2 <_dtoa_r+0xa7a>
 800a5e8:	4628      	mov	r0, r5
 800a5ea:	6871      	ldr	r1, [r6, #4]
 800a5ec:	f000 fca0 	bl	800af30 <_Balloc>
 800a5f0:	4607      	mov	r7, r0
 800a5f2:	b928      	cbnz	r0, 800a600 <_dtoa_r+0x9d8>
 800a5f4:	4602      	mov	r2, r0
 800a5f6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a5fa:	4b7f      	ldr	r3, [pc, #508]	; (800a7f8 <_dtoa_r+0xbd0>)
 800a5fc:	f7ff bb28 	b.w	8009c50 <_dtoa_r+0x28>
 800a600:	6932      	ldr	r2, [r6, #16]
 800a602:	f106 010c 	add.w	r1, r6, #12
 800a606:	3202      	adds	r2, #2
 800a608:	0092      	lsls	r2, r2, #2
 800a60a:	300c      	adds	r0, #12
 800a60c:	f7fd fc28 	bl	8007e60 <memcpy>
 800a610:	2201      	movs	r2, #1
 800a612:	4639      	mov	r1, r7
 800a614:	4628      	mov	r0, r5
 800a616:	f000 fee3 	bl	800b3e0 <__lshift>
 800a61a:	46b0      	mov	r8, r6
 800a61c:	4606      	mov	r6, r0
 800a61e:	9b03      	ldr	r3, [sp, #12]
 800a620:	3301      	adds	r3, #1
 800a622:	9308      	str	r3, [sp, #32]
 800a624:	9b03      	ldr	r3, [sp, #12]
 800a626:	444b      	add	r3, r9
 800a628:	930a      	str	r3, [sp, #40]	; 0x28
 800a62a:	9b04      	ldr	r3, [sp, #16]
 800a62c:	f003 0301 	and.w	r3, r3, #1
 800a630:	9309      	str	r3, [sp, #36]	; 0x24
 800a632:	9b08      	ldr	r3, [sp, #32]
 800a634:	4621      	mov	r1, r4
 800a636:	3b01      	subs	r3, #1
 800a638:	4658      	mov	r0, fp
 800a63a:	9304      	str	r3, [sp, #16]
 800a63c:	f7ff fa68 	bl	8009b10 <quorem>
 800a640:	4603      	mov	r3, r0
 800a642:	4641      	mov	r1, r8
 800a644:	3330      	adds	r3, #48	; 0x30
 800a646:	9006      	str	r0, [sp, #24]
 800a648:	4658      	mov	r0, fp
 800a64a:	930b      	str	r3, [sp, #44]	; 0x2c
 800a64c:	f000 ff38 	bl	800b4c0 <__mcmp>
 800a650:	4632      	mov	r2, r6
 800a652:	4681      	mov	r9, r0
 800a654:	4621      	mov	r1, r4
 800a656:	4628      	mov	r0, r5
 800a658:	f000 ff4e 	bl	800b4f8 <__mdiff>
 800a65c:	68c2      	ldr	r2, [r0, #12]
 800a65e:	4607      	mov	r7, r0
 800a660:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a662:	bb02      	cbnz	r2, 800a6a6 <_dtoa_r+0xa7e>
 800a664:	4601      	mov	r1, r0
 800a666:	4658      	mov	r0, fp
 800a668:	f000 ff2a 	bl	800b4c0 <__mcmp>
 800a66c:	4602      	mov	r2, r0
 800a66e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a670:	4639      	mov	r1, r7
 800a672:	4628      	mov	r0, r5
 800a674:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800a678:	f000 fc9a 	bl	800afb0 <_Bfree>
 800a67c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a67e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a680:	9f08      	ldr	r7, [sp, #32]
 800a682:	ea43 0102 	orr.w	r1, r3, r2
 800a686:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a688:	430b      	orrs	r3, r1
 800a68a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a68c:	d10d      	bne.n	800a6aa <_dtoa_r+0xa82>
 800a68e:	2b39      	cmp	r3, #57	; 0x39
 800a690:	d029      	beq.n	800a6e6 <_dtoa_r+0xabe>
 800a692:	f1b9 0f00 	cmp.w	r9, #0
 800a696:	dd01      	ble.n	800a69c <_dtoa_r+0xa74>
 800a698:	9b06      	ldr	r3, [sp, #24]
 800a69a:	3331      	adds	r3, #49	; 0x31
 800a69c:	9a04      	ldr	r2, [sp, #16]
 800a69e:	7013      	strb	r3, [r2, #0]
 800a6a0:	e776      	b.n	800a590 <_dtoa_r+0x968>
 800a6a2:	4630      	mov	r0, r6
 800a6a4:	e7b9      	b.n	800a61a <_dtoa_r+0x9f2>
 800a6a6:	2201      	movs	r2, #1
 800a6a8:	e7e2      	b.n	800a670 <_dtoa_r+0xa48>
 800a6aa:	f1b9 0f00 	cmp.w	r9, #0
 800a6ae:	db06      	blt.n	800a6be <_dtoa_r+0xa96>
 800a6b0:	9922      	ldr	r1, [sp, #136]	; 0x88
 800a6b2:	ea41 0909 	orr.w	r9, r1, r9
 800a6b6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a6b8:	ea59 0101 	orrs.w	r1, r9, r1
 800a6bc:	d120      	bne.n	800a700 <_dtoa_r+0xad8>
 800a6be:	2a00      	cmp	r2, #0
 800a6c0:	ddec      	ble.n	800a69c <_dtoa_r+0xa74>
 800a6c2:	4659      	mov	r1, fp
 800a6c4:	2201      	movs	r2, #1
 800a6c6:	4628      	mov	r0, r5
 800a6c8:	9308      	str	r3, [sp, #32]
 800a6ca:	f000 fe89 	bl	800b3e0 <__lshift>
 800a6ce:	4621      	mov	r1, r4
 800a6d0:	4683      	mov	fp, r0
 800a6d2:	f000 fef5 	bl	800b4c0 <__mcmp>
 800a6d6:	2800      	cmp	r0, #0
 800a6d8:	9b08      	ldr	r3, [sp, #32]
 800a6da:	dc02      	bgt.n	800a6e2 <_dtoa_r+0xaba>
 800a6dc:	d1de      	bne.n	800a69c <_dtoa_r+0xa74>
 800a6de:	07da      	lsls	r2, r3, #31
 800a6e0:	d5dc      	bpl.n	800a69c <_dtoa_r+0xa74>
 800a6e2:	2b39      	cmp	r3, #57	; 0x39
 800a6e4:	d1d8      	bne.n	800a698 <_dtoa_r+0xa70>
 800a6e6:	2339      	movs	r3, #57	; 0x39
 800a6e8:	9a04      	ldr	r2, [sp, #16]
 800a6ea:	7013      	strb	r3, [r2, #0]
 800a6ec:	463b      	mov	r3, r7
 800a6ee:	461f      	mov	r7, r3
 800a6f0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800a6f4:	3b01      	subs	r3, #1
 800a6f6:	2a39      	cmp	r2, #57	; 0x39
 800a6f8:	d050      	beq.n	800a79c <_dtoa_r+0xb74>
 800a6fa:	3201      	adds	r2, #1
 800a6fc:	701a      	strb	r2, [r3, #0]
 800a6fe:	e747      	b.n	800a590 <_dtoa_r+0x968>
 800a700:	2a00      	cmp	r2, #0
 800a702:	dd03      	ble.n	800a70c <_dtoa_r+0xae4>
 800a704:	2b39      	cmp	r3, #57	; 0x39
 800a706:	d0ee      	beq.n	800a6e6 <_dtoa_r+0xabe>
 800a708:	3301      	adds	r3, #1
 800a70a:	e7c7      	b.n	800a69c <_dtoa_r+0xa74>
 800a70c:	9a08      	ldr	r2, [sp, #32]
 800a70e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a710:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a714:	428a      	cmp	r2, r1
 800a716:	d02a      	beq.n	800a76e <_dtoa_r+0xb46>
 800a718:	4659      	mov	r1, fp
 800a71a:	2300      	movs	r3, #0
 800a71c:	220a      	movs	r2, #10
 800a71e:	4628      	mov	r0, r5
 800a720:	f000 fc68 	bl	800aff4 <__multadd>
 800a724:	45b0      	cmp	r8, r6
 800a726:	4683      	mov	fp, r0
 800a728:	f04f 0300 	mov.w	r3, #0
 800a72c:	f04f 020a 	mov.w	r2, #10
 800a730:	4641      	mov	r1, r8
 800a732:	4628      	mov	r0, r5
 800a734:	d107      	bne.n	800a746 <_dtoa_r+0xb1e>
 800a736:	f000 fc5d 	bl	800aff4 <__multadd>
 800a73a:	4680      	mov	r8, r0
 800a73c:	4606      	mov	r6, r0
 800a73e:	9b08      	ldr	r3, [sp, #32]
 800a740:	3301      	adds	r3, #1
 800a742:	9308      	str	r3, [sp, #32]
 800a744:	e775      	b.n	800a632 <_dtoa_r+0xa0a>
 800a746:	f000 fc55 	bl	800aff4 <__multadd>
 800a74a:	4631      	mov	r1, r6
 800a74c:	4680      	mov	r8, r0
 800a74e:	2300      	movs	r3, #0
 800a750:	220a      	movs	r2, #10
 800a752:	4628      	mov	r0, r5
 800a754:	f000 fc4e 	bl	800aff4 <__multadd>
 800a758:	4606      	mov	r6, r0
 800a75a:	e7f0      	b.n	800a73e <_dtoa_r+0xb16>
 800a75c:	f1b9 0f00 	cmp.w	r9, #0
 800a760:	bfcc      	ite	gt
 800a762:	464f      	movgt	r7, r9
 800a764:	2701      	movle	r7, #1
 800a766:	f04f 0800 	mov.w	r8, #0
 800a76a:	9a03      	ldr	r2, [sp, #12]
 800a76c:	4417      	add	r7, r2
 800a76e:	4659      	mov	r1, fp
 800a770:	2201      	movs	r2, #1
 800a772:	4628      	mov	r0, r5
 800a774:	9308      	str	r3, [sp, #32]
 800a776:	f000 fe33 	bl	800b3e0 <__lshift>
 800a77a:	4621      	mov	r1, r4
 800a77c:	4683      	mov	fp, r0
 800a77e:	f000 fe9f 	bl	800b4c0 <__mcmp>
 800a782:	2800      	cmp	r0, #0
 800a784:	dcb2      	bgt.n	800a6ec <_dtoa_r+0xac4>
 800a786:	d102      	bne.n	800a78e <_dtoa_r+0xb66>
 800a788:	9b08      	ldr	r3, [sp, #32]
 800a78a:	07db      	lsls	r3, r3, #31
 800a78c:	d4ae      	bmi.n	800a6ec <_dtoa_r+0xac4>
 800a78e:	463b      	mov	r3, r7
 800a790:	461f      	mov	r7, r3
 800a792:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a796:	2a30      	cmp	r2, #48	; 0x30
 800a798:	d0fa      	beq.n	800a790 <_dtoa_r+0xb68>
 800a79a:	e6f9      	b.n	800a590 <_dtoa_r+0x968>
 800a79c:	9a03      	ldr	r2, [sp, #12]
 800a79e:	429a      	cmp	r2, r3
 800a7a0:	d1a5      	bne.n	800a6ee <_dtoa_r+0xac6>
 800a7a2:	2331      	movs	r3, #49	; 0x31
 800a7a4:	f10a 0a01 	add.w	sl, sl, #1
 800a7a8:	e779      	b.n	800a69e <_dtoa_r+0xa76>
 800a7aa:	4b14      	ldr	r3, [pc, #80]	; (800a7fc <_dtoa_r+0xbd4>)
 800a7ac:	f7ff baa8 	b.w	8009d00 <_dtoa_r+0xd8>
 800a7b0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	f47f aa81 	bne.w	8009cba <_dtoa_r+0x92>
 800a7b8:	4b11      	ldr	r3, [pc, #68]	; (800a800 <_dtoa_r+0xbd8>)
 800a7ba:	f7ff baa1 	b.w	8009d00 <_dtoa_r+0xd8>
 800a7be:	f1b9 0f00 	cmp.w	r9, #0
 800a7c2:	dc03      	bgt.n	800a7cc <_dtoa_r+0xba4>
 800a7c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a7c6:	2b02      	cmp	r3, #2
 800a7c8:	f73f aecb 	bgt.w	800a562 <_dtoa_r+0x93a>
 800a7cc:	9f03      	ldr	r7, [sp, #12]
 800a7ce:	4621      	mov	r1, r4
 800a7d0:	4658      	mov	r0, fp
 800a7d2:	f7ff f99d 	bl	8009b10 <quorem>
 800a7d6:	9a03      	ldr	r2, [sp, #12]
 800a7d8:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a7dc:	f807 3b01 	strb.w	r3, [r7], #1
 800a7e0:	1aba      	subs	r2, r7, r2
 800a7e2:	4591      	cmp	r9, r2
 800a7e4:	ddba      	ble.n	800a75c <_dtoa_r+0xb34>
 800a7e6:	4659      	mov	r1, fp
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	220a      	movs	r2, #10
 800a7ec:	4628      	mov	r0, r5
 800a7ee:	f000 fc01 	bl	800aff4 <__multadd>
 800a7f2:	4683      	mov	fp, r0
 800a7f4:	e7eb      	b.n	800a7ce <_dtoa_r+0xba6>
 800a7f6:	bf00      	nop
 800a7f8:	0800c9a0 	.word	0x0800c9a0
 800a7fc:	0800c7a0 	.word	0x0800c7a0
 800a800:	0800c921 	.word	0x0800c921

0800a804 <rshift>:
 800a804:	6903      	ldr	r3, [r0, #16]
 800a806:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a80a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a80e:	f100 0414 	add.w	r4, r0, #20
 800a812:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a816:	dd46      	ble.n	800a8a6 <rshift+0xa2>
 800a818:	f011 011f 	ands.w	r1, r1, #31
 800a81c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a820:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a824:	d10c      	bne.n	800a840 <rshift+0x3c>
 800a826:	4629      	mov	r1, r5
 800a828:	f100 0710 	add.w	r7, r0, #16
 800a82c:	42b1      	cmp	r1, r6
 800a82e:	d335      	bcc.n	800a89c <rshift+0x98>
 800a830:	1a9b      	subs	r3, r3, r2
 800a832:	009b      	lsls	r3, r3, #2
 800a834:	1eea      	subs	r2, r5, #3
 800a836:	4296      	cmp	r6, r2
 800a838:	bf38      	it	cc
 800a83a:	2300      	movcc	r3, #0
 800a83c:	4423      	add	r3, r4
 800a83e:	e015      	b.n	800a86c <rshift+0x68>
 800a840:	46a1      	mov	r9, r4
 800a842:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a846:	f1c1 0820 	rsb	r8, r1, #32
 800a84a:	40cf      	lsrs	r7, r1
 800a84c:	f105 0e04 	add.w	lr, r5, #4
 800a850:	4576      	cmp	r6, lr
 800a852:	46f4      	mov	ip, lr
 800a854:	d816      	bhi.n	800a884 <rshift+0x80>
 800a856:	1a9a      	subs	r2, r3, r2
 800a858:	0092      	lsls	r2, r2, #2
 800a85a:	3a04      	subs	r2, #4
 800a85c:	3501      	adds	r5, #1
 800a85e:	42ae      	cmp	r6, r5
 800a860:	bf38      	it	cc
 800a862:	2200      	movcc	r2, #0
 800a864:	18a3      	adds	r3, r4, r2
 800a866:	50a7      	str	r7, [r4, r2]
 800a868:	b107      	cbz	r7, 800a86c <rshift+0x68>
 800a86a:	3304      	adds	r3, #4
 800a86c:	42a3      	cmp	r3, r4
 800a86e:	eba3 0204 	sub.w	r2, r3, r4
 800a872:	bf08      	it	eq
 800a874:	2300      	moveq	r3, #0
 800a876:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a87a:	6102      	str	r2, [r0, #16]
 800a87c:	bf08      	it	eq
 800a87e:	6143      	streq	r3, [r0, #20]
 800a880:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a884:	f8dc c000 	ldr.w	ip, [ip]
 800a888:	fa0c fc08 	lsl.w	ip, ip, r8
 800a88c:	ea4c 0707 	orr.w	r7, ip, r7
 800a890:	f849 7b04 	str.w	r7, [r9], #4
 800a894:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a898:	40cf      	lsrs	r7, r1
 800a89a:	e7d9      	b.n	800a850 <rshift+0x4c>
 800a89c:	f851 cb04 	ldr.w	ip, [r1], #4
 800a8a0:	f847 cf04 	str.w	ip, [r7, #4]!
 800a8a4:	e7c2      	b.n	800a82c <rshift+0x28>
 800a8a6:	4623      	mov	r3, r4
 800a8a8:	e7e0      	b.n	800a86c <rshift+0x68>

0800a8aa <__hexdig_fun>:
 800a8aa:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a8ae:	2b09      	cmp	r3, #9
 800a8b0:	d802      	bhi.n	800a8b8 <__hexdig_fun+0xe>
 800a8b2:	3820      	subs	r0, #32
 800a8b4:	b2c0      	uxtb	r0, r0
 800a8b6:	4770      	bx	lr
 800a8b8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a8bc:	2b05      	cmp	r3, #5
 800a8be:	d801      	bhi.n	800a8c4 <__hexdig_fun+0x1a>
 800a8c0:	3847      	subs	r0, #71	; 0x47
 800a8c2:	e7f7      	b.n	800a8b4 <__hexdig_fun+0xa>
 800a8c4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a8c8:	2b05      	cmp	r3, #5
 800a8ca:	d801      	bhi.n	800a8d0 <__hexdig_fun+0x26>
 800a8cc:	3827      	subs	r0, #39	; 0x27
 800a8ce:	e7f1      	b.n	800a8b4 <__hexdig_fun+0xa>
 800a8d0:	2000      	movs	r0, #0
 800a8d2:	4770      	bx	lr

0800a8d4 <__gethex>:
 800a8d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8d8:	b08b      	sub	sp, #44	; 0x2c
 800a8da:	9305      	str	r3, [sp, #20]
 800a8dc:	4bb2      	ldr	r3, [pc, #712]	; (800aba8 <__gethex+0x2d4>)
 800a8de:	9002      	str	r0, [sp, #8]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	468b      	mov	fp, r1
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	4690      	mov	r8, r2
 800a8e8:	9303      	str	r3, [sp, #12]
 800a8ea:	f7f5 fc9d 	bl	8000228 <strlen>
 800a8ee:	4682      	mov	sl, r0
 800a8f0:	9b03      	ldr	r3, [sp, #12]
 800a8f2:	f8db 2000 	ldr.w	r2, [fp]
 800a8f6:	4403      	add	r3, r0
 800a8f8:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a8fc:	9306      	str	r3, [sp, #24]
 800a8fe:	1c93      	adds	r3, r2, #2
 800a900:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a904:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a908:	32fe      	adds	r2, #254	; 0xfe
 800a90a:	18d1      	adds	r1, r2, r3
 800a90c:	461f      	mov	r7, r3
 800a90e:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a912:	9101      	str	r1, [sp, #4]
 800a914:	2830      	cmp	r0, #48	; 0x30
 800a916:	d0f8      	beq.n	800a90a <__gethex+0x36>
 800a918:	f7ff ffc7 	bl	800a8aa <__hexdig_fun>
 800a91c:	4604      	mov	r4, r0
 800a91e:	2800      	cmp	r0, #0
 800a920:	d13a      	bne.n	800a998 <__gethex+0xc4>
 800a922:	4652      	mov	r2, sl
 800a924:	4638      	mov	r0, r7
 800a926:	9903      	ldr	r1, [sp, #12]
 800a928:	f001 f91c 	bl	800bb64 <strncmp>
 800a92c:	4605      	mov	r5, r0
 800a92e:	2800      	cmp	r0, #0
 800a930:	d166      	bne.n	800aa00 <__gethex+0x12c>
 800a932:	f817 000a 	ldrb.w	r0, [r7, sl]
 800a936:	eb07 060a 	add.w	r6, r7, sl
 800a93a:	f7ff ffb6 	bl	800a8aa <__hexdig_fun>
 800a93e:	2800      	cmp	r0, #0
 800a940:	d060      	beq.n	800aa04 <__gethex+0x130>
 800a942:	4633      	mov	r3, r6
 800a944:	7818      	ldrb	r0, [r3, #0]
 800a946:	461f      	mov	r7, r3
 800a948:	2830      	cmp	r0, #48	; 0x30
 800a94a:	f103 0301 	add.w	r3, r3, #1
 800a94e:	d0f9      	beq.n	800a944 <__gethex+0x70>
 800a950:	f7ff ffab 	bl	800a8aa <__hexdig_fun>
 800a954:	2301      	movs	r3, #1
 800a956:	fab0 f480 	clz	r4, r0
 800a95a:	4635      	mov	r5, r6
 800a95c:	0964      	lsrs	r4, r4, #5
 800a95e:	9301      	str	r3, [sp, #4]
 800a960:	463a      	mov	r2, r7
 800a962:	4616      	mov	r6, r2
 800a964:	7830      	ldrb	r0, [r6, #0]
 800a966:	3201      	adds	r2, #1
 800a968:	f7ff ff9f 	bl	800a8aa <__hexdig_fun>
 800a96c:	2800      	cmp	r0, #0
 800a96e:	d1f8      	bne.n	800a962 <__gethex+0x8e>
 800a970:	4652      	mov	r2, sl
 800a972:	4630      	mov	r0, r6
 800a974:	9903      	ldr	r1, [sp, #12]
 800a976:	f001 f8f5 	bl	800bb64 <strncmp>
 800a97a:	b980      	cbnz	r0, 800a99e <__gethex+0xca>
 800a97c:	b94d      	cbnz	r5, 800a992 <__gethex+0xbe>
 800a97e:	eb06 050a 	add.w	r5, r6, sl
 800a982:	462a      	mov	r2, r5
 800a984:	4616      	mov	r6, r2
 800a986:	7830      	ldrb	r0, [r6, #0]
 800a988:	3201      	adds	r2, #1
 800a98a:	f7ff ff8e 	bl	800a8aa <__hexdig_fun>
 800a98e:	2800      	cmp	r0, #0
 800a990:	d1f8      	bne.n	800a984 <__gethex+0xb0>
 800a992:	1bad      	subs	r5, r5, r6
 800a994:	00ad      	lsls	r5, r5, #2
 800a996:	e004      	b.n	800a9a2 <__gethex+0xce>
 800a998:	2400      	movs	r4, #0
 800a99a:	4625      	mov	r5, r4
 800a99c:	e7e0      	b.n	800a960 <__gethex+0x8c>
 800a99e:	2d00      	cmp	r5, #0
 800a9a0:	d1f7      	bne.n	800a992 <__gethex+0xbe>
 800a9a2:	7833      	ldrb	r3, [r6, #0]
 800a9a4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a9a8:	2b50      	cmp	r3, #80	; 0x50
 800a9aa:	d139      	bne.n	800aa20 <__gethex+0x14c>
 800a9ac:	7873      	ldrb	r3, [r6, #1]
 800a9ae:	2b2b      	cmp	r3, #43	; 0x2b
 800a9b0:	d02a      	beq.n	800aa08 <__gethex+0x134>
 800a9b2:	2b2d      	cmp	r3, #45	; 0x2d
 800a9b4:	d02c      	beq.n	800aa10 <__gethex+0x13c>
 800a9b6:	f04f 0900 	mov.w	r9, #0
 800a9ba:	1c71      	adds	r1, r6, #1
 800a9bc:	7808      	ldrb	r0, [r1, #0]
 800a9be:	f7ff ff74 	bl	800a8aa <__hexdig_fun>
 800a9c2:	1e43      	subs	r3, r0, #1
 800a9c4:	b2db      	uxtb	r3, r3
 800a9c6:	2b18      	cmp	r3, #24
 800a9c8:	d82a      	bhi.n	800aa20 <__gethex+0x14c>
 800a9ca:	f1a0 0210 	sub.w	r2, r0, #16
 800a9ce:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a9d2:	f7ff ff6a 	bl	800a8aa <__hexdig_fun>
 800a9d6:	1e43      	subs	r3, r0, #1
 800a9d8:	b2db      	uxtb	r3, r3
 800a9da:	2b18      	cmp	r3, #24
 800a9dc:	d91b      	bls.n	800aa16 <__gethex+0x142>
 800a9de:	f1b9 0f00 	cmp.w	r9, #0
 800a9e2:	d000      	beq.n	800a9e6 <__gethex+0x112>
 800a9e4:	4252      	negs	r2, r2
 800a9e6:	4415      	add	r5, r2
 800a9e8:	f8cb 1000 	str.w	r1, [fp]
 800a9ec:	b1d4      	cbz	r4, 800aa24 <__gethex+0x150>
 800a9ee:	9b01      	ldr	r3, [sp, #4]
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	bf14      	ite	ne
 800a9f4:	2700      	movne	r7, #0
 800a9f6:	2706      	moveq	r7, #6
 800a9f8:	4638      	mov	r0, r7
 800a9fa:	b00b      	add	sp, #44	; 0x2c
 800a9fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa00:	463e      	mov	r6, r7
 800aa02:	4625      	mov	r5, r4
 800aa04:	2401      	movs	r4, #1
 800aa06:	e7cc      	b.n	800a9a2 <__gethex+0xce>
 800aa08:	f04f 0900 	mov.w	r9, #0
 800aa0c:	1cb1      	adds	r1, r6, #2
 800aa0e:	e7d5      	b.n	800a9bc <__gethex+0xe8>
 800aa10:	f04f 0901 	mov.w	r9, #1
 800aa14:	e7fa      	b.n	800aa0c <__gethex+0x138>
 800aa16:	230a      	movs	r3, #10
 800aa18:	fb03 0202 	mla	r2, r3, r2, r0
 800aa1c:	3a10      	subs	r2, #16
 800aa1e:	e7d6      	b.n	800a9ce <__gethex+0xfa>
 800aa20:	4631      	mov	r1, r6
 800aa22:	e7e1      	b.n	800a9e8 <__gethex+0x114>
 800aa24:	4621      	mov	r1, r4
 800aa26:	1bf3      	subs	r3, r6, r7
 800aa28:	3b01      	subs	r3, #1
 800aa2a:	2b07      	cmp	r3, #7
 800aa2c:	dc0a      	bgt.n	800aa44 <__gethex+0x170>
 800aa2e:	9802      	ldr	r0, [sp, #8]
 800aa30:	f000 fa7e 	bl	800af30 <_Balloc>
 800aa34:	4604      	mov	r4, r0
 800aa36:	b940      	cbnz	r0, 800aa4a <__gethex+0x176>
 800aa38:	4602      	mov	r2, r0
 800aa3a:	21de      	movs	r1, #222	; 0xde
 800aa3c:	4b5b      	ldr	r3, [pc, #364]	; (800abac <__gethex+0x2d8>)
 800aa3e:	485c      	ldr	r0, [pc, #368]	; (800abb0 <__gethex+0x2dc>)
 800aa40:	f001 f8b2 	bl	800bba8 <__assert_func>
 800aa44:	3101      	adds	r1, #1
 800aa46:	105b      	asrs	r3, r3, #1
 800aa48:	e7ef      	b.n	800aa2a <__gethex+0x156>
 800aa4a:	f04f 0b00 	mov.w	fp, #0
 800aa4e:	f100 0914 	add.w	r9, r0, #20
 800aa52:	f1ca 0301 	rsb	r3, sl, #1
 800aa56:	f8cd 9010 	str.w	r9, [sp, #16]
 800aa5a:	f8cd b004 	str.w	fp, [sp, #4]
 800aa5e:	9308      	str	r3, [sp, #32]
 800aa60:	42b7      	cmp	r7, r6
 800aa62:	d33f      	bcc.n	800aae4 <__gethex+0x210>
 800aa64:	9f04      	ldr	r7, [sp, #16]
 800aa66:	9b01      	ldr	r3, [sp, #4]
 800aa68:	f847 3b04 	str.w	r3, [r7], #4
 800aa6c:	eba7 0709 	sub.w	r7, r7, r9
 800aa70:	10bf      	asrs	r7, r7, #2
 800aa72:	6127      	str	r7, [r4, #16]
 800aa74:	4618      	mov	r0, r3
 800aa76:	f000 fb4d 	bl	800b114 <__hi0bits>
 800aa7a:	017f      	lsls	r7, r7, #5
 800aa7c:	f8d8 6000 	ldr.w	r6, [r8]
 800aa80:	1a3f      	subs	r7, r7, r0
 800aa82:	42b7      	cmp	r7, r6
 800aa84:	dd62      	ble.n	800ab4c <__gethex+0x278>
 800aa86:	1bbf      	subs	r7, r7, r6
 800aa88:	4639      	mov	r1, r7
 800aa8a:	4620      	mov	r0, r4
 800aa8c:	f000 fee7 	bl	800b85e <__any_on>
 800aa90:	4682      	mov	sl, r0
 800aa92:	b1a8      	cbz	r0, 800aac0 <__gethex+0x1ec>
 800aa94:	f04f 0a01 	mov.w	sl, #1
 800aa98:	1e7b      	subs	r3, r7, #1
 800aa9a:	1159      	asrs	r1, r3, #5
 800aa9c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800aaa0:	f003 021f 	and.w	r2, r3, #31
 800aaa4:	fa0a f202 	lsl.w	r2, sl, r2
 800aaa8:	420a      	tst	r2, r1
 800aaaa:	d009      	beq.n	800aac0 <__gethex+0x1ec>
 800aaac:	4553      	cmp	r3, sl
 800aaae:	dd05      	ble.n	800aabc <__gethex+0x1e8>
 800aab0:	4620      	mov	r0, r4
 800aab2:	1eb9      	subs	r1, r7, #2
 800aab4:	f000 fed3 	bl	800b85e <__any_on>
 800aab8:	2800      	cmp	r0, #0
 800aaba:	d144      	bne.n	800ab46 <__gethex+0x272>
 800aabc:	f04f 0a02 	mov.w	sl, #2
 800aac0:	4639      	mov	r1, r7
 800aac2:	4620      	mov	r0, r4
 800aac4:	f7ff fe9e 	bl	800a804 <rshift>
 800aac8:	443d      	add	r5, r7
 800aaca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800aace:	42ab      	cmp	r3, r5
 800aad0:	da4a      	bge.n	800ab68 <__gethex+0x294>
 800aad2:	4621      	mov	r1, r4
 800aad4:	9802      	ldr	r0, [sp, #8]
 800aad6:	f000 fa6b 	bl	800afb0 <_Bfree>
 800aada:	2300      	movs	r3, #0
 800aadc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800aade:	27a3      	movs	r7, #163	; 0xa3
 800aae0:	6013      	str	r3, [r2, #0]
 800aae2:	e789      	b.n	800a9f8 <__gethex+0x124>
 800aae4:	1e73      	subs	r3, r6, #1
 800aae6:	9a06      	ldr	r2, [sp, #24]
 800aae8:	9307      	str	r3, [sp, #28]
 800aaea:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800aaee:	4293      	cmp	r3, r2
 800aaf0:	d019      	beq.n	800ab26 <__gethex+0x252>
 800aaf2:	f1bb 0f20 	cmp.w	fp, #32
 800aaf6:	d107      	bne.n	800ab08 <__gethex+0x234>
 800aaf8:	9b04      	ldr	r3, [sp, #16]
 800aafa:	9a01      	ldr	r2, [sp, #4]
 800aafc:	f843 2b04 	str.w	r2, [r3], #4
 800ab00:	9304      	str	r3, [sp, #16]
 800ab02:	2300      	movs	r3, #0
 800ab04:	469b      	mov	fp, r3
 800ab06:	9301      	str	r3, [sp, #4]
 800ab08:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800ab0c:	f7ff fecd 	bl	800a8aa <__hexdig_fun>
 800ab10:	9b01      	ldr	r3, [sp, #4]
 800ab12:	f000 000f 	and.w	r0, r0, #15
 800ab16:	fa00 f00b 	lsl.w	r0, r0, fp
 800ab1a:	4303      	orrs	r3, r0
 800ab1c:	9301      	str	r3, [sp, #4]
 800ab1e:	f10b 0b04 	add.w	fp, fp, #4
 800ab22:	9b07      	ldr	r3, [sp, #28]
 800ab24:	e00d      	b.n	800ab42 <__gethex+0x26e>
 800ab26:	9a08      	ldr	r2, [sp, #32]
 800ab28:	1e73      	subs	r3, r6, #1
 800ab2a:	4413      	add	r3, r2
 800ab2c:	42bb      	cmp	r3, r7
 800ab2e:	d3e0      	bcc.n	800aaf2 <__gethex+0x21e>
 800ab30:	4618      	mov	r0, r3
 800ab32:	4652      	mov	r2, sl
 800ab34:	9903      	ldr	r1, [sp, #12]
 800ab36:	9309      	str	r3, [sp, #36]	; 0x24
 800ab38:	f001 f814 	bl	800bb64 <strncmp>
 800ab3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab3e:	2800      	cmp	r0, #0
 800ab40:	d1d7      	bne.n	800aaf2 <__gethex+0x21e>
 800ab42:	461e      	mov	r6, r3
 800ab44:	e78c      	b.n	800aa60 <__gethex+0x18c>
 800ab46:	f04f 0a03 	mov.w	sl, #3
 800ab4a:	e7b9      	b.n	800aac0 <__gethex+0x1ec>
 800ab4c:	da09      	bge.n	800ab62 <__gethex+0x28e>
 800ab4e:	1bf7      	subs	r7, r6, r7
 800ab50:	4621      	mov	r1, r4
 800ab52:	463a      	mov	r2, r7
 800ab54:	9802      	ldr	r0, [sp, #8]
 800ab56:	f000 fc43 	bl	800b3e0 <__lshift>
 800ab5a:	4604      	mov	r4, r0
 800ab5c:	1bed      	subs	r5, r5, r7
 800ab5e:	f100 0914 	add.w	r9, r0, #20
 800ab62:	f04f 0a00 	mov.w	sl, #0
 800ab66:	e7b0      	b.n	800aaca <__gethex+0x1f6>
 800ab68:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800ab6c:	42a8      	cmp	r0, r5
 800ab6e:	dd72      	ble.n	800ac56 <__gethex+0x382>
 800ab70:	1b45      	subs	r5, r0, r5
 800ab72:	42ae      	cmp	r6, r5
 800ab74:	dc35      	bgt.n	800abe2 <__gethex+0x30e>
 800ab76:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ab7a:	2b02      	cmp	r3, #2
 800ab7c:	d029      	beq.n	800abd2 <__gethex+0x2fe>
 800ab7e:	2b03      	cmp	r3, #3
 800ab80:	d02b      	beq.n	800abda <__gethex+0x306>
 800ab82:	2b01      	cmp	r3, #1
 800ab84:	d11c      	bne.n	800abc0 <__gethex+0x2ec>
 800ab86:	42ae      	cmp	r6, r5
 800ab88:	d11a      	bne.n	800abc0 <__gethex+0x2ec>
 800ab8a:	2e01      	cmp	r6, #1
 800ab8c:	d112      	bne.n	800abb4 <__gethex+0x2e0>
 800ab8e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ab92:	9a05      	ldr	r2, [sp, #20]
 800ab94:	2762      	movs	r7, #98	; 0x62
 800ab96:	6013      	str	r3, [r2, #0]
 800ab98:	2301      	movs	r3, #1
 800ab9a:	6123      	str	r3, [r4, #16]
 800ab9c:	f8c9 3000 	str.w	r3, [r9]
 800aba0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800aba2:	601c      	str	r4, [r3, #0]
 800aba4:	e728      	b.n	800a9f8 <__gethex+0x124>
 800aba6:	bf00      	nop
 800aba8:	0800ca18 	.word	0x0800ca18
 800abac:	0800c9a0 	.word	0x0800c9a0
 800abb0:	0800c9b1 	.word	0x0800c9b1
 800abb4:	4620      	mov	r0, r4
 800abb6:	1e71      	subs	r1, r6, #1
 800abb8:	f000 fe51 	bl	800b85e <__any_on>
 800abbc:	2800      	cmp	r0, #0
 800abbe:	d1e6      	bne.n	800ab8e <__gethex+0x2ba>
 800abc0:	4621      	mov	r1, r4
 800abc2:	9802      	ldr	r0, [sp, #8]
 800abc4:	f000 f9f4 	bl	800afb0 <_Bfree>
 800abc8:	2300      	movs	r3, #0
 800abca:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800abcc:	2750      	movs	r7, #80	; 0x50
 800abce:	6013      	str	r3, [r2, #0]
 800abd0:	e712      	b.n	800a9f8 <__gethex+0x124>
 800abd2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d1f3      	bne.n	800abc0 <__gethex+0x2ec>
 800abd8:	e7d9      	b.n	800ab8e <__gethex+0x2ba>
 800abda:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d1d6      	bne.n	800ab8e <__gethex+0x2ba>
 800abe0:	e7ee      	b.n	800abc0 <__gethex+0x2ec>
 800abe2:	1e6f      	subs	r7, r5, #1
 800abe4:	f1ba 0f00 	cmp.w	sl, #0
 800abe8:	d132      	bne.n	800ac50 <__gethex+0x37c>
 800abea:	b127      	cbz	r7, 800abf6 <__gethex+0x322>
 800abec:	4639      	mov	r1, r7
 800abee:	4620      	mov	r0, r4
 800abf0:	f000 fe35 	bl	800b85e <__any_on>
 800abf4:	4682      	mov	sl, r0
 800abf6:	2101      	movs	r1, #1
 800abf8:	117b      	asrs	r3, r7, #5
 800abfa:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800abfe:	f007 071f 	and.w	r7, r7, #31
 800ac02:	fa01 f707 	lsl.w	r7, r1, r7
 800ac06:	421f      	tst	r7, r3
 800ac08:	f04f 0702 	mov.w	r7, #2
 800ac0c:	4629      	mov	r1, r5
 800ac0e:	4620      	mov	r0, r4
 800ac10:	bf18      	it	ne
 800ac12:	f04a 0a02 	orrne.w	sl, sl, #2
 800ac16:	1b76      	subs	r6, r6, r5
 800ac18:	f7ff fdf4 	bl	800a804 <rshift>
 800ac1c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ac20:	f1ba 0f00 	cmp.w	sl, #0
 800ac24:	d048      	beq.n	800acb8 <__gethex+0x3e4>
 800ac26:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ac2a:	2b02      	cmp	r3, #2
 800ac2c:	d015      	beq.n	800ac5a <__gethex+0x386>
 800ac2e:	2b03      	cmp	r3, #3
 800ac30:	d017      	beq.n	800ac62 <__gethex+0x38e>
 800ac32:	2b01      	cmp	r3, #1
 800ac34:	d109      	bne.n	800ac4a <__gethex+0x376>
 800ac36:	f01a 0f02 	tst.w	sl, #2
 800ac3a:	d006      	beq.n	800ac4a <__gethex+0x376>
 800ac3c:	f8d9 0000 	ldr.w	r0, [r9]
 800ac40:	ea4a 0a00 	orr.w	sl, sl, r0
 800ac44:	f01a 0f01 	tst.w	sl, #1
 800ac48:	d10e      	bne.n	800ac68 <__gethex+0x394>
 800ac4a:	f047 0710 	orr.w	r7, r7, #16
 800ac4e:	e033      	b.n	800acb8 <__gethex+0x3e4>
 800ac50:	f04f 0a01 	mov.w	sl, #1
 800ac54:	e7cf      	b.n	800abf6 <__gethex+0x322>
 800ac56:	2701      	movs	r7, #1
 800ac58:	e7e2      	b.n	800ac20 <__gethex+0x34c>
 800ac5a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ac5c:	f1c3 0301 	rsb	r3, r3, #1
 800ac60:	9315      	str	r3, [sp, #84]	; 0x54
 800ac62:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d0f0      	beq.n	800ac4a <__gethex+0x376>
 800ac68:	f04f 0c00 	mov.w	ip, #0
 800ac6c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ac70:	f104 0314 	add.w	r3, r4, #20
 800ac74:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ac78:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac82:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ac86:	d01c      	beq.n	800acc2 <__gethex+0x3ee>
 800ac88:	3201      	adds	r2, #1
 800ac8a:	6002      	str	r2, [r0, #0]
 800ac8c:	2f02      	cmp	r7, #2
 800ac8e:	f104 0314 	add.w	r3, r4, #20
 800ac92:	d13d      	bne.n	800ad10 <__gethex+0x43c>
 800ac94:	f8d8 2000 	ldr.w	r2, [r8]
 800ac98:	3a01      	subs	r2, #1
 800ac9a:	42b2      	cmp	r2, r6
 800ac9c:	d10a      	bne.n	800acb4 <__gethex+0x3e0>
 800ac9e:	2201      	movs	r2, #1
 800aca0:	1171      	asrs	r1, r6, #5
 800aca2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800aca6:	f006 061f 	and.w	r6, r6, #31
 800acaa:	fa02 f606 	lsl.w	r6, r2, r6
 800acae:	421e      	tst	r6, r3
 800acb0:	bf18      	it	ne
 800acb2:	4617      	movne	r7, r2
 800acb4:	f047 0720 	orr.w	r7, r7, #32
 800acb8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800acba:	601c      	str	r4, [r3, #0]
 800acbc:	9b05      	ldr	r3, [sp, #20]
 800acbe:	601d      	str	r5, [r3, #0]
 800acc0:	e69a      	b.n	800a9f8 <__gethex+0x124>
 800acc2:	4299      	cmp	r1, r3
 800acc4:	f843 cc04 	str.w	ip, [r3, #-4]
 800acc8:	d8d8      	bhi.n	800ac7c <__gethex+0x3a8>
 800acca:	68a3      	ldr	r3, [r4, #8]
 800accc:	459b      	cmp	fp, r3
 800acce:	db17      	blt.n	800ad00 <__gethex+0x42c>
 800acd0:	6861      	ldr	r1, [r4, #4]
 800acd2:	9802      	ldr	r0, [sp, #8]
 800acd4:	3101      	adds	r1, #1
 800acd6:	f000 f92b 	bl	800af30 <_Balloc>
 800acda:	4681      	mov	r9, r0
 800acdc:	b918      	cbnz	r0, 800ace6 <__gethex+0x412>
 800acde:	4602      	mov	r2, r0
 800ace0:	2184      	movs	r1, #132	; 0x84
 800ace2:	4b19      	ldr	r3, [pc, #100]	; (800ad48 <__gethex+0x474>)
 800ace4:	e6ab      	b.n	800aa3e <__gethex+0x16a>
 800ace6:	6922      	ldr	r2, [r4, #16]
 800ace8:	f104 010c 	add.w	r1, r4, #12
 800acec:	3202      	adds	r2, #2
 800acee:	0092      	lsls	r2, r2, #2
 800acf0:	300c      	adds	r0, #12
 800acf2:	f7fd f8b5 	bl	8007e60 <memcpy>
 800acf6:	4621      	mov	r1, r4
 800acf8:	9802      	ldr	r0, [sp, #8]
 800acfa:	f000 f959 	bl	800afb0 <_Bfree>
 800acfe:	464c      	mov	r4, r9
 800ad00:	6923      	ldr	r3, [r4, #16]
 800ad02:	1c5a      	adds	r2, r3, #1
 800ad04:	6122      	str	r2, [r4, #16]
 800ad06:	2201      	movs	r2, #1
 800ad08:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ad0c:	615a      	str	r2, [r3, #20]
 800ad0e:	e7bd      	b.n	800ac8c <__gethex+0x3b8>
 800ad10:	6922      	ldr	r2, [r4, #16]
 800ad12:	455a      	cmp	r2, fp
 800ad14:	dd0b      	ble.n	800ad2e <__gethex+0x45a>
 800ad16:	2101      	movs	r1, #1
 800ad18:	4620      	mov	r0, r4
 800ad1a:	f7ff fd73 	bl	800a804 <rshift>
 800ad1e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ad22:	3501      	adds	r5, #1
 800ad24:	42ab      	cmp	r3, r5
 800ad26:	f6ff aed4 	blt.w	800aad2 <__gethex+0x1fe>
 800ad2a:	2701      	movs	r7, #1
 800ad2c:	e7c2      	b.n	800acb4 <__gethex+0x3e0>
 800ad2e:	f016 061f 	ands.w	r6, r6, #31
 800ad32:	d0fa      	beq.n	800ad2a <__gethex+0x456>
 800ad34:	4453      	add	r3, sl
 800ad36:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ad3a:	f000 f9eb 	bl	800b114 <__hi0bits>
 800ad3e:	f1c6 0620 	rsb	r6, r6, #32
 800ad42:	42b0      	cmp	r0, r6
 800ad44:	dbe7      	blt.n	800ad16 <__gethex+0x442>
 800ad46:	e7f0      	b.n	800ad2a <__gethex+0x456>
 800ad48:	0800c9a0 	.word	0x0800c9a0

0800ad4c <L_shift>:
 800ad4c:	f1c2 0208 	rsb	r2, r2, #8
 800ad50:	0092      	lsls	r2, r2, #2
 800ad52:	b570      	push	{r4, r5, r6, lr}
 800ad54:	f1c2 0620 	rsb	r6, r2, #32
 800ad58:	6843      	ldr	r3, [r0, #4]
 800ad5a:	6804      	ldr	r4, [r0, #0]
 800ad5c:	fa03 f506 	lsl.w	r5, r3, r6
 800ad60:	432c      	orrs	r4, r5
 800ad62:	40d3      	lsrs	r3, r2
 800ad64:	6004      	str	r4, [r0, #0]
 800ad66:	f840 3f04 	str.w	r3, [r0, #4]!
 800ad6a:	4288      	cmp	r0, r1
 800ad6c:	d3f4      	bcc.n	800ad58 <L_shift+0xc>
 800ad6e:	bd70      	pop	{r4, r5, r6, pc}

0800ad70 <__match>:
 800ad70:	b530      	push	{r4, r5, lr}
 800ad72:	6803      	ldr	r3, [r0, #0]
 800ad74:	3301      	adds	r3, #1
 800ad76:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ad7a:	b914      	cbnz	r4, 800ad82 <__match+0x12>
 800ad7c:	6003      	str	r3, [r0, #0]
 800ad7e:	2001      	movs	r0, #1
 800ad80:	bd30      	pop	{r4, r5, pc}
 800ad82:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ad86:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800ad8a:	2d19      	cmp	r5, #25
 800ad8c:	bf98      	it	ls
 800ad8e:	3220      	addls	r2, #32
 800ad90:	42a2      	cmp	r2, r4
 800ad92:	d0f0      	beq.n	800ad76 <__match+0x6>
 800ad94:	2000      	movs	r0, #0
 800ad96:	e7f3      	b.n	800ad80 <__match+0x10>

0800ad98 <__hexnan>:
 800ad98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad9c:	2500      	movs	r5, #0
 800ad9e:	680b      	ldr	r3, [r1, #0]
 800ada0:	4682      	mov	sl, r0
 800ada2:	115e      	asrs	r6, r3, #5
 800ada4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ada8:	f013 031f 	ands.w	r3, r3, #31
 800adac:	bf18      	it	ne
 800adae:	3604      	addne	r6, #4
 800adb0:	1f37      	subs	r7, r6, #4
 800adb2:	46b9      	mov	r9, r7
 800adb4:	463c      	mov	r4, r7
 800adb6:	46ab      	mov	fp, r5
 800adb8:	b087      	sub	sp, #28
 800adba:	4690      	mov	r8, r2
 800adbc:	6802      	ldr	r2, [r0, #0]
 800adbe:	9301      	str	r3, [sp, #4]
 800adc0:	f846 5c04 	str.w	r5, [r6, #-4]
 800adc4:	9502      	str	r5, [sp, #8]
 800adc6:	7851      	ldrb	r1, [r2, #1]
 800adc8:	1c53      	adds	r3, r2, #1
 800adca:	9303      	str	r3, [sp, #12]
 800adcc:	b341      	cbz	r1, 800ae20 <__hexnan+0x88>
 800adce:	4608      	mov	r0, r1
 800add0:	9205      	str	r2, [sp, #20]
 800add2:	9104      	str	r1, [sp, #16]
 800add4:	f7ff fd69 	bl	800a8aa <__hexdig_fun>
 800add8:	2800      	cmp	r0, #0
 800adda:	d14f      	bne.n	800ae7c <__hexnan+0xe4>
 800addc:	9904      	ldr	r1, [sp, #16]
 800adde:	9a05      	ldr	r2, [sp, #20]
 800ade0:	2920      	cmp	r1, #32
 800ade2:	d818      	bhi.n	800ae16 <__hexnan+0x7e>
 800ade4:	9b02      	ldr	r3, [sp, #8]
 800ade6:	459b      	cmp	fp, r3
 800ade8:	dd13      	ble.n	800ae12 <__hexnan+0x7a>
 800adea:	454c      	cmp	r4, r9
 800adec:	d206      	bcs.n	800adfc <__hexnan+0x64>
 800adee:	2d07      	cmp	r5, #7
 800adf0:	dc04      	bgt.n	800adfc <__hexnan+0x64>
 800adf2:	462a      	mov	r2, r5
 800adf4:	4649      	mov	r1, r9
 800adf6:	4620      	mov	r0, r4
 800adf8:	f7ff ffa8 	bl	800ad4c <L_shift>
 800adfc:	4544      	cmp	r4, r8
 800adfe:	d950      	bls.n	800aea2 <__hexnan+0x10a>
 800ae00:	2300      	movs	r3, #0
 800ae02:	f1a4 0904 	sub.w	r9, r4, #4
 800ae06:	f844 3c04 	str.w	r3, [r4, #-4]
 800ae0a:	461d      	mov	r5, r3
 800ae0c:	464c      	mov	r4, r9
 800ae0e:	f8cd b008 	str.w	fp, [sp, #8]
 800ae12:	9a03      	ldr	r2, [sp, #12]
 800ae14:	e7d7      	b.n	800adc6 <__hexnan+0x2e>
 800ae16:	2929      	cmp	r1, #41	; 0x29
 800ae18:	d156      	bne.n	800aec8 <__hexnan+0x130>
 800ae1a:	3202      	adds	r2, #2
 800ae1c:	f8ca 2000 	str.w	r2, [sl]
 800ae20:	f1bb 0f00 	cmp.w	fp, #0
 800ae24:	d050      	beq.n	800aec8 <__hexnan+0x130>
 800ae26:	454c      	cmp	r4, r9
 800ae28:	d206      	bcs.n	800ae38 <__hexnan+0xa0>
 800ae2a:	2d07      	cmp	r5, #7
 800ae2c:	dc04      	bgt.n	800ae38 <__hexnan+0xa0>
 800ae2e:	462a      	mov	r2, r5
 800ae30:	4649      	mov	r1, r9
 800ae32:	4620      	mov	r0, r4
 800ae34:	f7ff ff8a 	bl	800ad4c <L_shift>
 800ae38:	4544      	cmp	r4, r8
 800ae3a:	d934      	bls.n	800aea6 <__hexnan+0x10e>
 800ae3c:	4623      	mov	r3, r4
 800ae3e:	f1a8 0204 	sub.w	r2, r8, #4
 800ae42:	f853 1b04 	ldr.w	r1, [r3], #4
 800ae46:	429f      	cmp	r7, r3
 800ae48:	f842 1f04 	str.w	r1, [r2, #4]!
 800ae4c:	d2f9      	bcs.n	800ae42 <__hexnan+0xaa>
 800ae4e:	1b3b      	subs	r3, r7, r4
 800ae50:	f023 0303 	bic.w	r3, r3, #3
 800ae54:	3304      	adds	r3, #4
 800ae56:	3401      	adds	r4, #1
 800ae58:	3e03      	subs	r6, #3
 800ae5a:	42b4      	cmp	r4, r6
 800ae5c:	bf88      	it	hi
 800ae5e:	2304      	movhi	r3, #4
 800ae60:	2200      	movs	r2, #0
 800ae62:	4443      	add	r3, r8
 800ae64:	f843 2b04 	str.w	r2, [r3], #4
 800ae68:	429f      	cmp	r7, r3
 800ae6a:	d2fb      	bcs.n	800ae64 <__hexnan+0xcc>
 800ae6c:	683b      	ldr	r3, [r7, #0]
 800ae6e:	b91b      	cbnz	r3, 800ae78 <__hexnan+0xe0>
 800ae70:	4547      	cmp	r7, r8
 800ae72:	d127      	bne.n	800aec4 <__hexnan+0x12c>
 800ae74:	2301      	movs	r3, #1
 800ae76:	603b      	str	r3, [r7, #0]
 800ae78:	2005      	movs	r0, #5
 800ae7a:	e026      	b.n	800aeca <__hexnan+0x132>
 800ae7c:	3501      	adds	r5, #1
 800ae7e:	2d08      	cmp	r5, #8
 800ae80:	f10b 0b01 	add.w	fp, fp, #1
 800ae84:	dd06      	ble.n	800ae94 <__hexnan+0xfc>
 800ae86:	4544      	cmp	r4, r8
 800ae88:	d9c3      	bls.n	800ae12 <__hexnan+0x7a>
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	2501      	movs	r5, #1
 800ae8e:	f844 3c04 	str.w	r3, [r4, #-4]
 800ae92:	3c04      	subs	r4, #4
 800ae94:	6822      	ldr	r2, [r4, #0]
 800ae96:	f000 000f 	and.w	r0, r0, #15
 800ae9a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800ae9e:	6022      	str	r2, [r4, #0]
 800aea0:	e7b7      	b.n	800ae12 <__hexnan+0x7a>
 800aea2:	2508      	movs	r5, #8
 800aea4:	e7b5      	b.n	800ae12 <__hexnan+0x7a>
 800aea6:	9b01      	ldr	r3, [sp, #4]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d0df      	beq.n	800ae6c <__hexnan+0xd4>
 800aeac:	f04f 32ff 	mov.w	r2, #4294967295
 800aeb0:	f1c3 0320 	rsb	r3, r3, #32
 800aeb4:	fa22 f303 	lsr.w	r3, r2, r3
 800aeb8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800aebc:	401a      	ands	r2, r3
 800aebe:	f846 2c04 	str.w	r2, [r6, #-4]
 800aec2:	e7d3      	b.n	800ae6c <__hexnan+0xd4>
 800aec4:	3f04      	subs	r7, #4
 800aec6:	e7d1      	b.n	800ae6c <__hexnan+0xd4>
 800aec8:	2004      	movs	r0, #4
 800aeca:	b007      	add	sp, #28
 800aecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800aed0 <_localeconv_r>:
 800aed0:	4800      	ldr	r0, [pc, #0]	; (800aed4 <_localeconv_r+0x4>)
 800aed2:	4770      	bx	lr
 800aed4:	200001a0 	.word	0x200001a0

0800aed8 <__ascii_mbtowc>:
 800aed8:	b082      	sub	sp, #8
 800aeda:	b901      	cbnz	r1, 800aede <__ascii_mbtowc+0x6>
 800aedc:	a901      	add	r1, sp, #4
 800aede:	b142      	cbz	r2, 800aef2 <__ascii_mbtowc+0x1a>
 800aee0:	b14b      	cbz	r3, 800aef6 <__ascii_mbtowc+0x1e>
 800aee2:	7813      	ldrb	r3, [r2, #0]
 800aee4:	600b      	str	r3, [r1, #0]
 800aee6:	7812      	ldrb	r2, [r2, #0]
 800aee8:	1e10      	subs	r0, r2, #0
 800aeea:	bf18      	it	ne
 800aeec:	2001      	movne	r0, #1
 800aeee:	b002      	add	sp, #8
 800aef0:	4770      	bx	lr
 800aef2:	4610      	mov	r0, r2
 800aef4:	e7fb      	b.n	800aeee <__ascii_mbtowc+0x16>
 800aef6:	f06f 0001 	mvn.w	r0, #1
 800aefa:	e7f8      	b.n	800aeee <__ascii_mbtowc+0x16>

0800aefc <memchr>:
 800aefc:	4603      	mov	r3, r0
 800aefe:	b510      	push	{r4, lr}
 800af00:	b2c9      	uxtb	r1, r1
 800af02:	4402      	add	r2, r0
 800af04:	4293      	cmp	r3, r2
 800af06:	4618      	mov	r0, r3
 800af08:	d101      	bne.n	800af0e <memchr+0x12>
 800af0a:	2000      	movs	r0, #0
 800af0c:	e003      	b.n	800af16 <memchr+0x1a>
 800af0e:	7804      	ldrb	r4, [r0, #0]
 800af10:	3301      	adds	r3, #1
 800af12:	428c      	cmp	r4, r1
 800af14:	d1f6      	bne.n	800af04 <memchr+0x8>
 800af16:	bd10      	pop	{r4, pc}

0800af18 <__malloc_lock>:
 800af18:	4801      	ldr	r0, [pc, #4]	; (800af20 <__malloc_lock+0x8>)
 800af1a:	f000 be76 	b.w	800bc0a <__retarget_lock_acquire_recursive>
 800af1e:	bf00      	nop
 800af20:	20000a68 	.word	0x20000a68

0800af24 <__malloc_unlock>:
 800af24:	4801      	ldr	r0, [pc, #4]	; (800af2c <__malloc_unlock+0x8>)
 800af26:	f000 be71 	b.w	800bc0c <__retarget_lock_release_recursive>
 800af2a:	bf00      	nop
 800af2c:	20000a68 	.word	0x20000a68

0800af30 <_Balloc>:
 800af30:	b570      	push	{r4, r5, r6, lr}
 800af32:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800af34:	4604      	mov	r4, r0
 800af36:	460d      	mov	r5, r1
 800af38:	b976      	cbnz	r6, 800af58 <_Balloc+0x28>
 800af3a:	2010      	movs	r0, #16
 800af3c:	f7fc ff88 	bl	8007e50 <malloc>
 800af40:	4602      	mov	r2, r0
 800af42:	6260      	str	r0, [r4, #36]	; 0x24
 800af44:	b920      	cbnz	r0, 800af50 <_Balloc+0x20>
 800af46:	2166      	movs	r1, #102	; 0x66
 800af48:	4b17      	ldr	r3, [pc, #92]	; (800afa8 <_Balloc+0x78>)
 800af4a:	4818      	ldr	r0, [pc, #96]	; (800afac <_Balloc+0x7c>)
 800af4c:	f000 fe2c 	bl	800bba8 <__assert_func>
 800af50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800af54:	6006      	str	r6, [r0, #0]
 800af56:	60c6      	str	r6, [r0, #12]
 800af58:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800af5a:	68f3      	ldr	r3, [r6, #12]
 800af5c:	b183      	cbz	r3, 800af80 <_Balloc+0x50>
 800af5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800af60:	68db      	ldr	r3, [r3, #12]
 800af62:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800af66:	b9b8      	cbnz	r0, 800af98 <_Balloc+0x68>
 800af68:	2101      	movs	r1, #1
 800af6a:	fa01 f605 	lsl.w	r6, r1, r5
 800af6e:	1d72      	adds	r2, r6, #5
 800af70:	4620      	mov	r0, r4
 800af72:	0092      	lsls	r2, r2, #2
 800af74:	f7fc ff8a 	bl	8007e8c <_calloc_r>
 800af78:	b160      	cbz	r0, 800af94 <_Balloc+0x64>
 800af7a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800af7e:	e00e      	b.n	800af9e <_Balloc+0x6e>
 800af80:	2221      	movs	r2, #33	; 0x21
 800af82:	2104      	movs	r1, #4
 800af84:	4620      	mov	r0, r4
 800af86:	f7fc ff81 	bl	8007e8c <_calloc_r>
 800af8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800af8c:	60f0      	str	r0, [r6, #12]
 800af8e:	68db      	ldr	r3, [r3, #12]
 800af90:	2b00      	cmp	r3, #0
 800af92:	d1e4      	bne.n	800af5e <_Balloc+0x2e>
 800af94:	2000      	movs	r0, #0
 800af96:	bd70      	pop	{r4, r5, r6, pc}
 800af98:	6802      	ldr	r2, [r0, #0]
 800af9a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800af9e:	2300      	movs	r3, #0
 800afa0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800afa4:	e7f7      	b.n	800af96 <_Balloc+0x66>
 800afa6:	bf00      	nop
 800afa8:	0800c92e 	.word	0x0800c92e
 800afac:	0800ca2c 	.word	0x0800ca2c

0800afb0 <_Bfree>:
 800afb0:	b570      	push	{r4, r5, r6, lr}
 800afb2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800afb4:	4605      	mov	r5, r0
 800afb6:	460c      	mov	r4, r1
 800afb8:	b976      	cbnz	r6, 800afd8 <_Bfree+0x28>
 800afba:	2010      	movs	r0, #16
 800afbc:	f7fc ff48 	bl	8007e50 <malloc>
 800afc0:	4602      	mov	r2, r0
 800afc2:	6268      	str	r0, [r5, #36]	; 0x24
 800afc4:	b920      	cbnz	r0, 800afd0 <_Bfree+0x20>
 800afc6:	218a      	movs	r1, #138	; 0x8a
 800afc8:	4b08      	ldr	r3, [pc, #32]	; (800afec <_Bfree+0x3c>)
 800afca:	4809      	ldr	r0, [pc, #36]	; (800aff0 <_Bfree+0x40>)
 800afcc:	f000 fdec 	bl	800bba8 <__assert_func>
 800afd0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800afd4:	6006      	str	r6, [r0, #0]
 800afd6:	60c6      	str	r6, [r0, #12]
 800afd8:	b13c      	cbz	r4, 800afea <_Bfree+0x3a>
 800afda:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800afdc:	6862      	ldr	r2, [r4, #4]
 800afde:	68db      	ldr	r3, [r3, #12]
 800afe0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800afe4:	6021      	str	r1, [r4, #0]
 800afe6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800afea:	bd70      	pop	{r4, r5, r6, pc}
 800afec:	0800c92e 	.word	0x0800c92e
 800aff0:	0800ca2c 	.word	0x0800ca2c

0800aff4 <__multadd>:
 800aff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aff8:	4607      	mov	r7, r0
 800affa:	460c      	mov	r4, r1
 800affc:	461e      	mov	r6, r3
 800affe:	2000      	movs	r0, #0
 800b000:	690d      	ldr	r5, [r1, #16]
 800b002:	f101 0c14 	add.w	ip, r1, #20
 800b006:	f8dc 3000 	ldr.w	r3, [ip]
 800b00a:	3001      	adds	r0, #1
 800b00c:	b299      	uxth	r1, r3
 800b00e:	fb02 6101 	mla	r1, r2, r1, r6
 800b012:	0c1e      	lsrs	r6, r3, #16
 800b014:	0c0b      	lsrs	r3, r1, #16
 800b016:	fb02 3306 	mla	r3, r2, r6, r3
 800b01a:	b289      	uxth	r1, r1
 800b01c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b020:	4285      	cmp	r5, r0
 800b022:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b026:	f84c 1b04 	str.w	r1, [ip], #4
 800b02a:	dcec      	bgt.n	800b006 <__multadd+0x12>
 800b02c:	b30e      	cbz	r6, 800b072 <__multadd+0x7e>
 800b02e:	68a3      	ldr	r3, [r4, #8]
 800b030:	42ab      	cmp	r3, r5
 800b032:	dc19      	bgt.n	800b068 <__multadd+0x74>
 800b034:	6861      	ldr	r1, [r4, #4]
 800b036:	4638      	mov	r0, r7
 800b038:	3101      	adds	r1, #1
 800b03a:	f7ff ff79 	bl	800af30 <_Balloc>
 800b03e:	4680      	mov	r8, r0
 800b040:	b928      	cbnz	r0, 800b04e <__multadd+0x5a>
 800b042:	4602      	mov	r2, r0
 800b044:	21b5      	movs	r1, #181	; 0xb5
 800b046:	4b0c      	ldr	r3, [pc, #48]	; (800b078 <__multadd+0x84>)
 800b048:	480c      	ldr	r0, [pc, #48]	; (800b07c <__multadd+0x88>)
 800b04a:	f000 fdad 	bl	800bba8 <__assert_func>
 800b04e:	6922      	ldr	r2, [r4, #16]
 800b050:	f104 010c 	add.w	r1, r4, #12
 800b054:	3202      	adds	r2, #2
 800b056:	0092      	lsls	r2, r2, #2
 800b058:	300c      	adds	r0, #12
 800b05a:	f7fc ff01 	bl	8007e60 <memcpy>
 800b05e:	4621      	mov	r1, r4
 800b060:	4638      	mov	r0, r7
 800b062:	f7ff ffa5 	bl	800afb0 <_Bfree>
 800b066:	4644      	mov	r4, r8
 800b068:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b06c:	3501      	adds	r5, #1
 800b06e:	615e      	str	r6, [r3, #20]
 800b070:	6125      	str	r5, [r4, #16]
 800b072:	4620      	mov	r0, r4
 800b074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b078:	0800c9a0 	.word	0x0800c9a0
 800b07c:	0800ca2c 	.word	0x0800ca2c

0800b080 <__s2b>:
 800b080:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b084:	4615      	mov	r5, r2
 800b086:	2209      	movs	r2, #9
 800b088:	461f      	mov	r7, r3
 800b08a:	3308      	adds	r3, #8
 800b08c:	460c      	mov	r4, r1
 800b08e:	fb93 f3f2 	sdiv	r3, r3, r2
 800b092:	4606      	mov	r6, r0
 800b094:	2201      	movs	r2, #1
 800b096:	2100      	movs	r1, #0
 800b098:	429a      	cmp	r2, r3
 800b09a:	db09      	blt.n	800b0b0 <__s2b+0x30>
 800b09c:	4630      	mov	r0, r6
 800b09e:	f7ff ff47 	bl	800af30 <_Balloc>
 800b0a2:	b940      	cbnz	r0, 800b0b6 <__s2b+0x36>
 800b0a4:	4602      	mov	r2, r0
 800b0a6:	21ce      	movs	r1, #206	; 0xce
 800b0a8:	4b18      	ldr	r3, [pc, #96]	; (800b10c <__s2b+0x8c>)
 800b0aa:	4819      	ldr	r0, [pc, #100]	; (800b110 <__s2b+0x90>)
 800b0ac:	f000 fd7c 	bl	800bba8 <__assert_func>
 800b0b0:	0052      	lsls	r2, r2, #1
 800b0b2:	3101      	adds	r1, #1
 800b0b4:	e7f0      	b.n	800b098 <__s2b+0x18>
 800b0b6:	9b08      	ldr	r3, [sp, #32]
 800b0b8:	2d09      	cmp	r5, #9
 800b0ba:	6143      	str	r3, [r0, #20]
 800b0bc:	f04f 0301 	mov.w	r3, #1
 800b0c0:	6103      	str	r3, [r0, #16]
 800b0c2:	dd16      	ble.n	800b0f2 <__s2b+0x72>
 800b0c4:	f104 0909 	add.w	r9, r4, #9
 800b0c8:	46c8      	mov	r8, r9
 800b0ca:	442c      	add	r4, r5
 800b0cc:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b0d0:	4601      	mov	r1, r0
 800b0d2:	220a      	movs	r2, #10
 800b0d4:	4630      	mov	r0, r6
 800b0d6:	3b30      	subs	r3, #48	; 0x30
 800b0d8:	f7ff ff8c 	bl	800aff4 <__multadd>
 800b0dc:	45a0      	cmp	r8, r4
 800b0de:	d1f5      	bne.n	800b0cc <__s2b+0x4c>
 800b0e0:	f1a5 0408 	sub.w	r4, r5, #8
 800b0e4:	444c      	add	r4, r9
 800b0e6:	1b2d      	subs	r5, r5, r4
 800b0e8:	1963      	adds	r3, r4, r5
 800b0ea:	42bb      	cmp	r3, r7
 800b0ec:	db04      	blt.n	800b0f8 <__s2b+0x78>
 800b0ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b0f2:	2509      	movs	r5, #9
 800b0f4:	340a      	adds	r4, #10
 800b0f6:	e7f6      	b.n	800b0e6 <__s2b+0x66>
 800b0f8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b0fc:	4601      	mov	r1, r0
 800b0fe:	220a      	movs	r2, #10
 800b100:	4630      	mov	r0, r6
 800b102:	3b30      	subs	r3, #48	; 0x30
 800b104:	f7ff ff76 	bl	800aff4 <__multadd>
 800b108:	e7ee      	b.n	800b0e8 <__s2b+0x68>
 800b10a:	bf00      	nop
 800b10c:	0800c9a0 	.word	0x0800c9a0
 800b110:	0800ca2c 	.word	0x0800ca2c

0800b114 <__hi0bits>:
 800b114:	0c02      	lsrs	r2, r0, #16
 800b116:	0412      	lsls	r2, r2, #16
 800b118:	4603      	mov	r3, r0
 800b11a:	b9ca      	cbnz	r2, 800b150 <__hi0bits+0x3c>
 800b11c:	0403      	lsls	r3, r0, #16
 800b11e:	2010      	movs	r0, #16
 800b120:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800b124:	bf04      	itt	eq
 800b126:	021b      	lsleq	r3, r3, #8
 800b128:	3008      	addeq	r0, #8
 800b12a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800b12e:	bf04      	itt	eq
 800b130:	011b      	lsleq	r3, r3, #4
 800b132:	3004      	addeq	r0, #4
 800b134:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800b138:	bf04      	itt	eq
 800b13a:	009b      	lsleq	r3, r3, #2
 800b13c:	3002      	addeq	r0, #2
 800b13e:	2b00      	cmp	r3, #0
 800b140:	db05      	blt.n	800b14e <__hi0bits+0x3a>
 800b142:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800b146:	f100 0001 	add.w	r0, r0, #1
 800b14a:	bf08      	it	eq
 800b14c:	2020      	moveq	r0, #32
 800b14e:	4770      	bx	lr
 800b150:	2000      	movs	r0, #0
 800b152:	e7e5      	b.n	800b120 <__hi0bits+0xc>

0800b154 <__lo0bits>:
 800b154:	6803      	ldr	r3, [r0, #0]
 800b156:	4602      	mov	r2, r0
 800b158:	f013 0007 	ands.w	r0, r3, #7
 800b15c:	d00b      	beq.n	800b176 <__lo0bits+0x22>
 800b15e:	07d9      	lsls	r1, r3, #31
 800b160:	d421      	bmi.n	800b1a6 <__lo0bits+0x52>
 800b162:	0798      	lsls	r0, r3, #30
 800b164:	bf49      	itett	mi
 800b166:	085b      	lsrmi	r3, r3, #1
 800b168:	089b      	lsrpl	r3, r3, #2
 800b16a:	2001      	movmi	r0, #1
 800b16c:	6013      	strmi	r3, [r2, #0]
 800b16e:	bf5c      	itt	pl
 800b170:	2002      	movpl	r0, #2
 800b172:	6013      	strpl	r3, [r2, #0]
 800b174:	4770      	bx	lr
 800b176:	b299      	uxth	r1, r3
 800b178:	b909      	cbnz	r1, 800b17e <__lo0bits+0x2a>
 800b17a:	2010      	movs	r0, #16
 800b17c:	0c1b      	lsrs	r3, r3, #16
 800b17e:	b2d9      	uxtb	r1, r3
 800b180:	b909      	cbnz	r1, 800b186 <__lo0bits+0x32>
 800b182:	3008      	adds	r0, #8
 800b184:	0a1b      	lsrs	r3, r3, #8
 800b186:	0719      	lsls	r1, r3, #28
 800b188:	bf04      	itt	eq
 800b18a:	091b      	lsreq	r3, r3, #4
 800b18c:	3004      	addeq	r0, #4
 800b18e:	0799      	lsls	r1, r3, #30
 800b190:	bf04      	itt	eq
 800b192:	089b      	lsreq	r3, r3, #2
 800b194:	3002      	addeq	r0, #2
 800b196:	07d9      	lsls	r1, r3, #31
 800b198:	d403      	bmi.n	800b1a2 <__lo0bits+0x4e>
 800b19a:	085b      	lsrs	r3, r3, #1
 800b19c:	f100 0001 	add.w	r0, r0, #1
 800b1a0:	d003      	beq.n	800b1aa <__lo0bits+0x56>
 800b1a2:	6013      	str	r3, [r2, #0]
 800b1a4:	4770      	bx	lr
 800b1a6:	2000      	movs	r0, #0
 800b1a8:	4770      	bx	lr
 800b1aa:	2020      	movs	r0, #32
 800b1ac:	4770      	bx	lr
	...

0800b1b0 <__i2b>:
 800b1b0:	b510      	push	{r4, lr}
 800b1b2:	460c      	mov	r4, r1
 800b1b4:	2101      	movs	r1, #1
 800b1b6:	f7ff febb 	bl	800af30 <_Balloc>
 800b1ba:	4602      	mov	r2, r0
 800b1bc:	b928      	cbnz	r0, 800b1ca <__i2b+0x1a>
 800b1be:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b1c2:	4b04      	ldr	r3, [pc, #16]	; (800b1d4 <__i2b+0x24>)
 800b1c4:	4804      	ldr	r0, [pc, #16]	; (800b1d8 <__i2b+0x28>)
 800b1c6:	f000 fcef 	bl	800bba8 <__assert_func>
 800b1ca:	2301      	movs	r3, #1
 800b1cc:	6144      	str	r4, [r0, #20]
 800b1ce:	6103      	str	r3, [r0, #16]
 800b1d0:	bd10      	pop	{r4, pc}
 800b1d2:	bf00      	nop
 800b1d4:	0800c9a0 	.word	0x0800c9a0
 800b1d8:	0800ca2c 	.word	0x0800ca2c

0800b1dc <__multiply>:
 800b1dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1e0:	4691      	mov	r9, r2
 800b1e2:	690a      	ldr	r2, [r1, #16]
 800b1e4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b1e8:	460c      	mov	r4, r1
 800b1ea:	429a      	cmp	r2, r3
 800b1ec:	bfbe      	ittt	lt
 800b1ee:	460b      	movlt	r3, r1
 800b1f0:	464c      	movlt	r4, r9
 800b1f2:	4699      	movlt	r9, r3
 800b1f4:	6927      	ldr	r7, [r4, #16]
 800b1f6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b1fa:	68a3      	ldr	r3, [r4, #8]
 800b1fc:	6861      	ldr	r1, [r4, #4]
 800b1fe:	eb07 060a 	add.w	r6, r7, sl
 800b202:	42b3      	cmp	r3, r6
 800b204:	b085      	sub	sp, #20
 800b206:	bfb8      	it	lt
 800b208:	3101      	addlt	r1, #1
 800b20a:	f7ff fe91 	bl	800af30 <_Balloc>
 800b20e:	b930      	cbnz	r0, 800b21e <__multiply+0x42>
 800b210:	4602      	mov	r2, r0
 800b212:	f240 115d 	movw	r1, #349	; 0x15d
 800b216:	4b43      	ldr	r3, [pc, #268]	; (800b324 <__multiply+0x148>)
 800b218:	4843      	ldr	r0, [pc, #268]	; (800b328 <__multiply+0x14c>)
 800b21a:	f000 fcc5 	bl	800bba8 <__assert_func>
 800b21e:	f100 0514 	add.w	r5, r0, #20
 800b222:	462b      	mov	r3, r5
 800b224:	2200      	movs	r2, #0
 800b226:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b22a:	4543      	cmp	r3, r8
 800b22c:	d321      	bcc.n	800b272 <__multiply+0x96>
 800b22e:	f104 0314 	add.w	r3, r4, #20
 800b232:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b236:	f109 0314 	add.w	r3, r9, #20
 800b23a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b23e:	9202      	str	r2, [sp, #8]
 800b240:	1b3a      	subs	r2, r7, r4
 800b242:	3a15      	subs	r2, #21
 800b244:	f022 0203 	bic.w	r2, r2, #3
 800b248:	3204      	adds	r2, #4
 800b24a:	f104 0115 	add.w	r1, r4, #21
 800b24e:	428f      	cmp	r7, r1
 800b250:	bf38      	it	cc
 800b252:	2204      	movcc	r2, #4
 800b254:	9201      	str	r2, [sp, #4]
 800b256:	9a02      	ldr	r2, [sp, #8]
 800b258:	9303      	str	r3, [sp, #12]
 800b25a:	429a      	cmp	r2, r3
 800b25c:	d80c      	bhi.n	800b278 <__multiply+0x9c>
 800b25e:	2e00      	cmp	r6, #0
 800b260:	dd03      	ble.n	800b26a <__multiply+0x8e>
 800b262:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b266:	2b00      	cmp	r3, #0
 800b268:	d059      	beq.n	800b31e <__multiply+0x142>
 800b26a:	6106      	str	r6, [r0, #16]
 800b26c:	b005      	add	sp, #20
 800b26e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b272:	f843 2b04 	str.w	r2, [r3], #4
 800b276:	e7d8      	b.n	800b22a <__multiply+0x4e>
 800b278:	f8b3 a000 	ldrh.w	sl, [r3]
 800b27c:	f1ba 0f00 	cmp.w	sl, #0
 800b280:	d023      	beq.n	800b2ca <__multiply+0xee>
 800b282:	46a9      	mov	r9, r5
 800b284:	f04f 0c00 	mov.w	ip, #0
 800b288:	f104 0e14 	add.w	lr, r4, #20
 800b28c:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b290:	f8d9 1000 	ldr.w	r1, [r9]
 800b294:	fa1f fb82 	uxth.w	fp, r2
 800b298:	b289      	uxth	r1, r1
 800b29a:	fb0a 110b 	mla	r1, sl, fp, r1
 800b29e:	4461      	add	r1, ip
 800b2a0:	f8d9 c000 	ldr.w	ip, [r9]
 800b2a4:	0c12      	lsrs	r2, r2, #16
 800b2a6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800b2aa:	fb0a c202 	mla	r2, sl, r2, ip
 800b2ae:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b2b2:	b289      	uxth	r1, r1
 800b2b4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b2b8:	4577      	cmp	r7, lr
 800b2ba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b2be:	f849 1b04 	str.w	r1, [r9], #4
 800b2c2:	d8e3      	bhi.n	800b28c <__multiply+0xb0>
 800b2c4:	9a01      	ldr	r2, [sp, #4]
 800b2c6:	f845 c002 	str.w	ip, [r5, r2]
 800b2ca:	9a03      	ldr	r2, [sp, #12]
 800b2cc:	3304      	adds	r3, #4
 800b2ce:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b2d2:	f1b9 0f00 	cmp.w	r9, #0
 800b2d6:	d020      	beq.n	800b31a <__multiply+0x13e>
 800b2d8:	46ae      	mov	lr, r5
 800b2da:	f04f 0a00 	mov.w	sl, #0
 800b2de:	6829      	ldr	r1, [r5, #0]
 800b2e0:	f104 0c14 	add.w	ip, r4, #20
 800b2e4:	f8bc b000 	ldrh.w	fp, [ip]
 800b2e8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b2ec:	b289      	uxth	r1, r1
 800b2ee:	fb09 220b 	mla	r2, r9, fp, r2
 800b2f2:	4492      	add	sl, r2
 800b2f4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b2f8:	f84e 1b04 	str.w	r1, [lr], #4
 800b2fc:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b300:	f8be 1000 	ldrh.w	r1, [lr]
 800b304:	0c12      	lsrs	r2, r2, #16
 800b306:	fb09 1102 	mla	r1, r9, r2, r1
 800b30a:	4567      	cmp	r7, ip
 800b30c:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b310:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b314:	d8e6      	bhi.n	800b2e4 <__multiply+0x108>
 800b316:	9a01      	ldr	r2, [sp, #4]
 800b318:	50a9      	str	r1, [r5, r2]
 800b31a:	3504      	adds	r5, #4
 800b31c:	e79b      	b.n	800b256 <__multiply+0x7a>
 800b31e:	3e01      	subs	r6, #1
 800b320:	e79d      	b.n	800b25e <__multiply+0x82>
 800b322:	bf00      	nop
 800b324:	0800c9a0 	.word	0x0800c9a0
 800b328:	0800ca2c 	.word	0x0800ca2c

0800b32c <__pow5mult>:
 800b32c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b330:	4615      	mov	r5, r2
 800b332:	f012 0203 	ands.w	r2, r2, #3
 800b336:	4606      	mov	r6, r0
 800b338:	460f      	mov	r7, r1
 800b33a:	d007      	beq.n	800b34c <__pow5mult+0x20>
 800b33c:	4c25      	ldr	r4, [pc, #148]	; (800b3d4 <__pow5mult+0xa8>)
 800b33e:	3a01      	subs	r2, #1
 800b340:	2300      	movs	r3, #0
 800b342:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b346:	f7ff fe55 	bl	800aff4 <__multadd>
 800b34a:	4607      	mov	r7, r0
 800b34c:	10ad      	asrs	r5, r5, #2
 800b34e:	d03d      	beq.n	800b3cc <__pow5mult+0xa0>
 800b350:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b352:	b97c      	cbnz	r4, 800b374 <__pow5mult+0x48>
 800b354:	2010      	movs	r0, #16
 800b356:	f7fc fd7b 	bl	8007e50 <malloc>
 800b35a:	4602      	mov	r2, r0
 800b35c:	6270      	str	r0, [r6, #36]	; 0x24
 800b35e:	b928      	cbnz	r0, 800b36c <__pow5mult+0x40>
 800b360:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b364:	4b1c      	ldr	r3, [pc, #112]	; (800b3d8 <__pow5mult+0xac>)
 800b366:	481d      	ldr	r0, [pc, #116]	; (800b3dc <__pow5mult+0xb0>)
 800b368:	f000 fc1e 	bl	800bba8 <__assert_func>
 800b36c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b370:	6004      	str	r4, [r0, #0]
 800b372:	60c4      	str	r4, [r0, #12]
 800b374:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b378:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b37c:	b94c      	cbnz	r4, 800b392 <__pow5mult+0x66>
 800b37e:	f240 2171 	movw	r1, #625	; 0x271
 800b382:	4630      	mov	r0, r6
 800b384:	f7ff ff14 	bl	800b1b0 <__i2b>
 800b388:	2300      	movs	r3, #0
 800b38a:	4604      	mov	r4, r0
 800b38c:	f8c8 0008 	str.w	r0, [r8, #8]
 800b390:	6003      	str	r3, [r0, #0]
 800b392:	f04f 0900 	mov.w	r9, #0
 800b396:	07eb      	lsls	r3, r5, #31
 800b398:	d50a      	bpl.n	800b3b0 <__pow5mult+0x84>
 800b39a:	4639      	mov	r1, r7
 800b39c:	4622      	mov	r2, r4
 800b39e:	4630      	mov	r0, r6
 800b3a0:	f7ff ff1c 	bl	800b1dc <__multiply>
 800b3a4:	4680      	mov	r8, r0
 800b3a6:	4639      	mov	r1, r7
 800b3a8:	4630      	mov	r0, r6
 800b3aa:	f7ff fe01 	bl	800afb0 <_Bfree>
 800b3ae:	4647      	mov	r7, r8
 800b3b0:	106d      	asrs	r5, r5, #1
 800b3b2:	d00b      	beq.n	800b3cc <__pow5mult+0xa0>
 800b3b4:	6820      	ldr	r0, [r4, #0]
 800b3b6:	b938      	cbnz	r0, 800b3c8 <__pow5mult+0x9c>
 800b3b8:	4622      	mov	r2, r4
 800b3ba:	4621      	mov	r1, r4
 800b3bc:	4630      	mov	r0, r6
 800b3be:	f7ff ff0d 	bl	800b1dc <__multiply>
 800b3c2:	6020      	str	r0, [r4, #0]
 800b3c4:	f8c0 9000 	str.w	r9, [r0]
 800b3c8:	4604      	mov	r4, r0
 800b3ca:	e7e4      	b.n	800b396 <__pow5mult+0x6a>
 800b3cc:	4638      	mov	r0, r7
 800b3ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b3d2:	bf00      	nop
 800b3d4:	0800cb78 	.word	0x0800cb78
 800b3d8:	0800c92e 	.word	0x0800c92e
 800b3dc:	0800ca2c 	.word	0x0800ca2c

0800b3e0 <__lshift>:
 800b3e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b3e4:	460c      	mov	r4, r1
 800b3e6:	4607      	mov	r7, r0
 800b3e8:	4691      	mov	r9, r2
 800b3ea:	6923      	ldr	r3, [r4, #16]
 800b3ec:	6849      	ldr	r1, [r1, #4]
 800b3ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b3f2:	68a3      	ldr	r3, [r4, #8]
 800b3f4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b3f8:	f108 0601 	add.w	r6, r8, #1
 800b3fc:	42b3      	cmp	r3, r6
 800b3fe:	db0b      	blt.n	800b418 <__lshift+0x38>
 800b400:	4638      	mov	r0, r7
 800b402:	f7ff fd95 	bl	800af30 <_Balloc>
 800b406:	4605      	mov	r5, r0
 800b408:	b948      	cbnz	r0, 800b41e <__lshift+0x3e>
 800b40a:	4602      	mov	r2, r0
 800b40c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b410:	4b29      	ldr	r3, [pc, #164]	; (800b4b8 <__lshift+0xd8>)
 800b412:	482a      	ldr	r0, [pc, #168]	; (800b4bc <__lshift+0xdc>)
 800b414:	f000 fbc8 	bl	800bba8 <__assert_func>
 800b418:	3101      	adds	r1, #1
 800b41a:	005b      	lsls	r3, r3, #1
 800b41c:	e7ee      	b.n	800b3fc <__lshift+0x1c>
 800b41e:	2300      	movs	r3, #0
 800b420:	f100 0114 	add.w	r1, r0, #20
 800b424:	f100 0210 	add.w	r2, r0, #16
 800b428:	4618      	mov	r0, r3
 800b42a:	4553      	cmp	r3, sl
 800b42c:	db37      	blt.n	800b49e <__lshift+0xbe>
 800b42e:	6920      	ldr	r0, [r4, #16]
 800b430:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b434:	f104 0314 	add.w	r3, r4, #20
 800b438:	f019 091f 	ands.w	r9, r9, #31
 800b43c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b440:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b444:	d02f      	beq.n	800b4a6 <__lshift+0xc6>
 800b446:	468a      	mov	sl, r1
 800b448:	f04f 0c00 	mov.w	ip, #0
 800b44c:	f1c9 0e20 	rsb	lr, r9, #32
 800b450:	681a      	ldr	r2, [r3, #0]
 800b452:	fa02 f209 	lsl.w	r2, r2, r9
 800b456:	ea42 020c 	orr.w	r2, r2, ip
 800b45a:	f84a 2b04 	str.w	r2, [sl], #4
 800b45e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b462:	4298      	cmp	r0, r3
 800b464:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b468:	d8f2      	bhi.n	800b450 <__lshift+0x70>
 800b46a:	1b03      	subs	r3, r0, r4
 800b46c:	3b15      	subs	r3, #21
 800b46e:	f023 0303 	bic.w	r3, r3, #3
 800b472:	3304      	adds	r3, #4
 800b474:	f104 0215 	add.w	r2, r4, #21
 800b478:	4290      	cmp	r0, r2
 800b47a:	bf38      	it	cc
 800b47c:	2304      	movcc	r3, #4
 800b47e:	f841 c003 	str.w	ip, [r1, r3]
 800b482:	f1bc 0f00 	cmp.w	ip, #0
 800b486:	d001      	beq.n	800b48c <__lshift+0xac>
 800b488:	f108 0602 	add.w	r6, r8, #2
 800b48c:	3e01      	subs	r6, #1
 800b48e:	4638      	mov	r0, r7
 800b490:	4621      	mov	r1, r4
 800b492:	612e      	str	r6, [r5, #16]
 800b494:	f7ff fd8c 	bl	800afb0 <_Bfree>
 800b498:	4628      	mov	r0, r5
 800b49a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b49e:	f842 0f04 	str.w	r0, [r2, #4]!
 800b4a2:	3301      	adds	r3, #1
 800b4a4:	e7c1      	b.n	800b42a <__lshift+0x4a>
 800b4a6:	3904      	subs	r1, #4
 800b4a8:	f853 2b04 	ldr.w	r2, [r3], #4
 800b4ac:	4298      	cmp	r0, r3
 800b4ae:	f841 2f04 	str.w	r2, [r1, #4]!
 800b4b2:	d8f9      	bhi.n	800b4a8 <__lshift+0xc8>
 800b4b4:	e7ea      	b.n	800b48c <__lshift+0xac>
 800b4b6:	bf00      	nop
 800b4b8:	0800c9a0 	.word	0x0800c9a0
 800b4bc:	0800ca2c 	.word	0x0800ca2c

0800b4c0 <__mcmp>:
 800b4c0:	4603      	mov	r3, r0
 800b4c2:	690a      	ldr	r2, [r1, #16]
 800b4c4:	6900      	ldr	r0, [r0, #16]
 800b4c6:	b530      	push	{r4, r5, lr}
 800b4c8:	1a80      	subs	r0, r0, r2
 800b4ca:	d10d      	bne.n	800b4e8 <__mcmp+0x28>
 800b4cc:	3314      	adds	r3, #20
 800b4ce:	3114      	adds	r1, #20
 800b4d0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b4d4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b4d8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b4dc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b4e0:	4295      	cmp	r5, r2
 800b4e2:	d002      	beq.n	800b4ea <__mcmp+0x2a>
 800b4e4:	d304      	bcc.n	800b4f0 <__mcmp+0x30>
 800b4e6:	2001      	movs	r0, #1
 800b4e8:	bd30      	pop	{r4, r5, pc}
 800b4ea:	42a3      	cmp	r3, r4
 800b4ec:	d3f4      	bcc.n	800b4d8 <__mcmp+0x18>
 800b4ee:	e7fb      	b.n	800b4e8 <__mcmp+0x28>
 800b4f0:	f04f 30ff 	mov.w	r0, #4294967295
 800b4f4:	e7f8      	b.n	800b4e8 <__mcmp+0x28>
	...

0800b4f8 <__mdiff>:
 800b4f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4fc:	460d      	mov	r5, r1
 800b4fe:	4607      	mov	r7, r0
 800b500:	4611      	mov	r1, r2
 800b502:	4628      	mov	r0, r5
 800b504:	4614      	mov	r4, r2
 800b506:	f7ff ffdb 	bl	800b4c0 <__mcmp>
 800b50a:	1e06      	subs	r6, r0, #0
 800b50c:	d111      	bne.n	800b532 <__mdiff+0x3a>
 800b50e:	4631      	mov	r1, r6
 800b510:	4638      	mov	r0, r7
 800b512:	f7ff fd0d 	bl	800af30 <_Balloc>
 800b516:	4602      	mov	r2, r0
 800b518:	b928      	cbnz	r0, 800b526 <__mdiff+0x2e>
 800b51a:	f240 2132 	movw	r1, #562	; 0x232
 800b51e:	4b3a      	ldr	r3, [pc, #232]	; (800b608 <__mdiff+0x110>)
 800b520:	483a      	ldr	r0, [pc, #232]	; (800b60c <__mdiff+0x114>)
 800b522:	f000 fb41 	bl	800bba8 <__assert_func>
 800b526:	2301      	movs	r3, #1
 800b528:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800b52c:	4610      	mov	r0, r2
 800b52e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b532:	bfa4      	itt	ge
 800b534:	4623      	movge	r3, r4
 800b536:	462c      	movge	r4, r5
 800b538:	4638      	mov	r0, r7
 800b53a:	6861      	ldr	r1, [r4, #4]
 800b53c:	bfa6      	itte	ge
 800b53e:	461d      	movge	r5, r3
 800b540:	2600      	movge	r6, #0
 800b542:	2601      	movlt	r6, #1
 800b544:	f7ff fcf4 	bl	800af30 <_Balloc>
 800b548:	4602      	mov	r2, r0
 800b54a:	b918      	cbnz	r0, 800b554 <__mdiff+0x5c>
 800b54c:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b550:	4b2d      	ldr	r3, [pc, #180]	; (800b608 <__mdiff+0x110>)
 800b552:	e7e5      	b.n	800b520 <__mdiff+0x28>
 800b554:	f102 0814 	add.w	r8, r2, #20
 800b558:	46c2      	mov	sl, r8
 800b55a:	f04f 0c00 	mov.w	ip, #0
 800b55e:	6927      	ldr	r7, [r4, #16]
 800b560:	60c6      	str	r6, [r0, #12]
 800b562:	692e      	ldr	r6, [r5, #16]
 800b564:	f104 0014 	add.w	r0, r4, #20
 800b568:	f105 0914 	add.w	r9, r5, #20
 800b56c:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800b570:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b574:	3410      	adds	r4, #16
 800b576:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800b57a:	f859 3b04 	ldr.w	r3, [r9], #4
 800b57e:	fa1f f18b 	uxth.w	r1, fp
 800b582:	448c      	add	ip, r1
 800b584:	b299      	uxth	r1, r3
 800b586:	0c1b      	lsrs	r3, r3, #16
 800b588:	ebac 0101 	sub.w	r1, ip, r1
 800b58c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b590:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800b594:	b289      	uxth	r1, r1
 800b596:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800b59a:	454e      	cmp	r6, r9
 800b59c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800b5a0:	f84a 3b04 	str.w	r3, [sl], #4
 800b5a4:	d8e7      	bhi.n	800b576 <__mdiff+0x7e>
 800b5a6:	1b73      	subs	r3, r6, r5
 800b5a8:	3b15      	subs	r3, #21
 800b5aa:	f023 0303 	bic.w	r3, r3, #3
 800b5ae:	3515      	adds	r5, #21
 800b5b0:	3304      	adds	r3, #4
 800b5b2:	42ae      	cmp	r6, r5
 800b5b4:	bf38      	it	cc
 800b5b6:	2304      	movcc	r3, #4
 800b5b8:	4418      	add	r0, r3
 800b5ba:	4443      	add	r3, r8
 800b5bc:	461e      	mov	r6, r3
 800b5be:	4605      	mov	r5, r0
 800b5c0:	4575      	cmp	r5, lr
 800b5c2:	d30e      	bcc.n	800b5e2 <__mdiff+0xea>
 800b5c4:	f10e 0103 	add.w	r1, lr, #3
 800b5c8:	1a09      	subs	r1, r1, r0
 800b5ca:	f021 0103 	bic.w	r1, r1, #3
 800b5ce:	3803      	subs	r0, #3
 800b5d0:	4586      	cmp	lr, r0
 800b5d2:	bf38      	it	cc
 800b5d4:	2100      	movcc	r1, #0
 800b5d6:	4419      	add	r1, r3
 800b5d8:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800b5dc:	b18b      	cbz	r3, 800b602 <__mdiff+0x10a>
 800b5de:	6117      	str	r7, [r2, #16]
 800b5e0:	e7a4      	b.n	800b52c <__mdiff+0x34>
 800b5e2:	f855 8b04 	ldr.w	r8, [r5], #4
 800b5e6:	fa1f f188 	uxth.w	r1, r8
 800b5ea:	4461      	add	r1, ip
 800b5ec:	140c      	asrs	r4, r1, #16
 800b5ee:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b5f2:	b289      	uxth	r1, r1
 800b5f4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b5f8:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800b5fc:	f846 1b04 	str.w	r1, [r6], #4
 800b600:	e7de      	b.n	800b5c0 <__mdiff+0xc8>
 800b602:	3f01      	subs	r7, #1
 800b604:	e7e8      	b.n	800b5d8 <__mdiff+0xe0>
 800b606:	bf00      	nop
 800b608:	0800c9a0 	.word	0x0800c9a0
 800b60c:	0800ca2c 	.word	0x0800ca2c

0800b610 <__ulp>:
 800b610:	4b11      	ldr	r3, [pc, #68]	; (800b658 <__ulp+0x48>)
 800b612:	400b      	ands	r3, r1
 800b614:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800b618:	2b00      	cmp	r3, #0
 800b61a:	dd02      	ble.n	800b622 <__ulp+0x12>
 800b61c:	2000      	movs	r0, #0
 800b61e:	4619      	mov	r1, r3
 800b620:	4770      	bx	lr
 800b622:	425b      	negs	r3, r3
 800b624:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800b628:	f04f 0000 	mov.w	r0, #0
 800b62c:	f04f 0100 	mov.w	r1, #0
 800b630:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b634:	da04      	bge.n	800b640 <__ulp+0x30>
 800b636:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b63a:	fa43 f102 	asr.w	r1, r3, r2
 800b63e:	4770      	bx	lr
 800b640:	f1a2 0314 	sub.w	r3, r2, #20
 800b644:	2b1e      	cmp	r3, #30
 800b646:	bfd6      	itet	le
 800b648:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800b64c:	2301      	movgt	r3, #1
 800b64e:	fa22 f303 	lsrle.w	r3, r2, r3
 800b652:	4618      	mov	r0, r3
 800b654:	4770      	bx	lr
 800b656:	bf00      	nop
 800b658:	7ff00000 	.word	0x7ff00000

0800b65c <__b2d>:
 800b65c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b660:	6907      	ldr	r7, [r0, #16]
 800b662:	f100 0914 	add.w	r9, r0, #20
 800b666:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800b66a:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800b66e:	f1a7 0804 	sub.w	r8, r7, #4
 800b672:	4630      	mov	r0, r6
 800b674:	f7ff fd4e 	bl	800b114 <__hi0bits>
 800b678:	f1c0 0320 	rsb	r3, r0, #32
 800b67c:	280a      	cmp	r0, #10
 800b67e:	600b      	str	r3, [r1, #0]
 800b680:	491f      	ldr	r1, [pc, #124]	; (800b700 <__b2d+0xa4>)
 800b682:	dc17      	bgt.n	800b6b4 <__b2d+0x58>
 800b684:	45c1      	cmp	r9, r8
 800b686:	bf28      	it	cs
 800b688:	2200      	movcs	r2, #0
 800b68a:	f1c0 0c0b 	rsb	ip, r0, #11
 800b68e:	fa26 f30c 	lsr.w	r3, r6, ip
 800b692:	bf38      	it	cc
 800b694:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800b698:	ea43 0501 	orr.w	r5, r3, r1
 800b69c:	f100 0315 	add.w	r3, r0, #21
 800b6a0:	fa06 f303 	lsl.w	r3, r6, r3
 800b6a4:	fa22 f20c 	lsr.w	r2, r2, ip
 800b6a8:	ea43 0402 	orr.w	r4, r3, r2
 800b6ac:	4620      	mov	r0, r4
 800b6ae:	4629      	mov	r1, r5
 800b6b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b6b4:	45c1      	cmp	r9, r8
 800b6b6:	bf2e      	itee	cs
 800b6b8:	2200      	movcs	r2, #0
 800b6ba:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800b6be:	f1a7 0808 	subcc.w	r8, r7, #8
 800b6c2:	f1b0 030b 	subs.w	r3, r0, #11
 800b6c6:	d016      	beq.n	800b6f6 <__b2d+0x9a>
 800b6c8:	f1c3 0720 	rsb	r7, r3, #32
 800b6cc:	fa22 f107 	lsr.w	r1, r2, r7
 800b6d0:	45c8      	cmp	r8, r9
 800b6d2:	fa06 f603 	lsl.w	r6, r6, r3
 800b6d6:	ea46 0601 	orr.w	r6, r6, r1
 800b6da:	bf94      	ite	ls
 800b6dc:	2100      	movls	r1, #0
 800b6de:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800b6e2:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800b6e6:	fa02 f003 	lsl.w	r0, r2, r3
 800b6ea:	40f9      	lsrs	r1, r7
 800b6ec:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b6f0:	ea40 0401 	orr.w	r4, r0, r1
 800b6f4:	e7da      	b.n	800b6ac <__b2d+0x50>
 800b6f6:	4614      	mov	r4, r2
 800b6f8:	ea46 0501 	orr.w	r5, r6, r1
 800b6fc:	e7d6      	b.n	800b6ac <__b2d+0x50>
 800b6fe:	bf00      	nop
 800b700:	3ff00000 	.word	0x3ff00000

0800b704 <__d2b>:
 800b704:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800b708:	2101      	movs	r1, #1
 800b70a:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800b70e:	4690      	mov	r8, r2
 800b710:	461d      	mov	r5, r3
 800b712:	f7ff fc0d 	bl	800af30 <_Balloc>
 800b716:	4604      	mov	r4, r0
 800b718:	b930      	cbnz	r0, 800b728 <__d2b+0x24>
 800b71a:	4602      	mov	r2, r0
 800b71c:	f240 310a 	movw	r1, #778	; 0x30a
 800b720:	4b24      	ldr	r3, [pc, #144]	; (800b7b4 <__d2b+0xb0>)
 800b722:	4825      	ldr	r0, [pc, #148]	; (800b7b8 <__d2b+0xb4>)
 800b724:	f000 fa40 	bl	800bba8 <__assert_func>
 800b728:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800b72c:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800b730:	bb2d      	cbnz	r5, 800b77e <__d2b+0x7a>
 800b732:	9301      	str	r3, [sp, #4]
 800b734:	f1b8 0300 	subs.w	r3, r8, #0
 800b738:	d026      	beq.n	800b788 <__d2b+0x84>
 800b73a:	4668      	mov	r0, sp
 800b73c:	9300      	str	r3, [sp, #0]
 800b73e:	f7ff fd09 	bl	800b154 <__lo0bits>
 800b742:	9900      	ldr	r1, [sp, #0]
 800b744:	b1f0      	cbz	r0, 800b784 <__d2b+0x80>
 800b746:	9a01      	ldr	r2, [sp, #4]
 800b748:	f1c0 0320 	rsb	r3, r0, #32
 800b74c:	fa02 f303 	lsl.w	r3, r2, r3
 800b750:	430b      	orrs	r3, r1
 800b752:	40c2      	lsrs	r2, r0
 800b754:	6163      	str	r3, [r4, #20]
 800b756:	9201      	str	r2, [sp, #4]
 800b758:	9b01      	ldr	r3, [sp, #4]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	bf14      	ite	ne
 800b75e:	2102      	movne	r1, #2
 800b760:	2101      	moveq	r1, #1
 800b762:	61a3      	str	r3, [r4, #24]
 800b764:	6121      	str	r1, [r4, #16]
 800b766:	b1c5      	cbz	r5, 800b79a <__d2b+0x96>
 800b768:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b76c:	4405      	add	r5, r0
 800b76e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b772:	603d      	str	r5, [r7, #0]
 800b774:	6030      	str	r0, [r6, #0]
 800b776:	4620      	mov	r0, r4
 800b778:	b002      	add	sp, #8
 800b77a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b77e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b782:	e7d6      	b.n	800b732 <__d2b+0x2e>
 800b784:	6161      	str	r1, [r4, #20]
 800b786:	e7e7      	b.n	800b758 <__d2b+0x54>
 800b788:	a801      	add	r0, sp, #4
 800b78a:	f7ff fce3 	bl	800b154 <__lo0bits>
 800b78e:	2101      	movs	r1, #1
 800b790:	9b01      	ldr	r3, [sp, #4]
 800b792:	6121      	str	r1, [r4, #16]
 800b794:	6163      	str	r3, [r4, #20]
 800b796:	3020      	adds	r0, #32
 800b798:	e7e5      	b.n	800b766 <__d2b+0x62>
 800b79a:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800b79e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b7a2:	6038      	str	r0, [r7, #0]
 800b7a4:	6918      	ldr	r0, [r3, #16]
 800b7a6:	f7ff fcb5 	bl	800b114 <__hi0bits>
 800b7aa:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800b7ae:	6031      	str	r1, [r6, #0]
 800b7b0:	e7e1      	b.n	800b776 <__d2b+0x72>
 800b7b2:	bf00      	nop
 800b7b4:	0800c9a0 	.word	0x0800c9a0
 800b7b8:	0800ca2c 	.word	0x0800ca2c

0800b7bc <__ratio>:
 800b7bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7c0:	4688      	mov	r8, r1
 800b7c2:	4669      	mov	r1, sp
 800b7c4:	4681      	mov	r9, r0
 800b7c6:	f7ff ff49 	bl	800b65c <__b2d>
 800b7ca:	460f      	mov	r7, r1
 800b7cc:	4604      	mov	r4, r0
 800b7ce:	460d      	mov	r5, r1
 800b7d0:	4640      	mov	r0, r8
 800b7d2:	a901      	add	r1, sp, #4
 800b7d4:	f7ff ff42 	bl	800b65c <__b2d>
 800b7d8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b7dc:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b7e0:	468b      	mov	fp, r1
 800b7e2:	eba3 0c02 	sub.w	ip, r3, r2
 800b7e6:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b7ea:	1a9b      	subs	r3, r3, r2
 800b7ec:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	bfd5      	itete	le
 800b7f4:	460a      	movle	r2, r1
 800b7f6:	462a      	movgt	r2, r5
 800b7f8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b7fc:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b800:	bfd8      	it	le
 800b802:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b806:	465b      	mov	r3, fp
 800b808:	4602      	mov	r2, r0
 800b80a:	4639      	mov	r1, r7
 800b80c:	4620      	mov	r0, r4
 800b80e:	f7f4 fff9 	bl	8000804 <__aeabi_ddiv>
 800b812:	b003      	add	sp, #12
 800b814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b818 <__copybits>:
 800b818:	3901      	subs	r1, #1
 800b81a:	b570      	push	{r4, r5, r6, lr}
 800b81c:	1149      	asrs	r1, r1, #5
 800b81e:	6914      	ldr	r4, [r2, #16]
 800b820:	3101      	adds	r1, #1
 800b822:	f102 0314 	add.w	r3, r2, #20
 800b826:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b82a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b82e:	1f05      	subs	r5, r0, #4
 800b830:	42a3      	cmp	r3, r4
 800b832:	d30c      	bcc.n	800b84e <__copybits+0x36>
 800b834:	1aa3      	subs	r3, r4, r2
 800b836:	3b11      	subs	r3, #17
 800b838:	f023 0303 	bic.w	r3, r3, #3
 800b83c:	3211      	adds	r2, #17
 800b83e:	42a2      	cmp	r2, r4
 800b840:	bf88      	it	hi
 800b842:	2300      	movhi	r3, #0
 800b844:	4418      	add	r0, r3
 800b846:	2300      	movs	r3, #0
 800b848:	4288      	cmp	r0, r1
 800b84a:	d305      	bcc.n	800b858 <__copybits+0x40>
 800b84c:	bd70      	pop	{r4, r5, r6, pc}
 800b84e:	f853 6b04 	ldr.w	r6, [r3], #4
 800b852:	f845 6f04 	str.w	r6, [r5, #4]!
 800b856:	e7eb      	b.n	800b830 <__copybits+0x18>
 800b858:	f840 3b04 	str.w	r3, [r0], #4
 800b85c:	e7f4      	b.n	800b848 <__copybits+0x30>

0800b85e <__any_on>:
 800b85e:	f100 0214 	add.w	r2, r0, #20
 800b862:	6900      	ldr	r0, [r0, #16]
 800b864:	114b      	asrs	r3, r1, #5
 800b866:	4298      	cmp	r0, r3
 800b868:	b510      	push	{r4, lr}
 800b86a:	db11      	blt.n	800b890 <__any_on+0x32>
 800b86c:	dd0a      	ble.n	800b884 <__any_on+0x26>
 800b86e:	f011 011f 	ands.w	r1, r1, #31
 800b872:	d007      	beq.n	800b884 <__any_on+0x26>
 800b874:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b878:	fa24 f001 	lsr.w	r0, r4, r1
 800b87c:	fa00 f101 	lsl.w	r1, r0, r1
 800b880:	428c      	cmp	r4, r1
 800b882:	d10b      	bne.n	800b89c <__any_on+0x3e>
 800b884:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b888:	4293      	cmp	r3, r2
 800b88a:	d803      	bhi.n	800b894 <__any_on+0x36>
 800b88c:	2000      	movs	r0, #0
 800b88e:	bd10      	pop	{r4, pc}
 800b890:	4603      	mov	r3, r0
 800b892:	e7f7      	b.n	800b884 <__any_on+0x26>
 800b894:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b898:	2900      	cmp	r1, #0
 800b89a:	d0f5      	beq.n	800b888 <__any_on+0x2a>
 800b89c:	2001      	movs	r0, #1
 800b89e:	e7f6      	b.n	800b88e <__any_on+0x30>

0800b8a0 <__ssputs_r>:
 800b8a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b8a4:	688e      	ldr	r6, [r1, #8]
 800b8a6:	4682      	mov	sl, r0
 800b8a8:	429e      	cmp	r6, r3
 800b8aa:	460c      	mov	r4, r1
 800b8ac:	4690      	mov	r8, r2
 800b8ae:	461f      	mov	r7, r3
 800b8b0:	d838      	bhi.n	800b924 <__ssputs_r+0x84>
 800b8b2:	898a      	ldrh	r2, [r1, #12]
 800b8b4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b8b8:	d032      	beq.n	800b920 <__ssputs_r+0x80>
 800b8ba:	6825      	ldr	r5, [r4, #0]
 800b8bc:	6909      	ldr	r1, [r1, #16]
 800b8be:	3301      	adds	r3, #1
 800b8c0:	eba5 0901 	sub.w	r9, r5, r1
 800b8c4:	6965      	ldr	r5, [r4, #20]
 800b8c6:	444b      	add	r3, r9
 800b8c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b8cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b8d0:	106d      	asrs	r5, r5, #1
 800b8d2:	429d      	cmp	r5, r3
 800b8d4:	bf38      	it	cc
 800b8d6:	461d      	movcc	r5, r3
 800b8d8:	0553      	lsls	r3, r2, #21
 800b8da:	d531      	bpl.n	800b940 <__ssputs_r+0xa0>
 800b8dc:	4629      	mov	r1, r5
 800b8de:	f7fc fb51 	bl	8007f84 <_malloc_r>
 800b8e2:	4606      	mov	r6, r0
 800b8e4:	b950      	cbnz	r0, 800b8fc <__ssputs_r+0x5c>
 800b8e6:	230c      	movs	r3, #12
 800b8e8:	f04f 30ff 	mov.w	r0, #4294967295
 800b8ec:	f8ca 3000 	str.w	r3, [sl]
 800b8f0:	89a3      	ldrh	r3, [r4, #12]
 800b8f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b8f6:	81a3      	strh	r3, [r4, #12]
 800b8f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8fc:	464a      	mov	r2, r9
 800b8fe:	6921      	ldr	r1, [r4, #16]
 800b900:	f7fc faae 	bl	8007e60 <memcpy>
 800b904:	89a3      	ldrh	r3, [r4, #12]
 800b906:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b90a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b90e:	81a3      	strh	r3, [r4, #12]
 800b910:	6126      	str	r6, [r4, #16]
 800b912:	444e      	add	r6, r9
 800b914:	6026      	str	r6, [r4, #0]
 800b916:	463e      	mov	r6, r7
 800b918:	6165      	str	r5, [r4, #20]
 800b91a:	eba5 0509 	sub.w	r5, r5, r9
 800b91e:	60a5      	str	r5, [r4, #8]
 800b920:	42be      	cmp	r6, r7
 800b922:	d900      	bls.n	800b926 <__ssputs_r+0x86>
 800b924:	463e      	mov	r6, r7
 800b926:	4632      	mov	r2, r6
 800b928:	4641      	mov	r1, r8
 800b92a:	6820      	ldr	r0, [r4, #0]
 800b92c:	f000 f96f 	bl	800bc0e <memmove>
 800b930:	68a3      	ldr	r3, [r4, #8]
 800b932:	2000      	movs	r0, #0
 800b934:	1b9b      	subs	r3, r3, r6
 800b936:	60a3      	str	r3, [r4, #8]
 800b938:	6823      	ldr	r3, [r4, #0]
 800b93a:	4433      	add	r3, r6
 800b93c:	6023      	str	r3, [r4, #0]
 800b93e:	e7db      	b.n	800b8f8 <__ssputs_r+0x58>
 800b940:	462a      	mov	r2, r5
 800b942:	f000 f97e 	bl	800bc42 <_realloc_r>
 800b946:	4606      	mov	r6, r0
 800b948:	2800      	cmp	r0, #0
 800b94a:	d1e1      	bne.n	800b910 <__ssputs_r+0x70>
 800b94c:	4650      	mov	r0, sl
 800b94e:	6921      	ldr	r1, [r4, #16]
 800b950:	f7fc fab0 	bl	8007eb4 <_free_r>
 800b954:	e7c7      	b.n	800b8e6 <__ssputs_r+0x46>
	...

0800b958 <_svfiprintf_r>:
 800b958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b95c:	4698      	mov	r8, r3
 800b95e:	898b      	ldrh	r3, [r1, #12]
 800b960:	4607      	mov	r7, r0
 800b962:	061b      	lsls	r3, r3, #24
 800b964:	460d      	mov	r5, r1
 800b966:	4614      	mov	r4, r2
 800b968:	b09d      	sub	sp, #116	; 0x74
 800b96a:	d50e      	bpl.n	800b98a <_svfiprintf_r+0x32>
 800b96c:	690b      	ldr	r3, [r1, #16]
 800b96e:	b963      	cbnz	r3, 800b98a <_svfiprintf_r+0x32>
 800b970:	2140      	movs	r1, #64	; 0x40
 800b972:	f7fc fb07 	bl	8007f84 <_malloc_r>
 800b976:	6028      	str	r0, [r5, #0]
 800b978:	6128      	str	r0, [r5, #16]
 800b97a:	b920      	cbnz	r0, 800b986 <_svfiprintf_r+0x2e>
 800b97c:	230c      	movs	r3, #12
 800b97e:	603b      	str	r3, [r7, #0]
 800b980:	f04f 30ff 	mov.w	r0, #4294967295
 800b984:	e0d1      	b.n	800bb2a <_svfiprintf_r+0x1d2>
 800b986:	2340      	movs	r3, #64	; 0x40
 800b988:	616b      	str	r3, [r5, #20]
 800b98a:	2300      	movs	r3, #0
 800b98c:	9309      	str	r3, [sp, #36]	; 0x24
 800b98e:	2320      	movs	r3, #32
 800b990:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b994:	2330      	movs	r3, #48	; 0x30
 800b996:	f04f 0901 	mov.w	r9, #1
 800b99a:	f8cd 800c 	str.w	r8, [sp, #12]
 800b99e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800bb44 <_svfiprintf_r+0x1ec>
 800b9a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b9a6:	4623      	mov	r3, r4
 800b9a8:	469a      	mov	sl, r3
 800b9aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b9ae:	b10a      	cbz	r2, 800b9b4 <_svfiprintf_r+0x5c>
 800b9b0:	2a25      	cmp	r2, #37	; 0x25
 800b9b2:	d1f9      	bne.n	800b9a8 <_svfiprintf_r+0x50>
 800b9b4:	ebba 0b04 	subs.w	fp, sl, r4
 800b9b8:	d00b      	beq.n	800b9d2 <_svfiprintf_r+0x7a>
 800b9ba:	465b      	mov	r3, fp
 800b9bc:	4622      	mov	r2, r4
 800b9be:	4629      	mov	r1, r5
 800b9c0:	4638      	mov	r0, r7
 800b9c2:	f7ff ff6d 	bl	800b8a0 <__ssputs_r>
 800b9c6:	3001      	adds	r0, #1
 800b9c8:	f000 80aa 	beq.w	800bb20 <_svfiprintf_r+0x1c8>
 800b9cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b9ce:	445a      	add	r2, fp
 800b9d0:	9209      	str	r2, [sp, #36]	; 0x24
 800b9d2:	f89a 3000 	ldrb.w	r3, [sl]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	f000 80a2 	beq.w	800bb20 <_svfiprintf_r+0x1c8>
 800b9dc:	2300      	movs	r3, #0
 800b9de:	f04f 32ff 	mov.w	r2, #4294967295
 800b9e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b9e6:	f10a 0a01 	add.w	sl, sl, #1
 800b9ea:	9304      	str	r3, [sp, #16]
 800b9ec:	9307      	str	r3, [sp, #28]
 800b9ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b9f2:	931a      	str	r3, [sp, #104]	; 0x68
 800b9f4:	4654      	mov	r4, sl
 800b9f6:	2205      	movs	r2, #5
 800b9f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9fc:	4851      	ldr	r0, [pc, #324]	; (800bb44 <_svfiprintf_r+0x1ec>)
 800b9fe:	f7ff fa7d 	bl	800aefc <memchr>
 800ba02:	9a04      	ldr	r2, [sp, #16]
 800ba04:	b9d8      	cbnz	r0, 800ba3e <_svfiprintf_r+0xe6>
 800ba06:	06d0      	lsls	r0, r2, #27
 800ba08:	bf44      	itt	mi
 800ba0a:	2320      	movmi	r3, #32
 800ba0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba10:	0711      	lsls	r1, r2, #28
 800ba12:	bf44      	itt	mi
 800ba14:	232b      	movmi	r3, #43	; 0x2b
 800ba16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba1a:	f89a 3000 	ldrb.w	r3, [sl]
 800ba1e:	2b2a      	cmp	r3, #42	; 0x2a
 800ba20:	d015      	beq.n	800ba4e <_svfiprintf_r+0xf6>
 800ba22:	4654      	mov	r4, sl
 800ba24:	2000      	movs	r0, #0
 800ba26:	f04f 0c0a 	mov.w	ip, #10
 800ba2a:	9a07      	ldr	r2, [sp, #28]
 800ba2c:	4621      	mov	r1, r4
 800ba2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ba32:	3b30      	subs	r3, #48	; 0x30
 800ba34:	2b09      	cmp	r3, #9
 800ba36:	d94e      	bls.n	800bad6 <_svfiprintf_r+0x17e>
 800ba38:	b1b0      	cbz	r0, 800ba68 <_svfiprintf_r+0x110>
 800ba3a:	9207      	str	r2, [sp, #28]
 800ba3c:	e014      	b.n	800ba68 <_svfiprintf_r+0x110>
 800ba3e:	eba0 0308 	sub.w	r3, r0, r8
 800ba42:	fa09 f303 	lsl.w	r3, r9, r3
 800ba46:	4313      	orrs	r3, r2
 800ba48:	46a2      	mov	sl, r4
 800ba4a:	9304      	str	r3, [sp, #16]
 800ba4c:	e7d2      	b.n	800b9f4 <_svfiprintf_r+0x9c>
 800ba4e:	9b03      	ldr	r3, [sp, #12]
 800ba50:	1d19      	adds	r1, r3, #4
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	9103      	str	r1, [sp, #12]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	bfbb      	ittet	lt
 800ba5a:	425b      	neglt	r3, r3
 800ba5c:	f042 0202 	orrlt.w	r2, r2, #2
 800ba60:	9307      	strge	r3, [sp, #28]
 800ba62:	9307      	strlt	r3, [sp, #28]
 800ba64:	bfb8      	it	lt
 800ba66:	9204      	strlt	r2, [sp, #16]
 800ba68:	7823      	ldrb	r3, [r4, #0]
 800ba6a:	2b2e      	cmp	r3, #46	; 0x2e
 800ba6c:	d10c      	bne.n	800ba88 <_svfiprintf_r+0x130>
 800ba6e:	7863      	ldrb	r3, [r4, #1]
 800ba70:	2b2a      	cmp	r3, #42	; 0x2a
 800ba72:	d135      	bne.n	800bae0 <_svfiprintf_r+0x188>
 800ba74:	9b03      	ldr	r3, [sp, #12]
 800ba76:	3402      	adds	r4, #2
 800ba78:	1d1a      	adds	r2, r3, #4
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	9203      	str	r2, [sp, #12]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	bfb8      	it	lt
 800ba82:	f04f 33ff 	movlt.w	r3, #4294967295
 800ba86:	9305      	str	r3, [sp, #20]
 800ba88:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800bb48 <_svfiprintf_r+0x1f0>
 800ba8c:	2203      	movs	r2, #3
 800ba8e:	4650      	mov	r0, sl
 800ba90:	7821      	ldrb	r1, [r4, #0]
 800ba92:	f7ff fa33 	bl	800aefc <memchr>
 800ba96:	b140      	cbz	r0, 800baaa <_svfiprintf_r+0x152>
 800ba98:	2340      	movs	r3, #64	; 0x40
 800ba9a:	eba0 000a 	sub.w	r0, r0, sl
 800ba9e:	fa03 f000 	lsl.w	r0, r3, r0
 800baa2:	9b04      	ldr	r3, [sp, #16]
 800baa4:	3401      	adds	r4, #1
 800baa6:	4303      	orrs	r3, r0
 800baa8:	9304      	str	r3, [sp, #16]
 800baaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800baae:	2206      	movs	r2, #6
 800bab0:	4826      	ldr	r0, [pc, #152]	; (800bb4c <_svfiprintf_r+0x1f4>)
 800bab2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bab6:	f7ff fa21 	bl	800aefc <memchr>
 800baba:	2800      	cmp	r0, #0
 800babc:	d038      	beq.n	800bb30 <_svfiprintf_r+0x1d8>
 800babe:	4b24      	ldr	r3, [pc, #144]	; (800bb50 <_svfiprintf_r+0x1f8>)
 800bac0:	bb1b      	cbnz	r3, 800bb0a <_svfiprintf_r+0x1b2>
 800bac2:	9b03      	ldr	r3, [sp, #12]
 800bac4:	3307      	adds	r3, #7
 800bac6:	f023 0307 	bic.w	r3, r3, #7
 800baca:	3308      	adds	r3, #8
 800bacc:	9303      	str	r3, [sp, #12]
 800bace:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bad0:	4433      	add	r3, r6
 800bad2:	9309      	str	r3, [sp, #36]	; 0x24
 800bad4:	e767      	b.n	800b9a6 <_svfiprintf_r+0x4e>
 800bad6:	460c      	mov	r4, r1
 800bad8:	2001      	movs	r0, #1
 800bada:	fb0c 3202 	mla	r2, ip, r2, r3
 800bade:	e7a5      	b.n	800ba2c <_svfiprintf_r+0xd4>
 800bae0:	2300      	movs	r3, #0
 800bae2:	f04f 0c0a 	mov.w	ip, #10
 800bae6:	4619      	mov	r1, r3
 800bae8:	3401      	adds	r4, #1
 800baea:	9305      	str	r3, [sp, #20]
 800baec:	4620      	mov	r0, r4
 800baee:	f810 2b01 	ldrb.w	r2, [r0], #1
 800baf2:	3a30      	subs	r2, #48	; 0x30
 800baf4:	2a09      	cmp	r2, #9
 800baf6:	d903      	bls.n	800bb00 <_svfiprintf_r+0x1a8>
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d0c5      	beq.n	800ba88 <_svfiprintf_r+0x130>
 800bafc:	9105      	str	r1, [sp, #20]
 800bafe:	e7c3      	b.n	800ba88 <_svfiprintf_r+0x130>
 800bb00:	4604      	mov	r4, r0
 800bb02:	2301      	movs	r3, #1
 800bb04:	fb0c 2101 	mla	r1, ip, r1, r2
 800bb08:	e7f0      	b.n	800baec <_svfiprintf_r+0x194>
 800bb0a:	ab03      	add	r3, sp, #12
 800bb0c:	9300      	str	r3, [sp, #0]
 800bb0e:	462a      	mov	r2, r5
 800bb10:	4638      	mov	r0, r7
 800bb12:	4b10      	ldr	r3, [pc, #64]	; (800bb54 <_svfiprintf_r+0x1fc>)
 800bb14:	a904      	add	r1, sp, #16
 800bb16:	f7fc fb47 	bl	80081a8 <_printf_float>
 800bb1a:	1c42      	adds	r2, r0, #1
 800bb1c:	4606      	mov	r6, r0
 800bb1e:	d1d6      	bne.n	800bace <_svfiprintf_r+0x176>
 800bb20:	89ab      	ldrh	r3, [r5, #12]
 800bb22:	065b      	lsls	r3, r3, #25
 800bb24:	f53f af2c 	bmi.w	800b980 <_svfiprintf_r+0x28>
 800bb28:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bb2a:	b01d      	add	sp, #116	; 0x74
 800bb2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb30:	ab03      	add	r3, sp, #12
 800bb32:	9300      	str	r3, [sp, #0]
 800bb34:	462a      	mov	r2, r5
 800bb36:	4638      	mov	r0, r7
 800bb38:	4b06      	ldr	r3, [pc, #24]	; (800bb54 <_svfiprintf_r+0x1fc>)
 800bb3a:	a904      	add	r1, sp, #16
 800bb3c:	f7fc fdd0 	bl	80086e0 <_printf_i>
 800bb40:	e7eb      	b.n	800bb1a <_svfiprintf_r+0x1c2>
 800bb42:	bf00      	nop
 800bb44:	0800cb84 	.word	0x0800cb84
 800bb48:	0800cb8a 	.word	0x0800cb8a
 800bb4c:	0800cb8e 	.word	0x0800cb8e
 800bb50:	080081a9 	.word	0x080081a9
 800bb54:	0800b8a1 	.word	0x0800b8a1

0800bb58 <nan>:
 800bb58:	2000      	movs	r0, #0
 800bb5a:	4901      	ldr	r1, [pc, #4]	; (800bb60 <nan+0x8>)
 800bb5c:	4770      	bx	lr
 800bb5e:	bf00      	nop
 800bb60:	7ff80000 	.word	0x7ff80000

0800bb64 <strncmp>:
 800bb64:	4603      	mov	r3, r0
 800bb66:	b510      	push	{r4, lr}
 800bb68:	b172      	cbz	r2, 800bb88 <strncmp+0x24>
 800bb6a:	3901      	subs	r1, #1
 800bb6c:	1884      	adds	r4, r0, r2
 800bb6e:	f813 0b01 	ldrb.w	r0, [r3], #1
 800bb72:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800bb76:	4290      	cmp	r0, r2
 800bb78:	d101      	bne.n	800bb7e <strncmp+0x1a>
 800bb7a:	42a3      	cmp	r3, r4
 800bb7c:	d101      	bne.n	800bb82 <strncmp+0x1e>
 800bb7e:	1a80      	subs	r0, r0, r2
 800bb80:	bd10      	pop	{r4, pc}
 800bb82:	2800      	cmp	r0, #0
 800bb84:	d1f3      	bne.n	800bb6e <strncmp+0xa>
 800bb86:	e7fa      	b.n	800bb7e <strncmp+0x1a>
 800bb88:	4610      	mov	r0, r2
 800bb8a:	e7f9      	b.n	800bb80 <strncmp+0x1c>

0800bb8c <__ascii_wctomb>:
 800bb8c:	4603      	mov	r3, r0
 800bb8e:	4608      	mov	r0, r1
 800bb90:	b141      	cbz	r1, 800bba4 <__ascii_wctomb+0x18>
 800bb92:	2aff      	cmp	r2, #255	; 0xff
 800bb94:	d904      	bls.n	800bba0 <__ascii_wctomb+0x14>
 800bb96:	228a      	movs	r2, #138	; 0x8a
 800bb98:	f04f 30ff 	mov.w	r0, #4294967295
 800bb9c:	601a      	str	r2, [r3, #0]
 800bb9e:	4770      	bx	lr
 800bba0:	2001      	movs	r0, #1
 800bba2:	700a      	strb	r2, [r1, #0]
 800bba4:	4770      	bx	lr
	...

0800bba8 <__assert_func>:
 800bba8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bbaa:	4614      	mov	r4, r2
 800bbac:	461a      	mov	r2, r3
 800bbae:	4b09      	ldr	r3, [pc, #36]	; (800bbd4 <__assert_func+0x2c>)
 800bbb0:	4605      	mov	r5, r0
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	68d8      	ldr	r0, [r3, #12]
 800bbb6:	b14c      	cbz	r4, 800bbcc <__assert_func+0x24>
 800bbb8:	4b07      	ldr	r3, [pc, #28]	; (800bbd8 <__assert_func+0x30>)
 800bbba:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bbbe:	9100      	str	r1, [sp, #0]
 800bbc0:	462b      	mov	r3, r5
 800bbc2:	4906      	ldr	r1, [pc, #24]	; (800bbdc <__assert_func+0x34>)
 800bbc4:	f000 f80e 	bl	800bbe4 <fiprintf>
 800bbc8:	f000 fa82 	bl	800c0d0 <abort>
 800bbcc:	4b04      	ldr	r3, [pc, #16]	; (800bbe0 <__assert_func+0x38>)
 800bbce:	461c      	mov	r4, r3
 800bbd0:	e7f3      	b.n	800bbba <__assert_func+0x12>
 800bbd2:	bf00      	nop
 800bbd4:	20000048 	.word	0x20000048
 800bbd8:	0800cb95 	.word	0x0800cb95
 800bbdc:	0800cba2 	.word	0x0800cba2
 800bbe0:	0800cbd0 	.word	0x0800cbd0

0800bbe4 <fiprintf>:
 800bbe4:	b40e      	push	{r1, r2, r3}
 800bbe6:	b503      	push	{r0, r1, lr}
 800bbe8:	4601      	mov	r1, r0
 800bbea:	ab03      	add	r3, sp, #12
 800bbec:	4805      	ldr	r0, [pc, #20]	; (800bc04 <fiprintf+0x20>)
 800bbee:	f853 2b04 	ldr.w	r2, [r3], #4
 800bbf2:	6800      	ldr	r0, [r0, #0]
 800bbf4:	9301      	str	r3, [sp, #4]
 800bbf6:	f000 f87b 	bl	800bcf0 <_vfiprintf_r>
 800bbfa:	b002      	add	sp, #8
 800bbfc:	f85d eb04 	ldr.w	lr, [sp], #4
 800bc00:	b003      	add	sp, #12
 800bc02:	4770      	bx	lr
 800bc04:	20000048 	.word	0x20000048

0800bc08 <__retarget_lock_init_recursive>:
 800bc08:	4770      	bx	lr

0800bc0a <__retarget_lock_acquire_recursive>:
 800bc0a:	4770      	bx	lr

0800bc0c <__retarget_lock_release_recursive>:
 800bc0c:	4770      	bx	lr

0800bc0e <memmove>:
 800bc0e:	4288      	cmp	r0, r1
 800bc10:	b510      	push	{r4, lr}
 800bc12:	eb01 0402 	add.w	r4, r1, r2
 800bc16:	d902      	bls.n	800bc1e <memmove+0x10>
 800bc18:	4284      	cmp	r4, r0
 800bc1a:	4623      	mov	r3, r4
 800bc1c:	d807      	bhi.n	800bc2e <memmove+0x20>
 800bc1e:	1e43      	subs	r3, r0, #1
 800bc20:	42a1      	cmp	r1, r4
 800bc22:	d008      	beq.n	800bc36 <memmove+0x28>
 800bc24:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bc28:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bc2c:	e7f8      	b.n	800bc20 <memmove+0x12>
 800bc2e:	4601      	mov	r1, r0
 800bc30:	4402      	add	r2, r0
 800bc32:	428a      	cmp	r2, r1
 800bc34:	d100      	bne.n	800bc38 <memmove+0x2a>
 800bc36:	bd10      	pop	{r4, pc}
 800bc38:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bc3c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bc40:	e7f7      	b.n	800bc32 <memmove+0x24>

0800bc42 <_realloc_r>:
 800bc42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc46:	4680      	mov	r8, r0
 800bc48:	4614      	mov	r4, r2
 800bc4a:	460e      	mov	r6, r1
 800bc4c:	b921      	cbnz	r1, 800bc58 <_realloc_r+0x16>
 800bc4e:	4611      	mov	r1, r2
 800bc50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bc54:	f7fc b996 	b.w	8007f84 <_malloc_r>
 800bc58:	b92a      	cbnz	r2, 800bc66 <_realloc_r+0x24>
 800bc5a:	f7fc f92b 	bl	8007eb4 <_free_r>
 800bc5e:	4625      	mov	r5, r4
 800bc60:	4628      	mov	r0, r5
 800bc62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc66:	f000 fc53 	bl	800c510 <_malloc_usable_size_r>
 800bc6a:	4284      	cmp	r4, r0
 800bc6c:	4607      	mov	r7, r0
 800bc6e:	d802      	bhi.n	800bc76 <_realloc_r+0x34>
 800bc70:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bc74:	d812      	bhi.n	800bc9c <_realloc_r+0x5a>
 800bc76:	4621      	mov	r1, r4
 800bc78:	4640      	mov	r0, r8
 800bc7a:	f7fc f983 	bl	8007f84 <_malloc_r>
 800bc7e:	4605      	mov	r5, r0
 800bc80:	2800      	cmp	r0, #0
 800bc82:	d0ed      	beq.n	800bc60 <_realloc_r+0x1e>
 800bc84:	42bc      	cmp	r4, r7
 800bc86:	4622      	mov	r2, r4
 800bc88:	4631      	mov	r1, r6
 800bc8a:	bf28      	it	cs
 800bc8c:	463a      	movcs	r2, r7
 800bc8e:	f7fc f8e7 	bl	8007e60 <memcpy>
 800bc92:	4631      	mov	r1, r6
 800bc94:	4640      	mov	r0, r8
 800bc96:	f7fc f90d 	bl	8007eb4 <_free_r>
 800bc9a:	e7e1      	b.n	800bc60 <_realloc_r+0x1e>
 800bc9c:	4635      	mov	r5, r6
 800bc9e:	e7df      	b.n	800bc60 <_realloc_r+0x1e>

0800bca0 <__sfputc_r>:
 800bca0:	6893      	ldr	r3, [r2, #8]
 800bca2:	b410      	push	{r4}
 800bca4:	3b01      	subs	r3, #1
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	6093      	str	r3, [r2, #8]
 800bcaa:	da07      	bge.n	800bcbc <__sfputc_r+0x1c>
 800bcac:	6994      	ldr	r4, [r2, #24]
 800bcae:	42a3      	cmp	r3, r4
 800bcb0:	db01      	blt.n	800bcb6 <__sfputc_r+0x16>
 800bcb2:	290a      	cmp	r1, #10
 800bcb4:	d102      	bne.n	800bcbc <__sfputc_r+0x1c>
 800bcb6:	bc10      	pop	{r4}
 800bcb8:	f000 b94a 	b.w	800bf50 <__swbuf_r>
 800bcbc:	6813      	ldr	r3, [r2, #0]
 800bcbe:	1c58      	adds	r0, r3, #1
 800bcc0:	6010      	str	r0, [r2, #0]
 800bcc2:	7019      	strb	r1, [r3, #0]
 800bcc4:	4608      	mov	r0, r1
 800bcc6:	bc10      	pop	{r4}
 800bcc8:	4770      	bx	lr

0800bcca <__sfputs_r>:
 800bcca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bccc:	4606      	mov	r6, r0
 800bcce:	460f      	mov	r7, r1
 800bcd0:	4614      	mov	r4, r2
 800bcd2:	18d5      	adds	r5, r2, r3
 800bcd4:	42ac      	cmp	r4, r5
 800bcd6:	d101      	bne.n	800bcdc <__sfputs_r+0x12>
 800bcd8:	2000      	movs	r0, #0
 800bcda:	e007      	b.n	800bcec <__sfputs_r+0x22>
 800bcdc:	463a      	mov	r2, r7
 800bcde:	4630      	mov	r0, r6
 800bce0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bce4:	f7ff ffdc 	bl	800bca0 <__sfputc_r>
 800bce8:	1c43      	adds	r3, r0, #1
 800bcea:	d1f3      	bne.n	800bcd4 <__sfputs_r+0xa>
 800bcec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bcf0 <_vfiprintf_r>:
 800bcf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcf4:	460d      	mov	r5, r1
 800bcf6:	4614      	mov	r4, r2
 800bcf8:	4698      	mov	r8, r3
 800bcfa:	4606      	mov	r6, r0
 800bcfc:	b09d      	sub	sp, #116	; 0x74
 800bcfe:	b118      	cbz	r0, 800bd08 <_vfiprintf_r+0x18>
 800bd00:	6983      	ldr	r3, [r0, #24]
 800bd02:	b90b      	cbnz	r3, 800bd08 <_vfiprintf_r+0x18>
 800bd04:	f000 fb02 	bl	800c30c <__sinit>
 800bd08:	4b89      	ldr	r3, [pc, #548]	; (800bf30 <_vfiprintf_r+0x240>)
 800bd0a:	429d      	cmp	r5, r3
 800bd0c:	d11b      	bne.n	800bd46 <_vfiprintf_r+0x56>
 800bd0e:	6875      	ldr	r5, [r6, #4]
 800bd10:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bd12:	07d9      	lsls	r1, r3, #31
 800bd14:	d405      	bmi.n	800bd22 <_vfiprintf_r+0x32>
 800bd16:	89ab      	ldrh	r3, [r5, #12]
 800bd18:	059a      	lsls	r2, r3, #22
 800bd1a:	d402      	bmi.n	800bd22 <_vfiprintf_r+0x32>
 800bd1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bd1e:	f7ff ff74 	bl	800bc0a <__retarget_lock_acquire_recursive>
 800bd22:	89ab      	ldrh	r3, [r5, #12]
 800bd24:	071b      	lsls	r3, r3, #28
 800bd26:	d501      	bpl.n	800bd2c <_vfiprintf_r+0x3c>
 800bd28:	692b      	ldr	r3, [r5, #16]
 800bd2a:	b9eb      	cbnz	r3, 800bd68 <_vfiprintf_r+0x78>
 800bd2c:	4629      	mov	r1, r5
 800bd2e:	4630      	mov	r0, r6
 800bd30:	f000 f960 	bl	800bff4 <__swsetup_r>
 800bd34:	b1c0      	cbz	r0, 800bd68 <_vfiprintf_r+0x78>
 800bd36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bd38:	07dc      	lsls	r4, r3, #31
 800bd3a:	d50e      	bpl.n	800bd5a <_vfiprintf_r+0x6a>
 800bd3c:	f04f 30ff 	mov.w	r0, #4294967295
 800bd40:	b01d      	add	sp, #116	; 0x74
 800bd42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd46:	4b7b      	ldr	r3, [pc, #492]	; (800bf34 <_vfiprintf_r+0x244>)
 800bd48:	429d      	cmp	r5, r3
 800bd4a:	d101      	bne.n	800bd50 <_vfiprintf_r+0x60>
 800bd4c:	68b5      	ldr	r5, [r6, #8]
 800bd4e:	e7df      	b.n	800bd10 <_vfiprintf_r+0x20>
 800bd50:	4b79      	ldr	r3, [pc, #484]	; (800bf38 <_vfiprintf_r+0x248>)
 800bd52:	429d      	cmp	r5, r3
 800bd54:	bf08      	it	eq
 800bd56:	68f5      	ldreq	r5, [r6, #12]
 800bd58:	e7da      	b.n	800bd10 <_vfiprintf_r+0x20>
 800bd5a:	89ab      	ldrh	r3, [r5, #12]
 800bd5c:	0598      	lsls	r0, r3, #22
 800bd5e:	d4ed      	bmi.n	800bd3c <_vfiprintf_r+0x4c>
 800bd60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bd62:	f7ff ff53 	bl	800bc0c <__retarget_lock_release_recursive>
 800bd66:	e7e9      	b.n	800bd3c <_vfiprintf_r+0x4c>
 800bd68:	2300      	movs	r3, #0
 800bd6a:	9309      	str	r3, [sp, #36]	; 0x24
 800bd6c:	2320      	movs	r3, #32
 800bd6e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bd72:	2330      	movs	r3, #48	; 0x30
 800bd74:	f04f 0901 	mov.w	r9, #1
 800bd78:	f8cd 800c 	str.w	r8, [sp, #12]
 800bd7c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800bf3c <_vfiprintf_r+0x24c>
 800bd80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bd84:	4623      	mov	r3, r4
 800bd86:	469a      	mov	sl, r3
 800bd88:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bd8c:	b10a      	cbz	r2, 800bd92 <_vfiprintf_r+0xa2>
 800bd8e:	2a25      	cmp	r2, #37	; 0x25
 800bd90:	d1f9      	bne.n	800bd86 <_vfiprintf_r+0x96>
 800bd92:	ebba 0b04 	subs.w	fp, sl, r4
 800bd96:	d00b      	beq.n	800bdb0 <_vfiprintf_r+0xc0>
 800bd98:	465b      	mov	r3, fp
 800bd9a:	4622      	mov	r2, r4
 800bd9c:	4629      	mov	r1, r5
 800bd9e:	4630      	mov	r0, r6
 800bda0:	f7ff ff93 	bl	800bcca <__sfputs_r>
 800bda4:	3001      	adds	r0, #1
 800bda6:	f000 80aa 	beq.w	800befe <_vfiprintf_r+0x20e>
 800bdaa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bdac:	445a      	add	r2, fp
 800bdae:	9209      	str	r2, [sp, #36]	; 0x24
 800bdb0:	f89a 3000 	ldrb.w	r3, [sl]
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	f000 80a2 	beq.w	800befe <_vfiprintf_r+0x20e>
 800bdba:	2300      	movs	r3, #0
 800bdbc:	f04f 32ff 	mov.w	r2, #4294967295
 800bdc0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bdc4:	f10a 0a01 	add.w	sl, sl, #1
 800bdc8:	9304      	str	r3, [sp, #16]
 800bdca:	9307      	str	r3, [sp, #28]
 800bdcc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bdd0:	931a      	str	r3, [sp, #104]	; 0x68
 800bdd2:	4654      	mov	r4, sl
 800bdd4:	2205      	movs	r2, #5
 800bdd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bdda:	4858      	ldr	r0, [pc, #352]	; (800bf3c <_vfiprintf_r+0x24c>)
 800bddc:	f7ff f88e 	bl	800aefc <memchr>
 800bde0:	9a04      	ldr	r2, [sp, #16]
 800bde2:	b9d8      	cbnz	r0, 800be1c <_vfiprintf_r+0x12c>
 800bde4:	06d1      	lsls	r1, r2, #27
 800bde6:	bf44      	itt	mi
 800bde8:	2320      	movmi	r3, #32
 800bdea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bdee:	0713      	lsls	r3, r2, #28
 800bdf0:	bf44      	itt	mi
 800bdf2:	232b      	movmi	r3, #43	; 0x2b
 800bdf4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bdf8:	f89a 3000 	ldrb.w	r3, [sl]
 800bdfc:	2b2a      	cmp	r3, #42	; 0x2a
 800bdfe:	d015      	beq.n	800be2c <_vfiprintf_r+0x13c>
 800be00:	4654      	mov	r4, sl
 800be02:	2000      	movs	r0, #0
 800be04:	f04f 0c0a 	mov.w	ip, #10
 800be08:	9a07      	ldr	r2, [sp, #28]
 800be0a:	4621      	mov	r1, r4
 800be0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800be10:	3b30      	subs	r3, #48	; 0x30
 800be12:	2b09      	cmp	r3, #9
 800be14:	d94e      	bls.n	800beb4 <_vfiprintf_r+0x1c4>
 800be16:	b1b0      	cbz	r0, 800be46 <_vfiprintf_r+0x156>
 800be18:	9207      	str	r2, [sp, #28]
 800be1a:	e014      	b.n	800be46 <_vfiprintf_r+0x156>
 800be1c:	eba0 0308 	sub.w	r3, r0, r8
 800be20:	fa09 f303 	lsl.w	r3, r9, r3
 800be24:	4313      	orrs	r3, r2
 800be26:	46a2      	mov	sl, r4
 800be28:	9304      	str	r3, [sp, #16]
 800be2a:	e7d2      	b.n	800bdd2 <_vfiprintf_r+0xe2>
 800be2c:	9b03      	ldr	r3, [sp, #12]
 800be2e:	1d19      	adds	r1, r3, #4
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	9103      	str	r1, [sp, #12]
 800be34:	2b00      	cmp	r3, #0
 800be36:	bfbb      	ittet	lt
 800be38:	425b      	neglt	r3, r3
 800be3a:	f042 0202 	orrlt.w	r2, r2, #2
 800be3e:	9307      	strge	r3, [sp, #28]
 800be40:	9307      	strlt	r3, [sp, #28]
 800be42:	bfb8      	it	lt
 800be44:	9204      	strlt	r2, [sp, #16]
 800be46:	7823      	ldrb	r3, [r4, #0]
 800be48:	2b2e      	cmp	r3, #46	; 0x2e
 800be4a:	d10c      	bne.n	800be66 <_vfiprintf_r+0x176>
 800be4c:	7863      	ldrb	r3, [r4, #1]
 800be4e:	2b2a      	cmp	r3, #42	; 0x2a
 800be50:	d135      	bne.n	800bebe <_vfiprintf_r+0x1ce>
 800be52:	9b03      	ldr	r3, [sp, #12]
 800be54:	3402      	adds	r4, #2
 800be56:	1d1a      	adds	r2, r3, #4
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	9203      	str	r2, [sp, #12]
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	bfb8      	it	lt
 800be60:	f04f 33ff 	movlt.w	r3, #4294967295
 800be64:	9305      	str	r3, [sp, #20]
 800be66:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800bf40 <_vfiprintf_r+0x250>
 800be6a:	2203      	movs	r2, #3
 800be6c:	4650      	mov	r0, sl
 800be6e:	7821      	ldrb	r1, [r4, #0]
 800be70:	f7ff f844 	bl	800aefc <memchr>
 800be74:	b140      	cbz	r0, 800be88 <_vfiprintf_r+0x198>
 800be76:	2340      	movs	r3, #64	; 0x40
 800be78:	eba0 000a 	sub.w	r0, r0, sl
 800be7c:	fa03 f000 	lsl.w	r0, r3, r0
 800be80:	9b04      	ldr	r3, [sp, #16]
 800be82:	3401      	adds	r4, #1
 800be84:	4303      	orrs	r3, r0
 800be86:	9304      	str	r3, [sp, #16]
 800be88:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be8c:	2206      	movs	r2, #6
 800be8e:	482d      	ldr	r0, [pc, #180]	; (800bf44 <_vfiprintf_r+0x254>)
 800be90:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800be94:	f7ff f832 	bl	800aefc <memchr>
 800be98:	2800      	cmp	r0, #0
 800be9a:	d03f      	beq.n	800bf1c <_vfiprintf_r+0x22c>
 800be9c:	4b2a      	ldr	r3, [pc, #168]	; (800bf48 <_vfiprintf_r+0x258>)
 800be9e:	bb1b      	cbnz	r3, 800bee8 <_vfiprintf_r+0x1f8>
 800bea0:	9b03      	ldr	r3, [sp, #12]
 800bea2:	3307      	adds	r3, #7
 800bea4:	f023 0307 	bic.w	r3, r3, #7
 800bea8:	3308      	adds	r3, #8
 800beaa:	9303      	str	r3, [sp, #12]
 800beac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800beae:	443b      	add	r3, r7
 800beb0:	9309      	str	r3, [sp, #36]	; 0x24
 800beb2:	e767      	b.n	800bd84 <_vfiprintf_r+0x94>
 800beb4:	460c      	mov	r4, r1
 800beb6:	2001      	movs	r0, #1
 800beb8:	fb0c 3202 	mla	r2, ip, r2, r3
 800bebc:	e7a5      	b.n	800be0a <_vfiprintf_r+0x11a>
 800bebe:	2300      	movs	r3, #0
 800bec0:	f04f 0c0a 	mov.w	ip, #10
 800bec4:	4619      	mov	r1, r3
 800bec6:	3401      	adds	r4, #1
 800bec8:	9305      	str	r3, [sp, #20]
 800beca:	4620      	mov	r0, r4
 800becc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bed0:	3a30      	subs	r2, #48	; 0x30
 800bed2:	2a09      	cmp	r2, #9
 800bed4:	d903      	bls.n	800bede <_vfiprintf_r+0x1ee>
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d0c5      	beq.n	800be66 <_vfiprintf_r+0x176>
 800beda:	9105      	str	r1, [sp, #20]
 800bedc:	e7c3      	b.n	800be66 <_vfiprintf_r+0x176>
 800bede:	4604      	mov	r4, r0
 800bee0:	2301      	movs	r3, #1
 800bee2:	fb0c 2101 	mla	r1, ip, r1, r2
 800bee6:	e7f0      	b.n	800beca <_vfiprintf_r+0x1da>
 800bee8:	ab03      	add	r3, sp, #12
 800beea:	9300      	str	r3, [sp, #0]
 800beec:	462a      	mov	r2, r5
 800beee:	4630      	mov	r0, r6
 800bef0:	4b16      	ldr	r3, [pc, #88]	; (800bf4c <_vfiprintf_r+0x25c>)
 800bef2:	a904      	add	r1, sp, #16
 800bef4:	f7fc f958 	bl	80081a8 <_printf_float>
 800bef8:	4607      	mov	r7, r0
 800befa:	1c78      	adds	r0, r7, #1
 800befc:	d1d6      	bne.n	800beac <_vfiprintf_r+0x1bc>
 800befe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bf00:	07d9      	lsls	r1, r3, #31
 800bf02:	d405      	bmi.n	800bf10 <_vfiprintf_r+0x220>
 800bf04:	89ab      	ldrh	r3, [r5, #12]
 800bf06:	059a      	lsls	r2, r3, #22
 800bf08:	d402      	bmi.n	800bf10 <_vfiprintf_r+0x220>
 800bf0a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bf0c:	f7ff fe7e 	bl	800bc0c <__retarget_lock_release_recursive>
 800bf10:	89ab      	ldrh	r3, [r5, #12]
 800bf12:	065b      	lsls	r3, r3, #25
 800bf14:	f53f af12 	bmi.w	800bd3c <_vfiprintf_r+0x4c>
 800bf18:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bf1a:	e711      	b.n	800bd40 <_vfiprintf_r+0x50>
 800bf1c:	ab03      	add	r3, sp, #12
 800bf1e:	9300      	str	r3, [sp, #0]
 800bf20:	462a      	mov	r2, r5
 800bf22:	4630      	mov	r0, r6
 800bf24:	4b09      	ldr	r3, [pc, #36]	; (800bf4c <_vfiprintf_r+0x25c>)
 800bf26:	a904      	add	r1, sp, #16
 800bf28:	f7fc fbda 	bl	80086e0 <_printf_i>
 800bf2c:	e7e4      	b.n	800bef8 <_vfiprintf_r+0x208>
 800bf2e:	bf00      	nop
 800bf30:	0800cbf4 	.word	0x0800cbf4
 800bf34:	0800cc14 	.word	0x0800cc14
 800bf38:	0800cbd4 	.word	0x0800cbd4
 800bf3c:	0800cb84 	.word	0x0800cb84
 800bf40:	0800cb8a 	.word	0x0800cb8a
 800bf44:	0800cb8e 	.word	0x0800cb8e
 800bf48:	080081a9 	.word	0x080081a9
 800bf4c:	0800bccb 	.word	0x0800bccb

0800bf50 <__swbuf_r>:
 800bf50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf52:	460e      	mov	r6, r1
 800bf54:	4614      	mov	r4, r2
 800bf56:	4605      	mov	r5, r0
 800bf58:	b118      	cbz	r0, 800bf62 <__swbuf_r+0x12>
 800bf5a:	6983      	ldr	r3, [r0, #24]
 800bf5c:	b90b      	cbnz	r3, 800bf62 <__swbuf_r+0x12>
 800bf5e:	f000 f9d5 	bl	800c30c <__sinit>
 800bf62:	4b21      	ldr	r3, [pc, #132]	; (800bfe8 <__swbuf_r+0x98>)
 800bf64:	429c      	cmp	r4, r3
 800bf66:	d12b      	bne.n	800bfc0 <__swbuf_r+0x70>
 800bf68:	686c      	ldr	r4, [r5, #4]
 800bf6a:	69a3      	ldr	r3, [r4, #24]
 800bf6c:	60a3      	str	r3, [r4, #8]
 800bf6e:	89a3      	ldrh	r3, [r4, #12]
 800bf70:	071a      	lsls	r2, r3, #28
 800bf72:	d52f      	bpl.n	800bfd4 <__swbuf_r+0x84>
 800bf74:	6923      	ldr	r3, [r4, #16]
 800bf76:	b36b      	cbz	r3, 800bfd4 <__swbuf_r+0x84>
 800bf78:	6923      	ldr	r3, [r4, #16]
 800bf7a:	6820      	ldr	r0, [r4, #0]
 800bf7c:	b2f6      	uxtb	r6, r6
 800bf7e:	1ac0      	subs	r0, r0, r3
 800bf80:	6963      	ldr	r3, [r4, #20]
 800bf82:	4637      	mov	r7, r6
 800bf84:	4283      	cmp	r3, r0
 800bf86:	dc04      	bgt.n	800bf92 <__swbuf_r+0x42>
 800bf88:	4621      	mov	r1, r4
 800bf8a:	4628      	mov	r0, r5
 800bf8c:	f000 f92a 	bl	800c1e4 <_fflush_r>
 800bf90:	bb30      	cbnz	r0, 800bfe0 <__swbuf_r+0x90>
 800bf92:	68a3      	ldr	r3, [r4, #8]
 800bf94:	3001      	adds	r0, #1
 800bf96:	3b01      	subs	r3, #1
 800bf98:	60a3      	str	r3, [r4, #8]
 800bf9a:	6823      	ldr	r3, [r4, #0]
 800bf9c:	1c5a      	adds	r2, r3, #1
 800bf9e:	6022      	str	r2, [r4, #0]
 800bfa0:	701e      	strb	r6, [r3, #0]
 800bfa2:	6963      	ldr	r3, [r4, #20]
 800bfa4:	4283      	cmp	r3, r0
 800bfa6:	d004      	beq.n	800bfb2 <__swbuf_r+0x62>
 800bfa8:	89a3      	ldrh	r3, [r4, #12]
 800bfaa:	07db      	lsls	r3, r3, #31
 800bfac:	d506      	bpl.n	800bfbc <__swbuf_r+0x6c>
 800bfae:	2e0a      	cmp	r6, #10
 800bfb0:	d104      	bne.n	800bfbc <__swbuf_r+0x6c>
 800bfb2:	4621      	mov	r1, r4
 800bfb4:	4628      	mov	r0, r5
 800bfb6:	f000 f915 	bl	800c1e4 <_fflush_r>
 800bfba:	b988      	cbnz	r0, 800bfe0 <__swbuf_r+0x90>
 800bfbc:	4638      	mov	r0, r7
 800bfbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bfc0:	4b0a      	ldr	r3, [pc, #40]	; (800bfec <__swbuf_r+0x9c>)
 800bfc2:	429c      	cmp	r4, r3
 800bfc4:	d101      	bne.n	800bfca <__swbuf_r+0x7a>
 800bfc6:	68ac      	ldr	r4, [r5, #8]
 800bfc8:	e7cf      	b.n	800bf6a <__swbuf_r+0x1a>
 800bfca:	4b09      	ldr	r3, [pc, #36]	; (800bff0 <__swbuf_r+0xa0>)
 800bfcc:	429c      	cmp	r4, r3
 800bfce:	bf08      	it	eq
 800bfd0:	68ec      	ldreq	r4, [r5, #12]
 800bfd2:	e7ca      	b.n	800bf6a <__swbuf_r+0x1a>
 800bfd4:	4621      	mov	r1, r4
 800bfd6:	4628      	mov	r0, r5
 800bfd8:	f000 f80c 	bl	800bff4 <__swsetup_r>
 800bfdc:	2800      	cmp	r0, #0
 800bfde:	d0cb      	beq.n	800bf78 <__swbuf_r+0x28>
 800bfe0:	f04f 37ff 	mov.w	r7, #4294967295
 800bfe4:	e7ea      	b.n	800bfbc <__swbuf_r+0x6c>
 800bfe6:	bf00      	nop
 800bfe8:	0800cbf4 	.word	0x0800cbf4
 800bfec:	0800cc14 	.word	0x0800cc14
 800bff0:	0800cbd4 	.word	0x0800cbd4

0800bff4 <__swsetup_r>:
 800bff4:	4b32      	ldr	r3, [pc, #200]	; (800c0c0 <__swsetup_r+0xcc>)
 800bff6:	b570      	push	{r4, r5, r6, lr}
 800bff8:	681d      	ldr	r5, [r3, #0]
 800bffa:	4606      	mov	r6, r0
 800bffc:	460c      	mov	r4, r1
 800bffe:	b125      	cbz	r5, 800c00a <__swsetup_r+0x16>
 800c000:	69ab      	ldr	r3, [r5, #24]
 800c002:	b913      	cbnz	r3, 800c00a <__swsetup_r+0x16>
 800c004:	4628      	mov	r0, r5
 800c006:	f000 f981 	bl	800c30c <__sinit>
 800c00a:	4b2e      	ldr	r3, [pc, #184]	; (800c0c4 <__swsetup_r+0xd0>)
 800c00c:	429c      	cmp	r4, r3
 800c00e:	d10f      	bne.n	800c030 <__swsetup_r+0x3c>
 800c010:	686c      	ldr	r4, [r5, #4]
 800c012:	89a3      	ldrh	r3, [r4, #12]
 800c014:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c018:	0719      	lsls	r1, r3, #28
 800c01a:	d42c      	bmi.n	800c076 <__swsetup_r+0x82>
 800c01c:	06dd      	lsls	r5, r3, #27
 800c01e:	d411      	bmi.n	800c044 <__swsetup_r+0x50>
 800c020:	2309      	movs	r3, #9
 800c022:	6033      	str	r3, [r6, #0]
 800c024:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c028:	f04f 30ff 	mov.w	r0, #4294967295
 800c02c:	81a3      	strh	r3, [r4, #12]
 800c02e:	e03e      	b.n	800c0ae <__swsetup_r+0xba>
 800c030:	4b25      	ldr	r3, [pc, #148]	; (800c0c8 <__swsetup_r+0xd4>)
 800c032:	429c      	cmp	r4, r3
 800c034:	d101      	bne.n	800c03a <__swsetup_r+0x46>
 800c036:	68ac      	ldr	r4, [r5, #8]
 800c038:	e7eb      	b.n	800c012 <__swsetup_r+0x1e>
 800c03a:	4b24      	ldr	r3, [pc, #144]	; (800c0cc <__swsetup_r+0xd8>)
 800c03c:	429c      	cmp	r4, r3
 800c03e:	bf08      	it	eq
 800c040:	68ec      	ldreq	r4, [r5, #12]
 800c042:	e7e6      	b.n	800c012 <__swsetup_r+0x1e>
 800c044:	0758      	lsls	r0, r3, #29
 800c046:	d512      	bpl.n	800c06e <__swsetup_r+0x7a>
 800c048:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c04a:	b141      	cbz	r1, 800c05e <__swsetup_r+0x6a>
 800c04c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c050:	4299      	cmp	r1, r3
 800c052:	d002      	beq.n	800c05a <__swsetup_r+0x66>
 800c054:	4630      	mov	r0, r6
 800c056:	f7fb ff2d 	bl	8007eb4 <_free_r>
 800c05a:	2300      	movs	r3, #0
 800c05c:	6363      	str	r3, [r4, #52]	; 0x34
 800c05e:	89a3      	ldrh	r3, [r4, #12]
 800c060:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c064:	81a3      	strh	r3, [r4, #12]
 800c066:	2300      	movs	r3, #0
 800c068:	6063      	str	r3, [r4, #4]
 800c06a:	6923      	ldr	r3, [r4, #16]
 800c06c:	6023      	str	r3, [r4, #0]
 800c06e:	89a3      	ldrh	r3, [r4, #12]
 800c070:	f043 0308 	orr.w	r3, r3, #8
 800c074:	81a3      	strh	r3, [r4, #12]
 800c076:	6923      	ldr	r3, [r4, #16]
 800c078:	b94b      	cbnz	r3, 800c08e <__swsetup_r+0x9a>
 800c07a:	89a3      	ldrh	r3, [r4, #12]
 800c07c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c080:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c084:	d003      	beq.n	800c08e <__swsetup_r+0x9a>
 800c086:	4621      	mov	r1, r4
 800c088:	4630      	mov	r0, r6
 800c08a:	f000 fa01 	bl	800c490 <__smakebuf_r>
 800c08e:	89a0      	ldrh	r0, [r4, #12]
 800c090:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c094:	f010 0301 	ands.w	r3, r0, #1
 800c098:	d00a      	beq.n	800c0b0 <__swsetup_r+0xbc>
 800c09a:	2300      	movs	r3, #0
 800c09c:	60a3      	str	r3, [r4, #8]
 800c09e:	6963      	ldr	r3, [r4, #20]
 800c0a0:	425b      	negs	r3, r3
 800c0a2:	61a3      	str	r3, [r4, #24]
 800c0a4:	6923      	ldr	r3, [r4, #16]
 800c0a6:	b943      	cbnz	r3, 800c0ba <__swsetup_r+0xc6>
 800c0a8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c0ac:	d1ba      	bne.n	800c024 <__swsetup_r+0x30>
 800c0ae:	bd70      	pop	{r4, r5, r6, pc}
 800c0b0:	0781      	lsls	r1, r0, #30
 800c0b2:	bf58      	it	pl
 800c0b4:	6963      	ldrpl	r3, [r4, #20]
 800c0b6:	60a3      	str	r3, [r4, #8]
 800c0b8:	e7f4      	b.n	800c0a4 <__swsetup_r+0xb0>
 800c0ba:	2000      	movs	r0, #0
 800c0bc:	e7f7      	b.n	800c0ae <__swsetup_r+0xba>
 800c0be:	bf00      	nop
 800c0c0:	20000048 	.word	0x20000048
 800c0c4:	0800cbf4 	.word	0x0800cbf4
 800c0c8:	0800cc14 	.word	0x0800cc14
 800c0cc:	0800cbd4 	.word	0x0800cbd4

0800c0d0 <abort>:
 800c0d0:	2006      	movs	r0, #6
 800c0d2:	b508      	push	{r3, lr}
 800c0d4:	f000 fa4c 	bl	800c570 <raise>
 800c0d8:	2001      	movs	r0, #1
 800c0da:	f7f7 f976 	bl	80033ca <_exit>
	...

0800c0e0 <__sflush_r>:
 800c0e0:	898a      	ldrh	r2, [r1, #12]
 800c0e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0e4:	4605      	mov	r5, r0
 800c0e6:	0710      	lsls	r0, r2, #28
 800c0e8:	460c      	mov	r4, r1
 800c0ea:	d457      	bmi.n	800c19c <__sflush_r+0xbc>
 800c0ec:	684b      	ldr	r3, [r1, #4]
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	dc04      	bgt.n	800c0fc <__sflush_r+0x1c>
 800c0f2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	dc01      	bgt.n	800c0fc <__sflush_r+0x1c>
 800c0f8:	2000      	movs	r0, #0
 800c0fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c0fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c0fe:	2e00      	cmp	r6, #0
 800c100:	d0fa      	beq.n	800c0f8 <__sflush_r+0x18>
 800c102:	2300      	movs	r3, #0
 800c104:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c108:	682f      	ldr	r7, [r5, #0]
 800c10a:	602b      	str	r3, [r5, #0]
 800c10c:	d032      	beq.n	800c174 <__sflush_r+0x94>
 800c10e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c110:	89a3      	ldrh	r3, [r4, #12]
 800c112:	075a      	lsls	r2, r3, #29
 800c114:	d505      	bpl.n	800c122 <__sflush_r+0x42>
 800c116:	6863      	ldr	r3, [r4, #4]
 800c118:	1ac0      	subs	r0, r0, r3
 800c11a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c11c:	b10b      	cbz	r3, 800c122 <__sflush_r+0x42>
 800c11e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c120:	1ac0      	subs	r0, r0, r3
 800c122:	2300      	movs	r3, #0
 800c124:	4602      	mov	r2, r0
 800c126:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c128:	4628      	mov	r0, r5
 800c12a:	6a21      	ldr	r1, [r4, #32]
 800c12c:	47b0      	blx	r6
 800c12e:	1c43      	adds	r3, r0, #1
 800c130:	89a3      	ldrh	r3, [r4, #12]
 800c132:	d106      	bne.n	800c142 <__sflush_r+0x62>
 800c134:	6829      	ldr	r1, [r5, #0]
 800c136:	291d      	cmp	r1, #29
 800c138:	d82c      	bhi.n	800c194 <__sflush_r+0xb4>
 800c13a:	4a29      	ldr	r2, [pc, #164]	; (800c1e0 <__sflush_r+0x100>)
 800c13c:	40ca      	lsrs	r2, r1
 800c13e:	07d6      	lsls	r6, r2, #31
 800c140:	d528      	bpl.n	800c194 <__sflush_r+0xb4>
 800c142:	2200      	movs	r2, #0
 800c144:	6062      	str	r2, [r4, #4]
 800c146:	6922      	ldr	r2, [r4, #16]
 800c148:	04d9      	lsls	r1, r3, #19
 800c14a:	6022      	str	r2, [r4, #0]
 800c14c:	d504      	bpl.n	800c158 <__sflush_r+0x78>
 800c14e:	1c42      	adds	r2, r0, #1
 800c150:	d101      	bne.n	800c156 <__sflush_r+0x76>
 800c152:	682b      	ldr	r3, [r5, #0]
 800c154:	b903      	cbnz	r3, 800c158 <__sflush_r+0x78>
 800c156:	6560      	str	r0, [r4, #84]	; 0x54
 800c158:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c15a:	602f      	str	r7, [r5, #0]
 800c15c:	2900      	cmp	r1, #0
 800c15e:	d0cb      	beq.n	800c0f8 <__sflush_r+0x18>
 800c160:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c164:	4299      	cmp	r1, r3
 800c166:	d002      	beq.n	800c16e <__sflush_r+0x8e>
 800c168:	4628      	mov	r0, r5
 800c16a:	f7fb fea3 	bl	8007eb4 <_free_r>
 800c16e:	2000      	movs	r0, #0
 800c170:	6360      	str	r0, [r4, #52]	; 0x34
 800c172:	e7c2      	b.n	800c0fa <__sflush_r+0x1a>
 800c174:	6a21      	ldr	r1, [r4, #32]
 800c176:	2301      	movs	r3, #1
 800c178:	4628      	mov	r0, r5
 800c17a:	47b0      	blx	r6
 800c17c:	1c41      	adds	r1, r0, #1
 800c17e:	d1c7      	bne.n	800c110 <__sflush_r+0x30>
 800c180:	682b      	ldr	r3, [r5, #0]
 800c182:	2b00      	cmp	r3, #0
 800c184:	d0c4      	beq.n	800c110 <__sflush_r+0x30>
 800c186:	2b1d      	cmp	r3, #29
 800c188:	d001      	beq.n	800c18e <__sflush_r+0xae>
 800c18a:	2b16      	cmp	r3, #22
 800c18c:	d101      	bne.n	800c192 <__sflush_r+0xb2>
 800c18e:	602f      	str	r7, [r5, #0]
 800c190:	e7b2      	b.n	800c0f8 <__sflush_r+0x18>
 800c192:	89a3      	ldrh	r3, [r4, #12]
 800c194:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c198:	81a3      	strh	r3, [r4, #12]
 800c19a:	e7ae      	b.n	800c0fa <__sflush_r+0x1a>
 800c19c:	690f      	ldr	r7, [r1, #16]
 800c19e:	2f00      	cmp	r7, #0
 800c1a0:	d0aa      	beq.n	800c0f8 <__sflush_r+0x18>
 800c1a2:	0793      	lsls	r3, r2, #30
 800c1a4:	bf18      	it	ne
 800c1a6:	2300      	movne	r3, #0
 800c1a8:	680e      	ldr	r6, [r1, #0]
 800c1aa:	bf08      	it	eq
 800c1ac:	694b      	ldreq	r3, [r1, #20]
 800c1ae:	1bf6      	subs	r6, r6, r7
 800c1b0:	600f      	str	r7, [r1, #0]
 800c1b2:	608b      	str	r3, [r1, #8]
 800c1b4:	2e00      	cmp	r6, #0
 800c1b6:	dd9f      	ble.n	800c0f8 <__sflush_r+0x18>
 800c1b8:	4633      	mov	r3, r6
 800c1ba:	463a      	mov	r2, r7
 800c1bc:	4628      	mov	r0, r5
 800c1be:	6a21      	ldr	r1, [r4, #32]
 800c1c0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800c1c4:	47e0      	blx	ip
 800c1c6:	2800      	cmp	r0, #0
 800c1c8:	dc06      	bgt.n	800c1d8 <__sflush_r+0xf8>
 800c1ca:	89a3      	ldrh	r3, [r4, #12]
 800c1cc:	f04f 30ff 	mov.w	r0, #4294967295
 800c1d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c1d4:	81a3      	strh	r3, [r4, #12]
 800c1d6:	e790      	b.n	800c0fa <__sflush_r+0x1a>
 800c1d8:	4407      	add	r7, r0
 800c1da:	1a36      	subs	r6, r6, r0
 800c1dc:	e7ea      	b.n	800c1b4 <__sflush_r+0xd4>
 800c1de:	bf00      	nop
 800c1e0:	20400001 	.word	0x20400001

0800c1e4 <_fflush_r>:
 800c1e4:	b538      	push	{r3, r4, r5, lr}
 800c1e6:	690b      	ldr	r3, [r1, #16]
 800c1e8:	4605      	mov	r5, r0
 800c1ea:	460c      	mov	r4, r1
 800c1ec:	b913      	cbnz	r3, 800c1f4 <_fflush_r+0x10>
 800c1ee:	2500      	movs	r5, #0
 800c1f0:	4628      	mov	r0, r5
 800c1f2:	bd38      	pop	{r3, r4, r5, pc}
 800c1f4:	b118      	cbz	r0, 800c1fe <_fflush_r+0x1a>
 800c1f6:	6983      	ldr	r3, [r0, #24]
 800c1f8:	b90b      	cbnz	r3, 800c1fe <_fflush_r+0x1a>
 800c1fa:	f000 f887 	bl	800c30c <__sinit>
 800c1fe:	4b14      	ldr	r3, [pc, #80]	; (800c250 <_fflush_r+0x6c>)
 800c200:	429c      	cmp	r4, r3
 800c202:	d11b      	bne.n	800c23c <_fflush_r+0x58>
 800c204:	686c      	ldr	r4, [r5, #4]
 800c206:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d0ef      	beq.n	800c1ee <_fflush_r+0xa>
 800c20e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c210:	07d0      	lsls	r0, r2, #31
 800c212:	d404      	bmi.n	800c21e <_fflush_r+0x3a>
 800c214:	0599      	lsls	r1, r3, #22
 800c216:	d402      	bmi.n	800c21e <_fflush_r+0x3a>
 800c218:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c21a:	f7ff fcf6 	bl	800bc0a <__retarget_lock_acquire_recursive>
 800c21e:	4628      	mov	r0, r5
 800c220:	4621      	mov	r1, r4
 800c222:	f7ff ff5d 	bl	800c0e0 <__sflush_r>
 800c226:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c228:	4605      	mov	r5, r0
 800c22a:	07da      	lsls	r2, r3, #31
 800c22c:	d4e0      	bmi.n	800c1f0 <_fflush_r+0xc>
 800c22e:	89a3      	ldrh	r3, [r4, #12]
 800c230:	059b      	lsls	r3, r3, #22
 800c232:	d4dd      	bmi.n	800c1f0 <_fflush_r+0xc>
 800c234:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c236:	f7ff fce9 	bl	800bc0c <__retarget_lock_release_recursive>
 800c23a:	e7d9      	b.n	800c1f0 <_fflush_r+0xc>
 800c23c:	4b05      	ldr	r3, [pc, #20]	; (800c254 <_fflush_r+0x70>)
 800c23e:	429c      	cmp	r4, r3
 800c240:	d101      	bne.n	800c246 <_fflush_r+0x62>
 800c242:	68ac      	ldr	r4, [r5, #8]
 800c244:	e7df      	b.n	800c206 <_fflush_r+0x22>
 800c246:	4b04      	ldr	r3, [pc, #16]	; (800c258 <_fflush_r+0x74>)
 800c248:	429c      	cmp	r4, r3
 800c24a:	bf08      	it	eq
 800c24c:	68ec      	ldreq	r4, [r5, #12]
 800c24e:	e7da      	b.n	800c206 <_fflush_r+0x22>
 800c250:	0800cbf4 	.word	0x0800cbf4
 800c254:	0800cc14 	.word	0x0800cc14
 800c258:	0800cbd4 	.word	0x0800cbd4

0800c25c <std>:
 800c25c:	2300      	movs	r3, #0
 800c25e:	b510      	push	{r4, lr}
 800c260:	4604      	mov	r4, r0
 800c262:	e9c0 3300 	strd	r3, r3, [r0]
 800c266:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c26a:	6083      	str	r3, [r0, #8]
 800c26c:	8181      	strh	r1, [r0, #12]
 800c26e:	6643      	str	r3, [r0, #100]	; 0x64
 800c270:	81c2      	strh	r2, [r0, #14]
 800c272:	6183      	str	r3, [r0, #24]
 800c274:	4619      	mov	r1, r3
 800c276:	2208      	movs	r2, #8
 800c278:	305c      	adds	r0, #92	; 0x5c
 800c27a:	f7fb fdff 	bl	8007e7c <memset>
 800c27e:	4b05      	ldr	r3, [pc, #20]	; (800c294 <std+0x38>)
 800c280:	6224      	str	r4, [r4, #32]
 800c282:	6263      	str	r3, [r4, #36]	; 0x24
 800c284:	4b04      	ldr	r3, [pc, #16]	; (800c298 <std+0x3c>)
 800c286:	62a3      	str	r3, [r4, #40]	; 0x28
 800c288:	4b04      	ldr	r3, [pc, #16]	; (800c29c <std+0x40>)
 800c28a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c28c:	4b04      	ldr	r3, [pc, #16]	; (800c2a0 <std+0x44>)
 800c28e:	6323      	str	r3, [r4, #48]	; 0x30
 800c290:	bd10      	pop	{r4, pc}
 800c292:	bf00      	nop
 800c294:	0800c5a9 	.word	0x0800c5a9
 800c298:	0800c5cb 	.word	0x0800c5cb
 800c29c:	0800c603 	.word	0x0800c603
 800c2a0:	0800c627 	.word	0x0800c627

0800c2a4 <_cleanup_r>:
 800c2a4:	4901      	ldr	r1, [pc, #4]	; (800c2ac <_cleanup_r+0x8>)
 800c2a6:	f000 b8af 	b.w	800c408 <_fwalk_reent>
 800c2aa:	bf00      	nop
 800c2ac:	0800c1e5 	.word	0x0800c1e5

0800c2b0 <__sfmoreglue>:
 800c2b0:	2268      	movs	r2, #104	; 0x68
 800c2b2:	b570      	push	{r4, r5, r6, lr}
 800c2b4:	1e4d      	subs	r5, r1, #1
 800c2b6:	4355      	muls	r5, r2
 800c2b8:	460e      	mov	r6, r1
 800c2ba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c2be:	f7fb fe61 	bl	8007f84 <_malloc_r>
 800c2c2:	4604      	mov	r4, r0
 800c2c4:	b140      	cbz	r0, 800c2d8 <__sfmoreglue+0x28>
 800c2c6:	2100      	movs	r1, #0
 800c2c8:	e9c0 1600 	strd	r1, r6, [r0]
 800c2cc:	300c      	adds	r0, #12
 800c2ce:	60a0      	str	r0, [r4, #8]
 800c2d0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c2d4:	f7fb fdd2 	bl	8007e7c <memset>
 800c2d8:	4620      	mov	r0, r4
 800c2da:	bd70      	pop	{r4, r5, r6, pc}

0800c2dc <__sfp_lock_acquire>:
 800c2dc:	4801      	ldr	r0, [pc, #4]	; (800c2e4 <__sfp_lock_acquire+0x8>)
 800c2de:	f7ff bc94 	b.w	800bc0a <__retarget_lock_acquire_recursive>
 800c2e2:	bf00      	nop
 800c2e4:	20000a69 	.word	0x20000a69

0800c2e8 <__sfp_lock_release>:
 800c2e8:	4801      	ldr	r0, [pc, #4]	; (800c2f0 <__sfp_lock_release+0x8>)
 800c2ea:	f7ff bc8f 	b.w	800bc0c <__retarget_lock_release_recursive>
 800c2ee:	bf00      	nop
 800c2f0:	20000a69 	.word	0x20000a69

0800c2f4 <__sinit_lock_acquire>:
 800c2f4:	4801      	ldr	r0, [pc, #4]	; (800c2fc <__sinit_lock_acquire+0x8>)
 800c2f6:	f7ff bc88 	b.w	800bc0a <__retarget_lock_acquire_recursive>
 800c2fa:	bf00      	nop
 800c2fc:	20000a6a 	.word	0x20000a6a

0800c300 <__sinit_lock_release>:
 800c300:	4801      	ldr	r0, [pc, #4]	; (800c308 <__sinit_lock_release+0x8>)
 800c302:	f7ff bc83 	b.w	800bc0c <__retarget_lock_release_recursive>
 800c306:	bf00      	nop
 800c308:	20000a6a 	.word	0x20000a6a

0800c30c <__sinit>:
 800c30c:	b510      	push	{r4, lr}
 800c30e:	4604      	mov	r4, r0
 800c310:	f7ff fff0 	bl	800c2f4 <__sinit_lock_acquire>
 800c314:	69a3      	ldr	r3, [r4, #24]
 800c316:	b11b      	cbz	r3, 800c320 <__sinit+0x14>
 800c318:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c31c:	f7ff bff0 	b.w	800c300 <__sinit_lock_release>
 800c320:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c324:	6523      	str	r3, [r4, #80]	; 0x50
 800c326:	4b13      	ldr	r3, [pc, #76]	; (800c374 <__sinit+0x68>)
 800c328:	4a13      	ldr	r2, [pc, #76]	; (800c378 <__sinit+0x6c>)
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	62a2      	str	r2, [r4, #40]	; 0x28
 800c32e:	42a3      	cmp	r3, r4
 800c330:	bf08      	it	eq
 800c332:	2301      	moveq	r3, #1
 800c334:	4620      	mov	r0, r4
 800c336:	bf08      	it	eq
 800c338:	61a3      	streq	r3, [r4, #24]
 800c33a:	f000 f81f 	bl	800c37c <__sfp>
 800c33e:	6060      	str	r0, [r4, #4]
 800c340:	4620      	mov	r0, r4
 800c342:	f000 f81b 	bl	800c37c <__sfp>
 800c346:	60a0      	str	r0, [r4, #8]
 800c348:	4620      	mov	r0, r4
 800c34a:	f000 f817 	bl	800c37c <__sfp>
 800c34e:	2200      	movs	r2, #0
 800c350:	2104      	movs	r1, #4
 800c352:	60e0      	str	r0, [r4, #12]
 800c354:	6860      	ldr	r0, [r4, #4]
 800c356:	f7ff ff81 	bl	800c25c <std>
 800c35a:	2201      	movs	r2, #1
 800c35c:	2109      	movs	r1, #9
 800c35e:	68a0      	ldr	r0, [r4, #8]
 800c360:	f7ff ff7c 	bl	800c25c <std>
 800c364:	2202      	movs	r2, #2
 800c366:	2112      	movs	r1, #18
 800c368:	68e0      	ldr	r0, [r4, #12]
 800c36a:	f7ff ff77 	bl	800c25c <std>
 800c36e:	2301      	movs	r3, #1
 800c370:	61a3      	str	r3, [r4, #24]
 800c372:	e7d1      	b.n	800c318 <__sinit+0xc>
 800c374:	0800c78c 	.word	0x0800c78c
 800c378:	0800c2a5 	.word	0x0800c2a5

0800c37c <__sfp>:
 800c37c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c37e:	4607      	mov	r7, r0
 800c380:	f7ff ffac 	bl	800c2dc <__sfp_lock_acquire>
 800c384:	4b1e      	ldr	r3, [pc, #120]	; (800c400 <__sfp+0x84>)
 800c386:	681e      	ldr	r6, [r3, #0]
 800c388:	69b3      	ldr	r3, [r6, #24]
 800c38a:	b913      	cbnz	r3, 800c392 <__sfp+0x16>
 800c38c:	4630      	mov	r0, r6
 800c38e:	f7ff ffbd 	bl	800c30c <__sinit>
 800c392:	3648      	adds	r6, #72	; 0x48
 800c394:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c398:	3b01      	subs	r3, #1
 800c39a:	d503      	bpl.n	800c3a4 <__sfp+0x28>
 800c39c:	6833      	ldr	r3, [r6, #0]
 800c39e:	b30b      	cbz	r3, 800c3e4 <__sfp+0x68>
 800c3a0:	6836      	ldr	r6, [r6, #0]
 800c3a2:	e7f7      	b.n	800c394 <__sfp+0x18>
 800c3a4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c3a8:	b9d5      	cbnz	r5, 800c3e0 <__sfp+0x64>
 800c3aa:	4b16      	ldr	r3, [pc, #88]	; (800c404 <__sfp+0x88>)
 800c3ac:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c3b0:	60e3      	str	r3, [r4, #12]
 800c3b2:	6665      	str	r5, [r4, #100]	; 0x64
 800c3b4:	f7ff fc28 	bl	800bc08 <__retarget_lock_init_recursive>
 800c3b8:	f7ff ff96 	bl	800c2e8 <__sfp_lock_release>
 800c3bc:	2208      	movs	r2, #8
 800c3be:	4629      	mov	r1, r5
 800c3c0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c3c4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c3c8:	6025      	str	r5, [r4, #0]
 800c3ca:	61a5      	str	r5, [r4, #24]
 800c3cc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c3d0:	f7fb fd54 	bl	8007e7c <memset>
 800c3d4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c3d8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c3dc:	4620      	mov	r0, r4
 800c3de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c3e0:	3468      	adds	r4, #104	; 0x68
 800c3e2:	e7d9      	b.n	800c398 <__sfp+0x1c>
 800c3e4:	2104      	movs	r1, #4
 800c3e6:	4638      	mov	r0, r7
 800c3e8:	f7ff ff62 	bl	800c2b0 <__sfmoreglue>
 800c3ec:	4604      	mov	r4, r0
 800c3ee:	6030      	str	r0, [r6, #0]
 800c3f0:	2800      	cmp	r0, #0
 800c3f2:	d1d5      	bne.n	800c3a0 <__sfp+0x24>
 800c3f4:	f7ff ff78 	bl	800c2e8 <__sfp_lock_release>
 800c3f8:	230c      	movs	r3, #12
 800c3fa:	603b      	str	r3, [r7, #0]
 800c3fc:	e7ee      	b.n	800c3dc <__sfp+0x60>
 800c3fe:	bf00      	nop
 800c400:	0800c78c 	.word	0x0800c78c
 800c404:	ffff0001 	.word	0xffff0001

0800c408 <_fwalk_reent>:
 800c408:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c40c:	4606      	mov	r6, r0
 800c40e:	4688      	mov	r8, r1
 800c410:	2700      	movs	r7, #0
 800c412:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c416:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c41a:	f1b9 0901 	subs.w	r9, r9, #1
 800c41e:	d505      	bpl.n	800c42c <_fwalk_reent+0x24>
 800c420:	6824      	ldr	r4, [r4, #0]
 800c422:	2c00      	cmp	r4, #0
 800c424:	d1f7      	bne.n	800c416 <_fwalk_reent+0xe>
 800c426:	4638      	mov	r0, r7
 800c428:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c42c:	89ab      	ldrh	r3, [r5, #12]
 800c42e:	2b01      	cmp	r3, #1
 800c430:	d907      	bls.n	800c442 <_fwalk_reent+0x3a>
 800c432:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c436:	3301      	adds	r3, #1
 800c438:	d003      	beq.n	800c442 <_fwalk_reent+0x3a>
 800c43a:	4629      	mov	r1, r5
 800c43c:	4630      	mov	r0, r6
 800c43e:	47c0      	blx	r8
 800c440:	4307      	orrs	r7, r0
 800c442:	3568      	adds	r5, #104	; 0x68
 800c444:	e7e9      	b.n	800c41a <_fwalk_reent+0x12>

0800c446 <__swhatbuf_r>:
 800c446:	b570      	push	{r4, r5, r6, lr}
 800c448:	460e      	mov	r6, r1
 800c44a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c44e:	4614      	mov	r4, r2
 800c450:	2900      	cmp	r1, #0
 800c452:	461d      	mov	r5, r3
 800c454:	b096      	sub	sp, #88	; 0x58
 800c456:	da08      	bge.n	800c46a <__swhatbuf_r+0x24>
 800c458:	2200      	movs	r2, #0
 800c45a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c45e:	602a      	str	r2, [r5, #0]
 800c460:	061a      	lsls	r2, r3, #24
 800c462:	d410      	bmi.n	800c486 <__swhatbuf_r+0x40>
 800c464:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c468:	e00e      	b.n	800c488 <__swhatbuf_r+0x42>
 800c46a:	466a      	mov	r2, sp
 800c46c:	f000 f902 	bl	800c674 <_fstat_r>
 800c470:	2800      	cmp	r0, #0
 800c472:	dbf1      	blt.n	800c458 <__swhatbuf_r+0x12>
 800c474:	9a01      	ldr	r2, [sp, #4]
 800c476:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c47a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c47e:	425a      	negs	r2, r3
 800c480:	415a      	adcs	r2, r3
 800c482:	602a      	str	r2, [r5, #0]
 800c484:	e7ee      	b.n	800c464 <__swhatbuf_r+0x1e>
 800c486:	2340      	movs	r3, #64	; 0x40
 800c488:	2000      	movs	r0, #0
 800c48a:	6023      	str	r3, [r4, #0]
 800c48c:	b016      	add	sp, #88	; 0x58
 800c48e:	bd70      	pop	{r4, r5, r6, pc}

0800c490 <__smakebuf_r>:
 800c490:	898b      	ldrh	r3, [r1, #12]
 800c492:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c494:	079d      	lsls	r5, r3, #30
 800c496:	4606      	mov	r6, r0
 800c498:	460c      	mov	r4, r1
 800c49a:	d507      	bpl.n	800c4ac <__smakebuf_r+0x1c>
 800c49c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c4a0:	6023      	str	r3, [r4, #0]
 800c4a2:	6123      	str	r3, [r4, #16]
 800c4a4:	2301      	movs	r3, #1
 800c4a6:	6163      	str	r3, [r4, #20]
 800c4a8:	b002      	add	sp, #8
 800c4aa:	bd70      	pop	{r4, r5, r6, pc}
 800c4ac:	466a      	mov	r2, sp
 800c4ae:	ab01      	add	r3, sp, #4
 800c4b0:	f7ff ffc9 	bl	800c446 <__swhatbuf_r>
 800c4b4:	9900      	ldr	r1, [sp, #0]
 800c4b6:	4605      	mov	r5, r0
 800c4b8:	4630      	mov	r0, r6
 800c4ba:	f7fb fd63 	bl	8007f84 <_malloc_r>
 800c4be:	b948      	cbnz	r0, 800c4d4 <__smakebuf_r+0x44>
 800c4c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c4c4:	059a      	lsls	r2, r3, #22
 800c4c6:	d4ef      	bmi.n	800c4a8 <__smakebuf_r+0x18>
 800c4c8:	f023 0303 	bic.w	r3, r3, #3
 800c4cc:	f043 0302 	orr.w	r3, r3, #2
 800c4d0:	81a3      	strh	r3, [r4, #12]
 800c4d2:	e7e3      	b.n	800c49c <__smakebuf_r+0xc>
 800c4d4:	4b0d      	ldr	r3, [pc, #52]	; (800c50c <__smakebuf_r+0x7c>)
 800c4d6:	62b3      	str	r3, [r6, #40]	; 0x28
 800c4d8:	89a3      	ldrh	r3, [r4, #12]
 800c4da:	6020      	str	r0, [r4, #0]
 800c4dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c4e0:	81a3      	strh	r3, [r4, #12]
 800c4e2:	9b00      	ldr	r3, [sp, #0]
 800c4e4:	6120      	str	r0, [r4, #16]
 800c4e6:	6163      	str	r3, [r4, #20]
 800c4e8:	9b01      	ldr	r3, [sp, #4]
 800c4ea:	b15b      	cbz	r3, 800c504 <__smakebuf_r+0x74>
 800c4ec:	4630      	mov	r0, r6
 800c4ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c4f2:	f000 f8d1 	bl	800c698 <_isatty_r>
 800c4f6:	b128      	cbz	r0, 800c504 <__smakebuf_r+0x74>
 800c4f8:	89a3      	ldrh	r3, [r4, #12]
 800c4fa:	f023 0303 	bic.w	r3, r3, #3
 800c4fe:	f043 0301 	orr.w	r3, r3, #1
 800c502:	81a3      	strh	r3, [r4, #12]
 800c504:	89a0      	ldrh	r0, [r4, #12]
 800c506:	4305      	orrs	r5, r0
 800c508:	81a5      	strh	r5, [r4, #12]
 800c50a:	e7cd      	b.n	800c4a8 <__smakebuf_r+0x18>
 800c50c:	0800c2a5 	.word	0x0800c2a5

0800c510 <_malloc_usable_size_r>:
 800c510:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c514:	1f18      	subs	r0, r3, #4
 800c516:	2b00      	cmp	r3, #0
 800c518:	bfbc      	itt	lt
 800c51a:	580b      	ldrlt	r3, [r1, r0]
 800c51c:	18c0      	addlt	r0, r0, r3
 800c51e:	4770      	bx	lr

0800c520 <_raise_r>:
 800c520:	291f      	cmp	r1, #31
 800c522:	b538      	push	{r3, r4, r5, lr}
 800c524:	4604      	mov	r4, r0
 800c526:	460d      	mov	r5, r1
 800c528:	d904      	bls.n	800c534 <_raise_r+0x14>
 800c52a:	2316      	movs	r3, #22
 800c52c:	6003      	str	r3, [r0, #0]
 800c52e:	f04f 30ff 	mov.w	r0, #4294967295
 800c532:	bd38      	pop	{r3, r4, r5, pc}
 800c534:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c536:	b112      	cbz	r2, 800c53e <_raise_r+0x1e>
 800c538:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c53c:	b94b      	cbnz	r3, 800c552 <_raise_r+0x32>
 800c53e:	4620      	mov	r0, r4
 800c540:	f000 f830 	bl	800c5a4 <_getpid_r>
 800c544:	462a      	mov	r2, r5
 800c546:	4601      	mov	r1, r0
 800c548:	4620      	mov	r0, r4
 800c54a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c54e:	f000 b817 	b.w	800c580 <_kill_r>
 800c552:	2b01      	cmp	r3, #1
 800c554:	d00a      	beq.n	800c56c <_raise_r+0x4c>
 800c556:	1c59      	adds	r1, r3, #1
 800c558:	d103      	bne.n	800c562 <_raise_r+0x42>
 800c55a:	2316      	movs	r3, #22
 800c55c:	6003      	str	r3, [r0, #0]
 800c55e:	2001      	movs	r0, #1
 800c560:	e7e7      	b.n	800c532 <_raise_r+0x12>
 800c562:	2400      	movs	r4, #0
 800c564:	4628      	mov	r0, r5
 800c566:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c56a:	4798      	blx	r3
 800c56c:	2000      	movs	r0, #0
 800c56e:	e7e0      	b.n	800c532 <_raise_r+0x12>

0800c570 <raise>:
 800c570:	4b02      	ldr	r3, [pc, #8]	; (800c57c <raise+0xc>)
 800c572:	4601      	mov	r1, r0
 800c574:	6818      	ldr	r0, [r3, #0]
 800c576:	f7ff bfd3 	b.w	800c520 <_raise_r>
 800c57a:	bf00      	nop
 800c57c:	20000048 	.word	0x20000048

0800c580 <_kill_r>:
 800c580:	b538      	push	{r3, r4, r5, lr}
 800c582:	2300      	movs	r3, #0
 800c584:	4d06      	ldr	r5, [pc, #24]	; (800c5a0 <_kill_r+0x20>)
 800c586:	4604      	mov	r4, r0
 800c588:	4608      	mov	r0, r1
 800c58a:	4611      	mov	r1, r2
 800c58c:	602b      	str	r3, [r5, #0]
 800c58e:	f7f6 ff0c 	bl	80033aa <_kill>
 800c592:	1c43      	adds	r3, r0, #1
 800c594:	d102      	bne.n	800c59c <_kill_r+0x1c>
 800c596:	682b      	ldr	r3, [r5, #0]
 800c598:	b103      	cbz	r3, 800c59c <_kill_r+0x1c>
 800c59a:	6023      	str	r3, [r4, #0]
 800c59c:	bd38      	pop	{r3, r4, r5, pc}
 800c59e:	bf00      	nop
 800c5a0:	20000a64 	.word	0x20000a64

0800c5a4 <_getpid_r>:
 800c5a4:	f7f6 befa 	b.w	800339c <_getpid>

0800c5a8 <__sread>:
 800c5a8:	b510      	push	{r4, lr}
 800c5aa:	460c      	mov	r4, r1
 800c5ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c5b0:	f000 f894 	bl	800c6dc <_read_r>
 800c5b4:	2800      	cmp	r0, #0
 800c5b6:	bfab      	itete	ge
 800c5b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c5ba:	89a3      	ldrhlt	r3, [r4, #12]
 800c5bc:	181b      	addge	r3, r3, r0
 800c5be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c5c2:	bfac      	ite	ge
 800c5c4:	6563      	strge	r3, [r4, #84]	; 0x54
 800c5c6:	81a3      	strhlt	r3, [r4, #12]
 800c5c8:	bd10      	pop	{r4, pc}

0800c5ca <__swrite>:
 800c5ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c5ce:	461f      	mov	r7, r3
 800c5d0:	898b      	ldrh	r3, [r1, #12]
 800c5d2:	4605      	mov	r5, r0
 800c5d4:	05db      	lsls	r3, r3, #23
 800c5d6:	460c      	mov	r4, r1
 800c5d8:	4616      	mov	r6, r2
 800c5da:	d505      	bpl.n	800c5e8 <__swrite+0x1e>
 800c5dc:	2302      	movs	r3, #2
 800c5de:	2200      	movs	r2, #0
 800c5e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c5e4:	f000 f868 	bl	800c6b8 <_lseek_r>
 800c5e8:	89a3      	ldrh	r3, [r4, #12]
 800c5ea:	4632      	mov	r2, r6
 800c5ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c5f0:	81a3      	strh	r3, [r4, #12]
 800c5f2:	4628      	mov	r0, r5
 800c5f4:	463b      	mov	r3, r7
 800c5f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c5fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c5fe:	f000 b817 	b.w	800c630 <_write_r>

0800c602 <__sseek>:
 800c602:	b510      	push	{r4, lr}
 800c604:	460c      	mov	r4, r1
 800c606:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c60a:	f000 f855 	bl	800c6b8 <_lseek_r>
 800c60e:	1c43      	adds	r3, r0, #1
 800c610:	89a3      	ldrh	r3, [r4, #12]
 800c612:	bf15      	itete	ne
 800c614:	6560      	strne	r0, [r4, #84]	; 0x54
 800c616:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c61a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c61e:	81a3      	strheq	r3, [r4, #12]
 800c620:	bf18      	it	ne
 800c622:	81a3      	strhne	r3, [r4, #12]
 800c624:	bd10      	pop	{r4, pc}

0800c626 <__sclose>:
 800c626:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c62a:	f000 b813 	b.w	800c654 <_close_r>
	...

0800c630 <_write_r>:
 800c630:	b538      	push	{r3, r4, r5, lr}
 800c632:	4604      	mov	r4, r0
 800c634:	4608      	mov	r0, r1
 800c636:	4611      	mov	r1, r2
 800c638:	2200      	movs	r2, #0
 800c63a:	4d05      	ldr	r5, [pc, #20]	; (800c650 <_write_r+0x20>)
 800c63c:	602a      	str	r2, [r5, #0]
 800c63e:	461a      	mov	r2, r3
 800c640:	f7f6 feea 	bl	8003418 <_write>
 800c644:	1c43      	adds	r3, r0, #1
 800c646:	d102      	bne.n	800c64e <_write_r+0x1e>
 800c648:	682b      	ldr	r3, [r5, #0]
 800c64a:	b103      	cbz	r3, 800c64e <_write_r+0x1e>
 800c64c:	6023      	str	r3, [r4, #0]
 800c64e:	bd38      	pop	{r3, r4, r5, pc}
 800c650:	20000a64 	.word	0x20000a64

0800c654 <_close_r>:
 800c654:	b538      	push	{r3, r4, r5, lr}
 800c656:	2300      	movs	r3, #0
 800c658:	4d05      	ldr	r5, [pc, #20]	; (800c670 <_close_r+0x1c>)
 800c65a:	4604      	mov	r4, r0
 800c65c:	4608      	mov	r0, r1
 800c65e:	602b      	str	r3, [r5, #0]
 800c660:	f7f6 fef6 	bl	8003450 <_close>
 800c664:	1c43      	adds	r3, r0, #1
 800c666:	d102      	bne.n	800c66e <_close_r+0x1a>
 800c668:	682b      	ldr	r3, [r5, #0]
 800c66a:	b103      	cbz	r3, 800c66e <_close_r+0x1a>
 800c66c:	6023      	str	r3, [r4, #0]
 800c66e:	bd38      	pop	{r3, r4, r5, pc}
 800c670:	20000a64 	.word	0x20000a64

0800c674 <_fstat_r>:
 800c674:	b538      	push	{r3, r4, r5, lr}
 800c676:	2300      	movs	r3, #0
 800c678:	4d06      	ldr	r5, [pc, #24]	; (800c694 <_fstat_r+0x20>)
 800c67a:	4604      	mov	r4, r0
 800c67c:	4608      	mov	r0, r1
 800c67e:	4611      	mov	r1, r2
 800c680:	602b      	str	r3, [r5, #0]
 800c682:	f7f6 fef0 	bl	8003466 <_fstat>
 800c686:	1c43      	adds	r3, r0, #1
 800c688:	d102      	bne.n	800c690 <_fstat_r+0x1c>
 800c68a:	682b      	ldr	r3, [r5, #0]
 800c68c:	b103      	cbz	r3, 800c690 <_fstat_r+0x1c>
 800c68e:	6023      	str	r3, [r4, #0]
 800c690:	bd38      	pop	{r3, r4, r5, pc}
 800c692:	bf00      	nop
 800c694:	20000a64 	.word	0x20000a64

0800c698 <_isatty_r>:
 800c698:	b538      	push	{r3, r4, r5, lr}
 800c69a:	2300      	movs	r3, #0
 800c69c:	4d05      	ldr	r5, [pc, #20]	; (800c6b4 <_isatty_r+0x1c>)
 800c69e:	4604      	mov	r4, r0
 800c6a0:	4608      	mov	r0, r1
 800c6a2:	602b      	str	r3, [r5, #0]
 800c6a4:	f7f6 feee 	bl	8003484 <_isatty>
 800c6a8:	1c43      	adds	r3, r0, #1
 800c6aa:	d102      	bne.n	800c6b2 <_isatty_r+0x1a>
 800c6ac:	682b      	ldr	r3, [r5, #0]
 800c6ae:	b103      	cbz	r3, 800c6b2 <_isatty_r+0x1a>
 800c6b0:	6023      	str	r3, [r4, #0]
 800c6b2:	bd38      	pop	{r3, r4, r5, pc}
 800c6b4:	20000a64 	.word	0x20000a64

0800c6b8 <_lseek_r>:
 800c6b8:	b538      	push	{r3, r4, r5, lr}
 800c6ba:	4604      	mov	r4, r0
 800c6bc:	4608      	mov	r0, r1
 800c6be:	4611      	mov	r1, r2
 800c6c0:	2200      	movs	r2, #0
 800c6c2:	4d05      	ldr	r5, [pc, #20]	; (800c6d8 <_lseek_r+0x20>)
 800c6c4:	602a      	str	r2, [r5, #0]
 800c6c6:	461a      	mov	r2, r3
 800c6c8:	f7f6 fee6 	bl	8003498 <_lseek>
 800c6cc:	1c43      	adds	r3, r0, #1
 800c6ce:	d102      	bne.n	800c6d6 <_lseek_r+0x1e>
 800c6d0:	682b      	ldr	r3, [r5, #0]
 800c6d2:	b103      	cbz	r3, 800c6d6 <_lseek_r+0x1e>
 800c6d4:	6023      	str	r3, [r4, #0]
 800c6d6:	bd38      	pop	{r3, r4, r5, pc}
 800c6d8:	20000a64 	.word	0x20000a64

0800c6dc <_read_r>:
 800c6dc:	b538      	push	{r3, r4, r5, lr}
 800c6de:	4604      	mov	r4, r0
 800c6e0:	4608      	mov	r0, r1
 800c6e2:	4611      	mov	r1, r2
 800c6e4:	2200      	movs	r2, #0
 800c6e6:	4d05      	ldr	r5, [pc, #20]	; (800c6fc <_read_r+0x20>)
 800c6e8:	602a      	str	r2, [r5, #0]
 800c6ea:	461a      	mov	r2, r3
 800c6ec:	f7f6 fe77 	bl	80033de <_read>
 800c6f0:	1c43      	adds	r3, r0, #1
 800c6f2:	d102      	bne.n	800c6fa <_read_r+0x1e>
 800c6f4:	682b      	ldr	r3, [r5, #0]
 800c6f6:	b103      	cbz	r3, 800c6fa <_read_r+0x1e>
 800c6f8:	6023      	str	r3, [r4, #0]
 800c6fa:	bd38      	pop	{r3, r4, r5, pc}
 800c6fc:	20000a64 	.word	0x20000a64

0800c700 <_init>:
 800c700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c702:	bf00      	nop
 800c704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c706:	bc08      	pop	{r3}
 800c708:	469e      	mov	lr, r3
 800c70a:	4770      	bx	lr

0800c70c <_fini>:
 800c70c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c70e:	bf00      	nop
 800c710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c712:	bc08      	pop	{r3}
 800c714:	469e      	mov	lr, r3
 800c716:	4770      	bx	lr
