
motion_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a974  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004ec  0800ab60  0800ab60  0001ab60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b04c  0800b04c  00020208  2**0
                  CONTENTS
  4 .ARM          00000000  0800b04c  0800b04c  00020208  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b04c  0800b04c  00020208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b04c  0800b04c  0001b04c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b050  0800b050  0001b050  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  0800b054  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000228  20000208  0800b25c  00020208  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000430  0800b25c  00020430  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f085  00000000  00000000  00020231  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026af  00000000  00000000  0002f2b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e60  00000000  00000000  00031968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d48  00000000  00000000  000327c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b0e3  00000000  00000000  00033510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010ee7  00000000  00000000  0004e5f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a34a  00000000  00000000  0005f4da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f9824  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005100  00000000  00000000  000f9874  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000208 	.word	0x20000208
 8000204:	00000000 	.word	0x00000000
 8000208:	0800ab44 	.word	0x0800ab44

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	2000020c 	.word	0x2000020c
 8000224:	0800ab44 	.word	0x0800ab44

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2uiz>:
 8000b60:	004a      	lsls	r2, r1, #1
 8000b62:	d211      	bcs.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d211      	bcs.n	8000b8e <__aeabi_d2uiz+0x2e>
 8000b6a:	d50d      	bpl.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d40e      	bmi.n	8000b94 <__aeabi_d2uiz+0x34>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_d2uiz+0x3a>
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0000 	mov.w	r0, #0
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2f>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba8:	bf24      	itt	cs
 8000baa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bb2:	d90d      	bls.n	8000bd0 <__aeabi_d2f+0x30>
 8000bb4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bbc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bc4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc8:	bf08      	it	eq
 8000bca:	f020 0001 	biceq.w	r0, r0, #1
 8000bce:	4770      	bx	lr
 8000bd0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bd4:	d121      	bne.n	8000c1a <__aeabi_d2f+0x7a>
 8000bd6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bda:	bfbc      	itt	lt
 8000bdc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	4770      	bxlt	lr
 8000be2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000be6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bea:	f1c2 0218 	rsb	r2, r2, #24
 8000bee:	f1c2 0c20 	rsb	ip, r2, #32
 8000bf2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bf6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bfa:	bf18      	it	ne
 8000bfc:	f040 0001 	orrne.w	r0, r0, #1
 8000c00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c0c:	ea40 000c 	orr.w	r0, r0, ip
 8000c10:	fa23 f302 	lsr.w	r3, r3, r2
 8000c14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c18:	e7cc      	b.n	8000bb4 <__aeabi_d2f+0x14>
 8000c1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c1e:	d107      	bne.n	8000c30 <__aeabi_d2f+0x90>
 8000c20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c24:	bf1e      	ittt	ne
 8000c26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c2e:	4770      	bxne	lr
 8000c30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop

08000c40 <__aeabi_frsub>:
 8000c40:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c44:	e002      	b.n	8000c4c <__addsf3>
 8000c46:	bf00      	nop

08000c48 <__aeabi_fsub>:
 8000c48:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c4c <__addsf3>:
 8000c4c:	0042      	lsls	r2, r0, #1
 8000c4e:	bf1f      	itttt	ne
 8000c50:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c54:	ea92 0f03 	teqne	r2, r3
 8000c58:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c5c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c60:	d06a      	beq.n	8000d38 <__addsf3+0xec>
 8000c62:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c66:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c6a:	bfc1      	itttt	gt
 8000c6c:	18d2      	addgt	r2, r2, r3
 8000c6e:	4041      	eorgt	r1, r0
 8000c70:	4048      	eorgt	r0, r1
 8000c72:	4041      	eorgt	r1, r0
 8000c74:	bfb8      	it	lt
 8000c76:	425b      	neglt	r3, r3
 8000c78:	2b19      	cmp	r3, #25
 8000c7a:	bf88      	it	hi
 8000c7c:	4770      	bxhi	lr
 8000c7e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c82:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c86:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c8a:	bf18      	it	ne
 8000c8c:	4240      	negne	r0, r0
 8000c8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c92:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c96:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c9a:	bf18      	it	ne
 8000c9c:	4249      	negne	r1, r1
 8000c9e:	ea92 0f03 	teq	r2, r3
 8000ca2:	d03f      	beq.n	8000d24 <__addsf3+0xd8>
 8000ca4:	f1a2 0201 	sub.w	r2, r2, #1
 8000ca8:	fa41 fc03 	asr.w	ip, r1, r3
 8000cac:	eb10 000c 	adds.w	r0, r0, ip
 8000cb0:	f1c3 0320 	rsb	r3, r3, #32
 8000cb4:	fa01 f103 	lsl.w	r1, r1, r3
 8000cb8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cbc:	d502      	bpl.n	8000cc4 <__addsf3+0x78>
 8000cbe:	4249      	negs	r1, r1
 8000cc0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000cc4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000cc8:	d313      	bcc.n	8000cf2 <__addsf3+0xa6>
 8000cca:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000cce:	d306      	bcc.n	8000cde <__addsf3+0x92>
 8000cd0:	0840      	lsrs	r0, r0, #1
 8000cd2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cd6:	f102 0201 	add.w	r2, r2, #1
 8000cda:	2afe      	cmp	r2, #254	; 0xfe
 8000cdc:	d251      	bcs.n	8000d82 <__addsf3+0x136>
 8000cde:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000ce2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ce6:	bf08      	it	eq
 8000ce8:	f020 0001 	biceq.w	r0, r0, #1
 8000cec:	ea40 0003 	orr.w	r0, r0, r3
 8000cf0:	4770      	bx	lr
 8000cf2:	0049      	lsls	r1, r1, #1
 8000cf4:	eb40 0000 	adc.w	r0, r0, r0
 8000cf8:	3a01      	subs	r2, #1
 8000cfa:	bf28      	it	cs
 8000cfc:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d00:	d2ed      	bcs.n	8000cde <__addsf3+0x92>
 8000d02:	fab0 fc80 	clz	ip, r0
 8000d06:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d0a:	ebb2 020c 	subs.w	r2, r2, ip
 8000d0e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d12:	bfaa      	itet	ge
 8000d14:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d18:	4252      	neglt	r2, r2
 8000d1a:	4318      	orrge	r0, r3
 8000d1c:	bfbc      	itt	lt
 8000d1e:	40d0      	lsrlt	r0, r2
 8000d20:	4318      	orrlt	r0, r3
 8000d22:	4770      	bx	lr
 8000d24:	f092 0f00 	teq	r2, #0
 8000d28:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d2c:	bf06      	itte	eq
 8000d2e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d32:	3201      	addeq	r2, #1
 8000d34:	3b01      	subne	r3, #1
 8000d36:	e7b5      	b.n	8000ca4 <__addsf3+0x58>
 8000d38:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d3c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d40:	bf18      	it	ne
 8000d42:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d46:	d021      	beq.n	8000d8c <__addsf3+0x140>
 8000d48:	ea92 0f03 	teq	r2, r3
 8000d4c:	d004      	beq.n	8000d58 <__addsf3+0x10c>
 8000d4e:	f092 0f00 	teq	r2, #0
 8000d52:	bf08      	it	eq
 8000d54:	4608      	moveq	r0, r1
 8000d56:	4770      	bx	lr
 8000d58:	ea90 0f01 	teq	r0, r1
 8000d5c:	bf1c      	itt	ne
 8000d5e:	2000      	movne	r0, #0
 8000d60:	4770      	bxne	lr
 8000d62:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d66:	d104      	bne.n	8000d72 <__addsf3+0x126>
 8000d68:	0040      	lsls	r0, r0, #1
 8000d6a:	bf28      	it	cs
 8000d6c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d70:	4770      	bx	lr
 8000d72:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d76:	bf3c      	itt	cc
 8000d78:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d7c:	4770      	bxcc	lr
 8000d7e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d82:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d86:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d8a:	4770      	bx	lr
 8000d8c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d90:	bf16      	itet	ne
 8000d92:	4608      	movne	r0, r1
 8000d94:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d98:	4601      	movne	r1, r0
 8000d9a:	0242      	lsls	r2, r0, #9
 8000d9c:	bf06      	itte	eq
 8000d9e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000da2:	ea90 0f01 	teqeq	r0, r1
 8000da6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000daa:	4770      	bx	lr

08000dac <__aeabi_ui2f>:
 8000dac:	f04f 0300 	mov.w	r3, #0
 8000db0:	e004      	b.n	8000dbc <__aeabi_i2f+0x8>
 8000db2:	bf00      	nop

08000db4 <__aeabi_i2f>:
 8000db4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000db8:	bf48      	it	mi
 8000dba:	4240      	negmi	r0, r0
 8000dbc:	ea5f 0c00 	movs.w	ip, r0
 8000dc0:	bf08      	it	eq
 8000dc2:	4770      	bxeq	lr
 8000dc4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000dc8:	4601      	mov	r1, r0
 8000dca:	f04f 0000 	mov.w	r0, #0
 8000dce:	e01c      	b.n	8000e0a <__aeabi_l2f+0x2a>

08000dd0 <__aeabi_ul2f>:
 8000dd0:	ea50 0201 	orrs.w	r2, r0, r1
 8000dd4:	bf08      	it	eq
 8000dd6:	4770      	bxeq	lr
 8000dd8:	f04f 0300 	mov.w	r3, #0
 8000ddc:	e00a      	b.n	8000df4 <__aeabi_l2f+0x14>
 8000dde:	bf00      	nop

08000de0 <__aeabi_l2f>:
 8000de0:	ea50 0201 	orrs.w	r2, r0, r1
 8000de4:	bf08      	it	eq
 8000de6:	4770      	bxeq	lr
 8000de8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000dec:	d502      	bpl.n	8000df4 <__aeabi_l2f+0x14>
 8000dee:	4240      	negs	r0, r0
 8000df0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000df4:	ea5f 0c01 	movs.w	ip, r1
 8000df8:	bf02      	ittt	eq
 8000dfa:	4684      	moveq	ip, r0
 8000dfc:	4601      	moveq	r1, r0
 8000dfe:	2000      	moveq	r0, #0
 8000e00:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e04:	bf08      	it	eq
 8000e06:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e0a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e0e:	fabc f28c 	clz	r2, ip
 8000e12:	3a08      	subs	r2, #8
 8000e14:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e18:	db10      	blt.n	8000e3c <__aeabi_l2f+0x5c>
 8000e1a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e1e:	4463      	add	r3, ip
 8000e20:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e24:	f1c2 0220 	rsb	r2, r2, #32
 8000e28:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e2c:	fa20 f202 	lsr.w	r2, r0, r2
 8000e30:	eb43 0002 	adc.w	r0, r3, r2
 8000e34:	bf08      	it	eq
 8000e36:	f020 0001 	biceq.w	r0, r0, #1
 8000e3a:	4770      	bx	lr
 8000e3c:	f102 0220 	add.w	r2, r2, #32
 8000e40:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e44:	f1c2 0220 	rsb	r2, r2, #32
 8000e48:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e4c:	fa21 f202 	lsr.w	r2, r1, r2
 8000e50:	eb43 0002 	adc.w	r0, r3, r2
 8000e54:	bf08      	it	eq
 8000e56:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e5a:	4770      	bx	lr

08000e5c <__aeabi_fmul>:
 8000e5c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e60:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e64:	bf1e      	ittt	ne
 8000e66:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e6a:	ea92 0f0c 	teqne	r2, ip
 8000e6e:	ea93 0f0c 	teqne	r3, ip
 8000e72:	d06f      	beq.n	8000f54 <__aeabi_fmul+0xf8>
 8000e74:	441a      	add	r2, r3
 8000e76:	ea80 0c01 	eor.w	ip, r0, r1
 8000e7a:	0240      	lsls	r0, r0, #9
 8000e7c:	bf18      	it	ne
 8000e7e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e82:	d01e      	beq.n	8000ec2 <__aeabi_fmul+0x66>
 8000e84:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e88:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e8c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e90:	fba0 3101 	umull	r3, r1, r0, r1
 8000e94:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e98:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e9c:	bf3e      	ittt	cc
 8000e9e:	0049      	lslcc	r1, r1, #1
 8000ea0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000ea4:	005b      	lslcc	r3, r3, #1
 8000ea6:	ea40 0001 	orr.w	r0, r0, r1
 8000eaa:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000eae:	2afd      	cmp	r2, #253	; 0xfd
 8000eb0:	d81d      	bhi.n	8000eee <__aeabi_fmul+0x92>
 8000eb2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000eb6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000eba:	bf08      	it	eq
 8000ebc:	f020 0001 	biceq.w	r0, r0, #1
 8000ec0:	4770      	bx	lr
 8000ec2:	f090 0f00 	teq	r0, #0
 8000ec6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000eca:	bf08      	it	eq
 8000ecc:	0249      	lsleq	r1, r1, #9
 8000ece:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ed2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000ed6:	3a7f      	subs	r2, #127	; 0x7f
 8000ed8:	bfc2      	ittt	gt
 8000eda:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ede:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ee2:	4770      	bxgt	lr
 8000ee4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee8:	f04f 0300 	mov.w	r3, #0
 8000eec:	3a01      	subs	r2, #1
 8000eee:	dc5d      	bgt.n	8000fac <__aeabi_fmul+0x150>
 8000ef0:	f112 0f19 	cmn.w	r2, #25
 8000ef4:	bfdc      	itt	le
 8000ef6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000efa:	4770      	bxle	lr
 8000efc:	f1c2 0200 	rsb	r2, r2, #0
 8000f00:	0041      	lsls	r1, r0, #1
 8000f02:	fa21 f102 	lsr.w	r1, r1, r2
 8000f06:	f1c2 0220 	rsb	r2, r2, #32
 8000f0a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000f0e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000f12:	f140 0000 	adc.w	r0, r0, #0
 8000f16:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000f1a:	bf08      	it	eq
 8000f1c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000f20:	4770      	bx	lr
 8000f22:	f092 0f00 	teq	r2, #0
 8000f26:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f2a:	bf02      	ittt	eq
 8000f2c:	0040      	lsleq	r0, r0, #1
 8000f2e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f32:	3a01      	subeq	r2, #1
 8000f34:	d0f9      	beq.n	8000f2a <__aeabi_fmul+0xce>
 8000f36:	ea40 000c 	orr.w	r0, r0, ip
 8000f3a:	f093 0f00 	teq	r3, #0
 8000f3e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f42:	bf02      	ittt	eq
 8000f44:	0049      	lsleq	r1, r1, #1
 8000f46:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f4a:	3b01      	subeq	r3, #1
 8000f4c:	d0f9      	beq.n	8000f42 <__aeabi_fmul+0xe6>
 8000f4e:	ea41 010c 	orr.w	r1, r1, ip
 8000f52:	e78f      	b.n	8000e74 <__aeabi_fmul+0x18>
 8000f54:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f58:	ea92 0f0c 	teq	r2, ip
 8000f5c:	bf18      	it	ne
 8000f5e:	ea93 0f0c 	teqne	r3, ip
 8000f62:	d00a      	beq.n	8000f7a <__aeabi_fmul+0x11e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f6e:	d1d8      	bne.n	8000f22 <__aeabi_fmul+0xc6>
 8000f70:	ea80 0001 	eor.w	r0, r0, r1
 8000f74:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f78:	4770      	bx	lr
 8000f7a:	f090 0f00 	teq	r0, #0
 8000f7e:	bf17      	itett	ne
 8000f80:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f84:	4608      	moveq	r0, r1
 8000f86:	f091 0f00 	teqne	r1, #0
 8000f8a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000f8e:	d014      	beq.n	8000fba <__aeabi_fmul+0x15e>
 8000f90:	ea92 0f0c 	teq	r2, ip
 8000f94:	d101      	bne.n	8000f9a <__aeabi_fmul+0x13e>
 8000f96:	0242      	lsls	r2, r0, #9
 8000f98:	d10f      	bne.n	8000fba <__aeabi_fmul+0x15e>
 8000f9a:	ea93 0f0c 	teq	r3, ip
 8000f9e:	d103      	bne.n	8000fa8 <__aeabi_fmul+0x14c>
 8000fa0:	024b      	lsls	r3, r1, #9
 8000fa2:	bf18      	it	ne
 8000fa4:	4608      	movne	r0, r1
 8000fa6:	d108      	bne.n	8000fba <__aeabi_fmul+0x15e>
 8000fa8:	ea80 0001 	eor.w	r0, r0, r1
 8000fac:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000fb0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000fb4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fb8:	4770      	bx	lr
 8000fba:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000fbe:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000fc2:	4770      	bx	lr

08000fc4 <__aeabi_fdiv>:
 8000fc4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000fc8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000fcc:	bf1e      	ittt	ne
 8000fce:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000fd2:	ea92 0f0c 	teqne	r2, ip
 8000fd6:	ea93 0f0c 	teqne	r3, ip
 8000fda:	d069      	beq.n	80010b0 <__aeabi_fdiv+0xec>
 8000fdc:	eba2 0203 	sub.w	r2, r2, r3
 8000fe0:	ea80 0c01 	eor.w	ip, r0, r1
 8000fe4:	0249      	lsls	r1, r1, #9
 8000fe6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000fea:	d037      	beq.n	800105c <__aeabi_fdiv+0x98>
 8000fec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ff0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ff4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ff8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ffc:	428b      	cmp	r3, r1
 8000ffe:	bf38      	it	cc
 8001000:	005b      	lslcc	r3, r3, #1
 8001002:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8001006:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800100a:	428b      	cmp	r3, r1
 800100c:	bf24      	itt	cs
 800100e:	1a5b      	subcs	r3, r3, r1
 8001010:	ea40 000c 	orrcs.w	r0, r0, ip
 8001014:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8001018:	bf24      	itt	cs
 800101a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800101e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8001022:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8001026:	bf24      	itt	cs
 8001028:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800102c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8001030:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8001034:	bf24      	itt	cs
 8001036:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800103a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800103e:	011b      	lsls	r3, r3, #4
 8001040:	bf18      	it	ne
 8001042:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8001046:	d1e0      	bne.n	800100a <__aeabi_fdiv+0x46>
 8001048:	2afd      	cmp	r2, #253	; 0xfd
 800104a:	f63f af50 	bhi.w	8000eee <__aeabi_fmul+0x92>
 800104e:	428b      	cmp	r3, r1
 8001050:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8001054:	bf08      	it	eq
 8001056:	f020 0001 	biceq.w	r0, r0, #1
 800105a:	4770      	bx	lr
 800105c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8001060:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8001064:	327f      	adds	r2, #127	; 0x7f
 8001066:	bfc2      	ittt	gt
 8001068:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800106c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001070:	4770      	bxgt	lr
 8001072:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001076:	f04f 0300 	mov.w	r3, #0
 800107a:	3a01      	subs	r2, #1
 800107c:	e737      	b.n	8000eee <__aeabi_fmul+0x92>
 800107e:	f092 0f00 	teq	r2, #0
 8001082:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8001086:	bf02      	ittt	eq
 8001088:	0040      	lsleq	r0, r0, #1
 800108a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800108e:	3a01      	subeq	r2, #1
 8001090:	d0f9      	beq.n	8001086 <__aeabi_fdiv+0xc2>
 8001092:	ea40 000c 	orr.w	r0, r0, ip
 8001096:	f093 0f00 	teq	r3, #0
 800109a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800109e:	bf02      	ittt	eq
 80010a0:	0049      	lsleq	r1, r1, #1
 80010a2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80010a6:	3b01      	subeq	r3, #1
 80010a8:	d0f9      	beq.n	800109e <__aeabi_fdiv+0xda>
 80010aa:	ea41 010c 	orr.w	r1, r1, ip
 80010ae:	e795      	b.n	8000fdc <__aeabi_fdiv+0x18>
 80010b0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80010b4:	ea92 0f0c 	teq	r2, ip
 80010b8:	d108      	bne.n	80010cc <__aeabi_fdiv+0x108>
 80010ba:	0242      	lsls	r2, r0, #9
 80010bc:	f47f af7d 	bne.w	8000fba <__aeabi_fmul+0x15e>
 80010c0:	ea93 0f0c 	teq	r3, ip
 80010c4:	f47f af70 	bne.w	8000fa8 <__aeabi_fmul+0x14c>
 80010c8:	4608      	mov	r0, r1
 80010ca:	e776      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010cc:	ea93 0f0c 	teq	r3, ip
 80010d0:	d104      	bne.n	80010dc <__aeabi_fdiv+0x118>
 80010d2:	024b      	lsls	r3, r1, #9
 80010d4:	f43f af4c 	beq.w	8000f70 <__aeabi_fmul+0x114>
 80010d8:	4608      	mov	r0, r1
 80010da:	e76e      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010dc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80010e0:	bf18      	it	ne
 80010e2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80010e6:	d1ca      	bne.n	800107e <__aeabi_fdiv+0xba>
 80010e8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80010ec:	f47f af5c 	bne.w	8000fa8 <__aeabi_fmul+0x14c>
 80010f0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80010f4:	f47f af3c 	bne.w	8000f70 <__aeabi_fmul+0x114>
 80010f8:	e75f      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010fa:	bf00      	nop

080010fc <__gesf2>:
 80010fc:	f04f 3cff 	mov.w	ip, #4294967295
 8001100:	e006      	b.n	8001110 <__cmpsf2+0x4>
 8001102:	bf00      	nop

08001104 <__lesf2>:
 8001104:	f04f 0c01 	mov.w	ip, #1
 8001108:	e002      	b.n	8001110 <__cmpsf2+0x4>
 800110a:	bf00      	nop

0800110c <__cmpsf2>:
 800110c:	f04f 0c01 	mov.w	ip, #1
 8001110:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001114:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001118:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800111c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001120:	bf18      	it	ne
 8001122:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001126:	d011      	beq.n	800114c <__cmpsf2+0x40>
 8001128:	b001      	add	sp, #4
 800112a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800112e:	bf18      	it	ne
 8001130:	ea90 0f01 	teqne	r0, r1
 8001134:	bf58      	it	pl
 8001136:	ebb2 0003 	subspl.w	r0, r2, r3
 800113a:	bf88      	it	hi
 800113c:	17c8      	asrhi	r0, r1, #31
 800113e:	bf38      	it	cc
 8001140:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001144:	bf18      	it	ne
 8001146:	f040 0001 	orrne.w	r0, r0, #1
 800114a:	4770      	bx	lr
 800114c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001150:	d102      	bne.n	8001158 <__cmpsf2+0x4c>
 8001152:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001156:	d105      	bne.n	8001164 <__cmpsf2+0x58>
 8001158:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800115c:	d1e4      	bne.n	8001128 <__cmpsf2+0x1c>
 800115e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001162:	d0e1      	beq.n	8001128 <__cmpsf2+0x1c>
 8001164:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop

0800116c <__aeabi_cfrcmple>:
 800116c:	4684      	mov	ip, r0
 800116e:	4608      	mov	r0, r1
 8001170:	4661      	mov	r1, ip
 8001172:	e7ff      	b.n	8001174 <__aeabi_cfcmpeq>

08001174 <__aeabi_cfcmpeq>:
 8001174:	b50f      	push	{r0, r1, r2, r3, lr}
 8001176:	f7ff ffc9 	bl	800110c <__cmpsf2>
 800117a:	2800      	cmp	r0, #0
 800117c:	bf48      	it	mi
 800117e:	f110 0f00 	cmnmi.w	r0, #0
 8001182:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001184 <__aeabi_fcmpeq>:
 8001184:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001188:	f7ff fff4 	bl	8001174 <__aeabi_cfcmpeq>
 800118c:	bf0c      	ite	eq
 800118e:	2001      	moveq	r0, #1
 8001190:	2000      	movne	r0, #0
 8001192:	f85d fb08 	ldr.w	pc, [sp], #8
 8001196:	bf00      	nop

08001198 <__aeabi_fcmplt>:
 8001198:	f84d ed08 	str.w	lr, [sp, #-8]!
 800119c:	f7ff ffea 	bl	8001174 <__aeabi_cfcmpeq>
 80011a0:	bf34      	ite	cc
 80011a2:	2001      	movcc	r0, #1
 80011a4:	2000      	movcs	r0, #0
 80011a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80011aa:	bf00      	nop

080011ac <__aeabi_fcmple>:
 80011ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011b0:	f7ff ffe0 	bl	8001174 <__aeabi_cfcmpeq>
 80011b4:	bf94      	ite	ls
 80011b6:	2001      	movls	r0, #1
 80011b8:	2000      	movhi	r0, #0
 80011ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80011be:	bf00      	nop

080011c0 <__aeabi_fcmpge>:
 80011c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011c4:	f7ff ffd2 	bl	800116c <__aeabi_cfrcmple>
 80011c8:	bf94      	ite	ls
 80011ca:	2001      	movls	r0, #1
 80011cc:	2000      	movhi	r0, #0
 80011ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80011d2:	bf00      	nop

080011d4 <__aeabi_fcmpgt>:
 80011d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011d8:	f7ff ffc8 	bl	800116c <__aeabi_cfrcmple>
 80011dc:	bf34      	ite	cc
 80011de:	2001      	movcc	r0, #1
 80011e0:	2000      	movcs	r0, #0
 80011e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80011e6:	bf00      	nop

080011e8 <__aeabi_f2iz>:
 80011e8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80011ec:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80011f0:	d30f      	bcc.n	8001212 <__aeabi_f2iz+0x2a>
 80011f2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80011f6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80011fa:	d90d      	bls.n	8001218 <__aeabi_f2iz+0x30>
 80011fc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001200:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001204:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001208:	fa23 f002 	lsr.w	r0, r3, r2
 800120c:	bf18      	it	ne
 800120e:	4240      	negne	r0, r0
 8001210:	4770      	bx	lr
 8001212:	f04f 0000 	mov.w	r0, #0
 8001216:	4770      	bx	lr
 8001218:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800121c:	d101      	bne.n	8001222 <__aeabi_f2iz+0x3a>
 800121e:	0242      	lsls	r2, r0, #9
 8001220:	d105      	bne.n	800122e <__aeabi_f2iz+0x46>
 8001222:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001226:	bf08      	it	eq
 8001228:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800122c:	4770      	bx	lr
 800122e:	f04f 0000 	mov.w	r0, #0
 8001232:	4770      	bx	lr

08001234 <__aeabi_d2lz>:
 8001234:	b538      	push	{r3, r4, r5, lr}
 8001236:	4605      	mov	r5, r0
 8001238:	460c      	mov	r4, r1
 800123a:	2200      	movs	r2, #0
 800123c:	2300      	movs	r3, #0
 800123e:	4628      	mov	r0, r5
 8001240:	4621      	mov	r1, r4
 8001242:	f7ff fc27 	bl	8000a94 <__aeabi_dcmplt>
 8001246:	b928      	cbnz	r0, 8001254 <__aeabi_d2lz+0x20>
 8001248:	4628      	mov	r0, r5
 800124a:	4621      	mov	r1, r4
 800124c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001250:	f000 b80a 	b.w	8001268 <__aeabi_d2ulz>
 8001254:	4628      	mov	r0, r5
 8001256:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 800125a:	f000 f805 	bl	8001268 <__aeabi_d2ulz>
 800125e:	4240      	negs	r0, r0
 8001260:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001264:	bd38      	pop	{r3, r4, r5, pc}
 8001266:	bf00      	nop

08001268 <__aeabi_d2ulz>:
 8001268:	b5d0      	push	{r4, r6, r7, lr}
 800126a:	2200      	movs	r2, #0
 800126c:	4b0b      	ldr	r3, [pc, #44]	; (800129c <__aeabi_d2ulz+0x34>)
 800126e:	4606      	mov	r6, r0
 8001270:	460f      	mov	r7, r1
 8001272:	f7ff f99d 	bl	80005b0 <__aeabi_dmul>
 8001276:	f7ff fc73 	bl	8000b60 <__aeabi_d2uiz>
 800127a:	4604      	mov	r4, r0
 800127c:	f7ff f91e 	bl	80004bc <__aeabi_ui2d>
 8001280:	2200      	movs	r2, #0
 8001282:	4b07      	ldr	r3, [pc, #28]	; (80012a0 <__aeabi_d2ulz+0x38>)
 8001284:	f7ff f994 	bl	80005b0 <__aeabi_dmul>
 8001288:	4602      	mov	r2, r0
 800128a:	460b      	mov	r3, r1
 800128c:	4630      	mov	r0, r6
 800128e:	4639      	mov	r1, r7
 8001290:	f7fe ffd6 	bl	8000240 <__aeabi_dsub>
 8001294:	f7ff fc64 	bl	8000b60 <__aeabi_d2uiz>
 8001298:	4621      	mov	r1, r4
 800129a:	bdd0      	pop	{r4, r6, r7, pc}
 800129c:	3df00000 	.word	0x3df00000
 80012a0:	41f00000 	.word	0x41f00000

080012a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012aa:	4b0c      	ldr	r3, [pc, #48]	; (80012dc <MX_DMA_Init+0x38>)
 80012ac:	695b      	ldr	r3, [r3, #20]
 80012ae:	4a0b      	ldr	r2, [pc, #44]	; (80012dc <MX_DMA_Init+0x38>)
 80012b0:	f043 0301 	orr.w	r3, r3, #1
 80012b4:	6153      	str	r3, [r2, #20]
 80012b6:	4b09      	ldr	r3, [pc, #36]	; (80012dc <MX_DMA_Init+0x38>)
 80012b8:	695b      	ldr	r3, [r3, #20]
 80012ba:	f003 0301 	and.w	r3, r3, #1
 80012be:	607b      	str	r3, [r7, #4]
 80012c0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80012c2:	2200      	movs	r2, #0
 80012c4:	2100      	movs	r1, #0
 80012c6:	2010      	movs	r0, #16
 80012c8:	f001 fbe7 	bl	8002a9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80012cc:	2010      	movs	r0, #16
 80012ce:	f001 fc00 	bl	8002ad2 <HAL_NVIC_EnableIRQ>

}
 80012d2:	bf00      	nop
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	40021000 	.word	0x40021000

080012e0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b088      	sub	sp, #32
 80012e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e6:	f107 0310 	add.w	r3, r7, #16
 80012ea:	2200      	movs	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	605a      	str	r2, [r3, #4]
 80012f0:	609a      	str	r2, [r3, #8]
 80012f2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012f4:	4b23      	ldr	r3, [pc, #140]	; (8001384 <MX_GPIO_Init+0xa4>)
 80012f6:	699b      	ldr	r3, [r3, #24]
 80012f8:	4a22      	ldr	r2, [pc, #136]	; (8001384 <MX_GPIO_Init+0xa4>)
 80012fa:	f043 0320 	orr.w	r3, r3, #32
 80012fe:	6193      	str	r3, [r2, #24]
 8001300:	4b20      	ldr	r3, [pc, #128]	; (8001384 <MX_GPIO_Init+0xa4>)
 8001302:	699b      	ldr	r3, [r3, #24]
 8001304:	f003 0320 	and.w	r3, r3, #32
 8001308:	60fb      	str	r3, [r7, #12]
 800130a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800130c:	4b1d      	ldr	r3, [pc, #116]	; (8001384 <MX_GPIO_Init+0xa4>)
 800130e:	699b      	ldr	r3, [r3, #24]
 8001310:	4a1c      	ldr	r2, [pc, #112]	; (8001384 <MX_GPIO_Init+0xa4>)
 8001312:	f043 0310 	orr.w	r3, r3, #16
 8001316:	6193      	str	r3, [r2, #24]
 8001318:	4b1a      	ldr	r3, [pc, #104]	; (8001384 <MX_GPIO_Init+0xa4>)
 800131a:	699b      	ldr	r3, [r3, #24]
 800131c:	f003 0310 	and.w	r3, r3, #16
 8001320:	60bb      	str	r3, [r7, #8]
 8001322:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001324:	4b17      	ldr	r3, [pc, #92]	; (8001384 <MX_GPIO_Init+0xa4>)
 8001326:	699b      	ldr	r3, [r3, #24]
 8001328:	4a16      	ldr	r2, [pc, #88]	; (8001384 <MX_GPIO_Init+0xa4>)
 800132a:	f043 0304 	orr.w	r3, r3, #4
 800132e:	6193      	str	r3, [r2, #24]
 8001330:	4b14      	ldr	r3, [pc, #80]	; (8001384 <MX_GPIO_Init+0xa4>)
 8001332:	699b      	ldr	r3, [r3, #24]
 8001334:	f003 0304 	and.w	r3, r3, #4
 8001338:	607b      	str	r3, [r7, #4]
 800133a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800133c:	4b11      	ldr	r3, [pc, #68]	; (8001384 <MX_GPIO_Init+0xa4>)
 800133e:	699b      	ldr	r3, [r3, #24]
 8001340:	4a10      	ldr	r2, [pc, #64]	; (8001384 <MX_GPIO_Init+0xa4>)
 8001342:	f043 0308 	orr.w	r3, r3, #8
 8001346:	6193      	str	r3, [r2, #24]
 8001348:	4b0e      	ldr	r3, [pc, #56]	; (8001384 <MX_GPIO_Init+0xa4>)
 800134a:	699b      	ldr	r3, [r3, #24]
 800134c:	f003 0308 	and.w	r3, r3, #8
 8001350:	603b      	str	r3, [r7, #0]
 8001352:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001354:	2200      	movs	r2, #0
 8001356:	21ff      	movs	r1, #255	; 0xff
 8001358:	480b      	ldr	r0, [pc, #44]	; (8001388 <MX_GPIO_Init+0xa8>)
 800135a:	f002 f9ed 	bl	8003738 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800135e:	23ff      	movs	r3, #255	; 0xff
 8001360:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001362:	2301      	movs	r3, #1
 8001364:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001366:	2300      	movs	r3, #0
 8001368:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136a:	2302      	movs	r3, #2
 800136c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800136e:	f107 0310 	add.w	r3, r7, #16
 8001372:	4619      	mov	r1, r3
 8001374:	4804      	ldr	r0, [pc, #16]	; (8001388 <MX_GPIO_Init+0xa8>)
 8001376:	f002 f84b 	bl	8003410 <HAL_GPIO_Init>

}
 800137a:	bf00      	nop
 800137c:	3720      	adds	r7, #32
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	40021000 	.word	0x40021000
 8001388:	40011000 	.word	0x40011000

0800138c <jy62_Init>:
struct Angl Angle;  //储存角度值
struct Temp Temperature;  //储存温度值
/***********************接口****************************/

void jy62_Init(UART_HandleTypeDef *huart)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
	jy62_huart = huart;
 8001394:	4a06      	ldr	r2, [pc, #24]	; (80013b0 <jy62_Init+0x24>)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6013      	str	r3, [r2, #0]
    HAL_UART_Receive_DMA(jy62_huart,jy62Receive,JY62_MESSAGE_LENTH);
 800139a:	4b05      	ldr	r3, [pc, #20]	; (80013b0 <jy62_Init+0x24>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	220b      	movs	r2, #11
 80013a0:	4904      	ldr	r1, [pc, #16]	; (80013b4 <jy62_Init+0x28>)
 80013a2:	4618      	mov	r0, r3
 80013a4:	f004 f81a 	bl	80053dc <HAL_UART_Receive_DMA>
}
 80013a8:	bf00      	nop
 80013aa:	3708      	adds	r7, #8
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	2000023c 	.word	0x2000023c
 80013b4:	20000224 	.word	0x20000224

080013b8 <jy62MessageRecord>:

void jy62MessageRecord(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b084      	sub	sp, #16
 80013bc:	af00      	add	r7, sp, #0
	if(jy62Receive[0] ==0x55)
 80013be:	4b1f      	ldr	r3, [pc, #124]	; (800143c <jy62MessageRecord+0x84>)
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	2b55      	cmp	r3, #85	; 0x55
 80013c6:	d12d      	bne.n	8001424 <jy62MessageRecord+0x6c>
	{
		uint8_t sum  = 0x00;
 80013c8:	2300      	movs	r3, #0
 80013ca:	73fb      	strb	r3, [r7, #15]
		for (int i = 0; i < JY62_MESSAGE_LENTH-1; i++)
 80013cc:	2300      	movs	r3, #0
 80013ce:	60bb      	str	r3, [r7, #8]
 80013d0:	e00a      	b.n	80013e8 <jy62MessageRecord+0x30>
		{
			sum += jy62Receive[i];
 80013d2:	4a1a      	ldr	r2, [pc, #104]	; (800143c <jy62MessageRecord+0x84>)
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	4413      	add	r3, r2
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	b2da      	uxtb	r2, r3
 80013dc:	7bfb      	ldrb	r3, [r7, #15]
 80013de:	4413      	add	r3, r2
 80013e0:	73fb      	strb	r3, [r7, #15]
		for (int i = 0; i < JY62_MESSAGE_LENTH-1; i++)
 80013e2:	68bb      	ldr	r3, [r7, #8]
 80013e4:	3301      	adds	r3, #1
 80013e6:	60bb      	str	r3, [r7, #8]
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	2b09      	cmp	r3, #9
 80013ec:	ddf1      	ble.n	80013d2 <jy62MessageRecord+0x1a>
		}
		if(sum == jy62Receive[JY62_MESSAGE_LENTH-1])
 80013ee:	4b13      	ldr	r3, [pc, #76]	; (800143c <jy62MessageRecord+0x84>)
 80013f0:	7a9b      	ldrb	r3, [r3, #10]
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	7bfa      	ldrb	r2, [r7, #15]
 80013f6:	429a      	cmp	r2, r3
 80013f8:	d114      	bne.n	8001424 <jy62MessageRecord+0x6c>
		{
			for (int i = 0; i < JY62_MESSAGE_LENTH; i++)
 80013fa:	2300      	movs	r3, #0
 80013fc:	607b      	str	r3, [r7, #4]
 80013fe:	e00c      	b.n	800141a <jy62MessageRecord+0x62>
			{
				jy62Message[i] = jy62Receive[i];
 8001400:	4a0e      	ldr	r2, [pc, #56]	; (800143c <jy62MessageRecord+0x84>)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4413      	add	r3, r2
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	b2d9      	uxtb	r1, r3
 800140a:	4a0d      	ldr	r2, [pc, #52]	; (8001440 <jy62MessageRecord+0x88>)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	4413      	add	r3, r2
 8001410:	460a      	mov	r2, r1
 8001412:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < JY62_MESSAGE_LENTH; i++)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	3301      	adds	r3, #1
 8001418:	607b      	str	r3, [r7, #4]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2b0a      	cmp	r3, #10
 800141e:	ddef      	ble.n	8001400 <jy62MessageRecord+0x48>
			}
		    Decode();
 8001420:	f000 f9fc 	bl	800181c <Decode>
		}
	}
	HAL_UART_Receive_DMA(jy62_huart,jy62Receive,JY62_MESSAGE_LENTH);
 8001424:	4b07      	ldr	r3, [pc, #28]	; (8001444 <jy62MessageRecord+0x8c>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	220b      	movs	r2, #11
 800142a:	4904      	ldr	r1, [pc, #16]	; (800143c <jy62MessageRecord+0x84>)
 800142c:	4618      	mov	r0, r3
 800142e:	f003 ffd5 	bl	80053dc <HAL_UART_Receive_DMA>
}
 8001432:	bf00      	nop
 8001434:	3710      	adds	r7, #16
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	20000224 	.word	0x20000224
 8001440:	20000230 	.word	0x20000230
 8001444:	2000023c 	.word	0x2000023c

08001448 <SetBaud>:

void SetBaud(int Baud)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
	if(Baud == 115200)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
 8001456:	d108      	bne.n	800146a <SetBaud+0x22>
	{
		HAL_UART_Transmit(jy62_huart,setBaud115200,3,HAL_MAX_DELAY);
 8001458:	4b0c      	ldr	r3, [pc, #48]	; (800148c <SetBaud+0x44>)
 800145a:	6818      	ldr	r0, [r3, #0]
 800145c:	f04f 33ff 	mov.w	r3, #4294967295
 8001460:	2203      	movs	r2, #3
 8001462:	490b      	ldr	r1, [pc, #44]	; (8001490 <SetBaud+0x48>)
 8001464:	f003 ff37 	bl	80052d6 <HAL_UART_Transmit>
	}
	else if(Baud == 9600)
	{
		HAL_UART_Transmit(jy62_huart,setBaud115200,3,HAL_MAX_DELAY);
	}
}
 8001468:	e00b      	b.n	8001482 <SetBaud+0x3a>
	else if(Baud == 9600)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
 8001470:	d107      	bne.n	8001482 <SetBaud+0x3a>
		HAL_UART_Transmit(jy62_huart,setBaud115200,3,HAL_MAX_DELAY);
 8001472:	4b06      	ldr	r3, [pc, #24]	; (800148c <SetBaud+0x44>)
 8001474:	6818      	ldr	r0, [r3, #0]
 8001476:	f04f 33ff 	mov.w	r3, #4294967295
 800147a:	2203      	movs	r2, #3
 800147c:	4904      	ldr	r1, [pc, #16]	; (8001490 <SetBaud+0x48>)
 800147e:	f003 ff2a 	bl	80052d6 <HAL_UART_Transmit>
}
 8001482:	bf00      	nop
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	2000023c 	.word	0x2000023c
 8001490:	20000008 	.word	0x20000008

08001494 <SetHorizontal>:

void SetHorizontal()
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(jy62_huart,setHorizontal,3,HAL_MAX_DELAY);
 8001498:	4b04      	ldr	r3, [pc, #16]	; (80014ac <SetHorizontal+0x18>)
 800149a:	6818      	ldr	r0, [r3, #0]
 800149c:	f04f 33ff 	mov.w	r3, #4294967295
 80014a0:	2203      	movs	r2, #3
 80014a2:	4903      	ldr	r1, [pc, #12]	; (80014b0 <SetHorizontal+0x1c>)
 80014a4:	f003 ff17 	bl	80052d6 <HAL_UART_Transmit>
}
 80014a8:	bf00      	nop
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	2000023c 	.word	0x2000023c
 80014b0:	2000000c 	.word	0x2000000c

080014b4 <InitAngle>:
{
	HAL_UART_Transmit(jy62_huart,setVertical,3,HAL_MAX_DELAY);
}

void InitAngle()
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(jy62_huart,initAngle,3,HAL_MAX_DELAY);
 80014b8:	4b04      	ldr	r3, [pc, #16]	; (80014cc <InitAngle+0x18>)
 80014ba:	6818      	ldr	r0, [r3, #0]
 80014bc:	f04f 33ff 	mov.w	r3, #4294967295
 80014c0:	2203      	movs	r2, #3
 80014c2:	4903      	ldr	r1, [pc, #12]	; (80014d0 <InitAngle+0x1c>)
 80014c4:	f003 ff07 	bl	80052d6 <HAL_UART_Transmit>
}
 80014c8:	bf00      	nop
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	2000023c 	.word	0x2000023c
 80014d0:	20000000 	.word	0x20000000

080014d4 <Calibrate>:

void Calibrate()
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(jy62_huart,calibrateAcce,3,HAL_MAX_DELAY);
 80014d8:	4b04      	ldr	r3, [pc, #16]	; (80014ec <Calibrate+0x18>)
 80014da:	6818      	ldr	r0, [r3, #0]
 80014dc:	f04f 33ff 	mov.w	r3, #4294967295
 80014e0:	2203      	movs	r2, #3
 80014e2:	4903      	ldr	r1, [pc, #12]	; (80014f0 <Calibrate+0x1c>)
 80014e4:	f003 fef7 	bl	80052d6 <HAL_UART_Transmit>
}
 80014e8:	bf00      	nop
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	2000023c 	.word	0x2000023c
 80014f0:	20000004 	.word	0x20000004

080014f4 <SleepOrAwake>:

void SleepOrAwake()
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(jy62_huart,sleepAndAwake,3,HAL_MAX_DELAY);
 80014f8:	4b04      	ldr	r3, [pc, #16]	; (800150c <SleepOrAwake+0x18>)
 80014fa:	6818      	ldr	r0, [r3, #0]
 80014fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001500:	2203      	movs	r2, #3
 8001502:	4903      	ldr	r1, [pc, #12]	; (8001510 <SleepOrAwake+0x1c>)
 8001504:	f003 fee7 	bl	80052d6 <HAL_UART_Transmit>
}
 8001508:	bf00      	nop
 800150a:	bd80      	pop	{r7, pc}
 800150c:	2000023c 	.word	0x2000023c
 8001510:	20000010 	.word	0x20000010

08001514 <GetRoll>:


float GetRoll()
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
	return Angle.roll;
 8001518:	4b02      	ldr	r3, [pc, #8]	; (8001524 <GetRoll+0x10>)
 800151a:	681b      	ldr	r3, [r3, #0]
}
 800151c:	4618      	mov	r0, r3
 800151e:	46bd      	mov	sp, r7
 8001520:	bc80      	pop	{r7}
 8001522:	4770      	bx	lr
 8001524:	20000258 	.word	0x20000258

08001528 <GetPitch>:
float GetPitch()
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
	return Angle.pitch;
 800152c:	4b02      	ldr	r3, [pc, #8]	; (8001538 <GetPitch+0x10>)
 800152e:	685b      	ldr	r3, [r3, #4]
}
 8001530:	4618      	mov	r0, r3
 8001532:	46bd      	mov	sp, r7
 8001534:	bc80      	pop	{r7}
 8001536:	4770      	bx	lr
 8001538:	20000258 	.word	0x20000258

0800153c <GetYaw>:
float GetYaw()
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
	return Angle.yaw;
 8001540:	4b02      	ldr	r3, [pc, #8]	; (800154c <GetYaw+0x10>)
 8001542:	689b      	ldr	r3, [r3, #8]
}
 8001544:	4618      	mov	r0, r3
 8001546:	46bd      	mov	sp, r7
 8001548:	bc80      	pop	{r7}
 800154a:	4770      	bx	lr
 800154c:	20000258 	.word	0x20000258

08001550 <DecodeAngle>:


/***************************************************/

void DecodeAngle()
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
	Angle.roll = (float)((jy62Message[3]<<8)|jy62Message[2])/32768 * 180 ;
 8001554:	4b27      	ldr	r3, [pc, #156]	; (80015f4 <DecodeAngle+0xa4>)
 8001556:	78db      	ldrb	r3, [r3, #3]
 8001558:	b2db      	uxtb	r3, r3
 800155a:	021b      	lsls	r3, r3, #8
 800155c:	4a25      	ldr	r2, [pc, #148]	; (80015f4 <DecodeAngle+0xa4>)
 800155e:	7892      	ldrb	r2, [r2, #2]
 8001560:	b2d2      	uxtb	r2, r2
 8001562:	4313      	orrs	r3, r2
 8001564:	4618      	mov	r0, r3
 8001566:	f7ff fc25 	bl	8000db4 <__aeabi_i2f>
 800156a:	4603      	mov	r3, r0
 800156c:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
 8001570:	4618      	mov	r0, r3
 8001572:	f7ff fd27 	bl	8000fc4 <__aeabi_fdiv>
 8001576:	4603      	mov	r3, r0
 8001578:	491f      	ldr	r1, [pc, #124]	; (80015f8 <DecodeAngle+0xa8>)
 800157a:	4618      	mov	r0, r3
 800157c:	f7ff fc6e 	bl	8000e5c <__aeabi_fmul>
 8001580:	4603      	mov	r3, r0
 8001582:	461a      	mov	r2, r3
 8001584:	4b1d      	ldr	r3, [pc, #116]	; (80015fc <DecodeAngle+0xac>)
 8001586:	601a      	str	r2, [r3, #0]
	Angle.pitch = (float)((jy62Message[5]<<8)|jy62Message[4])/32768 * 180 ;
 8001588:	4b1a      	ldr	r3, [pc, #104]	; (80015f4 <DecodeAngle+0xa4>)
 800158a:	795b      	ldrb	r3, [r3, #5]
 800158c:	b2db      	uxtb	r3, r3
 800158e:	021b      	lsls	r3, r3, #8
 8001590:	4a18      	ldr	r2, [pc, #96]	; (80015f4 <DecodeAngle+0xa4>)
 8001592:	7912      	ldrb	r2, [r2, #4]
 8001594:	b2d2      	uxtb	r2, r2
 8001596:	4313      	orrs	r3, r2
 8001598:	4618      	mov	r0, r3
 800159a:	f7ff fc0b 	bl	8000db4 <__aeabi_i2f>
 800159e:	4603      	mov	r3, r0
 80015a0:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7ff fd0d 	bl	8000fc4 <__aeabi_fdiv>
 80015aa:	4603      	mov	r3, r0
 80015ac:	4912      	ldr	r1, [pc, #72]	; (80015f8 <DecodeAngle+0xa8>)
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7ff fc54 	bl	8000e5c <__aeabi_fmul>
 80015b4:	4603      	mov	r3, r0
 80015b6:	461a      	mov	r2, r3
 80015b8:	4b10      	ldr	r3, [pc, #64]	; (80015fc <DecodeAngle+0xac>)
 80015ba:	605a      	str	r2, [r3, #4]
	Angle.yaw =  (float)((jy62Message[7]<<8)|jy62Message[6])/32768 * 180 ;
 80015bc:	4b0d      	ldr	r3, [pc, #52]	; (80015f4 <DecodeAngle+0xa4>)
 80015be:	79db      	ldrb	r3, [r3, #7]
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	021b      	lsls	r3, r3, #8
 80015c4:	4a0b      	ldr	r2, [pc, #44]	; (80015f4 <DecodeAngle+0xa4>)
 80015c6:	7992      	ldrb	r2, [r2, #6]
 80015c8:	b2d2      	uxtb	r2, r2
 80015ca:	4313      	orrs	r3, r2
 80015cc:	4618      	mov	r0, r3
 80015ce:	f7ff fbf1 	bl	8000db4 <__aeabi_i2f>
 80015d2:	4603      	mov	r3, r0
 80015d4:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
 80015d8:	4618      	mov	r0, r3
 80015da:	f7ff fcf3 	bl	8000fc4 <__aeabi_fdiv>
 80015de:	4603      	mov	r3, r0
 80015e0:	4905      	ldr	r1, [pc, #20]	; (80015f8 <DecodeAngle+0xa8>)
 80015e2:	4618      	mov	r0, r3
 80015e4:	f7ff fc3a 	bl	8000e5c <__aeabi_fmul>
 80015e8:	4603      	mov	r3, r0
 80015ea:	461a      	mov	r2, r3
 80015ec:	4b03      	ldr	r3, [pc, #12]	; (80015fc <DecodeAngle+0xac>)
 80015ee:	609a      	str	r2, [r3, #8]
	//u1_printf("%f\n",Angle.yaw);
}
 80015f0:	bf00      	nop
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	20000230 	.word	0x20000230
 80015f8:	43340000 	.word	0x43340000
 80015fc:	20000258 	.word	0x20000258

08001600 <DecodeAccelerate>:

void DecodeAccelerate()
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
	Accelerate.accelerate_x = (float)((jy62Message[3]<<8)|jy62Message[2])/32768 * 16 * g ;
 8001604:	4b40      	ldr	r3, [pc, #256]	; (8001708 <DecodeAccelerate+0x108>)
 8001606:	78db      	ldrb	r3, [r3, #3]
 8001608:	b2db      	uxtb	r3, r3
 800160a:	021b      	lsls	r3, r3, #8
 800160c:	4a3e      	ldr	r2, [pc, #248]	; (8001708 <DecodeAccelerate+0x108>)
 800160e:	7892      	ldrb	r2, [r2, #2]
 8001610:	b2d2      	uxtb	r2, r2
 8001612:	4313      	orrs	r3, r2
 8001614:	4618      	mov	r0, r3
 8001616:	f7ff fbcd 	bl	8000db4 <__aeabi_i2f>
 800161a:	4603      	mov	r3, r0
 800161c:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
 8001620:	4618      	mov	r0, r3
 8001622:	f7ff fccf 	bl	8000fc4 <__aeabi_fdiv>
 8001626:	4603      	mov	r3, r0
 8001628:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 800162c:	4618      	mov	r0, r3
 800162e:	f7ff fc15 	bl	8000e5c <__aeabi_fmul>
 8001632:	4603      	mov	r3, r0
 8001634:	4618      	mov	r0, r3
 8001636:	f7fe ff63 	bl	8000500 <__aeabi_f2d>
 800163a:	a331      	add	r3, pc, #196	; (adr r3, 8001700 <DecodeAccelerate+0x100>)
 800163c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001640:	f7fe ffb6 	bl	80005b0 <__aeabi_dmul>
 8001644:	4602      	mov	r2, r0
 8001646:	460b      	mov	r3, r1
 8001648:	4610      	mov	r0, r2
 800164a:	4619      	mov	r1, r3
 800164c:	f7ff faa8 	bl	8000ba0 <__aeabi_d2f>
 8001650:	4603      	mov	r3, r0
 8001652:	4a2e      	ldr	r2, [pc, #184]	; (800170c <DecodeAccelerate+0x10c>)
 8001654:	6013      	str	r3, [r2, #0]
	Accelerate.accelerate_y = (float)((jy62Message[5]<<8)|jy62Message[4])/32768 * 16 * g ;
 8001656:	4b2c      	ldr	r3, [pc, #176]	; (8001708 <DecodeAccelerate+0x108>)
 8001658:	795b      	ldrb	r3, [r3, #5]
 800165a:	b2db      	uxtb	r3, r3
 800165c:	021b      	lsls	r3, r3, #8
 800165e:	4a2a      	ldr	r2, [pc, #168]	; (8001708 <DecodeAccelerate+0x108>)
 8001660:	7912      	ldrb	r2, [r2, #4]
 8001662:	b2d2      	uxtb	r2, r2
 8001664:	4313      	orrs	r3, r2
 8001666:	4618      	mov	r0, r3
 8001668:	f7ff fba4 	bl	8000db4 <__aeabi_i2f>
 800166c:	4603      	mov	r3, r0
 800166e:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
 8001672:	4618      	mov	r0, r3
 8001674:	f7ff fca6 	bl	8000fc4 <__aeabi_fdiv>
 8001678:	4603      	mov	r3, r0
 800167a:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 800167e:	4618      	mov	r0, r3
 8001680:	f7ff fbec 	bl	8000e5c <__aeabi_fmul>
 8001684:	4603      	mov	r3, r0
 8001686:	4618      	mov	r0, r3
 8001688:	f7fe ff3a 	bl	8000500 <__aeabi_f2d>
 800168c:	a31c      	add	r3, pc, #112	; (adr r3, 8001700 <DecodeAccelerate+0x100>)
 800168e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001692:	f7fe ff8d 	bl	80005b0 <__aeabi_dmul>
 8001696:	4602      	mov	r2, r0
 8001698:	460b      	mov	r3, r1
 800169a:	4610      	mov	r0, r2
 800169c:	4619      	mov	r1, r3
 800169e:	f7ff fa7f 	bl	8000ba0 <__aeabi_d2f>
 80016a2:	4603      	mov	r3, r0
 80016a4:	4a19      	ldr	r2, [pc, #100]	; (800170c <DecodeAccelerate+0x10c>)
 80016a6:	6053      	str	r3, [r2, #4]
	Accelerate.accelerate_z = (float)((jy62Message[7]<<8)|jy62Message[6])/32768 * 16 * g ;
 80016a8:	4b17      	ldr	r3, [pc, #92]	; (8001708 <DecodeAccelerate+0x108>)
 80016aa:	79db      	ldrb	r3, [r3, #7]
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	021b      	lsls	r3, r3, #8
 80016b0:	4a15      	ldr	r2, [pc, #84]	; (8001708 <DecodeAccelerate+0x108>)
 80016b2:	7992      	ldrb	r2, [r2, #6]
 80016b4:	b2d2      	uxtb	r2, r2
 80016b6:	4313      	orrs	r3, r2
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7ff fb7b 	bl	8000db4 <__aeabi_i2f>
 80016be:	4603      	mov	r3, r0
 80016c0:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7ff fc7d 	bl	8000fc4 <__aeabi_fdiv>
 80016ca:	4603      	mov	r3, r0
 80016cc:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff fbc3 	bl	8000e5c <__aeabi_fmul>
 80016d6:	4603      	mov	r3, r0
 80016d8:	4618      	mov	r0, r3
 80016da:	f7fe ff11 	bl	8000500 <__aeabi_f2d>
 80016de:	a308      	add	r3, pc, #32	; (adr r3, 8001700 <DecodeAccelerate+0x100>)
 80016e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e4:	f7fe ff64 	bl	80005b0 <__aeabi_dmul>
 80016e8:	4602      	mov	r2, r0
 80016ea:	460b      	mov	r3, r1
 80016ec:	4610      	mov	r0, r2
 80016ee:	4619      	mov	r1, r3
 80016f0:	f7ff fa56 	bl	8000ba0 <__aeabi_d2f>
 80016f4:	4603      	mov	r3, r0
 80016f6:	4a05      	ldr	r2, [pc, #20]	; (800170c <DecodeAccelerate+0x10c>)
 80016f8:	6093      	str	r3, [r2, #8]
}
 80016fa:	bf00      	nop
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	9999999a 	.word	0x9999999a
 8001704:	40239999 	.word	0x40239999
 8001708:	20000230 	.word	0x20000230
 800170c:	20000240 	.word	0x20000240

08001710 <DecodeVelocity>:

void DecodeVelocity()
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
	Velocity.velocity_x = (float)((jy62Message[3]<<8)|jy62Message[2])/32768 * 2000 ;
 8001714:	4b27      	ldr	r3, [pc, #156]	; (80017b4 <DecodeVelocity+0xa4>)
 8001716:	78db      	ldrb	r3, [r3, #3]
 8001718:	b2db      	uxtb	r3, r3
 800171a:	021b      	lsls	r3, r3, #8
 800171c:	4a25      	ldr	r2, [pc, #148]	; (80017b4 <DecodeVelocity+0xa4>)
 800171e:	7892      	ldrb	r2, [r2, #2]
 8001720:	b2d2      	uxtb	r2, r2
 8001722:	4313      	orrs	r3, r2
 8001724:	4618      	mov	r0, r3
 8001726:	f7ff fb45 	bl	8000db4 <__aeabi_i2f>
 800172a:	4603      	mov	r3, r0
 800172c:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
 8001730:	4618      	mov	r0, r3
 8001732:	f7ff fc47 	bl	8000fc4 <__aeabi_fdiv>
 8001736:	4603      	mov	r3, r0
 8001738:	491f      	ldr	r1, [pc, #124]	; (80017b8 <DecodeVelocity+0xa8>)
 800173a:	4618      	mov	r0, r3
 800173c:	f7ff fb8e 	bl	8000e5c <__aeabi_fmul>
 8001740:	4603      	mov	r3, r0
 8001742:	461a      	mov	r2, r3
 8001744:	4b1d      	ldr	r3, [pc, #116]	; (80017bc <DecodeVelocity+0xac>)
 8001746:	601a      	str	r2, [r3, #0]
	Velocity.velocity_y = (float)((jy62Message[5]<<8)|jy62Message[4])/32768 * 2000 ;
 8001748:	4b1a      	ldr	r3, [pc, #104]	; (80017b4 <DecodeVelocity+0xa4>)
 800174a:	795b      	ldrb	r3, [r3, #5]
 800174c:	b2db      	uxtb	r3, r3
 800174e:	021b      	lsls	r3, r3, #8
 8001750:	4a18      	ldr	r2, [pc, #96]	; (80017b4 <DecodeVelocity+0xa4>)
 8001752:	7912      	ldrb	r2, [r2, #4]
 8001754:	b2d2      	uxtb	r2, r2
 8001756:	4313      	orrs	r3, r2
 8001758:	4618      	mov	r0, r3
 800175a:	f7ff fb2b 	bl	8000db4 <__aeabi_i2f>
 800175e:	4603      	mov	r3, r0
 8001760:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
 8001764:	4618      	mov	r0, r3
 8001766:	f7ff fc2d 	bl	8000fc4 <__aeabi_fdiv>
 800176a:	4603      	mov	r3, r0
 800176c:	4912      	ldr	r1, [pc, #72]	; (80017b8 <DecodeVelocity+0xa8>)
 800176e:	4618      	mov	r0, r3
 8001770:	f7ff fb74 	bl	8000e5c <__aeabi_fmul>
 8001774:	4603      	mov	r3, r0
 8001776:	461a      	mov	r2, r3
 8001778:	4b10      	ldr	r3, [pc, #64]	; (80017bc <DecodeVelocity+0xac>)
 800177a:	605a      	str	r2, [r3, #4]
	Velocity.velocity_z = (float)((jy62Message[7]<<8)|jy62Message[6])/32768 * 2000 ;
 800177c:	4b0d      	ldr	r3, [pc, #52]	; (80017b4 <DecodeVelocity+0xa4>)
 800177e:	79db      	ldrb	r3, [r3, #7]
 8001780:	b2db      	uxtb	r3, r3
 8001782:	021b      	lsls	r3, r3, #8
 8001784:	4a0b      	ldr	r2, [pc, #44]	; (80017b4 <DecodeVelocity+0xa4>)
 8001786:	7992      	ldrb	r2, [r2, #6]
 8001788:	b2d2      	uxtb	r2, r2
 800178a:	4313      	orrs	r3, r2
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff fb11 	bl	8000db4 <__aeabi_i2f>
 8001792:	4603      	mov	r3, r0
 8001794:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
 8001798:	4618      	mov	r0, r3
 800179a:	f7ff fc13 	bl	8000fc4 <__aeabi_fdiv>
 800179e:	4603      	mov	r3, r0
 80017a0:	4905      	ldr	r1, [pc, #20]	; (80017b8 <DecodeVelocity+0xa8>)
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7ff fb5a 	bl	8000e5c <__aeabi_fmul>
 80017a8:	4603      	mov	r3, r0
 80017aa:	461a      	mov	r2, r3
 80017ac:	4b03      	ldr	r3, [pc, #12]	; (80017bc <DecodeVelocity+0xac>)
 80017ae:	609a      	str	r2, [r3, #8]
}
 80017b0:	bf00      	nop
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	20000230 	.word	0x20000230
 80017b8:	44fa0000 	.word	0x44fa0000
 80017bc:	2000024c 	.word	0x2000024c

080017c0 <DecodeTemperature>:

void DecodeTemperature()
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
	Temperature.temperature = ((short)(jy62Message[9])<<8 | jy62Message[8])/340 +36.53;
 80017c4:	4b12      	ldr	r3, [pc, #72]	; (8001810 <DecodeTemperature+0x50>)
 80017c6:	7a5b      	ldrb	r3, [r3, #9]
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	021b      	lsls	r3, r3, #8
 80017cc:	4a10      	ldr	r2, [pc, #64]	; (8001810 <DecodeTemperature+0x50>)
 80017ce:	7a12      	ldrb	r2, [r2, #8]
 80017d0:	b2d2      	uxtb	r2, r2
 80017d2:	4313      	orrs	r3, r2
 80017d4:	4a0f      	ldr	r2, [pc, #60]	; (8001814 <DecodeTemperature+0x54>)
 80017d6:	fb82 1203 	smull	r1, r2, r2, r3
 80017da:	11d2      	asrs	r2, r2, #7
 80017dc:	17db      	asrs	r3, r3, #31
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7fe fe7b 	bl	80004dc <__aeabi_i2d>
 80017e6:	a308      	add	r3, pc, #32	; (adr r3, 8001808 <DecodeTemperature+0x48>)
 80017e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ec:	f7fe fd2a 	bl	8000244 <__adddf3>
 80017f0:	4602      	mov	r2, r0
 80017f2:	460b      	mov	r3, r1
 80017f4:	4610      	mov	r0, r2
 80017f6:	4619      	mov	r1, r3
 80017f8:	f7ff f9d2 	bl	8000ba0 <__aeabi_d2f>
 80017fc:	4603      	mov	r3, r0
 80017fe:	4a06      	ldr	r2, [pc, #24]	; (8001818 <DecodeTemperature+0x58>)
 8001800:	6013      	str	r3, [r2, #0]
} 
 8001802:	bf00      	nop
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	0a3d70a4 	.word	0x0a3d70a4
 800180c:	404243d7 	.word	0x404243d7
 8001810:	20000230 	.word	0x20000230
 8001814:	60606061 	.word	0x60606061
 8001818:	20000264 	.word	0x20000264

0800181c <Decode>:


void Decode()
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
    switch (jy62Message[1])
 8001820:	4b0c      	ldr	r3, [pc, #48]	; (8001854 <Decode+0x38>)
 8001822:	785b      	ldrb	r3, [r3, #1]
 8001824:	b2db      	uxtb	r3, r3
 8001826:	2b53      	cmp	r3, #83	; 0x53
 8001828:	d00c      	beq.n	8001844 <Decode+0x28>
 800182a:	2b53      	cmp	r3, #83	; 0x53
 800182c:	dc0d      	bgt.n	800184a <Decode+0x2e>
 800182e:	2b51      	cmp	r3, #81	; 0x51
 8001830:	d002      	beq.n	8001838 <Decode+0x1c>
 8001832:	2b52      	cmp	r3, #82	; 0x52
 8001834:	d003      	beq.n	800183e <Decode+0x22>
 8001836:	e008      	b.n	800184a <Decode+0x2e>
	{
	    case 0x51: DecodeAccelerate(); break;
 8001838:	f7ff fee2 	bl	8001600 <DecodeAccelerate>
 800183c:	e005      	b.n	800184a <Decode+0x2e>
		case 0x52: DecodeVelocity();  break;
 800183e:	f7ff ff67 	bl	8001710 <DecodeVelocity>
 8001842:	e002      	b.n	800184a <Decode+0x2e>
		case 0x53: DecodeAngle(); break;
 8001844:	f7ff fe84 	bl	8001550 <DecodeAngle>
 8001848:	bf00      	nop
	}
	DecodeTemperature();
 800184a:	f7ff ffb9 	bl	80017c0 <DecodeTemperature>
}
 800184e:	bf00      	nop
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	20000230 	.word	0x20000230

08001858 <pid>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

float pid(pidstr *a,float dr)//用于更新PWM的占空比
{
 8001858:	b5b0      	push	{r4, r5, r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	6039      	str	r1, [r7, #0]
  a->sum = a->sum + dr;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	6839      	ldr	r1, [r7, #0]
 8001868:	4618      	mov	r0, r3
 800186a:	f7ff f9ef 	bl	8000c4c <__addsf3>
 800186e:	4603      	mov	r3, r0
 8001870:	461a      	mov	r2, r3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	601a      	str	r2, [r3, #0]
  float pwm = a->Kp * dr + a->Ki * a->sum + a->Kd * (dr - a->lr);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	6839      	ldr	r1, [r7, #0]
 800187c:	4618      	mov	r0, r3
 800187e:	f7ff faed 	bl	8000e5c <__aeabi_fmul>
 8001882:	4603      	mov	r3, r0
 8001884:	461c      	mov	r4, r3
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	68da      	ldr	r2, [r3, #12]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4619      	mov	r1, r3
 8001890:	4610      	mov	r0, r2
 8001892:	f7ff fae3 	bl	8000e5c <__aeabi_fmul>
 8001896:	4603      	mov	r3, r0
 8001898:	4619      	mov	r1, r3
 800189a:	4620      	mov	r0, r4
 800189c:	f7ff f9d6 	bl	8000c4c <__addsf3>
 80018a0:	4603      	mov	r3, r0
 80018a2:	461d      	mov	r5, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	691c      	ldr	r4, [r3, #16]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	4619      	mov	r1, r3
 80018ae:	6838      	ldr	r0, [r7, #0]
 80018b0:	f7ff f9ca 	bl	8000c48 <__aeabi_fsub>
 80018b4:	4603      	mov	r3, r0
 80018b6:	4619      	mov	r1, r3
 80018b8:	4620      	mov	r0, r4
 80018ba:	f7ff facf 	bl	8000e5c <__aeabi_fmul>
 80018be:	4603      	mov	r3, r0
 80018c0:	4619      	mov	r1, r3
 80018c2:	4628      	mov	r0, r5
 80018c4:	f7ff f9c2 	bl	8000c4c <__addsf3>
 80018c8:	4603      	mov	r3, r0
 80018ca:	60fb      	str	r3, [r7, #12]
  a->lr = dr;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	683a      	ldr	r2, [r7, #0]
 80018d0:	605a      	str	r2, [r3, #4]
  if(pwm >= PID_MAX){
 80018d2:	490c      	ldr	r1, [pc, #48]	; (8001904 <pid+0xac>)
 80018d4:	68f8      	ldr	r0, [r7, #12]
 80018d6:	f7ff fc73 	bl	80011c0 <__aeabi_fcmpge>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d001      	beq.n	80018e4 <pid+0x8c>
    return PID_MAX;
 80018e0:	4b08      	ldr	r3, [pc, #32]	; (8001904 <pid+0xac>)
 80018e2:	e00b      	b.n	80018fc <pid+0xa4>
  }
  else if(pwm <= PID_MIN)
 80018e4:	f04f 0100 	mov.w	r1, #0
 80018e8:	68f8      	ldr	r0, [r7, #12]
 80018ea:	f7ff fc5f 	bl	80011ac <__aeabi_fcmple>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d002      	beq.n	80018fa <pid+0xa2>
  {
    return PID_MIN;
 80018f4:	f04f 0300 	mov.w	r3, #0
 80018f8:	e000      	b.n	80018fc <pid+0xa4>
  }
  else
  {
    return pwm;
 80018fa:	68fb      	ldr	r3, [r7, #12]
  }
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3710      	adds	r7, #16
 8001900:	46bd      	mov	sp, r7
 8001902:	bdb0      	pop	{r4, r5, r7, pc}
 8001904:	447a0000 	.word	0x447a0000

08001908 <HAL_TIM_PeriodElapsedCallback>:

//这个刚刚加过了，只是告诉读�?�应该放�??
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001908:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800190c:	b08e      	sub	sp, #56	; 0x38
 800190e:	af04      	add	r7, sp, #16
 8001910:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM2)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800191a:	d16c      	bne.n	80019f6 <HAL_TIM_PeriodElapsedCallback+0xee>
	  {
	    int cnt=__HAL_TIM_GetCounter(&htim3);
 800191c:	4b3c      	ldr	r3, [pc, #240]	; (8001a10 <HAL_TIM_PeriodElapsedCallback+0x108>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001922:	627b      	str	r3, [r7, #36]	; 0x24
	    if (cnt>500){
 8001924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001926:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800192a:	dd04      	ble.n	8001936 <HAL_TIM_PeriodElapsedCallback+0x2e>
	    	cnt=(65535-cnt);
 800192c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192e:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8001932:	33ff      	adds	r3, #255	; 0xff
 8001934:	627b      	str	r3, [r7, #36]	; 0x24
	    }
	    __HAL_TIM_SetCounter(&htim3, 0);
 8001936:	4b36      	ldr	r3, [pc, #216]	; (8001a10 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	2200      	movs	r2, #0
 800193c:	625a      	str	r2, [r3, #36]	; 0x24
	    float vnow=(cnt/15.59)*20.7;//v单位：cm/s
 800193e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001940:	f7fe fdcc 	bl	80004dc <__aeabi_i2d>
 8001944:	a32e      	add	r3, pc, #184	; (adr r3, 8001a00 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800194a:	f7fe ff5b 	bl	8000804 <__aeabi_ddiv>
 800194e:	4602      	mov	r2, r0
 8001950:	460b      	mov	r3, r1
 8001952:	4610      	mov	r0, r2
 8001954:	4619      	mov	r1, r3
 8001956:	a32c      	add	r3, pc, #176	; (adr r3, 8001a08 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800195c:	f7fe fe28 	bl	80005b0 <__aeabi_dmul>
 8001960:	4602      	mov	r2, r0
 8001962:	460b      	mov	r3, r1
 8001964:	4610      	mov	r0, r2
 8001966:	4619      	mov	r1, r3
 8001968:	f7ff f91a 	bl	8000ba0 <__aeabi_d2f>
 800196c:	4603      	mov	r3, r0
 800196e:	623b      	str	r3, [r7, #32]
	    float dr=vset-vnow;
 8001970:	4b28      	ldr	r3, [pc, #160]	; (8001a14 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	6a39      	ldr	r1, [r7, #32]
 8001976:	4618      	mov	r0, r3
 8001978:	f7ff f966 	bl	8000c48 <__aeabi_fsub>
 800197c:	4603      	mov	r3, r0
 800197e:	61fb      	str	r3, [r7, #28]
	    float pwm=pid(&pidparm,dr);
 8001980:	69f9      	ldr	r1, [r7, #28]
 8001982:	4825      	ldr	r0, [pc, #148]	; (8001a18 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001984:	f7ff ff68 	bl	8001858 <pid>
 8001988:	61b8      	str	r0, [r7, #24]
	    //u1_printf("%f,%f,%f\n",vnow,vset,pwm);
	    int temp=pwm;
 800198a:	69b8      	ldr	r0, [r7, #24]
 800198c:	f7ff fc2c 	bl	80011e8 <__aeabi_f2iz>
 8001990:	4603      	mov	r3, r0
 8001992:	617b      	str	r3, [r7, #20]
	    //u1_printf("%f\n",pwm);
	    __HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_1, temp);
 8001994:	4b21      	ldr	r3, [pc, #132]	; (8001a1c <HAL_TIM_PeriodElapsedCallback+0x114>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	697a      	ldr	r2, [r7, #20]
 800199a:	635a      	str	r2, [r3, #52]	; 0x34
	    __HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_2, temp);
 800199c:	4b1f      	ldr	r3, [pc, #124]	; (8001a1c <HAL_TIM_PeriodElapsedCallback+0x114>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	697a      	ldr	r2, [r7, #20]
 80019a2:	639a      	str	r2, [r3, #56]	; 0x38
	    __HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_3, temp);
 80019a4:	4b1d      	ldr	r3, [pc, #116]	; (8001a1c <HAL_TIM_PeriodElapsedCallback+0x114>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	697a      	ldr	r2, [r7, #20]
 80019aa:	63da      	str	r2, [r3, #60]	; 0x3c
	    __HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_4, temp);
 80019ac:	4b1b      	ldr	r3, [pc, #108]	; (8001a1c <HAL_TIM_PeriodElapsedCallback+0x114>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	697a      	ldr	r2, [r7, #20]
 80019b2:	641a      	str	r2, [r3, #64]	; 0x40
	    float roll = GetRoll();
 80019b4:	f7ff fdae 	bl	8001514 <GetRoll>
 80019b8:	6138      	str	r0, [r7, #16]
	    	  float pitch = GetPitch();
 80019ba:	f7ff fdb5 	bl	8001528 <GetPitch>
 80019be:	60f8      	str	r0, [r7, #12]
	    	  float yaw = GetYaw();
 80019c0:	f7ff fdbc 	bl	800153c <GetYaw>
 80019c4:	60b8      	str	r0, [r7, #8]
	    	  u1_printf("ROW: %f, PITCH:%f, YAW:%f\r\n", roll, pitch, yaw);
 80019c6:	6938      	ldr	r0, [r7, #16]
 80019c8:	f7fe fd9a 	bl	8000500 <__aeabi_f2d>
 80019cc:	4680      	mov	r8, r0
 80019ce:	4689      	mov	r9, r1
 80019d0:	68f8      	ldr	r0, [r7, #12]
 80019d2:	f7fe fd95 	bl	8000500 <__aeabi_f2d>
 80019d6:	4604      	mov	r4, r0
 80019d8:	460d      	mov	r5, r1
 80019da:	68b8      	ldr	r0, [r7, #8]
 80019dc:	f7fe fd90 	bl	8000500 <__aeabi_f2d>
 80019e0:	4602      	mov	r2, r0
 80019e2:	460b      	mov	r3, r1
 80019e4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80019e8:	e9cd 4500 	strd	r4, r5, [sp]
 80019ec:	4642      	mov	r2, r8
 80019ee:	464b      	mov	r3, r9
 80019f0:	480b      	ldr	r0, [pc, #44]	; (8001a20 <HAL_TIM_PeriodElapsedCallback+0x118>)
 80019f2:	f000 fea7 	bl	8002744 <u1_printf>
	   }
}
 80019f6:	bf00      	nop
 80019f8:	3728      	adds	r7, #40	; 0x28
 80019fa:	46bd      	mov	sp, r7
 80019fc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001a00:	7ae147ae 	.word	0x7ae147ae
 8001a04:	402f2e14 	.word	0x402f2e14
 8001a08:	33333333 	.word	0x33333333
 8001a0c:	4034b333 	.word	0x4034b333
 8001a10:	20000300 	.word	0x20000300
 8001a14:	20000268 	.word	0x20000268
 8001a18:	20000014 	.word	0x20000014
 8001a1c:	20000270 	.word	0x20000270
 8001a20:	0800ab60 	.word	0x0800ab60

08001a24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a2a:	f000 fed9 	bl	80027e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a2e:	f000 f879 	bl	8001b24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a32:	f7ff fc55 	bl	80012e0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001a36:	f7ff fc35 	bl	80012a4 <MX_DMA_Init>
  MX_TIM1_Init();
 8001a3a:	f000 fb4b 	bl	80020d4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001a3e:	f000 fc0d 	bl	800225c <MX_TIM2_Init>
  MX_TIM3_Init();
 8001a42:	f000 fc57 	bl	80022f4 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8001a46:	f000 fd53 	bl	80024f0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001a4a:	f000 fd7b 	bl	8002544 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2); // 使能定时�??2
 8001a4e:	482f      	ldr	r0, [pc, #188]	; (8001b0c <main+0xe8>)
 8001a50:	f002 faea 	bl	8004028 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);// 使能定定时器1的�?�道1，设定为PWM输出
 8001a54:	2100      	movs	r1, #0
 8001a56:	482e      	ldr	r0, [pc, #184]	; (8001b10 <main+0xec>)
 8001a58:	f002 fb9e 	bl	8004198 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001a5c:	2104      	movs	r1, #4
 8001a5e:	482c      	ldr	r0, [pc, #176]	; (8001b10 <main+0xec>)
 8001a60:	f002 fb9a 	bl	8004198 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001a64:	2108      	movs	r1, #8
 8001a66:	482a      	ldr	r0, [pc, #168]	; (8001b10 <main+0xec>)
 8001a68:	f002 fb96 	bl	8004198 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001a6c:	210c      	movs	r1, #12
 8001a6e:	4828      	ldr	r0, [pc, #160]	; (8001b10 <main+0xec>)
 8001a70:	f002 fb92 	bl	8004198 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL); //使能编码器时�??3
 8001a74:	213c      	movs	r1, #60	; 0x3c
 8001a76:	4827      	ldr	r0, [pc, #156]	; (8001b14 <main+0xf0>)
 8001a78:	f002 fcea 	bl	8004450 <HAL_TIM_Encoder_Start>
  int flag=1;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	607b      	str	r3, [r7, #4]
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_SET);//设置四个电机的转�??
 8001a80:	2201      	movs	r2, #1
 8001a82:	2101      	movs	r1, #1
 8001a84:	4824      	ldr	r0, [pc, #144]	; (8001b18 <main+0xf4>)
 8001a86:	f001 fe57 	bl	8003738 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	2102      	movs	r1, #2
 8001a8e:	4822      	ldr	r0, [pc, #136]	; (8001b18 <main+0xf4>)
 8001a90:	f001 fe52 	bl	8003738 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_2,GPIO_PIN_SET);
 8001a94:	2201      	movs	r2, #1
 8001a96:	2104      	movs	r1, #4
 8001a98:	481f      	ldr	r0, [pc, #124]	; (8001b18 <main+0xf4>)
 8001a9a:	f001 fe4d 	bl	8003738 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_3,GPIO_PIN_RESET);
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	2108      	movs	r1, #8
 8001aa2:	481d      	ldr	r0, [pc, #116]	; (8001b18 <main+0xf4>)
 8001aa4:	f001 fe48 	bl	8003738 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,GPIO_PIN_SET);
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	2110      	movs	r1, #16
 8001aac:	481a      	ldr	r0, [pc, #104]	; (8001b18 <main+0xf4>)
 8001aae:	f001 fe43 	bl	8003738 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_5,GPIO_PIN_RESET);
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	2120      	movs	r1, #32
 8001ab6:	4818      	ldr	r0, [pc, #96]	; (8001b18 <main+0xf4>)
 8001ab8:	f001 fe3e 	bl	8003738 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_6,GPIO_PIN_SET);
 8001abc:	2201      	movs	r2, #1
 8001abe:	2140      	movs	r1, #64	; 0x40
 8001ac0:	4815      	ldr	r0, [pc, #84]	; (8001b18 <main+0xf4>)
 8001ac2:	f001 fe39 	bl	8003738 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_RESET);
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	2180      	movs	r1, #128	; 0x80
 8001aca:	4813      	ldr	r0, [pc, #76]	; (8001b18 <main+0xf4>)
 8001acc:	f001 fe34 	bl	8003738 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  SetBaud(115200);
 8001ad0:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 8001ad4:	f7ff fcb8 	bl	8001448 <SetBaud>
  SetHorizontal();
 8001ad8:	f7ff fcdc 	bl	8001494 <SetHorizontal>
  InitAngle();
 8001adc:	f7ff fcea 	bl	80014b4 <InitAngle>
  Calibrate();
 8001ae0:	f7ff fcf8 	bl	80014d4 <Calibrate>
  SleepOrAwake();
 8001ae4:	f7ff fd06 	bl	80014f4 <SleepOrAwake>
  jy62_Init(&huart2);
 8001ae8:	480c      	ldr	r0, [pc, #48]	; (8001b1c <main+0xf8>)
 8001aea:	f7ff fc4f 	bl	800138c <jy62_Init>
  while (1)
  {
    /* USER CODE END WHILE */

	  HAL_Delay(1000);
 8001aee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001af2:	f000 fed7 	bl	80028a4 <HAL_Delay>
	  if(flag){
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d0f8      	beq.n	8001aee <main+0xca>
		  rotate(2,180);
 8001afc:	4908      	ldr	r1, [pc, #32]	; (8001b20 <main+0xfc>)
 8001afe:	2002      	movs	r0, #2
 8001b00:	f000 f92c 	bl	8001d5c <rotate>
		  flag=0;
 8001b04:	2300      	movs	r3, #0
 8001b06:	607b      	str	r3, [r7, #4]
	  HAL_Delay(1000);
 8001b08:	e7f1      	b.n	8001aee <main+0xca>
 8001b0a:	bf00      	nop
 8001b0c:	200002b8 	.word	0x200002b8
 8001b10:	20000270 	.word	0x20000270
 8001b14:	20000300 	.word	0x20000300
 8001b18:	40011000 	.word	0x40011000
 8001b1c:	20000390 	.word	0x20000390
 8001b20:	43340000 	.word	0x43340000

08001b24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b090      	sub	sp, #64	; 0x40
 8001b28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b2a:	f107 0318 	add.w	r3, r7, #24
 8001b2e:	2228      	movs	r2, #40	; 0x28
 8001b30:	2100      	movs	r1, #0
 8001b32:	4618      	mov	r0, r3
 8001b34:	f004 fbb0 	bl	8006298 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b38:	1d3b      	adds	r3, r7, #4
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	601a      	str	r2, [r3, #0]
 8001b3e:	605a      	str	r2, [r3, #4]
 8001b40:	609a      	str	r2, [r3, #8]
 8001b42:	60da      	str	r2, [r3, #12]
 8001b44:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b46:	2301      	movs	r3, #1
 8001b48:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b4a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b4e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001b50:	2300      	movs	r3, #0
 8001b52:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b54:	2301      	movs	r3, #1
 8001b56:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b58:	2302      	movs	r3, #2
 8001b5a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b5c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b60:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001b62:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001b66:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b68:	f107 0318 	add.w	r3, r7, #24
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f001 fdfb 	bl	8003768 <HAL_RCC_OscConfig>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d001      	beq.n	8001b7c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001b78:	f000 f819 	bl	8001bae <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b7c:	230f      	movs	r3, #15
 8001b7e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b80:	2302      	movs	r3, #2
 8001b82:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b84:	2300      	movs	r3, #0
 8001b86:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b8c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001b92:	1d3b      	adds	r3, r7, #4
 8001b94:	2102      	movs	r1, #2
 8001b96:	4618      	mov	r0, r3
 8001b98:	f002 f868 	bl	8003c6c <HAL_RCC_ClockConfig>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d001      	beq.n	8001ba6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001ba2:	f000 f804 	bl	8001bae <Error_Handler>
  }
}
 8001ba6:	bf00      	nop
 8001ba8:	3740      	adds	r7, #64	; 0x40
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}

08001bae <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bae:	b480      	push	{r7}
 8001bb0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bb2:	b672      	cpsid	i
}
 8001bb4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bb6:	e7fe      	b.n	8001bb6 <Error_Handler+0x8>

08001bb8 <setv>:
#include "jy62.h"
#include "usart.h"
float vset=0;
pidstr pidparm={0,0,1000,5,500};

void setv(float v){
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
	pidparm.lr=0.0;
 8001bc0:	4b07      	ldr	r3, [pc, #28]	; (8001be0 <setv+0x28>)
 8001bc2:	f04f 0200 	mov.w	r2, #0
 8001bc6:	605a      	str	r2, [r3, #4]
	pidparm.sum=0.0;//每一次设置速度时都要把pid参数中的lr和sum归零，减少误差
 8001bc8:	4b05      	ldr	r3, [pc, #20]	; (8001be0 <setv+0x28>)
 8001bca:	f04f 0200 	mov.w	r2, #0
 8001bce:	601a      	str	r2, [r3, #0]
	vset=v;
 8001bd0:	4a04      	ldr	r2, [pc, #16]	; (8001be4 <setv+0x2c>)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6013      	str	r3, [r2, #0]
}
 8001bd6:	bf00      	nop
 8001bd8:	370c      	adds	r7, #12
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bc80      	pop	{r7}
 8001bde:	4770      	bx	lr
 8001be0:	20000014 	.word	0x20000014
 8001be4:	20000268 	.word	0x20000268

08001be8 <setdir>:
	setdir(dir);
	setv(v);
	HAL_Delay(t);
	setv(0);
}
void setdir(int dir){
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
	if(dir==0){
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d128      	bne.n	8001c48 <setdir+0x60>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_SET);//设置四个电机的转�?
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	2101      	movs	r1, #1
 8001bfa:	4857      	ldr	r0, [pc, #348]	; (8001d58 <setdir+0x170>)
 8001bfc:	f001 fd9c 	bl	8003738 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8001c00:	2200      	movs	r2, #0
 8001c02:	2102      	movs	r1, #2
 8001c04:	4854      	ldr	r0, [pc, #336]	; (8001d58 <setdir+0x170>)
 8001c06:	f001 fd97 	bl	8003738 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_2,GPIO_PIN_SET);
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	2104      	movs	r1, #4
 8001c0e:	4852      	ldr	r0, [pc, #328]	; (8001d58 <setdir+0x170>)
 8001c10:	f001 fd92 	bl	8003738 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_3,GPIO_PIN_RESET);
 8001c14:	2200      	movs	r2, #0
 8001c16:	2108      	movs	r1, #8
 8001c18:	484f      	ldr	r0, [pc, #316]	; (8001d58 <setdir+0x170>)
 8001c1a:	f001 fd8d 	bl	8003738 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,GPIO_PIN_SET);
 8001c1e:	2201      	movs	r2, #1
 8001c20:	2110      	movs	r1, #16
 8001c22:	484d      	ldr	r0, [pc, #308]	; (8001d58 <setdir+0x170>)
 8001c24:	f001 fd88 	bl	8003738 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_5,GPIO_PIN_RESET);
 8001c28:	2200      	movs	r2, #0
 8001c2a:	2120      	movs	r1, #32
 8001c2c:	484a      	ldr	r0, [pc, #296]	; (8001d58 <setdir+0x170>)
 8001c2e:	f001 fd83 	bl	8003738 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_6,GPIO_PIN_SET);
 8001c32:	2201      	movs	r2, #1
 8001c34:	2140      	movs	r1, #64	; 0x40
 8001c36:	4848      	ldr	r0, [pc, #288]	; (8001d58 <setdir+0x170>)
 8001c38:	f001 fd7e 	bl	8003738 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_RESET);
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	2180      	movs	r1, #128	; 0x80
 8001c40:	4845      	ldr	r0, [pc, #276]	; (8001d58 <setdir+0x170>)
 8001c42:	f001 fd79 	bl	8003738 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_5,GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_6,GPIO_PIN_RESET);
	}
}
 8001c46:	e082      	b.n	8001d4e <setdir+0x166>
	else if(dir==1){
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d128      	bne.n	8001ca0 <setdir+0xb8>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);//设置四个电机的转�?
 8001c4e:	2201      	movs	r2, #1
 8001c50:	2102      	movs	r1, #2
 8001c52:	4841      	ldr	r0, [pc, #260]	; (8001d58 <setdir+0x170>)
 8001c54:	f001 fd70 	bl	8003738 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_RESET);
 8001c58:	2200      	movs	r2, #0
 8001c5a:	2101      	movs	r1, #1
 8001c5c:	483e      	ldr	r0, [pc, #248]	; (8001d58 <setdir+0x170>)
 8001c5e:	f001 fd6b 	bl	8003738 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_3,GPIO_PIN_SET);
 8001c62:	2201      	movs	r2, #1
 8001c64:	2108      	movs	r1, #8
 8001c66:	483c      	ldr	r0, [pc, #240]	; (8001d58 <setdir+0x170>)
 8001c68:	f001 fd66 	bl	8003738 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_2,GPIO_PIN_RESET);
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	2104      	movs	r1, #4
 8001c70:	4839      	ldr	r0, [pc, #228]	; (8001d58 <setdir+0x170>)
 8001c72:	f001 fd61 	bl	8003738 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_5,GPIO_PIN_SET);
 8001c76:	2201      	movs	r2, #1
 8001c78:	2120      	movs	r1, #32
 8001c7a:	4837      	ldr	r0, [pc, #220]	; (8001d58 <setdir+0x170>)
 8001c7c:	f001 fd5c 	bl	8003738 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,GPIO_PIN_RESET);
 8001c80:	2200      	movs	r2, #0
 8001c82:	2110      	movs	r1, #16
 8001c84:	4834      	ldr	r0, [pc, #208]	; (8001d58 <setdir+0x170>)
 8001c86:	f001 fd57 	bl	8003738 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	2180      	movs	r1, #128	; 0x80
 8001c8e:	4832      	ldr	r0, [pc, #200]	; (8001d58 <setdir+0x170>)
 8001c90:	f001 fd52 	bl	8003738 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_6,GPIO_PIN_RESET);
 8001c94:	2200      	movs	r2, #0
 8001c96:	2140      	movs	r1, #64	; 0x40
 8001c98:	482f      	ldr	r0, [pc, #188]	; (8001d58 <setdir+0x170>)
 8001c9a:	f001 fd4d 	bl	8003738 <HAL_GPIO_WritePin>
}
 8001c9e:	e056      	b.n	8001d4e <setdir+0x166>
	else if(dir==2){
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d128      	bne.n	8001cf8 <setdir+0x110>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);//设置四个电机的转�?
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	2102      	movs	r1, #2
 8001caa:	482b      	ldr	r0, [pc, #172]	; (8001d58 <setdir+0x170>)
 8001cac:	f001 fd44 	bl	8003738 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_RESET);
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	2101      	movs	r1, #1
 8001cb4:	4828      	ldr	r0, [pc, #160]	; (8001d58 <setdir+0x170>)
 8001cb6:	f001 fd3f 	bl	8003738 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_2,GPIO_PIN_SET);
 8001cba:	2201      	movs	r2, #1
 8001cbc:	2104      	movs	r1, #4
 8001cbe:	4826      	ldr	r0, [pc, #152]	; (8001d58 <setdir+0x170>)
 8001cc0:	f001 fd3a 	bl	8003738 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_3,GPIO_PIN_RESET);
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	2108      	movs	r1, #8
 8001cc8:	4823      	ldr	r0, [pc, #140]	; (8001d58 <setdir+0x170>)
 8001cca:	f001 fd35 	bl	8003738 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_5,GPIO_PIN_SET);
 8001cce:	2201      	movs	r2, #1
 8001cd0:	2120      	movs	r1, #32
 8001cd2:	4821      	ldr	r0, [pc, #132]	; (8001d58 <setdir+0x170>)
 8001cd4:	f001 fd30 	bl	8003738 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,GPIO_PIN_RESET);
 8001cd8:	2200      	movs	r2, #0
 8001cda:	2110      	movs	r1, #16
 8001cdc:	481e      	ldr	r0, [pc, #120]	; (8001d58 <setdir+0x170>)
 8001cde:	f001 fd2b 	bl	8003738 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_6,GPIO_PIN_SET);
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	2140      	movs	r1, #64	; 0x40
 8001ce6:	481c      	ldr	r0, [pc, #112]	; (8001d58 <setdir+0x170>)
 8001ce8:	f001 fd26 	bl	8003738 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_RESET);
 8001cec:	2200      	movs	r2, #0
 8001cee:	2180      	movs	r1, #128	; 0x80
 8001cf0:	4819      	ldr	r0, [pc, #100]	; (8001d58 <setdir+0x170>)
 8001cf2:	f001 fd21 	bl	8003738 <HAL_GPIO_WritePin>
}
 8001cf6:	e02a      	b.n	8001d4e <setdir+0x166>
	else if(dir==3){
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2b03      	cmp	r3, #3
 8001cfc:	d127      	bne.n	8001d4e <setdir+0x166>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_SET);//设置四个电机的转�?
 8001cfe:	2201      	movs	r2, #1
 8001d00:	2101      	movs	r1, #1
 8001d02:	4815      	ldr	r0, [pc, #84]	; (8001d58 <setdir+0x170>)
 8001d04:	f001 fd18 	bl	8003738 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8001d08:	2200      	movs	r2, #0
 8001d0a:	2102      	movs	r1, #2
 8001d0c:	4812      	ldr	r0, [pc, #72]	; (8001d58 <setdir+0x170>)
 8001d0e:	f001 fd13 	bl	8003738 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_3,GPIO_PIN_SET);
 8001d12:	2201      	movs	r2, #1
 8001d14:	2108      	movs	r1, #8
 8001d16:	4810      	ldr	r0, [pc, #64]	; (8001d58 <setdir+0x170>)
 8001d18:	f001 fd0e 	bl	8003738 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_2,GPIO_PIN_RESET);
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	2104      	movs	r1, #4
 8001d20:	480d      	ldr	r0, [pc, #52]	; (8001d58 <setdir+0x170>)
 8001d22:	f001 fd09 	bl	8003738 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,GPIO_PIN_SET);
 8001d26:	2201      	movs	r2, #1
 8001d28:	2110      	movs	r1, #16
 8001d2a:	480b      	ldr	r0, [pc, #44]	; (8001d58 <setdir+0x170>)
 8001d2c:	f001 fd04 	bl	8003738 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_5,GPIO_PIN_RESET);
 8001d30:	2200      	movs	r2, #0
 8001d32:	2120      	movs	r1, #32
 8001d34:	4808      	ldr	r0, [pc, #32]	; (8001d58 <setdir+0x170>)
 8001d36:	f001 fcff 	bl	8003738 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	2180      	movs	r1, #128	; 0x80
 8001d3e:	4806      	ldr	r0, [pc, #24]	; (8001d58 <setdir+0x170>)
 8001d40:	f001 fcfa 	bl	8003738 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_6,GPIO_PIN_RESET);
 8001d44:	2200      	movs	r2, #0
 8001d46:	2140      	movs	r1, #64	; 0x40
 8001d48:	4803      	ldr	r0, [pc, #12]	; (8001d58 <setdir+0x170>)
 8001d4a:	f001 fcf5 	bl	8003738 <HAL_GPIO_WritePin>
}
 8001d4e:	bf00      	nop
 8001d50:	3708      	adds	r7, #8
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	40011000 	.word	0x40011000

08001d5c <rotate>:
void rotate(int dir,float angle){
 8001d5c:	b590      	push	{r4, r7, lr}
 8001d5e:	b087      	sub	sp, #28
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	6039      	str	r1, [r7, #0]
	setdir(dir);
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f7ff ff3e 	bl	8001be8 <setdir>
	float yaw =GetYaw();
 8001d6c:	f7ff fbe6 	bl	800153c <GetYaw>
 8001d70:	6138      	str	r0, [r7, #16]
	float pitch =GetPitch();
 8001d72:	f7ff fbd9 	bl	8001528 <GetPitch>
 8001d76:	60f8      	str	r0, [r7, #12]


	if(pitch!=0){
 8001d78:	f04f 0100 	mov.w	r1, #0
 8001d7c:	68f8      	ldr	r0, [r7, #12]
 8001d7e:	f7ff fa01 	bl	8001184 <__aeabi_fcmpeq>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d000      	beq.n	8001d8a <rotate+0x2e>
				setv(0);
			}//右转
	}


}
 8001d88:	e05b      	b.n	8001e42 <rotate+0xe6>
		setv(30);
 8001d8a:	4830      	ldr	r0, [pc, #192]	; (8001e4c <rotate+0xf0>)
 8001d8c:	f7ff ff14 	bl	8001bb8 <setv>
		InitAngle();//航向角Yaw清零
 8001d90:	f7ff fb90 	bl	80014b4 <InitAngle>
		if(dir==2){
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d137      	bne.n	8001e0a <rotate+0xae>
				float yaw = GetYaw();
 8001d9a:	f7ff fbcf 	bl	800153c <GetYaw>
 8001d9e:	6178      	str	r0, [r7, #20]
				while(!(yaw>angle-5&&yaw<angle+5)){
 8001da0:	e002      	b.n	8001da8 <rotate+0x4c>
					yaw=GetYaw();
 8001da2:	f7ff fbcb 	bl	800153c <GetYaw>
 8001da6:	6178      	str	r0, [r7, #20]
				while(!(yaw>angle-5&&yaw<angle+5)){
 8001da8:	4929      	ldr	r1, [pc, #164]	; (8001e50 <rotate+0xf4>)
 8001daa:	6838      	ldr	r0, [r7, #0]
 8001dac:	f7fe ff4c 	bl	8000c48 <__aeabi_fsub>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2201      	movs	r2, #1
 8001db4:	4614      	mov	r4, r2
 8001db6:	4619      	mov	r1, r3
 8001db8:	6978      	ldr	r0, [r7, #20]
 8001dba:	f7ff fa0b 	bl	80011d4 <__aeabi_fcmpgt>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d101      	bne.n	8001dc8 <rotate+0x6c>
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	461c      	mov	r4, r3
 8001dc8:	b2e3      	uxtb	r3, r4
 8001dca:	f083 0301 	eor.w	r3, r3, #1
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d1e6      	bne.n	8001da2 <rotate+0x46>
 8001dd4:	491e      	ldr	r1, [pc, #120]	; (8001e50 <rotate+0xf4>)
 8001dd6:	6838      	ldr	r0, [r7, #0]
 8001dd8:	f7fe ff38 	bl	8000c4c <__addsf3>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2201      	movs	r2, #1
 8001de0:	4614      	mov	r4, r2
 8001de2:	4619      	mov	r1, r3
 8001de4:	6978      	ldr	r0, [r7, #20]
 8001de6:	f7ff f9d7 	bl	8001198 <__aeabi_fcmplt>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d101      	bne.n	8001df4 <rotate+0x98>
 8001df0:	2300      	movs	r3, #0
 8001df2:	461c      	mov	r4, r3
 8001df4:	b2e3      	uxtb	r3, r4
 8001df6:	f083 0301 	eor.w	r3, r3, #1
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d1d0      	bne.n	8001da2 <rotate+0x46>
				setv(0);
 8001e00:	f04f 0000 	mov.w	r0, #0
 8001e04:	f7ff fed8 	bl	8001bb8 <setv>
}
 8001e08:	e01b      	b.n	8001e42 <rotate+0xe6>
			else if(dir==3){
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2b03      	cmp	r3, #3
 8001e0e:	d118      	bne.n	8001e42 <rotate+0xe6>
				while(GetYaw()>(360-angle)+5){
 8001e10:	bf00      	nop
 8001e12:	f7ff fb93 	bl	800153c <GetYaw>
 8001e16:	4604      	mov	r4, r0
 8001e18:	6839      	ldr	r1, [r7, #0]
 8001e1a:	480e      	ldr	r0, [pc, #56]	; (8001e54 <rotate+0xf8>)
 8001e1c:	f7fe ff14 	bl	8000c48 <__aeabi_fsub>
 8001e20:	4603      	mov	r3, r0
 8001e22:	490b      	ldr	r1, [pc, #44]	; (8001e50 <rotate+0xf4>)
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7fe ff11 	bl	8000c4c <__addsf3>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	4620      	mov	r0, r4
 8001e30:	f7ff f9d0 	bl	80011d4 <__aeabi_fcmpgt>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d1eb      	bne.n	8001e12 <rotate+0xb6>
				setv(0);
 8001e3a:	f04f 0000 	mov.w	r0, #0
 8001e3e:	f7ff febb 	bl	8001bb8 <setv>
}
 8001e42:	bf00      	nop
 8001e44:	371c      	adds	r7, #28
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd90      	pop	{r4, r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	41f00000 	.word	0x41f00000
 8001e50:	40a00000 	.word	0x40a00000
 8001e54:	43b40000 	.word	0x43b40000

08001e58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b085      	sub	sp, #20
 8001e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001e5e:	4b15      	ldr	r3, [pc, #84]	; (8001eb4 <HAL_MspInit+0x5c>)
 8001e60:	699b      	ldr	r3, [r3, #24]
 8001e62:	4a14      	ldr	r2, [pc, #80]	; (8001eb4 <HAL_MspInit+0x5c>)
 8001e64:	f043 0301 	orr.w	r3, r3, #1
 8001e68:	6193      	str	r3, [r2, #24]
 8001e6a:	4b12      	ldr	r3, [pc, #72]	; (8001eb4 <HAL_MspInit+0x5c>)
 8001e6c:	699b      	ldr	r3, [r3, #24]
 8001e6e:	f003 0301 	and.w	r3, r3, #1
 8001e72:	60bb      	str	r3, [r7, #8]
 8001e74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e76:	4b0f      	ldr	r3, [pc, #60]	; (8001eb4 <HAL_MspInit+0x5c>)
 8001e78:	69db      	ldr	r3, [r3, #28]
 8001e7a:	4a0e      	ldr	r2, [pc, #56]	; (8001eb4 <HAL_MspInit+0x5c>)
 8001e7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e80:	61d3      	str	r3, [r2, #28]
 8001e82:	4b0c      	ldr	r3, [pc, #48]	; (8001eb4 <HAL_MspInit+0x5c>)
 8001e84:	69db      	ldr	r3, [r3, #28]
 8001e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e8a:	607b      	str	r3, [r7, #4]
 8001e8c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001e8e:	4b0a      	ldr	r3, [pc, #40]	; (8001eb8 <HAL_MspInit+0x60>)
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	60fb      	str	r3, [r7, #12]
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001e9a:	60fb      	str	r3, [r7, #12]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ea2:	60fb      	str	r3, [r7, #12]
 8001ea4:	4a04      	ldr	r2, [pc, #16]	; (8001eb8 <HAL_MspInit+0x60>)
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001eaa:	bf00      	nop
 8001eac:	3714      	adds	r7, #20
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bc80      	pop	{r7}
 8001eb2:	4770      	bx	lr
 8001eb4:	40021000 	.word	0x40021000
 8001eb8:	40010000 	.word	0x40010000

08001ebc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ec0:	e7fe      	b.n	8001ec0 <NMI_Handler+0x4>

08001ec2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ec2:	b480      	push	{r7}
 8001ec4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ec6:	e7fe      	b.n	8001ec6 <HardFault_Handler+0x4>

08001ec8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ecc:	e7fe      	b.n	8001ecc <MemManage_Handler+0x4>

08001ece <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ece:	b480      	push	{r7}
 8001ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ed2:	e7fe      	b.n	8001ed2 <BusFault_Handler+0x4>

08001ed4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ed8:	e7fe      	b.n	8001ed8 <UsageFault_Handler+0x4>

08001eda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001eda:	b480      	push	{r7}
 8001edc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ede:	bf00      	nop
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bc80      	pop	{r7}
 8001ee4:	4770      	bx	lr

08001ee6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ee6:	b480      	push	{r7}
 8001ee8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001eea:	bf00      	nop
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bc80      	pop	{r7}
 8001ef0:	4770      	bx	lr

08001ef2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ef2:	b480      	push	{r7}
 8001ef4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ef6:	bf00      	nop
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bc80      	pop	{r7}
 8001efc:	4770      	bx	lr

08001efe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001efe:	b580      	push	{r7, lr}
 8001f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f02:	f000 fcb3 	bl	800286c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f06:	bf00      	nop
 8001f08:	bd80      	pop	{r7, pc}
	...

08001f0c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001f10:	4802      	ldr	r0, [pc, #8]	; (8001f1c <DMA1_Channel6_IRQHandler+0x10>)
 8001f12:	f001 f813 	bl	8002f3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001f16:	bf00      	nop
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	200003d8 	.word	0x200003d8

08001f20 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001f24:	4802      	ldr	r0, [pc, #8]	; (8001f30 <TIM2_IRQHandler+0x10>)
 8001f26:	f002 fb21 	bl	800456c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001f2a:	bf00      	nop
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	200002b8 	.word	0x200002b8

08001f34 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001f38:	4802      	ldr	r0, [pc, #8]	; (8001f44 <USART2_IRQHandler+0x10>)
 8001f3a:	f003 fa75 	bl	8005428 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001f3e:	bf00      	nop
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	20000390 	.word	0x20000390

08001f48 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
  return 1;
 8001f4c:	2301      	movs	r3, #1
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bc80      	pop	{r7}
 8001f54:	4770      	bx	lr

08001f56 <_kill>:

int _kill(int pid, int sig)
{
 8001f56:	b580      	push	{r7, lr}
 8001f58:	b082      	sub	sp, #8
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	6078      	str	r0, [r7, #4]
 8001f5e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f60:	f004 f970 	bl	8006244 <__errno>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2216      	movs	r2, #22
 8001f68:	601a      	str	r2, [r3, #0]
  return -1;
 8001f6a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3708      	adds	r7, #8
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}

08001f76 <_exit>:

void _exit (int status)
{
 8001f76:	b580      	push	{r7, lr}
 8001f78:	b082      	sub	sp, #8
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001f7e:	f04f 31ff 	mov.w	r1, #4294967295
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f7ff ffe7 	bl	8001f56 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f88:	e7fe      	b.n	8001f88 <_exit+0x12>

08001f8a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f8a:	b580      	push	{r7, lr}
 8001f8c:	b086      	sub	sp, #24
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	60f8      	str	r0, [r7, #12]
 8001f92:	60b9      	str	r1, [r7, #8]
 8001f94:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f96:	2300      	movs	r3, #0
 8001f98:	617b      	str	r3, [r7, #20]
 8001f9a:	e00a      	b.n	8001fb2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f9c:	f3af 8000 	nop.w
 8001fa0:	4601      	mov	r1, r0
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	1c5a      	adds	r2, r3, #1
 8001fa6:	60ba      	str	r2, [r7, #8]
 8001fa8:	b2ca      	uxtb	r2, r1
 8001faa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	3301      	adds	r3, #1
 8001fb0:	617b      	str	r3, [r7, #20]
 8001fb2:	697a      	ldr	r2, [r7, #20]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	dbf0      	blt.n	8001f9c <_read+0x12>
  }

  return len;
 8001fba:	687b      	ldr	r3, [r7, #4]
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3718      	adds	r7, #24
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}

08001fc4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b086      	sub	sp, #24
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	60f8      	str	r0, [r7, #12]
 8001fcc:	60b9      	str	r1, [r7, #8]
 8001fce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	617b      	str	r3, [r7, #20]
 8001fd4:	e009      	b.n	8001fea <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	1c5a      	adds	r2, r3, #1
 8001fda:	60ba      	str	r2, [r7, #8]
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	617b      	str	r3, [r7, #20]
 8001fea:	697a      	ldr	r2, [r7, #20]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	dbf1      	blt.n	8001fd6 <_write+0x12>
  }
  return len;
 8001ff2:	687b      	ldr	r3, [r7, #4]
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3718      	adds	r7, #24
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}

08001ffc <_close>:

int _close(int file)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002004:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002008:	4618      	mov	r0, r3
 800200a:	370c      	adds	r7, #12
 800200c:	46bd      	mov	sp, r7
 800200e:	bc80      	pop	{r7}
 8002010:	4770      	bx	lr

08002012 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002012:	b480      	push	{r7}
 8002014:	b083      	sub	sp, #12
 8002016:	af00      	add	r7, sp, #0
 8002018:	6078      	str	r0, [r7, #4]
 800201a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002022:	605a      	str	r2, [r3, #4]
  return 0;
 8002024:	2300      	movs	r3, #0
}
 8002026:	4618      	mov	r0, r3
 8002028:	370c      	adds	r7, #12
 800202a:	46bd      	mov	sp, r7
 800202c:	bc80      	pop	{r7}
 800202e:	4770      	bx	lr

08002030 <_isatty>:

int _isatty(int file)
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002038:	2301      	movs	r3, #1
}
 800203a:	4618      	mov	r0, r3
 800203c:	370c      	adds	r7, #12
 800203e:	46bd      	mov	sp, r7
 8002040:	bc80      	pop	{r7}
 8002042:	4770      	bx	lr

08002044 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002044:	b480      	push	{r7}
 8002046:	b085      	sub	sp, #20
 8002048:	af00      	add	r7, sp, #0
 800204a:	60f8      	str	r0, [r7, #12]
 800204c:	60b9      	str	r1, [r7, #8]
 800204e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002050:	2300      	movs	r3, #0
}
 8002052:	4618      	mov	r0, r3
 8002054:	3714      	adds	r7, #20
 8002056:	46bd      	mov	sp, r7
 8002058:	bc80      	pop	{r7}
 800205a:	4770      	bx	lr

0800205c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b086      	sub	sp, #24
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002064:	4a14      	ldr	r2, [pc, #80]	; (80020b8 <_sbrk+0x5c>)
 8002066:	4b15      	ldr	r3, [pc, #84]	; (80020bc <_sbrk+0x60>)
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002070:	4b13      	ldr	r3, [pc, #76]	; (80020c0 <_sbrk+0x64>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d102      	bne.n	800207e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002078:	4b11      	ldr	r3, [pc, #68]	; (80020c0 <_sbrk+0x64>)
 800207a:	4a12      	ldr	r2, [pc, #72]	; (80020c4 <_sbrk+0x68>)
 800207c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800207e:	4b10      	ldr	r3, [pc, #64]	; (80020c0 <_sbrk+0x64>)
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4413      	add	r3, r2
 8002086:	693a      	ldr	r2, [r7, #16]
 8002088:	429a      	cmp	r2, r3
 800208a:	d207      	bcs.n	800209c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800208c:	f004 f8da 	bl	8006244 <__errno>
 8002090:	4603      	mov	r3, r0
 8002092:	220c      	movs	r2, #12
 8002094:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002096:	f04f 33ff 	mov.w	r3, #4294967295
 800209a:	e009      	b.n	80020b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800209c:	4b08      	ldr	r3, [pc, #32]	; (80020c0 <_sbrk+0x64>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020a2:	4b07      	ldr	r3, [pc, #28]	; (80020c0 <_sbrk+0x64>)
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4413      	add	r3, r2
 80020aa:	4a05      	ldr	r2, [pc, #20]	; (80020c0 <_sbrk+0x64>)
 80020ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020ae:	68fb      	ldr	r3, [r7, #12]
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3718      	adds	r7, #24
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	2000c000 	.word	0x2000c000
 80020bc:	00000400 	.word	0x00000400
 80020c0:	2000026c 	.word	0x2000026c
 80020c4:	20000430 	.word	0x20000430

080020c8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020cc:	bf00      	nop
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bc80      	pop	{r7}
 80020d2:	4770      	bx	lr

080020d4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b096      	sub	sp, #88	; 0x58
 80020d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020da:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80020de:	2200      	movs	r2, #0
 80020e0:	601a      	str	r2, [r3, #0]
 80020e2:	605a      	str	r2, [r3, #4]
 80020e4:	609a      	str	r2, [r3, #8]
 80020e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020e8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80020ec:	2200      	movs	r2, #0
 80020ee:	601a      	str	r2, [r3, #0]
 80020f0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020f6:	2200      	movs	r2, #0
 80020f8:	601a      	str	r2, [r3, #0]
 80020fa:	605a      	str	r2, [r3, #4]
 80020fc:	609a      	str	r2, [r3, #8]
 80020fe:	60da      	str	r2, [r3, #12]
 8002100:	611a      	str	r2, [r3, #16]
 8002102:	615a      	str	r2, [r3, #20]
 8002104:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002106:	1d3b      	adds	r3, r7, #4
 8002108:	2220      	movs	r2, #32
 800210a:	2100      	movs	r1, #0
 800210c:	4618      	mov	r0, r3
 800210e:	f004 f8c3 	bl	8006298 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002112:	4b50      	ldr	r3, [pc, #320]	; (8002254 <MX_TIM1_Init+0x180>)
 8002114:	4a50      	ldr	r2, [pc, #320]	; (8002258 <MX_TIM1_Init+0x184>)
 8002116:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8002118:	4b4e      	ldr	r3, [pc, #312]	; (8002254 <MX_TIM1_Init+0x180>)
 800211a:	2247      	movs	r2, #71	; 0x47
 800211c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800211e:	4b4d      	ldr	r3, [pc, #308]	; (8002254 <MX_TIM1_Init+0x180>)
 8002120:	2200      	movs	r2, #0
 8002122:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8002124:	4b4b      	ldr	r3, [pc, #300]	; (8002254 <MX_TIM1_Init+0x180>)
 8002126:	f240 32e7 	movw	r2, #999	; 0x3e7
 800212a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800212c:	4b49      	ldr	r3, [pc, #292]	; (8002254 <MX_TIM1_Init+0x180>)
 800212e:	2200      	movs	r2, #0
 8002130:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002132:	4b48      	ldr	r3, [pc, #288]	; (8002254 <MX_TIM1_Init+0x180>)
 8002134:	2200      	movs	r2, #0
 8002136:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002138:	4b46      	ldr	r3, [pc, #280]	; (8002254 <MX_TIM1_Init+0x180>)
 800213a:	2200      	movs	r2, #0
 800213c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800213e:	4845      	ldr	r0, [pc, #276]	; (8002254 <MX_TIM1_Init+0x180>)
 8002140:	f001 ff22 	bl	8003f88 <HAL_TIM_Base_Init>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d001      	beq.n	800214e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800214a:	f7ff fd30 	bl	8001bae <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800214e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002152:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002154:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002158:	4619      	mov	r1, r3
 800215a:	483e      	ldr	r0, [pc, #248]	; (8002254 <MX_TIM1_Init+0x180>)
 800215c:	f002 fbd0 	bl	8004900 <HAL_TIM_ConfigClockSource>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d001      	beq.n	800216a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002166:	f7ff fd22 	bl	8001bae <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800216a:	483a      	ldr	r0, [pc, #232]	; (8002254 <MX_TIM1_Init+0x180>)
 800216c:	f001 ffbc 	bl	80040e8 <HAL_TIM_PWM_Init>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d001      	beq.n	800217a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8002176:	f7ff fd1a 	bl	8001bae <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800217a:	2300      	movs	r3, #0
 800217c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800217e:	2300      	movs	r3, #0
 8002180:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002182:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002186:	4619      	mov	r1, r3
 8002188:	4832      	ldr	r0, [pc, #200]	; (8002254 <MX_TIM1_Init+0x180>)
 800218a:	f002 ff85 	bl	8005098 <HAL_TIMEx_MasterConfigSynchronization>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d001      	beq.n	8002198 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002194:	f7ff fd0b 	bl	8001bae <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002198:	2360      	movs	r3, #96	; 0x60
 800219a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800219c:	2300      	movs	r3, #0
 800219e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021a0:	2300      	movs	r3, #0
 80021a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80021a4:	2300      	movs	r3, #0
 80021a6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021a8:	2300      	movs	r3, #0
 80021aa:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80021ac:	2300      	movs	r3, #0
 80021ae:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80021b0:	2300      	movs	r3, #0
 80021b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80021b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021b8:	2200      	movs	r2, #0
 80021ba:	4619      	mov	r1, r3
 80021bc:	4825      	ldr	r0, [pc, #148]	; (8002254 <MX_TIM1_Init+0x180>)
 80021be:	f002 fadd 	bl	800477c <HAL_TIM_PWM_ConfigChannel>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d001      	beq.n	80021cc <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80021c8:	f7ff fcf1 	bl	8001bae <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80021cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021d0:	2204      	movs	r2, #4
 80021d2:	4619      	mov	r1, r3
 80021d4:	481f      	ldr	r0, [pc, #124]	; (8002254 <MX_TIM1_Init+0x180>)
 80021d6:	f002 fad1 	bl	800477c <HAL_TIM_PWM_ConfigChannel>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d001      	beq.n	80021e4 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80021e0:	f7ff fce5 	bl	8001bae <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80021e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021e8:	2208      	movs	r2, #8
 80021ea:	4619      	mov	r1, r3
 80021ec:	4819      	ldr	r0, [pc, #100]	; (8002254 <MX_TIM1_Init+0x180>)
 80021ee:	f002 fac5 	bl	800477c <HAL_TIM_PWM_ConfigChannel>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d001      	beq.n	80021fc <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80021f8:	f7ff fcd9 	bl	8001bae <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80021fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002200:	220c      	movs	r2, #12
 8002202:	4619      	mov	r1, r3
 8002204:	4813      	ldr	r0, [pc, #76]	; (8002254 <MX_TIM1_Init+0x180>)
 8002206:	f002 fab9 	bl	800477c <HAL_TIM_PWM_ConfigChannel>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d001      	beq.n	8002214 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8002210:	f7ff fccd 	bl	8001bae <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002214:	2300      	movs	r3, #0
 8002216:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002218:	2300      	movs	r3, #0
 800221a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800221c:	2300      	movs	r3, #0
 800221e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002220:	2300      	movs	r3, #0
 8002222:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002224:	2300      	movs	r3, #0
 8002226:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002228:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800222c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800222e:	2300      	movs	r3, #0
 8002230:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002232:	1d3b      	adds	r3, r7, #4
 8002234:	4619      	mov	r1, r3
 8002236:	4807      	ldr	r0, [pc, #28]	; (8002254 <MX_TIM1_Init+0x180>)
 8002238:	f002 ff9a 	bl	8005170 <HAL_TIMEx_ConfigBreakDeadTime>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d001      	beq.n	8002246 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8002242:	f7ff fcb4 	bl	8001bae <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002246:	4803      	ldr	r0, [pc, #12]	; (8002254 <MX_TIM1_Init+0x180>)
 8002248:	f000 f91e 	bl	8002488 <HAL_TIM_MspPostInit>

}
 800224c:	bf00      	nop
 800224e:	3758      	adds	r7, #88	; 0x58
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	20000270 	.word	0x20000270
 8002258:	40012c00 	.word	0x40012c00

0800225c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b086      	sub	sp, #24
 8002260:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002262:	f107 0308 	add.w	r3, r7, #8
 8002266:	2200      	movs	r2, #0
 8002268:	601a      	str	r2, [r3, #0]
 800226a:	605a      	str	r2, [r3, #4]
 800226c:	609a      	str	r2, [r3, #8]
 800226e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002270:	463b      	mov	r3, r7
 8002272:	2200      	movs	r2, #0
 8002274:	601a      	str	r2, [r3, #0]
 8002276:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002278:	4b1d      	ldr	r3, [pc, #116]	; (80022f0 <MX_TIM2_Init+0x94>)
 800227a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800227e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8002280:	4b1b      	ldr	r3, [pc, #108]	; (80022f0 <MX_TIM2_Init+0x94>)
 8002282:	2247      	movs	r2, #71	; 0x47
 8002284:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002286:	4b1a      	ldr	r3, [pc, #104]	; (80022f0 <MX_TIM2_Init+0x94>)
 8002288:	2200      	movs	r2, #0
 800228a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 800228c:	4b18      	ldr	r3, [pc, #96]	; (80022f0 <MX_TIM2_Init+0x94>)
 800228e:	f242 720f 	movw	r2, #9999	; 0x270f
 8002292:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002294:	4b16      	ldr	r3, [pc, #88]	; (80022f0 <MX_TIM2_Init+0x94>)
 8002296:	2200      	movs	r2, #0
 8002298:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800229a:	4b15      	ldr	r3, [pc, #84]	; (80022f0 <MX_TIM2_Init+0x94>)
 800229c:	2200      	movs	r2, #0
 800229e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80022a0:	4813      	ldr	r0, [pc, #76]	; (80022f0 <MX_TIM2_Init+0x94>)
 80022a2:	f001 fe71 	bl	8003f88 <HAL_TIM_Base_Init>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d001      	beq.n	80022b0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80022ac:	f7ff fc7f 	bl	8001bae <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022b4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80022b6:	f107 0308 	add.w	r3, r7, #8
 80022ba:	4619      	mov	r1, r3
 80022bc:	480c      	ldr	r0, [pc, #48]	; (80022f0 <MX_TIM2_Init+0x94>)
 80022be:	f002 fb1f 	bl	8004900 <HAL_TIM_ConfigClockSource>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d001      	beq.n	80022cc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80022c8:	f7ff fc71 	bl	8001bae <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022cc:	2300      	movs	r3, #0
 80022ce:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022d0:	2300      	movs	r3, #0
 80022d2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80022d4:	463b      	mov	r3, r7
 80022d6:	4619      	mov	r1, r3
 80022d8:	4805      	ldr	r0, [pc, #20]	; (80022f0 <MX_TIM2_Init+0x94>)
 80022da:	f002 fedd 	bl	8005098 <HAL_TIMEx_MasterConfigSynchronization>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d001      	beq.n	80022e8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80022e4:	f7ff fc63 	bl	8001bae <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80022e8:	bf00      	nop
 80022ea:	3718      	adds	r7, #24
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	200002b8 	.word	0x200002b8

080022f4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b08c      	sub	sp, #48	; 0x30
 80022f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80022fa:	f107 030c 	add.w	r3, r7, #12
 80022fe:	2224      	movs	r2, #36	; 0x24
 8002300:	2100      	movs	r1, #0
 8002302:	4618      	mov	r0, r3
 8002304:	f003 ffc8 	bl	8006298 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002308:	1d3b      	adds	r3, r7, #4
 800230a:	2200      	movs	r2, #0
 800230c:	601a      	str	r2, [r3, #0]
 800230e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002310:	4b20      	ldr	r3, [pc, #128]	; (8002394 <MX_TIM3_Init+0xa0>)
 8002312:	4a21      	ldr	r2, [pc, #132]	; (8002398 <MX_TIM3_Init+0xa4>)
 8002314:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002316:	4b1f      	ldr	r3, [pc, #124]	; (8002394 <MX_TIM3_Init+0xa0>)
 8002318:	2200      	movs	r2, #0
 800231a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800231c:	4b1d      	ldr	r3, [pc, #116]	; (8002394 <MX_TIM3_Init+0xa0>)
 800231e:	2200      	movs	r2, #0
 8002320:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002322:	4b1c      	ldr	r3, [pc, #112]	; (8002394 <MX_TIM3_Init+0xa0>)
 8002324:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002328:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800232a:	4b1a      	ldr	r3, [pc, #104]	; (8002394 <MX_TIM3_Init+0xa0>)
 800232c:	2200      	movs	r2, #0
 800232e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002330:	4b18      	ldr	r3, [pc, #96]	; (8002394 <MX_TIM3_Init+0xa0>)
 8002332:	2200      	movs	r2, #0
 8002334:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002336:	2303      	movs	r3, #3
 8002338:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800233a:	2300      	movs	r3, #0
 800233c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800233e:	2301      	movs	r3, #1
 8002340:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002342:	2300      	movs	r3, #0
 8002344:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002346:	2300      	movs	r3, #0
 8002348:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800234a:	2300      	movs	r3, #0
 800234c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800234e:	2301      	movs	r3, #1
 8002350:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002352:	2300      	movs	r3, #0
 8002354:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002356:	2300      	movs	r3, #0
 8002358:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800235a:	f107 030c 	add.w	r3, r7, #12
 800235e:	4619      	mov	r1, r3
 8002360:	480c      	ldr	r0, [pc, #48]	; (8002394 <MX_TIM3_Init+0xa0>)
 8002362:	f001 ffd3 	bl	800430c <HAL_TIM_Encoder_Init>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d001      	beq.n	8002370 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800236c:	f7ff fc1f 	bl	8001bae <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002370:	2300      	movs	r3, #0
 8002372:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002374:	2300      	movs	r3, #0
 8002376:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002378:	1d3b      	adds	r3, r7, #4
 800237a:	4619      	mov	r1, r3
 800237c:	4805      	ldr	r0, [pc, #20]	; (8002394 <MX_TIM3_Init+0xa0>)
 800237e:	f002 fe8b 	bl	8005098 <HAL_TIMEx_MasterConfigSynchronization>
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d001      	beq.n	800238c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002388:	f7ff fc11 	bl	8001bae <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800238c:	bf00      	nop
 800238e:	3730      	adds	r7, #48	; 0x30
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	20000300 	.word	0x20000300
 8002398:	40000400 	.word	0x40000400

0800239c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b084      	sub	sp, #16
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a16      	ldr	r2, [pc, #88]	; (8002404 <HAL_TIM_Base_MspInit+0x68>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d10c      	bne.n	80023c8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80023ae:	4b16      	ldr	r3, [pc, #88]	; (8002408 <HAL_TIM_Base_MspInit+0x6c>)
 80023b0:	699b      	ldr	r3, [r3, #24]
 80023b2:	4a15      	ldr	r2, [pc, #84]	; (8002408 <HAL_TIM_Base_MspInit+0x6c>)
 80023b4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80023b8:	6193      	str	r3, [r2, #24]
 80023ba:	4b13      	ldr	r3, [pc, #76]	; (8002408 <HAL_TIM_Base_MspInit+0x6c>)
 80023bc:	699b      	ldr	r3, [r3, #24]
 80023be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023c2:	60fb      	str	r3, [r7, #12]
 80023c4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80023c6:	e018      	b.n	80023fa <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM2)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023d0:	d113      	bne.n	80023fa <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80023d2:	4b0d      	ldr	r3, [pc, #52]	; (8002408 <HAL_TIM_Base_MspInit+0x6c>)
 80023d4:	69db      	ldr	r3, [r3, #28]
 80023d6:	4a0c      	ldr	r2, [pc, #48]	; (8002408 <HAL_TIM_Base_MspInit+0x6c>)
 80023d8:	f043 0301 	orr.w	r3, r3, #1
 80023dc:	61d3      	str	r3, [r2, #28]
 80023de:	4b0a      	ldr	r3, [pc, #40]	; (8002408 <HAL_TIM_Base_MspInit+0x6c>)
 80023e0:	69db      	ldr	r3, [r3, #28]
 80023e2:	f003 0301 	and.w	r3, r3, #1
 80023e6:	60bb      	str	r3, [r7, #8]
 80023e8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80023ea:	2200      	movs	r2, #0
 80023ec:	2100      	movs	r1, #0
 80023ee:	201c      	movs	r0, #28
 80023f0:	f000 fb53 	bl	8002a9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80023f4:	201c      	movs	r0, #28
 80023f6:	f000 fb6c 	bl	8002ad2 <HAL_NVIC_EnableIRQ>
}
 80023fa:	bf00      	nop
 80023fc:	3710      	adds	r7, #16
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	40012c00 	.word	0x40012c00
 8002408:	40021000 	.word	0x40021000

0800240c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b088      	sub	sp, #32
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002414:	f107 0310 	add.w	r3, r7, #16
 8002418:	2200      	movs	r2, #0
 800241a:	601a      	str	r2, [r3, #0]
 800241c:	605a      	str	r2, [r3, #4]
 800241e:	609a      	str	r2, [r3, #8]
 8002420:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM3)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a15      	ldr	r2, [pc, #84]	; (800247c <HAL_TIM_Encoder_MspInit+0x70>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d123      	bne.n	8002474 <HAL_TIM_Encoder_MspInit+0x68>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800242c:	4b14      	ldr	r3, [pc, #80]	; (8002480 <HAL_TIM_Encoder_MspInit+0x74>)
 800242e:	69db      	ldr	r3, [r3, #28]
 8002430:	4a13      	ldr	r2, [pc, #76]	; (8002480 <HAL_TIM_Encoder_MspInit+0x74>)
 8002432:	f043 0302 	orr.w	r3, r3, #2
 8002436:	61d3      	str	r3, [r2, #28]
 8002438:	4b11      	ldr	r3, [pc, #68]	; (8002480 <HAL_TIM_Encoder_MspInit+0x74>)
 800243a:	69db      	ldr	r3, [r3, #28]
 800243c:	f003 0302 	and.w	r3, r3, #2
 8002440:	60fb      	str	r3, [r7, #12]
 8002442:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002444:	4b0e      	ldr	r3, [pc, #56]	; (8002480 <HAL_TIM_Encoder_MspInit+0x74>)
 8002446:	699b      	ldr	r3, [r3, #24]
 8002448:	4a0d      	ldr	r2, [pc, #52]	; (8002480 <HAL_TIM_Encoder_MspInit+0x74>)
 800244a:	f043 0304 	orr.w	r3, r3, #4
 800244e:	6193      	str	r3, [r2, #24]
 8002450:	4b0b      	ldr	r3, [pc, #44]	; (8002480 <HAL_TIM_Encoder_MspInit+0x74>)
 8002452:	699b      	ldr	r3, [r3, #24]
 8002454:	f003 0304 	and.w	r3, r3, #4
 8002458:	60bb      	str	r3, [r7, #8]
 800245a:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800245c:	23c0      	movs	r3, #192	; 0xc0
 800245e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002460:	2300      	movs	r3, #0
 8002462:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002464:	2300      	movs	r3, #0
 8002466:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002468:	f107 0310 	add.w	r3, r7, #16
 800246c:	4619      	mov	r1, r3
 800246e:	4805      	ldr	r0, [pc, #20]	; (8002484 <HAL_TIM_Encoder_MspInit+0x78>)
 8002470:	f000 ffce 	bl	8003410 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002474:	bf00      	nop
 8002476:	3720      	adds	r7, #32
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	40000400 	.word	0x40000400
 8002480:	40021000 	.word	0x40021000
 8002484:	40010800 	.word	0x40010800

08002488 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b088      	sub	sp, #32
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002490:	f107 0310 	add.w	r3, r7, #16
 8002494:	2200      	movs	r2, #0
 8002496:	601a      	str	r2, [r3, #0]
 8002498:	605a      	str	r2, [r3, #4]
 800249a:	609a      	str	r2, [r3, #8]
 800249c:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a10      	ldr	r2, [pc, #64]	; (80024e4 <HAL_TIM_MspPostInit+0x5c>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d118      	bne.n	80024da <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024a8:	4b0f      	ldr	r3, [pc, #60]	; (80024e8 <HAL_TIM_MspPostInit+0x60>)
 80024aa:	699b      	ldr	r3, [r3, #24]
 80024ac:	4a0e      	ldr	r2, [pc, #56]	; (80024e8 <HAL_TIM_MspPostInit+0x60>)
 80024ae:	f043 0304 	orr.w	r3, r3, #4
 80024b2:	6193      	str	r3, [r2, #24]
 80024b4:	4b0c      	ldr	r3, [pc, #48]	; (80024e8 <HAL_TIM_MspPostInit+0x60>)
 80024b6:	699b      	ldr	r3, [r3, #24]
 80024b8:	f003 0304 	and.w	r3, r3, #4
 80024bc:	60fb      	str	r3, [r7, #12]
 80024be:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80024c0:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80024c4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024c6:	2302      	movs	r3, #2
 80024c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ca:	2302      	movs	r3, #2
 80024cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024ce:	f107 0310 	add.w	r3, r7, #16
 80024d2:	4619      	mov	r1, r3
 80024d4:	4805      	ldr	r0, [pc, #20]	; (80024ec <HAL_TIM_MspPostInit+0x64>)
 80024d6:	f000 ff9b 	bl	8003410 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80024da:	bf00      	nop
 80024dc:	3720      	adds	r7, #32
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	40012c00 	.word	0x40012c00
 80024e8:	40021000 	.word	0x40021000
 80024ec:	40010800 	.word	0x40010800

080024f0 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80024f4:	4b11      	ldr	r3, [pc, #68]	; (800253c <MX_USART1_UART_Init+0x4c>)
 80024f6:	4a12      	ldr	r2, [pc, #72]	; (8002540 <MX_USART1_UART_Init+0x50>)
 80024f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80024fa:	4b10      	ldr	r3, [pc, #64]	; (800253c <MX_USART1_UART_Init+0x4c>)
 80024fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002500:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002502:	4b0e      	ldr	r3, [pc, #56]	; (800253c <MX_USART1_UART_Init+0x4c>)
 8002504:	2200      	movs	r2, #0
 8002506:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002508:	4b0c      	ldr	r3, [pc, #48]	; (800253c <MX_USART1_UART_Init+0x4c>)
 800250a:	2200      	movs	r2, #0
 800250c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800250e:	4b0b      	ldr	r3, [pc, #44]	; (800253c <MX_USART1_UART_Init+0x4c>)
 8002510:	2200      	movs	r2, #0
 8002512:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002514:	4b09      	ldr	r3, [pc, #36]	; (800253c <MX_USART1_UART_Init+0x4c>)
 8002516:	220c      	movs	r2, #12
 8002518:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800251a:	4b08      	ldr	r3, [pc, #32]	; (800253c <MX_USART1_UART_Init+0x4c>)
 800251c:	2200      	movs	r2, #0
 800251e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002520:	4b06      	ldr	r3, [pc, #24]	; (800253c <MX_USART1_UART_Init+0x4c>)
 8002522:	2200      	movs	r2, #0
 8002524:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002526:	4805      	ldr	r0, [pc, #20]	; (800253c <MX_USART1_UART_Init+0x4c>)
 8002528:	f002 fe85 	bl	8005236 <HAL_UART_Init>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d001      	beq.n	8002536 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002532:	f7ff fb3c 	bl	8001bae <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002536:	bf00      	nop
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	20000348 	.word	0x20000348
 8002540:	40013800 	.word	0x40013800

08002544 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002548:	4b11      	ldr	r3, [pc, #68]	; (8002590 <MX_USART2_UART_Init+0x4c>)
 800254a:	4a12      	ldr	r2, [pc, #72]	; (8002594 <MX_USART2_UART_Init+0x50>)
 800254c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800254e:	4b10      	ldr	r3, [pc, #64]	; (8002590 <MX_USART2_UART_Init+0x4c>)
 8002550:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002554:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002556:	4b0e      	ldr	r3, [pc, #56]	; (8002590 <MX_USART2_UART_Init+0x4c>)
 8002558:	2200      	movs	r2, #0
 800255a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800255c:	4b0c      	ldr	r3, [pc, #48]	; (8002590 <MX_USART2_UART_Init+0x4c>)
 800255e:	2200      	movs	r2, #0
 8002560:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002562:	4b0b      	ldr	r3, [pc, #44]	; (8002590 <MX_USART2_UART_Init+0x4c>)
 8002564:	2200      	movs	r2, #0
 8002566:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002568:	4b09      	ldr	r3, [pc, #36]	; (8002590 <MX_USART2_UART_Init+0x4c>)
 800256a:	220c      	movs	r2, #12
 800256c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800256e:	4b08      	ldr	r3, [pc, #32]	; (8002590 <MX_USART2_UART_Init+0x4c>)
 8002570:	2200      	movs	r2, #0
 8002572:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002574:	4b06      	ldr	r3, [pc, #24]	; (8002590 <MX_USART2_UART_Init+0x4c>)
 8002576:	2200      	movs	r2, #0
 8002578:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800257a:	4805      	ldr	r0, [pc, #20]	; (8002590 <MX_USART2_UART_Init+0x4c>)
 800257c:	f002 fe5b 	bl	8005236 <HAL_UART_Init>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d001      	beq.n	800258a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002586:	f7ff fb12 	bl	8001bae <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800258a:	bf00      	nop
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	20000390 	.word	0x20000390
 8002594:	40004400 	.word	0x40004400

08002598 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b08c      	sub	sp, #48	; 0x30
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025a0:	f107 031c 	add.w	r3, r7, #28
 80025a4:	2200      	movs	r2, #0
 80025a6:	601a      	str	r2, [r3, #0]
 80025a8:	605a      	str	r2, [r3, #4]
 80025aa:	609a      	str	r2, [r3, #8]
 80025ac:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a54      	ldr	r2, [pc, #336]	; (8002704 <HAL_UART_MspInit+0x16c>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d13e      	bne.n	8002636 <HAL_UART_MspInit+0x9e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80025b8:	4b53      	ldr	r3, [pc, #332]	; (8002708 <HAL_UART_MspInit+0x170>)
 80025ba:	699b      	ldr	r3, [r3, #24]
 80025bc:	4a52      	ldr	r2, [pc, #328]	; (8002708 <HAL_UART_MspInit+0x170>)
 80025be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025c2:	6193      	str	r3, [r2, #24]
 80025c4:	4b50      	ldr	r3, [pc, #320]	; (8002708 <HAL_UART_MspInit+0x170>)
 80025c6:	699b      	ldr	r3, [r3, #24]
 80025c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025cc:	61bb      	str	r3, [r7, #24]
 80025ce:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025d0:	4b4d      	ldr	r3, [pc, #308]	; (8002708 <HAL_UART_MspInit+0x170>)
 80025d2:	699b      	ldr	r3, [r3, #24]
 80025d4:	4a4c      	ldr	r2, [pc, #304]	; (8002708 <HAL_UART_MspInit+0x170>)
 80025d6:	f043 0308 	orr.w	r3, r3, #8
 80025da:	6193      	str	r3, [r2, #24]
 80025dc:	4b4a      	ldr	r3, [pc, #296]	; (8002708 <HAL_UART_MspInit+0x170>)
 80025de:	699b      	ldr	r3, [r3, #24]
 80025e0:	f003 0308 	and.w	r3, r3, #8
 80025e4:	617b      	str	r3, [r7, #20]
 80025e6:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80025e8:	2340      	movs	r3, #64	; 0x40
 80025ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ec:	2302      	movs	r3, #2
 80025ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80025f0:	2303      	movs	r3, #3
 80025f2:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025f4:	f107 031c 	add.w	r3, r7, #28
 80025f8:	4619      	mov	r1, r3
 80025fa:	4844      	ldr	r0, [pc, #272]	; (800270c <HAL_UART_MspInit+0x174>)
 80025fc:	f000 ff08 	bl	8003410 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002600:	2380      	movs	r3, #128	; 0x80
 8002602:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002604:	2300      	movs	r3, #0
 8002606:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002608:	2300      	movs	r3, #0
 800260a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800260c:	f107 031c 	add.w	r3, r7, #28
 8002610:	4619      	mov	r1, r3
 8002612:	483e      	ldr	r0, [pc, #248]	; (800270c <HAL_UART_MspInit+0x174>)
 8002614:	f000 fefc 	bl	8003410 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8002618:	4b3d      	ldr	r3, [pc, #244]	; (8002710 <HAL_UART_MspInit+0x178>)
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800261e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002620:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002624:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002628:	f043 0304 	orr.w	r3, r3, #4
 800262c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800262e:	4a38      	ldr	r2, [pc, #224]	; (8002710 <HAL_UART_MspInit+0x178>)
 8002630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002632:	6053      	str	r3, [r2, #4]
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002634:	e062      	b.n	80026fc <HAL_UART_MspInit+0x164>
  else if(uartHandle->Instance==USART2)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a36      	ldr	r2, [pc, #216]	; (8002714 <HAL_UART_MspInit+0x17c>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d15d      	bne.n	80026fc <HAL_UART_MspInit+0x164>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002640:	4b31      	ldr	r3, [pc, #196]	; (8002708 <HAL_UART_MspInit+0x170>)
 8002642:	69db      	ldr	r3, [r3, #28]
 8002644:	4a30      	ldr	r2, [pc, #192]	; (8002708 <HAL_UART_MspInit+0x170>)
 8002646:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800264a:	61d3      	str	r3, [r2, #28]
 800264c:	4b2e      	ldr	r3, [pc, #184]	; (8002708 <HAL_UART_MspInit+0x170>)
 800264e:	69db      	ldr	r3, [r3, #28]
 8002650:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002654:	613b      	str	r3, [r7, #16]
 8002656:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002658:	4b2b      	ldr	r3, [pc, #172]	; (8002708 <HAL_UART_MspInit+0x170>)
 800265a:	699b      	ldr	r3, [r3, #24]
 800265c:	4a2a      	ldr	r2, [pc, #168]	; (8002708 <HAL_UART_MspInit+0x170>)
 800265e:	f043 0304 	orr.w	r3, r3, #4
 8002662:	6193      	str	r3, [r2, #24]
 8002664:	4b28      	ldr	r3, [pc, #160]	; (8002708 <HAL_UART_MspInit+0x170>)
 8002666:	699b      	ldr	r3, [r3, #24]
 8002668:	f003 0304 	and.w	r3, r3, #4
 800266c:	60fb      	str	r3, [r7, #12]
 800266e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002670:	2304      	movs	r3, #4
 8002672:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002674:	2302      	movs	r3, #2
 8002676:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002678:	2303      	movs	r3, #3
 800267a:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800267c:	f107 031c 	add.w	r3, r7, #28
 8002680:	4619      	mov	r1, r3
 8002682:	4825      	ldr	r0, [pc, #148]	; (8002718 <HAL_UART_MspInit+0x180>)
 8002684:	f000 fec4 	bl	8003410 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002688:	2308      	movs	r3, #8
 800268a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800268c:	2300      	movs	r3, #0
 800268e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002690:	2300      	movs	r3, #0
 8002692:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002694:	f107 031c 	add.w	r3, r7, #28
 8002698:	4619      	mov	r1, r3
 800269a:	481f      	ldr	r0, [pc, #124]	; (8002718 <HAL_UART_MspInit+0x180>)
 800269c:	f000 feb8 	bl	8003410 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80026a0:	4b1e      	ldr	r3, [pc, #120]	; (800271c <HAL_UART_MspInit+0x184>)
 80026a2:	4a1f      	ldr	r2, [pc, #124]	; (8002720 <HAL_UART_MspInit+0x188>)
 80026a4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80026a6:	4b1d      	ldr	r3, [pc, #116]	; (800271c <HAL_UART_MspInit+0x184>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026ac:	4b1b      	ldr	r3, [pc, #108]	; (800271c <HAL_UART_MspInit+0x184>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80026b2:	4b1a      	ldr	r3, [pc, #104]	; (800271c <HAL_UART_MspInit+0x184>)
 80026b4:	2280      	movs	r2, #128	; 0x80
 80026b6:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80026b8:	4b18      	ldr	r3, [pc, #96]	; (800271c <HAL_UART_MspInit+0x184>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80026be:	4b17      	ldr	r3, [pc, #92]	; (800271c <HAL_UART_MspInit+0x184>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80026c4:	4b15      	ldr	r3, [pc, #84]	; (800271c <HAL_UART_MspInit+0x184>)
 80026c6:	2220      	movs	r2, #32
 80026c8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80026ca:	4b14      	ldr	r3, [pc, #80]	; (800271c <HAL_UART_MspInit+0x184>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80026d0:	4812      	ldr	r0, [pc, #72]	; (800271c <HAL_UART_MspInit+0x184>)
 80026d2:	f000 fa19 	bl	8002b08 <HAL_DMA_Init>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d001      	beq.n	80026e0 <HAL_UART_MspInit+0x148>
      Error_Handler();
 80026dc:	f7ff fa67 	bl	8001bae <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	4a0e      	ldr	r2, [pc, #56]	; (800271c <HAL_UART_MspInit+0x184>)
 80026e4:	63da      	str	r2, [r3, #60]	; 0x3c
 80026e6:	4a0d      	ldr	r2, [pc, #52]	; (800271c <HAL_UART_MspInit+0x184>)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80026ec:	2200      	movs	r2, #0
 80026ee:	2100      	movs	r1, #0
 80026f0:	2026      	movs	r0, #38	; 0x26
 80026f2:	f000 f9d2 	bl	8002a9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80026f6:	2026      	movs	r0, #38	; 0x26
 80026f8:	f000 f9eb 	bl	8002ad2 <HAL_NVIC_EnableIRQ>
}
 80026fc:	bf00      	nop
 80026fe:	3730      	adds	r7, #48	; 0x30
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}
 8002704:	40013800 	.word	0x40013800
 8002708:	40021000 	.word	0x40021000
 800270c:	40010c00 	.word	0x40010c00
 8002710:	40010000 	.word	0x40010000
 8002714:	40004400 	.word	0x40004400
 8002718:	40010800 	.word	0x40010800
 800271c:	200003d8 	.word	0x200003d8
 8002720:	4002006c 	.word	0x4002006c

08002724 <HAL_UART_RxCpltCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart)
	{
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
	if(huart == &huart2)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	4a04      	ldr	r2, [pc, #16]	; (8002740 <HAL_UART_RxCpltCallback+0x1c>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d101      	bne.n	8002738 <HAL_UART_RxCpltCallback+0x14>
		//我这⾥�?�择的是uart2�??以这⾥⽤的是&huart2，其实应该是⼤家选择哪个串⼝就填写哪�??
	{
		//u1_printf("callback!");
		jy62MessageRecord();
 8002734:	f7fe fe40 	bl	80013b8 <jy62MessageRecord>
		//HAL_UART_Receive_DMA(huart,jy62Receive,JY62_MESSAGE_LENTH);
	}
}
 8002738:	bf00      	nop
 800273a:	3708      	adds	r7, #8
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	20000390 	.word	0x20000390

08002744 <u1_printf>:
void u1_printf(char* fmt, ...) {
 8002744:	b40f      	push	{r0, r1, r2, r3}
 8002746:	b580      	push	{r7, lr}
 8002748:	b0b4      	sub	sp, #208	; 0xd0
 800274a:	af00      	add	r7, sp, #0
  uint16_t len;
  va_list ap;
  va_start(ap, fmt);
 800274c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002750:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  uint8_t buf[200];
  vsprintf((char*)buf, fmt, ap);
 8002754:	463b      	mov	r3, r7
 8002756:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800275a:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 800275e:	4618      	mov	r0, r3
 8002760:	f005 fad8 	bl	8007d14 <vsiprintf>
  va_end(ap);
  len = strlen((char*)buf);
 8002764:	463b      	mov	r3, r7
 8002766:	4618      	mov	r0, r3
 8002768:	f7fd fd5e 	bl	8000228 <strlen>
 800276c:	4603      	mov	r3, r0
 800276e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
  HAL_UART_Transmit(&huart1, buf, len, HAL_MAX_DELAY);
 8002772:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 8002776:	4639      	mov	r1, r7
 8002778:	f04f 33ff 	mov.w	r3, #4294967295
 800277c:	4804      	ldr	r0, [pc, #16]	; (8002790 <u1_printf+0x4c>)
 800277e:	f002 fdaa 	bl	80052d6 <HAL_UART_Transmit>
}
 8002782:	bf00      	nop
 8002784:	37d0      	adds	r7, #208	; 0xd0
 8002786:	46bd      	mov	sp, r7
 8002788:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800278c:	b004      	add	sp, #16
 800278e:	4770      	bx	lr
 8002790:	20000348 	.word	0x20000348

08002794 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002794:	f7ff fc98 	bl	80020c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002798:	480b      	ldr	r0, [pc, #44]	; (80027c8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800279a:	490c      	ldr	r1, [pc, #48]	; (80027cc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800279c:	4a0c      	ldr	r2, [pc, #48]	; (80027d0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800279e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027a0:	e002      	b.n	80027a8 <LoopCopyDataInit>

080027a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027a6:	3304      	adds	r3, #4

080027a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027ac:	d3f9      	bcc.n	80027a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027ae:	4a09      	ldr	r2, [pc, #36]	; (80027d4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80027b0:	4c09      	ldr	r4, [pc, #36]	; (80027d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80027b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027b4:	e001      	b.n	80027ba <LoopFillZerobss>

080027b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027b8:	3204      	adds	r2, #4

080027ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027bc:	d3fb      	bcc.n	80027b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80027be:	f003 fd47 	bl	8006250 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80027c2:	f7ff f92f 	bl	8001a24 <main>
  bx lr
 80027c6:	4770      	bx	lr
  ldr r0, =_sdata
 80027c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027cc:	20000208 	.word	0x20000208
  ldr r2, =_sidata
 80027d0:	0800b054 	.word	0x0800b054
  ldr r2, =_sbss
 80027d4:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 80027d8:	20000430 	.word	0x20000430

080027dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80027dc:	e7fe      	b.n	80027dc <ADC1_2_IRQHandler>
	...

080027e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027e4:	4b08      	ldr	r3, [pc, #32]	; (8002808 <HAL_Init+0x28>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a07      	ldr	r2, [pc, #28]	; (8002808 <HAL_Init+0x28>)
 80027ea:	f043 0310 	orr.w	r3, r3, #16
 80027ee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027f0:	2003      	movs	r0, #3
 80027f2:	f000 f947 	bl	8002a84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027f6:	200f      	movs	r0, #15
 80027f8:	f000 f808 	bl	800280c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027fc:	f7ff fb2c 	bl	8001e58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002800:	2300      	movs	r3, #0
}
 8002802:	4618      	mov	r0, r3
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	40022000 	.word	0x40022000

0800280c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002814:	4b12      	ldr	r3, [pc, #72]	; (8002860 <HAL_InitTick+0x54>)
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	4b12      	ldr	r3, [pc, #72]	; (8002864 <HAL_InitTick+0x58>)
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	4619      	mov	r1, r3
 800281e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002822:	fbb3 f3f1 	udiv	r3, r3, r1
 8002826:	fbb2 f3f3 	udiv	r3, r2, r3
 800282a:	4618      	mov	r0, r3
 800282c:	f000 f95f 	bl	8002aee <HAL_SYSTICK_Config>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d001      	beq.n	800283a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e00e      	b.n	8002858 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2b0f      	cmp	r3, #15
 800283e:	d80a      	bhi.n	8002856 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002840:	2200      	movs	r2, #0
 8002842:	6879      	ldr	r1, [r7, #4]
 8002844:	f04f 30ff 	mov.w	r0, #4294967295
 8002848:	f000 f927 	bl	8002a9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800284c:	4a06      	ldr	r2, [pc, #24]	; (8002868 <HAL_InitTick+0x5c>)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002852:	2300      	movs	r3, #0
 8002854:	e000      	b.n	8002858 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
}
 8002858:	4618      	mov	r0, r3
 800285a:	3708      	adds	r7, #8
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}
 8002860:	20000028 	.word	0x20000028
 8002864:	20000030 	.word	0x20000030
 8002868:	2000002c 	.word	0x2000002c

0800286c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800286c:	b480      	push	{r7}
 800286e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002870:	4b05      	ldr	r3, [pc, #20]	; (8002888 <HAL_IncTick+0x1c>)
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	461a      	mov	r2, r3
 8002876:	4b05      	ldr	r3, [pc, #20]	; (800288c <HAL_IncTick+0x20>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4413      	add	r3, r2
 800287c:	4a03      	ldr	r2, [pc, #12]	; (800288c <HAL_IncTick+0x20>)
 800287e:	6013      	str	r3, [r2, #0]
}
 8002880:	bf00      	nop
 8002882:	46bd      	mov	sp, r7
 8002884:	bc80      	pop	{r7}
 8002886:	4770      	bx	lr
 8002888:	20000030 	.word	0x20000030
 800288c:	2000041c 	.word	0x2000041c

08002890 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002890:	b480      	push	{r7}
 8002892:	af00      	add	r7, sp, #0
  return uwTick;
 8002894:	4b02      	ldr	r3, [pc, #8]	; (80028a0 <HAL_GetTick+0x10>)
 8002896:	681b      	ldr	r3, [r3, #0]
}
 8002898:	4618      	mov	r0, r3
 800289a:	46bd      	mov	sp, r7
 800289c:	bc80      	pop	{r7}
 800289e:	4770      	bx	lr
 80028a0:	2000041c 	.word	0x2000041c

080028a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b084      	sub	sp, #16
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028ac:	f7ff fff0 	bl	8002890 <HAL_GetTick>
 80028b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028bc:	d005      	beq.n	80028ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028be:	4b0a      	ldr	r3, [pc, #40]	; (80028e8 <HAL_Delay+0x44>)
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	461a      	mov	r2, r3
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	4413      	add	r3, r2
 80028c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80028ca:	bf00      	nop
 80028cc:	f7ff ffe0 	bl	8002890 <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	68fa      	ldr	r2, [r7, #12]
 80028d8:	429a      	cmp	r2, r3
 80028da:	d8f7      	bhi.n	80028cc <HAL_Delay+0x28>
  {
  }
}
 80028dc:	bf00      	nop
 80028de:	bf00      	nop
 80028e0:	3710      	adds	r7, #16
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	20000030 	.word	0x20000030

080028ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b085      	sub	sp, #20
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f003 0307 	and.w	r3, r3, #7
 80028fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028fc:	4b0c      	ldr	r3, [pc, #48]	; (8002930 <__NVIC_SetPriorityGrouping+0x44>)
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002902:	68ba      	ldr	r2, [r7, #8]
 8002904:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002908:	4013      	ands	r3, r2
 800290a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002914:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002918:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800291c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800291e:	4a04      	ldr	r2, [pc, #16]	; (8002930 <__NVIC_SetPriorityGrouping+0x44>)
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	60d3      	str	r3, [r2, #12]
}
 8002924:	bf00      	nop
 8002926:	3714      	adds	r7, #20
 8002928:	46bd      	mov	sp, r7
 800292a:	bc80      	pop	{r7}
 800292c:	4770      	bx	lr
 800292e:	bf00      	nop
 8002930:	e000ed00 	.word	0xe000ed00

08002934 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002934:	b480      	push	{r7}
 8002936:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002938:	4b04      	ldr	r3, [pc, #16]	; (800294c <__NVIC_GetPriorityGrouping+0x18>)
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	0a1b      	lsrs	r3, r3, #8
 800293e:	f003 0307 	and.w	r3, r3, #7
}
 8002942:	4618      	mov	r0, r3
 8002944:	46bd      	mov	sp, r7
 8002946:	bc80      	pop	{r7}
 8002948:	4770      	bx	lr
 800294a:	bf00      	nop
 800294c:	e000ed00 	.word	0xe000ed00

08002950 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
 8002956:	4603      	mov	r3, r0
 8002958:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800295a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800295e:	2b00      	cmp	r3, #0
 8002960:	db0b      	blt.n	800297a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002962:	79fb      	ldrb	r3, [r7, #7]
 8002964:	f003 021f 	and.w	r2, r3, #31
 8002968:	4906      	ldr	r1, [pc, #24]	; (8002984 <__NVIC_EnableIRQ+0x34>)
 800296a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800296e:	095b      	lsrs	r3, r3, #5
 8002970:	2001      	movs	r0, #1
 8002972:	fa00 f202 	lsl.w	r2, r0, r2
 8002976:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800297a:	bf00      	nop
 800297c:	370c      	adds	r7, #12
 800297e:	46bd      	mov	sp, r7
 8002980:	bc80      	pop	{r7}
 8002982:	4770      	bx	lr
 8002984:	e000e100 	.word	0xe000e100

08002988 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	4603      	mov	r3, r0
 8002990:	6039      	str	r1, [r7, #0]
 8002992:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002994:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002998:	2b00      	cmp	r3, #0
 800299a:	db0a      	blt.n	80029b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	b2da      	uxtb	r2, r3
 80029a0:	490c      	ldr	r1, [pc, #48]	; (80029d4 <__NVIC_SetPriority+0x4c>)
 80029a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029a6:	0112      	lsls	r2, r2, #4
 80029a8:	b2d2      	uxtb	r2, r2
 80029aa:	440b      	add	r3, r1
 80029ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029b0:	e00a      	b.n	80029c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	b2da      	uxtb	r2, r3
 80029b6:	4908      	ldr	r1, [pc, #32]	; (80029d8 <__NVIC_SetPriority+0x50>)
 80029b8:	79fb      	ldrb	r3, [r7, #7]
 80029ba:	f003 030f 	and.w	r3, r3, #15
 80029be:	3b04      	subs	r3, #4
 80029c0:	0112      	lsls	r2, r2, #4
 80029c2:	b2d2      	uxtb	r2, r2
 80029c4:	440b      	add	r3, r1
 80029c6:	761a      	strb	r2, [r3, #24]
}
 80029c8:	bf00      	nop
 80029ca:	370c      	adds	r7, #12
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bc80      	pop	{r7}
 80029d0:	4770      	bx	lr
 80029d2:	bf00      	nop
 80029d4:	e000e100 	.word	0xe000e100
 80029d8:	e000ed00 	.word	0xe000ed00

080029dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029dc:	b480      	push	{r7}
 80029de:	b089      	sub	sp, #36	; 0x24
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	60f8      	str	r0, [r7, #12]
 80029e4:	60b9      	str	r1, [r7, #8]
 80029e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	f003 0307 	and.w	r3, r3, #7
 80029ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	f1c3 0307 	rsb	r3, r3, #7
 80029f6:	2b04      	cmp	r3, #4
 80029f8:	bf28      	it	cs
 80029fa:	2304      	movcs	r3, #4
 80029fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	3304      	adds	r3, #4
 8002a02:	2b06      	cmp	r3, #6
 8002a04:	d902      	bls.n	8002a0c <NVIC_EncodePriority+0x30>
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	3b03      	subs	r3, #3
 8002a0a:	e000      	b.n	8002a0e <NVIC_EncodePriority+0x32>
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a10:	f04f 32ff 	mov.w	r2, #4294967295
 8002a14:	69bb      	ldr	r3, [r7, #24]
 8002a16:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1a:	43da      	mvns	r2, r3
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	401a      	ands	r2, r3
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a24:	f04f 31ff 	mov.w	r1, #4294967295
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a2e:	43d9      	mvns	r1, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a34:	4313      	orrs	r3, r2
         );
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3724      	adds	r7, #36	; 0x24
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bc80      	pop	{r7}
 8002a3e:	4770      	bx	lr

08002a40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b082      	sub	sp, #8
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	3b01      	subs	r3, #1
 8002a4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a50:	d301      	bcc.n	8002a56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a52:	2301      	movs	r3, #1
 8002a54:	e00f      	b.n	8002a76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a56:	4a0a      	ldr	r2, [pc, #40]	; (8002a80 <SysTick_Config+0x40>)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	3b01      	subs	r3, #1
 8002a5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a5e:	210f      	movs	r1, #15
 8002a60:	f04f 30ff 	mov.w	r0, #4294967295
 8002a64:	f7ff ff90 	bl	8002988 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a68:	4b05      	ldr	r3, [pc, #20]	; (8002a80 <SysTick_Config+0x40>)
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a6e:	4b04      	ldr	r3, [pc, #16]	; (8002a80 <SysTick_Config+0x40>)
 8002a70:	2207      	movs	r2, #7
 8002a72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a74:	2300      	movs	r3, #0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3708      	adds	r7, #8
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	e000e010 	.word	0xe000e010

08002a84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b082      	sub	sp, #8
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f7ff ff2d 	bl	80028ec <__NVIC_SetPriorityGrouping>
}
 8002a92:	bf00      	nop
 8002a94:	3708      	adds	r7, #8
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}

08002a9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a9a:	b580      	push	{r7, lr}
 8002a9c:	b086      	sub	sp, #24
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	60b9      	str	r1, [r7, #8]
 8002aa4:	607a      	str	r2, [r7, #4]
 8002aa6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002aac:	f7ff ff42 	bl	8002934 <__NVIC_GetPriorityGrouping>
 8002ab0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	68b9      	ldr	r1, [r7, #8]
 8002ab6:	6978      	ldr	r0, [r7, #20]
 8002ab8:	f7ff ff90 	bl	80029dc <NVIC_EncodePriority>
 8002abc:	4602      	mov	r2, r0
 8002abe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ac2:	4611      	mov	r1, r2
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f7ff ff5f 	bl	8002988 <__NVIC_SetPriority>
}
 8002aca:	bf00      	nop
 8002acc:	3718      	adds	r7, #24
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}

08002ad2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ad2:	b580      	push	{r7, lr}
 8002ad4:	b082      	sub	sp, #8
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	4603      	mov	r3, r0
 8002ada:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002adc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f7ff ff35 	bl	8002950 <__NVIC_EnableIRQ>
}
 8002ae6:	bf00      	nop
 8002ae8:	3708      	adds	r7, #8
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}

08002aee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002aee:	b580      	push	{r7, lr}
 8002af0:	b082      	sub	sp, #8
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f7ff ffa2 	bl	8002a40 <SysTick_Config>
 8002afc:	4603      	mov	r3, r0
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3708      	adds	r7, #8
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
	...

08002b08 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b085      	sub	sp, #20
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002b10:	2300      	movs	r3, #0
 8002b12:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d101      	bne.n	8002b1e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e059      	b.n	8002bd2 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	461a      	mov	r2, r3
 8002b24:	4b2d      	ldr	r3, [pc, #180]	; (8002bdc <HAL_DMA_Init+0xd4>)
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d80f      	bhi.n	8002b4a <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	461a      	mov	r2, r3
 8002b30:	4b2b      	ldr	r3, [pc, #172]	; (8002be0 <HAL_DMA_Init+0xd8>)
 8002b32:	4413      	add	r3, r2
 8002b34:	4a2b      	ldr	r2, [pc, #172]	; (8002be4 <HAL_DMA_Init+0xdc>)
 8002b36:	fba2 2303 	umull	r2, r3, r2, r3
 8002b3a:	091b      	lsrs	r3, r3, #4
 8002b3c:	009a      	lsls	r2, r3, #2
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4a28      	ldr	r2, [pc, #160]	; (8002be8 <HAL_DMA_Init+0xe0>)
 8002b46:	63da      	str	r2, [r3, #60]	; 0x3c
 8002b48:	e00e      	b.n	8002b68 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	461a      	mov	r2, r3
 8002b50:	4b26      	ldr	r3, [pc, #152]	; (8002bec <HAL_DMA_Init+0xe4>)
 8002b52:	4413      	add	r3, r2
 8002b54:	4a23      	ldr	r2, [pc, #140]	; (8002be4 <HAL_DMA_Init+0xdc>)
 8002b56:	fba2 2303 	umull	r2, r3, r2, r3
 8002b5a:	091b      	lsrs	r3, r3, #4
 8002b5c:	009a      	lsls	r2, r3, #2
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4a22      	ldr	r2, [pc, #136]	; (8002bf0 <HAL_DMA_Init+0xe8>)
 8002b66:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2202      	movs	r2, #2
 8002b6c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002b7e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002b82:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002b8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	68db      	ldr	r3, [r3, #12]
 8002b92:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b98:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	695b      	ldr	r3, [r3, #20]
 8002b9e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ba4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	69db      	ldr	r3, [r3, #28]
 8002baa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002bac:	68fa      	ldr	r2, [r7, #12]
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	68fa      	ldr	r2, [r7, #12]
 8002bb8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002bd0:	2300      	movs	r3, #0
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3714      	adds	r7, #20
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bc80      	pop	{r7}
 8002bda:	4770      	bx	lr
 8002bdc:	40020407 	.word	0x40020407
 8002be0:	bffdfff8 	.word	0xbffdfff8
 8002be4:	cccccccd 	.word	0xcccccccd
 8002be8:	40020000 	.word	0x40020000
 8002bec:	bffdfbf8 	.word	0xbffdfbf8
 8002bf0:	40020400 	.word	0x40020400

08002bf4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b086      	sub	sp, #24
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	60b9      	str	r1, [r7, #8]
 8002bfe:	607a      	str	r2, [r7, #4]
 8002c00:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c02:	2300      	movs	r3, #0
 8002c04:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d101      	bne.n	8002c14 <HAL_DMA_Start_IT+0x20>
 8002c10:	2302      	movs	r3, #2
 8002c12:	e04b      	b.n	8002cac <HAL_DMA_Start_IT+0xb8>
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2201      	movs	r2, #1
 8002c18:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d13a      	bne.n	8002c9e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2202      	movs	r2, #2
 8002c2c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2200      	movs	r2, #0
 8002c34:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f022 0201 	bic.w	r2, r2, #1
 8002c44:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	68b9      	ldr	r1, [r7, #8]
 8002c4c:	68f8      	ldr	r0, [r7, #12]
 8002c4e:	f000 fbb1 	bl	80033b4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d008      	beq.n	8002c6c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f042 020e 	orr.w	r2, r2, #14
 8002c68:	601a      	str	r2, [r3, #0]
 8002c6a:	e00f      	b.n	8002c8c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f022 0204 	bic.w	r2, r2, #4
 8002c7a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f042 020a 	orr.w	r2, r2, #10
 8002c8a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f042 0201 	orr.w	r2, r2, #1
 8002c9a:	601a      	str	r2, [r3, #0]
 8002c9c:	e005      	b.n	8002caa <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002ca6:	2302      	movs	r3, #2
 8002ca8:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002caa:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3718      	adds	r7, #24
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b085      	sub	sp, #20
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	2b02      	cmp	r3, #2
 8002cca:	d008      	beq.n	8002cde <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2204      	movs	r2, #4
 8002cd0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e020      	b.n	8002d20 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f022 020e 	bic.w	r2, r2, #14
 8002cec:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f022 0201 	bic.w	r2, r2, #1
 8002cfc:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d06:	2101      	movs	r1, #1
 8002d08:	fa01 f202 	lsl.w	r2, r1, r2
 8002d0c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2201      	movs	r2, #1
 8002d12:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002d1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3714      	adds	r7, #20
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bc80      	pop	{r7}
 8002d28:	4770      	bx	lr
	...

08002d2c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b084      	sub	sp, #16
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d34:	2300      	movs	r3, #0
 8002d36:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	2b02      	cmp	r3, #2
 8002d42:	d005      	beq.n	8002d50 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2204      	movs	r2, #4
 8002d48:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	73fb      	strb	r3, [r7, #15]
 8002d4e:	e0d6      	b.n	8002efe <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f022 020e 	bic.w	r2, r2, #14
 8002d5e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f022 0201 	bic.w	r2, r2, #1
 8002d6e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	461a      	mov	r2, r3
 8002d76:	4b64      	ldr	r3, [pc, #400]	; (8002f08 <HAL_DMA_Abort_IT+0x1dc>)
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d958      	bls.n	8002e2e <HAL_DMA_Abort_IT+0x102>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a62      	ldr	r2, [pc, #392]	; (8002f0c <HAL_DMA_Abort_IT+0x1e0>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d04f      	beq.n	8002e26 <HAL_DMA_Abort_IT+0xfa>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a61      	ldr	r2, [pc, #388]	; (8002f10 <HAL_DMA_Abort_IT+0x1e4>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d048      	beq.n	8002e22 <HAL_DMA_Abort_IT+0xf6>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a5f      	ldr	r2, [pc, #380]	; (8002f14 <HAL_DMA_Abort_IT+0x1e8>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d040      	beq.n	8002e1c <HAL_DMA_Abort_IT+0xf0>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a5e      	ldr	r2, [pc, #376]	; (8002f18 <HAL_DMA_Abort_IT+0x1ec>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d038      	beq.n	8002e16 <HAL_DMA_Abort_IT+0xea>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a5c      	ldr	r2, [pc, #368]	; (8002f1c <HAL_DMA_Abort_IT+0x1f0>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d030      	beq.n	8002e10 <HAL_DMA_Abort_IT+0xe4>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a5b      	ldr	r2, [pc, #364]	; (8002f20 <HAL_DMA_Abort_IT+0x1f4>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d028      	beq.n	8002e0a <HAL_DMA_Abort_IT+0xde>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a52      	ldr	r2, [pc, #328]	; (8002f08 <HAL_DMA_Abort_IT+0x1dc>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d020      	beq.n	8002e04 <HAL_DMA_Abort_IT+0xd8>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a57      	ldr	r2, [pc, #348]	; (8002f24 <HAL_DMA_Abort_IT+0x1f8>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d019      	beq.n	8002e00 <HAL_DMA_Abort_IT+0xd4>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a55      	ldr	r2, [pc, #340]	; (8002f28 <HAL_DMA_Abort_IT+0x1fc>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d012      	beq.n	8002dfc <HAL_DMA_Abort_IT+0xd0>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a54      	ldr	r2, [pc, #336]	; (8002f2c <HAL_DMA_Abort_IT+0x200>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d00a      	beq.n	8002df6 <HAL_DMA_Abort_IT+0xca>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a52      	ldr	r2, [pc, #328]	; (8002f30 <HAL_DMA_Abort_IT+0x204>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d102      	bne.n	8002df0 <HAL_DMA_Abort_IT+0xc4>
 8002dea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002dee:	e01b      	b.n	8002e28 <HAL_DMA_Abort_IT+0xfc>
 8002df0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002df4:	e018      	b.n	8002e28 <HAL_DMA_Abort_IT+0xfc>
 8002df6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002dfa:	e015      	b.n	8002e28 <HAL_DMA_Abort_IT+0xfc>
 8002dfc:	2310      	movs	r3, #16
 8002dfe:	e013      	b.n	8002e28 <HAL_DMA_Abort_IT+0xfc>
 8002e00:	2301      	movs	r3, #1
 8002e02:	e011      	b.n	8002e28 <HAL_DMA_Abort_IT+0xfc>
 8002e04:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e08:	e00e      	b.n	8002e28 <HAL_DMA_Abort_IT+0xfc>
 8002e0a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002e0e:	e00b      	b.n	8002e28 <HAL_DMA_Abort_IT+0xfc>
 8002e10:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e14:	e008      	b.n	8002e28 <HAL_DMA_Abort_IT+0xfc>
 8002e16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e1a:	e005      	b.n	8002e28 <HAL_DMA_Abort_IT+0xfc>
 8002e1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e20:	e002      	b.n	8002e28 <HAL_DMA_Abort_IT+0xfc>
 8002e22:	2310      	movs	r3, #16
 8002e24:	e000      	b.n	8002e28 <HAL_DMA_Abort_IT+0xfc>
 8002e26:	2301      	movs	r3, #1
 8002e28:	4a42      	ldr	r2, [pc, #264]	; (8002f34 <HAL_DMA_Abort_IT+0x208>)
 8002e2a:	6053      	str	r3, [r2, #4]
 8002e2c:	e057      	b.n	8002ede <HAL_DMA_Abort_IT+0x1b2>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a36      	ldr	r2, [pc, #216]	; (8002f0c <HAL_DMA_Abort_IT+0x1e0>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d04f      	beq.n	8002ed8 <HAL_DMA_Abort_IT+0x1ac>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a34      	ldr	r2, [pc, #208]	; (8002f10 <HAL_DMA_Abort_IT+0x1e4>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d048      	beq.n	8002ed4 <HAL_DMA_Abort_IT+0x1a8>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a33      	ldr	r2, [pc, #204]	; (8002f14 <HAL_DMA_Abort_IT+0x1e8>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d040      	beq.n	8002ece <HAL_DMA_Abort_IT+0x1a2>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a31      	ldr	r2, [pc, #196]	; (8002f18 <HAL_DMA_Abort_IT+0x1ec>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d038      	beq.n	8002ec8 <HAL_DMA_Abort_IT+0x19c>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a30      	ldr	r2, [pc, #192]	; (8002f1c <HAL_DMA_Abort_IT+0x1f0>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d030      	beq.n	8002ec2 <HAL_DMA_Abort_IT+0x196>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a2e      	ldr	r2, [pc, #184]	; (8002f20 <HAL_DMA_Abort_IT+0x1f4>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d028      	beq.n	8002ebc <HAL_DMA_Abort_IT+0x190>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a26      	ldr	r2, [pc, #152]	; (8002f08 <HAL_DMA_Abort_IT+0x1dc>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d020      	beq.n	8002eb6 <HAL_DMA_Abort_IT+0x18a>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a2a      	ldr	r2, [pc, #168]	; (8002f24 <HAL_DMA_Abort_IT+0x1f8>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d019      	beq.n	8002eb2 <HAL_DMA_Abort_IT+0x186>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a29      	ldr	r2, [pc, #164]	; (8002f28 <HAL_DMA_Abort_IT+0x1fc>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d012      	beq.n	8002eae <HAL_DMA_Abort_IT+0x182>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a27      	ldr	r2, [pc, #156]	; (8002f2c <HAL_DMA_Abort_IT+0x200>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d00a      	beq.n	8002ea8 <HAL_DMA_Abort_IT+0x17c>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a26      	ldr	r2, [pc, #152]	; (8002f30 <HAL_DMA_Abort_IT+0x204>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d102      	bne.n	8002ea2 <HAL_DMA_Abort_IT+0x176>
 8002e9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ea0:	e01b      	b.n	8002eda <HAL_DMA_Abort_IT+0x1ae>
 8002ea2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ea6:	e018      	b.n	8002eda <HAL_DMA_Abort_IT+0x1ae>
 8002ea8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002eac:	e015      	b.n	8002eda <HAL_DMA_Abort_IT+0x1ae>
 8002eae:	2310      	movs	r3, #16
 8002eb0:	e013      	b.n	8002eda <HAL_DMA_Abort_IT+0x1ae>
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e011      	b.n	8002eda <HAL_DMA_Abort_IT+0x1ae>
 8002eb6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002eba:	e00e      	b.n	8002eda <HAL_DMA_Abort_IT+0x1ae>
 8002ebc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002ec0:	e00b      	b.n	8002eda <HAL_DMA_Abort_IT+0x1ae>
 8002ec2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ec6:	e008      	b.n	8002eda <HAL_DMA_Abort_IT+0x1ae>
 8002ec8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ecc:	e005      	b.n	8002eda <HAL_DMA_Abort_IT+0x1ae>
 8002ece:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ed2:	e002      	b.n	8002eda <HAL_DMA_Abort_IT+0x1ae>
 8002ed4:	2310      	movs	r3, #16
 8002ed6:	e000      	b.n	8002eda <HAL_DMA_Abort_IT+0x1ae>
 8002ed8:	2301      	movs	r3, #1
 8002eda:	4a17      	ldr	r2, [pc, #92]	; (8002f38 <HAL_DMA_Abort_IT+0x20c>)
 8002edc:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d003      	beq.n	8002efe <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	4798      	blx	r3
    } 
  }
  return status;
 8002efe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3710      	adds	r7, #16
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	40020080 	.word	0x40020080
 8002f0c:	40020008 	.word	0x40020008
 8002f10:	4002001c 	.word	0x4002001c
 8002f14:	40020030 	.word	0x40020030
 8002f18:	40020044 	.word	0x40020044
 8002f1c:	40020058 	.word	0x40020058
 8002f20:	4002006c 	.word	0x4002006c
 8002f24:	40020408 	.word	0x40020408
 8002f28:	4002041c 	.word	0x4002041c
 8002f2c:	40020430 	.word	0x40020430
 8002f30:	40020444 	.word	0x40020444
 8002f34:	40020400 	.word	0x40020400
 8002f38:	40020000 	.word	0x40020000

08002f3c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b084      	sub	sp, #16
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f58:	2204      	movs	r2, #4
 8002f5a:	409a      	lsls	r2, r3
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	4013      	ands	r3, r2
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	f000 80f1 	beq.w	8003148 <HAL_DMA_IRQHandler+0x20c>
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	f003 0304 	and.w	r3, r3, #4
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	f000 80eb 	beq.w	8003148 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 0320 	and.w	r3, r3, #32
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d107      	bne.n	8002f90 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f022 0204 	bic.w	r2, r2, #4
 8002f8e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	461a      	mov	r2, r3
 8002f96:	4b5f      	ldr	r3, [pc, #380]	; (8003114 <HAL_DMA_IRQHandler+0x1d8>)
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d958      	bls.n	800304e <HAL_DMA_IRQHandler+0x112>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a5d      	ldr	r2, [pc, #372]	; (8003118 <HAL_DMA_IRQHandler+0x1dc>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d04f      	beq.n	8003046 <HAL_DMA_IRQHandler+0x10a>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a5c      	ldr	r2, [pc, #368]	; (800311c <HAL_DMA_IRQHandler+0x1e0>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d048      	beq.n	8003042 <HAL_DMA_IRQHandler+0x106>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a5a      	ldr	r2, [pc, #360]	; (8003120 <HAL_DMA_IRQHandler+0x1e4>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d040      	beq.n	800303c <HAL_DMA_IRQHandler+0x100>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a59      	ldr	r2, [pc, #356]	; (8003124 <HAL_DMA_IRQHandler+0x1e8>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d038      	beq.n	8003036 <HAL_DMA_IRQHandler+0xfa>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a57      	ldr	r2, [pc, #348]	; (8003128 <HAL_DMA_IRQHandler+0x1ec>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d030      	beq.n	8003030 <HAL_DMA_IRQHandler+0xf4>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a56      	ldr	r2, [pc, #344]	; (800312c <HAL_DMA_IRQHandler+0x1f0>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d028      	beq.n	800302a <HAL_DMA_IRQHandler+0xee>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a4d      	ldr	r2, [pc, #308]	; (8003114 <HAL_DMA_IRQHandler+0x1d8>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d020      	beq.n	8003024 <HAL_DMA_IRQHandler+0xe8>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a52      	ldr	r2, [pc, #328]	; (8003130 <HAL_DMA_IRQHandler+0x1f4>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d019      	beq.n	8003020 <HAL_DMA_IRQHandler+0xe4>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a50      	ldr	r2, [pc, #320]	; (8003134 <HAL_DMA_IRQHandler+0x1f8>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d012      	beq.n	800301c <HAL_DMA_IRQHandler+0xe0>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a4f      	ldr	r2, [pc, #316]	; (8003138 <HAL_DMA_IRQHandler+0x1fc>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d00a      	beq.n	8003016 <HAL_DMA_IRQHandler+0xda>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a4d      	ldr	r2, [pc, #308]	; (800313c <HAL_DMA_IRQHandler+0x200>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d102      	bne.n	8003010 <HAL_DMA_IRQHandler+0xd4>
 800300a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800300e:	e01b      	b.n	8003048 <HAL_DMA_IRQHandler+0x10c>
 8003010:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003014:	e018      	b.n	8003048 <HAL_DMA_IRQHandler+0x10c>
 8003016:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800301a:	e015      	b.n	8003048 <HAL_DMA_IRQHandler+0x10c>
 800301c:	2340      	movs	r3, #64	; 0x40
 800301e:	e013      	b.n	8003048 <HAL_DMA_IRQHandler+0x10c>
 8003020:	2304      	movs	r3, #4
 8003022:	e011      	b.n	8003048 <HAL_DMA_IRQHandler+0x10c>
 8003024:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003028:	e00e      	b.n	8003048 <HAL_DMA_IRQHandler+0x10c>
 800302a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800302e:	e00b      	b.n	8003048 <HAL_DMA_IRQHandler+0x10c>
 8003030:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003034:	e008      	b.n	8003048 <HAL_DMA_IRQHandler+0x10c>
 8003036:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800303a:	e005      	b.n	8003048 <HAL_DMA_IRQHandler+0x10c>
 800303c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003040:	e002      	b.n	8003048 <HAL_DMA_IRQHandler+0x10c>
 8003042:	2340      	movs	r3, #64	; 0x40
 8003044:	e000      	b.n	8003048 <HAL_DMA_IRQHandler+0x10c>
 8003046:	2304      	movs	r3, #4
 8003048:	4a3d      	ldr	r2, [pc, #244]	; (8003140 <HAL_DMA_IRQHandler+0x204>)
 800304a:	6053      	str	r3, [r2, #4]
 800304c:	e057      	b.n	80030fe <HAL_DMA_IRQHandler+0x1c2>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a31      	ldr	r2, [pc, #196]	; (8003118 <HAL_DMA_IRQHandler+0x1dc>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d04f      	beq.n	80030f8 <HAL_DMA_IRQHandler+0x1bc>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a2f      	ldr	r2, [pc, #188]	; (800311c <HAL_DMA_IRQHandler+0x1e0>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d048      	beq.n	80030f4 <HAL_DMA_IRQHandler+0x1b8>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a2e      	ldr	r2, [pc, #184]	; (8003120 <HAL_DMA_IRQHandler+0x1e4>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d040      	beq.n	80030ee <HAL_DMA_IRQHandler+0x1b2>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a2c      	ldr	r2, [pc, #176]	; (8003124 <HAL_DMA_IRQHandler+0x1e8>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d038      	beq.n	80030e8 <HAL_DMA_IRQHandler+0x1ac>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a2b      	ldr	r2, [pc, #172]	; (8003128 <HAL_DMA_IRQHandler+0x1ec>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d030      	beq.n	80030e2 <HAL_DMA_IRQHandler+0x1a6>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a29      	ldr	r2, [pc, #164]	; (800312c <HAL_DMA_IRQHandler+0x1f0>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d028      	beq.n	80030dc <HAL_DMA_IRQHandler+0x1a0>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a21      	ldr	r2, [pc, #132]	; (8003114 <HAL_DMA_IRQHandler+0x1d8>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d020      	beq.n	80030d6 <HAL_DMA_IRQHandler+0x19a>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a25      	ldr	r2, [pc, #148]	; (8003130 <HAL_DMA_IRQHandler+0x1f4>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d019      	beq.n	80030d2 <HAL_DMA_IRQHandler+0x196>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a24      	ldr	r2, [pc, #144]	; (8003134 <HAL_DMA_IRQHandler+0x1f8>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d012      	beq.n	80030ce <HAL_DMA_IRQHandler+0x192>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a22      	ldr	r2, [pc, #136]	; (8003138 <HAL_DMA_IRQHandler+0x1fc>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d00a      	beq.n	80030c8 <HAL_DMA_IRQHandler+0x18c>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a21      	ldr	r2, [pc, #132]	; (800313c <HAL_DMA_IRQHandler+0x200>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d102      	bne.n	80030c2 <HAL_DMA_IRQHandler+0x186>
 80030bc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80030c0:	e01b      	b.n	80030fa <HAL_DMA_IRQHandler+0x1be>
 80030c2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80030c6:	e018      	b.n	80030fa <HAL_DMA_IRQHandler+0x1be>
 80030c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80030cc:	e015      	b.n	80030fa <HAL_DMA_IRQHandler+0x1be>
 80030ce:	2340      	movs	r3, #64	; 0x40
 80030d0:	e013      	b.n	80030fa <HAL_DMA_IRQHandler+0x1be>
 80030d2:	2304      	movs	r3, #4
 80030d4:	e011      	b.n	80030fa <HAL_DMA_IRQHandler+0x1be>
 80030d6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80030da:	e00e      	b.n	80030fa <HAL_DMA_IRQHandler+0x1be>
 80030dc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80030e0:	e00b      	b.n	80030fa <HAL_DMA_IRQHandler+0x1be>
 80030e2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80030e6:	e008      	b.n	80030fa <HAL_DMA_IRQHandler+0x1be>
 80030e8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80030ec:	e005      	b.n	80030fa <HAL_DMA_IRQHandler+0x1be>
 80030ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80030f2:	e002      	b.n	80030fa <HAL_DMA_IRQHandler+0x1be>
 80030f4:	2340      	movs	r3, #64	; 0x40
 80030f6:	e000      	b.n	80030fa <HAL_DMA_IRQHandler+0x1be>
 80030f8:	2304      	movs	r3, #4
 80030fa:	4a12      	ldr	r2, [pc, #72]	; (8003144 <HAL_DMA_IRQHandler+0x208>)
 80030fc:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003102:	2b00      	cmp	r3, #0
 8003104:	f000 8136 	beq.w	8003374 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003110:	e130      	b.n	8003374 <HAL_DMA_IRQHandler+0x438>
 8003112:	bf00      	nop
 8003114:	40020080 	.word	0x40020080
 8003118:	40020008 	.word	0x40020008
 800311c:	4002001c 	.word	0x4002001c
 8003120:	40020030 	.word	0x40020030
 8003124:	40020044 	.word	0x40020044
 8003128:	40020058 	.word	0x40020058
 800312c:	4002006c 	.word	0x4002006c
 8003130:	40020408 	.word	0x40020408
 8003134:	4002041c 	.word	0x4002041c
 8003138:	40020430 	.word	0x40020430
 800313c:	40020444 	.word	0x40020444
 8003140:	40020400 	.word	0x40020400
 8003144:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314c:	2202      	movs	r2, #2
 800314e:	409a      	lsls	r2, r3
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	4013      	ands	r3, r2
 8003154:	2b00      	cmp	r3, #0
 8003156:	f000 80dd 	beq.w	8003314 <HAL_DMA_IRQHandler+0x3d8>
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	f003 0302 	and.w	r3, r3, #2
 8003160:	2b00      	cmp	r3, #0
 8003162:	f000 80d7 	beq.w	8003314 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 0320 	and.w	r3, r3, #32
 8003170:	2b00      	cmp	r3, #0
 8003172:	d10b      	bne.n	800318c <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f022 020a 	bic.w	r2, r2, #10
 8003182:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2201      	movs	r2, #1
 8003188:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	461a      	mov	r2, r3
 8003192:	4b7b      	ldr	r3, [pc, #492]	; (8003380 <HAL_DMA_IRQHandler+0x444>)
 8003194:	429a      	cmp	r2, r3
 8003196:	d958      	bls.n	800324a <HAL_DMA_IRQHandler+0x30e>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a79      	ldr	r2, [pc, #484]	; (8003384 <HAL_DMA_IRQHandler+0x448>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d04f      	beq.n	8003242 <HAL_DMA_IRQHandler+0x306>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a78      	ldr	r2, [pc, #480]	; (8003388 <HAL_DMA_IRQHandler+0x44c>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d048      	beq.n	800323e <HAL_DMA_IRQHandler+0x302>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a76      	ldr	r2, [pc, #472]	; (800338c <HAL_DMA_IRQHandler+0x450>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d040      	beq.n	8003238 <HAL_DMA_IRQHandler+0x2fc>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a75      	ldr	r2, [pc, #468]	; (8003390 <HAL_DMA_IRQHandler+0x454>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d038      	beq.n	8003232 <HAL_DMA_IRQHandler+0x2f6>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a73      	ldr	r2, [pc, #460]	; (8003394 <HAL_DMA_IRQHandler+0x458>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d030      	beq.n	800322c <HAL_DMA_IRQHandler+0x2f0>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a72      	ldr	r2, [pc, #456]	; (8003398 <HAL_DMA_IRQHandler+0x45c>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d028      	beq.n	8003226 <HAL_DMA_IRQHandler+0x2ea>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a69      	ldr	r2, [pc, #420]	; (8003380 <HAL_DMA_IRQHandler+0x444>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d020      	beq.n	8003220 <HAL_DMA_IRQHandler+0x2e4>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a6e      	ldr	r2, [pc, #440]	; (800339c <HAL_DMA_IRQHandler+0x460>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d019      	beq.n	800321c <HAL_DMA_IRQHandler+0x2e0>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a6c      	ldr	r2, [pc, #432]	; (80033a0 <HAL_DMA_IRQHandler+0x464>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d012      	beq.n	8003218 <HAL_DMA_IRQHandler+0x2dc>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a6b      	ldr	r2, [pc, #428]	; (80033a4 <HAL_DMA_IRQHandler+0x468>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d00a      	beq.n	8003212 <HAL_DMA_IRQHandler+0x2d6>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a69      	ldr	r2, [pc, #420]	; (80033a8 <HAL_DMA_IRQHandler+0x46c>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d102      	bne.n	800320c <HAL_DMA_IRQHandler+0x2d0>
 8003206:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800320a:	e01b      	b.n	8003244 <HAL_DMA_IRQHandler+0x308>
 800320c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003210:	e018      	b.n	8003244 <HAL_DMA_IRQHandler+0x308>
 8003212:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003216:	e015      	b.n	8003244 <HAL_DMA_IRQHandler+0x308>
 8003218:	2320      	movs	r3, #32
 800321a:	e013      	b.n	8003244 <HAL_DMA_IRQHandler+0x308>
 800321c:	2302      	movs	r3, #2
 800321e:	e011      	b.n	8003244 <HAL_DMA_IRQHandler+0x308>
 8003220:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003224:	e00e      	b.n	8003244 <HAL_DMA_IRQHandler+0x308>
 8003226:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800322a:	e00b      	b.n	8003244 <HAL_DMA_IRQHandler+0x308>
 800322c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003230:	e008      	b.n	8003244 <HAL_DMA_IRQHandler+0x308>
 8003232:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003236:	e005      	b.n	8003244 <HAL_DMA_IRQHandler+0x308>
 8003238:	f44f 7300 	mov.w	r3, #512	; 0x200
 800323c:	e002      	b.n	8003244 <HAL_DMA_IRQHandler+0x308>
 800323e:	2320      	movs	r3, #32
 8003240:	e000      	b.n	8003244 <HAL_DMA_IRQHandler+0x308>
 8003242:	2302      	movs	r3, #2
 8003244:	4a59      	ldr	r2, [pc, #356]	; (80033ac <HAL_DMA_IRQHandler+0x470>)
 8003246:	6053      	str	r3, [r2, #4]
 8003248:	e057      	b.n	80032fa <HAL_DMA_IRQHandler+0x3be>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a4d      	ldr	r2, [pc, #308]	; (8003384 <HAL_DMA_IRQHandler+0x448>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d04f      	beq.n	80032f4 <HAL_DMA_IRQHandler+0x3b8>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a4b      	ldr	r2, [pc, #300]	; (8003388 <HAL_DMA_IRQHandler+0x44c>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d048      	beq.n	80032f0 <HAL_DMA_IRQHandler+0x3b4>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a4a      	ldr	r2, [pc, #296]	; (800338c <HAL_DMA_IRQHandler+0x450>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d040      	beq.n	80032ea <HAL_DMA_IRQHandler+0x3ae>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a48      	ldr	r2, [pc, #288]	; (8003390 <HAL_DMA_IRQHandler+0x454>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d038      	beq.n	80032e4 <HAL_DMA_IRQHandler+0x3a8>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a47      	ldr	r2, [pc, #284]	; (8003394 <HAL_DMA_IRQHandler+0x458>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d030      	beq.n	80032de <HAL_DMA_IRQHandler+0x3a2>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a45      	ldr	r2, [pc, #276]	; (8003398 <HAL_DMA_IRQHandler+0x45c>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d028      	beq.n	80032d8 <HAL_DMA_IRQHandler+0x39c>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a3d      	ldr	r2, [pc, #244]	; (8003380 <HAL_DMA_IRQHandler+0x444>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d020      	beq.n	80032d2 <HAL_DMA_IRQHandler+0x396>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a41      	ldr	r2, [pc, #260]	; (800339c <HAL_DMA_IRQHandler+0x460>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d019      	beq.n	80032ce <HAL_DMA_IRQHandler+0x392>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a40      	ldr	r2, [pc, #256]	; (80033a0 <HAL_DMA_IRQHandler+0x464>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d012      	beq.n	80032ca <HAL_DMA_IRQHandler+0x38e>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a3e      	ldr	r2, [pc, #248]	; (80033a4 <HAL_DMA_IRQHandler+0x468>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d00a      	beq.n	80032c4 <HAL_DMA_IRQHandler+0x388>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a3d      	ldr	r2, [pc, #244]	; (80033a8 <HAL_DMA_IRQHandler+0x46c>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d102      	bne.n	80032be <HAL_DMA_IRQHandler+0x382>
 80032b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80032bc:	e01b      	b.n	80032f6 <HAL_DMA_IRQHandler+0x3ba>
 80032be:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032c2:	e018      	b.n	80032f6 <HAL_DMA_IRQHandler+0x3ba>
 80032c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80032c8:	e015      	b.n	80032f6 <HAL_DMA_IRQHandler+0x3ba>
 80032ca:	2320      	movs	r3, #32
 80032cc:	e013      	b.n	80032f6 <HAL_DMA_IRQHandler+0x3ba>
 80032ce:	2302      	movs	r3, #2
 80032d0:	e011      	b.n	80032f6 <HAL_DMA_IRQHandler+0x3ba>
 80032d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032d6:	e00e      	b.n	80032f6 <HAL_DMA_IRQHandler+0x3ba>
 80032d8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80032dc:	e00b      	b.n	80032f6 <HAL_DMA_IRQHandler+0x3ba>
 80032de:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032e2:	e008      	b.n	80032f6 <HAL_DMA_IRQHandler+0x3ba>
 80032e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80032e8:	e005      	b.n	80032f6 <HAL_DMA_IRQHandler+0x3ba>
 80032ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80032ee:	e002      	b.n	80032f6 <HAL_DMA_IRQHandler+0x3ba>
 80032f0:	2320      	movs	r3, #32
 80032f2:	e000      	b.n	80032f6 <HAL_DMA_IRQHandler+0x3ba>
 80032f4:	2302      	movs	r3, #2
 80032f6:	4a2e      	ldr	r2, [pc, #184]	; (80033b0 <HAL_DMA_IRQHandler+0x474>)
 80032f8:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2200      	movs	r2, #0
 80032fe:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003306:	2b00      	cmp	r3, #0
 8003308:	d034      	beq.n	8003374 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003312:	e02f      	b.n	8003374 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003318:	2208      	movs	r2, #8
 800331a:	409a      	lsls	r2, r3
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	4013      	ands	r3, r2
 8003320:	2b00      	cmp	r3, #0
 8003322:	d028      	beq.n	8003376 <HAL_DMA_IRQHandler+0x43a>
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	f003 0308 	and.w	r3, r3, #8
 800332a:	2b00      	cmp	r3, #0
 800332c:	d023      	beq.n	8003376 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f022 020e 	bic.w	r2, r2, #14
 800333c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003346:	2101      	movs	r1, #1
 8003348:	fa01 f202 	lsl.w	r2, r1, r2
 800334c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2201      	movs	r2, #1
 8003352:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2201      	movs	r2, #1
 8003358:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2200      	movs	r2, #0
 8003360:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003368:	2b00      	cmp	r3, #0
 800336a:	d004      	beq.n	8003376 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	4798      	blx	r3
    }
  }
  return;
 8003374:	bf00      	nop
 8003376:	bf00      	nop
}
 8003378:	3710      	adds	r7, #16
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	40020080 	.word	0x40020080
 8003384:	40020008 	.word	0x40020008
 8003388:	4002001c 	.word	0x4002001c
 800338c:	40020030 	.word	0x40020030
 8003390:	40020044 	.word	0x40020044
 8003394:	40020058 	.word	0x40020058
 8003398:	4002006c 	.word	0x4002006c
 800339c:	40020408 	.word	0x40020408
 80033a0:	4002041c 	.word	0x4002041c
 80033a4:	40020430 	.word	0x40020430
 80033a8:	40020444 	.word	0x40020444
 80033ac:	40020400 	.word	0x40020400
 80033b0:	40020000 	.word	0x40020000

080033b4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b085      	sub	sp, #20
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	60f8      	str	r0, [r7, #12]
 80033bc:	60b9      	str	r1, [r7, #8]
 80033be:	607a      	str	r2, [r7, #4]
 80033c0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033ca:	2101      	movs	r1, #1
 80033cc:	fa01 f202 	lsl.w	r2, r1, r2
 80033d0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	683a      	ldr	r2, [r7, #0]
 80033d8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	2b10      	cmp	r3, #16
 80033e0:	d108      	bne.n	80033f4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	68ba      	ldr	r2, [r7, #8]
 80033f0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80033f2:	e007      	b.n	8003404 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	68ba      	ldr	r2, [r7, #8]
 80033fa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	60da      	str	r2, [r3, #12]
}
 8003404:	bf00      	nop
 8003406:	3714      	adds	r7, #20
 8003408:	46bd      	mov	sp, r7
 800340a:	bc80      	pop	{r7}
 800340c:	4770      	bx	lr
	...

08003410 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003410:	b480      	push	{r7}
 8003412:	b08b      	sub	sp, #44	; 0x2c
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
 8003418:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800341a:	2300      	movs	r3, #0
 800341c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800341e:	2300      	movs	r3, #0
 8003420:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003422:	e179      	b.n	8003718 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003424:	2201      	movs	r2, #1
 8003426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003428:	fa02 f303 	lsl.w	r3, r2, r3
 800342c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	69fa      	ldr	r2, [r7, #28]
 8003434:	4013      	ands	r3, r2
 8003436:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003438:	69ba      	ldr	r2, [r7, #24]
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	429a      	cmp	r2, r3
 800343e:	f040 8168 	bne.w	8003712 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	4a96      	ldr	r2, [pc, #600]	; (80036a0 <HAL_GPIO_Init+0x290>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d05e      	beq.n	800350a <HAL_GPIO_Init+0xfa>
 800344c:	4a94      	ldr	r2, [pc, #592]	; (80036a0 <HAL_GPIO_Init+0x290>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d875      	bhi.n	800353e <HAL_GPIO_Init+0x12e>
 8003452:	4a94      	ldr	r2, [pc, #592]	; (80036a4 <HAL_GPIO_Init+0x294>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d058      	beq.n	800350a <HAL_GPIO_Init+0xfa>
 8003458:	4a92      	ldr	r2, [pc, #584]	; (80036a4 <HAL_GPIO_Init+0x294>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d86f      	bhi.n	800353e <HAL_GPIO_Init+0x12e>
 800345e:	4a92      	ldr	r2, [pc, #584]	; (80036a8 <HAL_GPIO_Init+0x298>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d052      	beq.n	800350a <HAL_GPIO_Init+0xfa>
 8003464:	4a90      	ldr	r2, [pc, #576]	; (80036a8 <HAL_GPIO_Init+0x298>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d869      	bhi.n	800353e <HAL_GPIO_Init+0x12e>
 800346a:	4a90      	ldr	r2, [pc, #576]	; (80036ac <HAL_GPIO_Init+0x29c>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d04c      	beq.n	800350a <HAL_GPIO_Init+0xfa>
 8003470:	4a8e      	ldr	r2, [pc, #568]	; (80036ac <HAL_GPIO_Init+0x29c>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d863      	bhi.n	800353e <HAL_GPIO_Init+0x12e>
 8003476:	4a8e      	ldr	r2, [pc, #568]	; (80036b0 <HAL_GPIO_Init+0x2a0>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d046      	beq.n	800350a <HAL_GPIO_Init+0xfa>
 800347c:	4a8c      	ldr	r2, [pc, #560]	; (80036b0 <HAL_GPIO_Init+0x2a0>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d85d      	bhi.n	800353e <HAL_GPIO_Init+0x12e>
 8003482:	2b12      	cmp	r3, #18
 8003484:	d82a      	bhi.n	80034dc <HAL_GPIO_Init+0xcc>
 8003486:	2b12      	cmp	r3, #18
 8003488:	d859      	bhi.n	800353e <HAL_GPIO_Init+0x12e>
 800348a:	a201      	add	r2, pc, #4	; (adr r2, 8003490 <HAL_GPIO_Init+0x80>)
 800348c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003490:	0800350b 	.word	0x0800350b
 8003494:	080034e5 	.word	0x080034e5
 8003498:	080034f7 	.word	0x080034f7
 800349c:	08003539 	.word	0x08003539
 80034a0:	0800353f 	.word	0x0800353f
 80034a4:	0800353f 	.word	0x0800353f
 80034a8:	0800353f 	.word	0x0800353f
 80034ac:	0800353f 	.word	0x0800353f
 80034b0:	0800353f 	.word	0x0800353f
 80034b4:	0800353f 	.word	0x0800353f
 80034b8:	0800353f 	.word	0x0800353f
 80034bc:	0800353f 	.word	0x0800353f
 80034c0:	0800353f 	.word	0x0800353f
 80034c4:	0800353f 	.word	0x0800353f
 80034c8:	0800353f 	.word	0x0800353f
 80034cc:	0800353f 	.word	0x0800353f
 80034d0:	0800353f 	.word	0x0800353f
 80034d4:	080034ed 	.word	0x080034ed
 80034d8:	08003501 	.word	0x08003501
 80034dc:	4a75      	ldr	r2, [pc, #468]	; (80036b4 <HAL_GPIO_Init+0x2a4>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d013      	beq.n	800350a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80034e2:	e02c      	b.n	800353e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	623b      	str	r3, [r7, #32]
          break;
 80034ea:	e029      	b.n	8003540 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	3304      	adds	r3, #4
 80034f2:	623b      	str	r3, [r7, #32]
          break;
 80034f4:	e024      	b.n	8003540 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	68db      	ldr	r3, [r3, #12]
 80034fa:	3308      	adds	r3, #8
 80034fc:	623b      	str	r3, [r7, #32]
          break;
 80034fe:	e01f      	b.n	8003540 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	330c      	adds	r3, #12
 8003506:	623b      	str	r3, [r7, #32]
          break;
 8003508:	e01a      	b.n	8003540 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d102      	bne.n	8003518 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003512:	2304      	movs	r3, #4
 8003514:	623b      	str	r3, [r7, #32]
          break;
 8003516:	e013      	b.n	8003540 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	2b01      	cmp	r3, #1
 800351e:	d105      	bne.n	800352c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003520:	2308      	movs	r3, #8
 8003522:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	69fa      	ldr	r2, [r7, #28]
 8003528:	611a      	str	r2, [r3, #16]
          break;
 800352a:	e009      	b.n	8003540 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800352c:	2308      	movs	r3, #8
 800352e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	69fa      	ldr	r2, [r7, #28]
 8003534:	615a      	str	r2, [r3, #20]
          break;
 8003536:	e003      	b.n	8003540 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003538:	2300      	movs	r3, #0
 800353a:	623b      	str	r3, [r7, #32]
          break;
 800353c:	e000      	b.n	8003540 <HAL_GPIO_Init+0x130>
          break;
 800353e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003540:	69bb      	ldr	r3, [r7, #24]
 8003542:	2bff      	cmp	r3, #255	; 0xff
 8003544:	d801      	bhi.n	800354a <HAL_GPIO_Init+0x13a>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	e001      	b.n	800354e <HAL_GPIO_Init+0x13e>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	3304      	adds	r3, #4
 800354e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003550:	69bb      	ldr	r3, [r7, #24]
 8003552:	2bff      	cmp	r3, #255	; 0xff
 8003554:	d802      	bhi.n	800355c <HAL_GPIO_Init+0x14c>
 8003556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	e002      	b.n	8003562 <HAL_GPIO_Init+0x152>
 800355c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355e:	3b08      	subs	r3, #8
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	210f      	movs	r1, #15
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	fa01 f303 	lsl.w	r3, r1, r3
 8003570:	43db      	mvns	r3, r3
 8003572:	401a      	ands	r2, r3
 8003574:	6a39      	ldr	r1, [r7, #32]
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	fa01 f303 	lsl.w	r3, r1, r3
 800357c:	431a      	orrs	r2, r3
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800358a:	2b00      	cmp	r3, #0
 800358c:	f000 80c1 	beq.w	8003712 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003590:	4b49      	ldr	r3, [pc, #292]	; (80036b8 <HAL_GPIO_Init+0x2a8>)
 8003592:	699b      	ldr	r3, [r3, #24]
 8003594:	4a48      	ldr	r2, [pc, #288]	; (80036b8 <HAL_GPIO_Init+0x2a8>)
 8003596:	f043 0301 	orr.w	r3, r3, #1
 800359a:	6193      	str	r3, [r2, #24]
 800359c:	4b46      	ldr	r3, [pc, #280]	; (80036b8 <HAL_GPIO_Init+0x2a8>)
 800359e:	699b      	ldr	r3, [r3, #24]
 80035a0:	f003 0301 	and.w	r3, r3, #1
 80035a4:	60bb      	str	r3, [r7, #8]
 80035a6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80035a8:	4a44      	ldr	r2, [pc, #272]	; (80036bc <HAL_GPIO_Init+0x2ac>)
 80035aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ac:	089b      	lsrs	r3, r3, #2
 80035ae:	3302      	adds	r3, #2
 80035b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035b4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80035b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b8:	f003 0303 	and.w	r3, r3, #3
 80035bc:	009b      	lsls	r3, r3, #2
 80035be:	220f      	movs	r2, #15
 80035c0:	fa02 f303 	lsl.w	r3, r2, r3
 80035c4:	43db      	mvns	r3, r3
 80035c6:	68fa      	ldr	r2, [r7, #12]
 80035c8:	4013      	ands	r3, r2
 80035ca:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	4a3c      	ldr	r2, [pc, #240]	; (80036c0 <HAL_GPIO_Init+0x2b0>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d01f      	beq.n	8003614 <HAL_GPIO_Init+0x204>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	4a3b      	ldr	r2, [pc, #236]	; (80036c4 <HAL_GPIO_Init+0x2b4>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d019      	beq.n	8003610 <HAL_GPIO_Init+0x200>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	4a3a      	ldr	r2, [pc, #232]	; (80036c8 <HAL_GPIO_Init+0x2b8>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d013      	beq.n	800360c <HAL_GPIO_Init+0x1fc>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	4a39      	ldr	r2, [pc, #228]	; (80036cc <HAL_GPIO_Init+0x2bc>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d00d      	beq.n	8003608 <HAL_GPIO_Init+0x1f8>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	4a38      	ldr	r2, [pc, #224]	; (80036d0 <HAL_GPIO_Init+0x2c0>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d007      	beq.n	8003604 <HAL_GPIO_Init+0x1f4>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	4a37      	ldr	r2, [pc, #220]	; (80036d4 <HAL_GPIO_Init+0x2c4>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d101      	bne.n	8003600 <HAL_GPIO_Init+0x1f0>
 80035fc:	2305      	movs	r3, #5
 80035fe:	e00a      	b.n	8003616 <HAL_GPIO_Init+0x206>
 8003600:	2306      	movs	r3, #6
 8003602:	e008      	b.n	8003616 <HAL_GPIO_Init+0x206>
 8003604:	2304      	movs	r3, #4
 8003606:	e006      	b.n	8003616 <HAL_GPIO_Init+0x206>
 8003608:	2303      	movs	r3, #3
 800360a:	e004      	b.n	8003616 <HAL_GPIO_Init+0x206>
 800360c:	2302      	movs	r3, #2
 800360e:	e002      	b.n	8003616 <HAL_GPIO_Init+0x206>
 8003610:	2301      	movs	r3, #1
 8003612:	e000      	b.n	8003616 <HAL_GPIO_Init+0x206>
 8003614:	2300      	movs	r3, #0
 8003616:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003618:	f002 0203 	and.w	r2, r2, #3
 800361c:	0092      	lsls	r2, r2, #2
 800361e:	4093      	lsls	r3, r2
 8003620:	68fa      	ldr	r2, [r7, #12]
 8003622:	4313      	orrs	r3, r2
 8003624:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003626:	4925      	ldr	r1, [pc, #148]	; (80036bc <HAL_GPIO_Init+0x2ac>)
 8003628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362a:	089b      	lsrs	r3, r3, #2
 800362c:	3302      	adds	r3, #2
 800362e:	68fa      	ldr	r2, [r7, #12]
 8003630:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800363c:	2b00      	cmp	r3, #0
 800363e:	d006      	beq.n	800364e <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003640:	4b25      	ldr	r3, [pc, #148]	; (80036d8 <HAL_GPIO_Init+0x2c8>)
 8003642:	689a      	ldr	r2, [r3, #8]
 8003644:	4924      	ldr	r1, [pc, #144]	; (80036d8 <HAL_GPIO_Init+0x2c8>)
 8003646:	69bb      	ldr	r3, [r7, #24]
 8003648:	4313      	orrs	r3, r2
 800364a:	608b      	str	r3, [r1, #8]
 800364c:	e006      	b.n	800365c <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800364e:	4b22      	ldr	r3, [pc, #136]	; (80036d8 <HAL_GPIO_Init+0x2c8>)
 8003650:	689a      	ldr	r2, [r3, #8]
 8003652:	69bb      	ldr	r3, [r7, #24]
 8003654:	43db      	mvns	r3, r3
 8003656:	4920      	ldr	r1, [pc, #128]	; (80036d8 <HAL_GPIO_Init+0x2c8>)
 8003658:	4013      	ands	r3, r2
 800365a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003664:	2b00      	cmp	r3, #0
 8003666:	d006      	beq.n	8003676 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003668:	4b1b      	ldr	r3, [pc, #108]	; (80036d8 <HAL_GPIO_Init+0x2c8>)
 800366a:	68da      	ldr	r2, [r3, #12]
 800366c:	491a      	ldr	r1, [pc, #104]	; (80036d8 <HAL_GPIO_Init+0x2c8>)
 800366e:	69bb      	ldr	r3, [r7, #24]
 8003670:	4313      	orrs	r3, r2
 8003672:	60cb      	str	r3, [r1, #12]
 8003674:	e006      	b.n	8003684 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003676:	4b18      	ldr	r3, [pc, #96]	; (80036d8 <HAL_GPIO_Init+0x2c8>)
 8003678:	68da      	ldr	r2, [r3, #12]
 800367a:	69bb      	ldr	r3, [r7, #24]
 800367c:	43db      	mvns	r3, r3
 800367e:	4916      	ldr	r1, [pc, #88]	; (80036d8 <HAL_GPIO_Init+0x2c8>)
 8003680:	4013      	ands	r3, r2
 8003682:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800368c:	2b00      	cmp	r3, #0
 800368e:	d025      	beq.n	80036dc <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003690:	4b11      	ldr	r3, [pc, #68]	; (80036d8 <HAL_GPIO_Init+0x2c8>)
 8003692:	685a      	ldr	r2, [r3, #4]
 8003694:	4910      	ldr	r1, [pc, #64]	; (80036d8 <HAL_GPIO_Init+0x2c8>)
 8003696:	69bb      	ldr	r3, [r7, #24]
 8003698:	4313      	orrs	r3, r2
 800369a:	604b      	str	r3, [r1, #4]
 800369c:	e025      	b.n	80036ea <HAL_GPIO_Init+0x2da>
 800369e:	bf00      	nop
 80036a0:	10320000 	.word	0x10320000
 80036a4:	10310000 	.word	0x10310000
 80036a8:	10220000 	.word	0x10220000
 80036ac:	10210000 	.word	0x10210000
 80036b0:	10120000 	.word	0x10120000
 80036b4:	10110000 	.word	0x10110000
 80036b8:	40021000 	.word	0x40021000
 80036bc:	40010000 	.word	0x40010000
 80036c0:	40010800 	.word	0x40010800
 80036c4:	40010c00 	.word	0x40010c00
 80036c8:	40011000 	.word	0x40011000
 80036cc:	40011400 	.word	0x40011400
 80036d0:	40011800 	.word	0x40011800
 80036d4:	40011c00 	.word	0x40011c00
 80036d8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80036dc:	4b15      	ldr	r3, [pc, #84]	; (8003734 <HAL_GPIO_Init+0x324>)
 80036de:	685a      	ldr	r2, [r3, #4]
 80036e0:	69bb      	ldr	r3, [r7, #24]
 80036e2:	43db      	mvns	r3, r3
 80036e4:	4913      	ldr	r1, [pc, #76]	; (8003734 <HAL_GPIO_Init+0x324>)
 80036e6:	4013      	ands	r3, r2
 80036e8:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d006      	beq.n	8003704 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80036f6:	4b0f      	ldr	r3, [pc, #60]	; (8003734 <HAL_GPIO_Init+0x324>)
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	490e      	ldr	r1, [pc, #56]	; (8003734 <HAL_GPIO_Init+0x324>)
 80036fc:	69bb      	ldr	r3, [r7, #24]
 80036fe:	4313      	orrs	r3, r2
 8003700:	600b      	str	r3, [r1, #0]
 8003702:	e006      	b.n	8003712 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003704:	4b0b      	ldr	r3, [pc, #44]	; (8003734 <HAL_GPIO_Init+0x324>)
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	69bb      	ldr	r3, [r7, #24]
 800370a:	43db      	mvns	r3, r3
 800370c:	4909      	ldr	r1, [pc, #36]	; (8003734 <HAL_GPIO_Init+0x324>)
 800370e:	4013      	ands	r3, r2
 8003710:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003714:	3301      	adds	r3, #1
 8003716:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371e:	fa22 f303 	lsr.w	r3, r2, r3
 8003722:	2b00      	cmp	r3, #0
 8003724:	f47f ae7e 	bne.w	8003424 <HAL_GPIO_Init+0x14>
  }
}
 8003728:	bf00      	nop
 800372a:	bf00      	nop
 800372c:	372c      	adds	r7, #44	; 0x2c
 800372e:	46bd      	mov	sp, r7
 8003730:	bc80      	pop	{r7}
 8003732:	4770      	bx	lr
 8003734:	40010400 	.word	0x40010400

08003738 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003738:	b480      	push	{r7}
 800373a:	b083      	sub	sp, #12
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	460b      	mov	r3, r1
 8003742:	807b      	strh	r3, [r7, #2]
 8003744:	4613      	mov	r3, r2
 8003746:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003748:	787b      	ldrb	r3, [r7, #1]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d003      	beq.n	8003756 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800374e:	887a      	ldrh	r2, [r7, #2]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003754:	e003      	b.n	800375e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003756:	887b      	ldrh	r3, [r7, #2]
 8003758:	041a      	lsls	r2, r3, #16
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	611a      	str	r2, [r3, #16]
}
 800375e:	bf00      	nop
 8003760:	370c      	adds	r7, #12
 8003762:	46bd      	mov	sp, r7
 8003764:	bc80      	pop	{r7}
 8003766:	4770      	bx	lr

08003768 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b086      	sub	sp, #24
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d101      	bne.n	800377a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e272      	b.n	8003c60 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0301 	and.w	r3, r3, #1
 8003782:	2b00      	cmp	r3, #0
 8003784:	f000 8087 	beq.w	8003896 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003788:	4b92      	ldr	r3, [pc, #584]	; (80039d4 <HAL_RCC_OscConfig+0x26c>)
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	f003 030c 	and.w	r3, r3, #12
 8003790:	2b04      	cmp	r3, #4
 8003792:	d00c      	beq.n	80037ae <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003794:	4b8f      	ldr	r3, [pc, #572]	; (80039d4 <HAL_RCC_OscConfig+0x26c>)
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	f003 030c 	and.w	r3, r3, #12
 800379c:	2b08      	cmp	r3, #8
 800379e:	d112      	bne.n	80037c6 <HAL_RCC_OscConfig+0x5e>
 80037a0:	4b8c      	ldr	r3, [pc, #560]	; (80039d4 <HAL_RCC_OscConfig+0x26c>)
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037ac:	d10b      	bne.n	80037c6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037ae:	4b89      	ldr	r3, [pc, #548]	; (80039d4 <HAL_RCC_OscConfig+0x26c>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d06c      	beq.n	8003894 <HAL_RCC_OscConfig+0x12c>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d168      	bne.n	8003894 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e24c      	b.n	8003c60 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037ce:	d106      	bne.n	80037de <HAL_RCC_OscConfig+0x76>
 80037d0:	4b80      	ldr	r3, [pc, #512]	; (80039d4 <HAL_RCC_OscConfig+0x26c>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a7f      	ldr	r2, [pc, #508]	; (80039d4 <HAL_RCC_OscConfig+0x26c>)
 80037d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037da:	6013      	str	r3, [r2, #0]
 80037dc:	e02e      	b.n	800383c <HAL_RCC_OscConfig+0xd4>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d10c      	bne.n	8003800 <HAL_RCC_OscConfig+0x98>
 80037e6:	4b7b      	ldr	r3, [pc, #492]	; (80039d4 <HAL_RCC_OscConfig+0x26c>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a7a      	ldr	r2, [pc, #488]	; (80039d4 <HAL_RCC_OscConfig+0x26c>)
 80037ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037f0:	6013      	str	r3, [r2, #0]
 80037f2:	4b78      	ldr	r3, [pc, #480]	; (80039d4 <HAL_RCC_OscConfig+0x26c>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a77      	ldr	r2, [pc, #476]	; (80039d4 <HAL_RCC_OscConfig+0x26c>)
 80037f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037fc:	6013      	str	r3, [r2, #0]
 80037fe:	e01d      	b.n	800383c <HAL_RCC_OscConfig+0xd4>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003808:	d10c      	bne.n	8003824 <HAL_RCC_OscConfig+0xbc>
 800380a:	4b72      	ldr	r3, [pc, #456]	; (80039d4 <HAL_RCC_OscConfig+0x26c>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a71      	ldr	r2, [pc, #452]	; (80039d4 <HAL_RCC_OscConfig+0x26c>)
 8003810:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003814:	6013      	str	r3, [r2, #0]
 8003816:	4b6f      	ldr	r3, [pc, #444]	; (80039d4 <HAL_RCC_OscConfig+0x26c>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a6e      	ldr	r2, [pc, #440]	; (80039d4 <HAL_RCC_OscConfig+0x26c>)
 800381c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003820:	6013      	str	r3, [r2, #0]
 8003822:	e00b      	b.n	800383c <HAL_RCC_OscConfig+0xd4>
 8003824:	4b6b      	ldr	r3, [pc, #428]	; (80039d4 <HAL_RCC_OscConfig+0x26c>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a6a      	ldr	r2, [pc, #424]	; (80039d4 <HAL_RCC_OscConfig+0x26c>)
 800382a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800382e:	6013      	str	r3, [r2, #0]
 8003830:	4b68      	ldr	r3, [pc, #416]	; (80039d4 <HAL_RCC_OscConfig+0x26c>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a67      	ldr	r2, [pc, #412]	; (80039d4 <HAL_RCC_OscConfig+0x26c>)
 8003836:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800383a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d013      	beq.n	800386c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003844:	f7ff f824 	bl	8002890 <HAL_GetTick>
 8003848:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800384a:	e008      	b.n	800385e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800384c:	f7ff f820 	bl	8002890 <HAL_GetTick>
 8003850:	4602      	mov	r2, r0
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	2b64      	cmp	r3, #100	; 0x64
 8003858:	d901      	bls.n	800385e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800385a:	2303      	movs	r3, #3
 800385c:	e200      	b.n	8003c60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800385e:	4b5d      	ldr	r3, [pc, #372]	; (80039d4 <HAL_RCC_OscConfig+0x26c>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003866:	2b00      	cmp	r3, #0
 8003868:	d0f0      	beq.n	800384c <HAL_RCC_OscConfig+0xe4>
 800386a:	e014      	b.n	8003896 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800386c:	f7ff f810 	bl	8002890 <HAL_GetTick>
 8003870:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003872:	e008      	b.n	8003886 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003874:	f7ff f80c 	bl	8002890 <HAL_GetTick>
 8003878:	4602      	mov	r2, r0
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	2b64      	cmp	r3, #100	; 0x64
 8003880:	d901      	bls.n	8003886 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003882:	2303      	movs	r3, #3
 8003884:	e1ec      	b.n	8003c60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003886:	4b53      	ldr	r3, [pc, #332]	; (80039d4 <HAL_RCC_OscConfig+0x26c>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800388e:	2b00      	cmp	r3, #0
 8003890:	d1f0      	bne.n	8003874 <HAL_RCC_OscConfig+0x10c>
 8003892:	e000      	b.n	8003896 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003894:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 0302 	and.w	r3, r3, #2
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d063      	beq.n	800396a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80038a2:	4b4c      	ldr	r3, [pc, #304]	; (80039d4 <HAL_RCC_OscConfig+0x26c>)
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	f003 030c 	and.w	r3, r3, #12
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d00b      	beq.n	80038c6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80038ae:	4b49      	ldr	r3, [pc, #292]	; (80039d4 <HAL_RCC_OscConfig+0x26c>)
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f003 030c 	and.w	r3, r3, #12
 80038b6:	2b08      	cmp	r3, #8
 80038b8:	d11c      	bne.n	80038f4 <HAL_RCC_OscConfig+0x18c>
 80038ba:	4b46      	ldr	r3, [pc, #280]	; (80039d4 <HAL_RCC_OscConfig+0x26c>)
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d116      	bne.n	80038f4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038c6:	4b43      	ldr	r3, [pc, #268]	; (80039d4 <HAL_RCC_OscConfig+0x26c>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0302 	and.w	r3, r3, #2
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d005      	beq.n	80038de <HAL_RCC_OscConfig+0x176>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	691b      	ldr	r3, [r3, #16]
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d001      	beq.n	80038de <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e1c0      	b.n	8003c60 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038de:	4b3d      	ldr	r3, [pc, #244]	; (80039d4 <HAL_RCC_OscConfig+0x26c>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	695b      	ldr	r3, [r3, #20]
 80038ea:	00db      	lsls	r3, r3, #3
 80038ec:	4939      	ldr	r1, [pc, #228]	; (80039d4 <HAL_RCC_OscConfig+0x26c>)
 80038ee:	4313      	orrs	r3, r2
 80038f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038f2:	e03a      	b.n	800396a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	691b      	ldr	r3, [r3, #16]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d020      	beq.n	800393e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038fc:	4b36      	ldr	r3, [pc, #216]	; (80039d8 <HAL_RCC_OscConfig+0x270>)
 80038fe:	2201      	movs	r2, #1
 8003900:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003902:	f7fe ffc5 	bl	8002890 <HAL_GetTick>
 8003906:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003908:	e008      	b.n	800391c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800390a:	f7fe ffc1 	bl	8002890 <HAL_GetTick>
 800390e:	4602      	mov	r2, r0
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	1ad3      	subs	r3, r2, r3
 8003914:	2b02      	cmp	r3, #2
 8003916:	d901      	bls.n	800391c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003918:	2303      	movs	r3, #3
 800391a:	e1a1      	b.n	8003c60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800391c:	4b2d      	ldr	r3, [pc, #180]	; (80039d4 <HAL_RCC_OscConfig+0x26c>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0302 	and.w	r3, r3, #2
 8003924:	2b00      	cmp	r3, #0
 8003926:	d0f0      	beq.n	800390a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003928:	4b2a      	ldr	r3, [pc, #168]	; (80039d4 <HAL_RCC_OscConfig+0x26c>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	695b      	ldr	r3, [r3, #20]
 8003934:	00db      	lsls	r3, r3, #3
 8003936:	4927      	ldr	r1, [pc, #156]	; (80039d4 <HAL_RCC_OscConfig+0x26c>)
 8003938:	4313      	orrs	r3, r2
 800393a:	600b      	str	r3, [r1, #0]
 800393c:	e015      	b.n	800396a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800393e:	4b26      	ldr	r3, [pc, #152]	; (80039d8 <HAL_RCC_OscConfig+0x270>)
 8003940:	2200      	movs	r2, #0
 8003942:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003944:	f7fe ffa4 	bl	8002890 <HAL_GetTick>
 8003948:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800394a:	e008      	b.n	800395e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800394c:	f7fe ffa0 	bl	8002890 <HAL_GetTick>
 8003950:	4602      	mov	r2, r0
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	2b02      	cmp	r3, #2
 8003958:	d901      	bls.n	800395e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	e180      	b.n	8003c60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800395e:	4b1d      	ldr	r3, [pc, #116]	; (80039d4 <HAL_RCC_OscConfig+0x26c>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0302 	and.w	r3, r3, #2
 8003966:	2b00      	cmp	r3, #0
 8003968:	d1f0      	bne.n	800394c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 0308 	and.w	r3, r3, #8
 8003972:	2b00      	cmp	r3, #0
 8003974:	d03a      	beq.n	80039ec <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	699b      	ldr	r3, [r3, #24]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d019      	beq.n	80039b2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800397e:	4b17      	ldr	r3, [pc, #92]	; (80039dc <HAL_RCC_OscConfig+0x274>)
 8003980:	2201      	movs	r2, #1
 8003982:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003984:	f7fe ff84 	bl	8002890 <HAL_GetTick>
 8003988:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800398a:	e008      	b.n	800399e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800398c:	f7fe ff80 	bl	8002890 <HAL_GetTick>
 8003990:	4602      	mov	r2, r0
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	2b02      	cmp	r3, #2
 8003998:	d901      	bls.n	800399e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	e160      	b.n	8003c60 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800399e:	4b0d      	ldr	r3, [pc, #52]	; (80039d4 <HAL_RCC_OscConfig+0x26c>)
 80039a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a2:	f003 0302 	and.w	r3, r3, #2
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d0f0      	beq.n	800398c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80039aa:	2001      	movs	r0, #1
 80039ac:	f000 face 	bl	8003f4c <RCC_Delay>
 80039b0:	e01c      	b.n	80039ec <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039b2:	4b0a      	ldr	r3, [pc, #40]	; (80039dc <HAL_RCC_OscConfig+0x274>)
 80039b4:	2200      	movs	r2, #0
 80039b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039b8:	f7fe ff6a 	bl	8002890 <HAL_GetTick>
 80039bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039be:	e00f      	b.n	80039e0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039c0:	f7fe ff66 	bl	8002890 <HAL_GetTick>
 80039c4:	4602      	mov	r2, r0
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	2b02      	cmp	r3, #2
 80039cc:	d908      	bls.n	80039e0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80039ce:	2303      	movs	r3, #3
 80039d0:	e146      	b.n	8003c60 <HAL_RCC_OscConfig+0x4f8>
 80039d2:	bf00      	nop
 80039d4:	40021000 	.word	0x40021000
 80039d8:	42420000 	.word	0x42420000
 80039dc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039e0:	4b92      	ldr	r3, [pc, #584]	; (8003c2c <HAL_RCC_OscConfig+0x4c4>)
 80039e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e4:	f003 0302 	and.w	r3, r3, #2
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d1e9      	bne.n	80039c0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 0304 	and.w	r3, r3, #4
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	f000 80a6 	beq.w	8003b46 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039fa:	2300      	movs	r3, #0
 80039fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039fe:	4b8b      	ldr	r3, [pc, #556]	; (8003c2c <HAL_RCC_OscConfig+0x4c4>)
 8003a00:	69db      	ldr	r3, [r3, #28]
 8003a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d10d      	bne.n	8003a26 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a0a:	4b88      	ldr	r3, [pc, #544]	; (8003c2c <HAL_RCC_OscConfig+0x4c4>)
 8003a0c:	69db      	ldr	r3, [r3, #28]
 8003a0e:	4a87      	ldr	r2, [pc, #540]	; (8003c2c <HAL_RCC_OscConfig+0x4c4>)
 8003a10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a14:	61d3      	str	r3, [r2, #28]
 8003a16:	4b85      	ldr	r3, [pc, #532]	; (8003c2c <HAL_RCC_OscConfig+0x4c4>)
 8003a18:	69db      	ldr	r3, [r3, #28]
 8003a1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a1e:	60bb      	str	r3, [r7, #8]
 8003a20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a22:	2301      	movs	r3, #1
 8003a24:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a26:	4b82      	ldr	r3, [pc, #520]	; (8003c30 <HAL_RCC_OscConfig+0x4c8>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d118      	bne.n	8003a64 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a32:	4b7f      	ldr	r3, [pc, #508]	; (8003c30 <HAL_RCC_OscConfig+0x4c8>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a7e      	ldr	r2, [pc, #504]	; (8003c30 <HAL_RCC_OscConfig+0x4c8>)
 8003a38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a3e:	f7fe ff27 	bl	8002890 <HAL_GetTick>
 8003a42:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a44:	e008      	b.n	8003a58 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a46:	f7fe ff23 	bl	8002890 <HAL_GetTick>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	1ad3      	subs	r3, r2, r3
 8003a50:	2b64      	cmp	r3, #100	; 0x64
 8003a52:	d901      	bls.n	8003a58 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003a54:	2303      	movs	r3, #3
 8003a56:	e103      	b.n	8003c60 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a58:	4b75      	ldr	r3, [pc, #468]	; (8003c30 <HAL_RCC_OscConfig+0x4c8>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d0f0      	beq.n	8003a46 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d106      	bne.n	8003a7a <HAL_RCC_OscConfig+0x312>
 8003a6c:	4b6f      	ldr	r3, [pc, #444]	; (8003c2c <HAL_RCC_OscConfig+0x4c4>)
 8003a6e:	6a1b      	ldr	r3, [r3, #32]
 8003a70:	4a6e      	ldr	r2, [pc, #440]	; (8003c2c <HAL_RCC_OscConfig+0x4c4>)
 8003a72:	f043 0301 	orr.w	r3, r3, #1
 8003a76:	6213      	str	r3, [r2, #32]
 8003a78:	e02d      	b.n	8003ad6 <HAL_RCC_OscConfig+0x36e>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d10c      	bne.n	8003a9c <HAL_RCC_OscConfig+0x334>
 8003a82:	4b6a      	ldr	r3, [pc, #424]	; (8003c2c <HAL_RCC_OscConfig+0x4c4>)
 8003a84:	6a1b      	ldr	r3, [r3, #32]
 8003a86:	4a69      	ldr	r2, [pc, #420]	; (8003c2c <HAL_RCC_OscConfig+0x4c4>)
 8003a88:	f023 0301 	bic.w	r3, r3, #1
 8003a8c:	6213      	str	r3, [r2, #32]
 8003a8e:	4b67      	ldr	r3, [pc, #412]	; (8003c2c <HAL_RCC_OscConfig+0x4c4>)
 8003a90:	6a1b      	ldr	r3, [r3, #32]
 8003a92:	4a66      	ldr	r2, [pc, #408]	; (8003c2c <HAL_RCC_OscConfig+0x4c4>)
 8003a94:	f023 0304 	bic.w	r3, r3, #4
 8003a98:	6213      	str	r3, [r2, #32]
 8003a9a:	e01c      	b.n	8003ad6 <HAL_RCC_OscConfig+0x36e>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	2b05      	cmp	r3, #5
 8003aa2:	d10c      	bne.n	8003abe <HAL_RCC_OscConfig+0x356>
 8003aa4:	4b61      	ldr	r3, [pc, #388]	; (8003c2c <HAL_RCC_OscConfig+0x4c4>)
 8003aa6:	6a1b      	ldr	r3, [r3, #32]
 8003aa8:	4a60      	ldr	r2, [pc, #384]	; (8003c2c <HAL_RCC_OscConfig+0x4c4>)
 8003aaa:	f043 0304 	orr.w	r3, r3, #4
 8003aae:	6213      	str	r3, [r2, #32]
 8003ab0:	4b5e      	ldr	r3, [pc, #376]	; (8003c2c <HAL_RCC_OscConfig+0x4c4>)
 8003ab2:	6a1b      	ldr	r3, [r3, #32]
 8003ab4:	4a5d      	ldr	r2, [pc, #372]	; (8003c2c <HAL_RCC_OscConfig+0x4c4>)
 8003ab6:	f043 0301 	orr.w	r3, r3, #1
 8003aba:	6213      	str	r3, [r2, #32]
 8003abc:	e00b      	b.n	8003ad6 <HAL_RCC_OscConfig+0x36e>
 8003abe:	4b5b      	ldr	r3, [pc, #364]	; (8003c2c <HAL_RCC_OscConfig+0x4c4>)
 8003ac0:	6a1b      	ldr	r3, [r3, #32]
 8003ac2:	4a5a      	ldr	r2, [pc, #360]	; (8003c2c <HAL_RCC_OscConfig+0x4c4>)
 8003ac4:	f023 0301 	bic.w	r3, r3, #1
 8003ac8:	6213      	str	r3, [r2, #32]
 8003aca:	4b58      	ldr	r3, [pc, #352]	; (8003c2c <HAL_RCC_OscConfig+0x4c4>)
 8003acc:	6a1b      	ldr	r3, [r3, #32]
 8003ace:	4a57      	ldr	r2, [pc, #348]	; (8003c2c <HAL_RCC_OscConfig+0x4c4>)
 8003ad0:	f023 0304 	bic.w	r3, r3, #4
 8003ad4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	68db      	ldr	r3, [r3, #12]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d015      	beq.n	8003b0a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ade:	f7fe fed7 	bl	8002890 <HAL_GetTick>
 8003ae2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ae4:	e00a      	b.n	8003afc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ae6:	f7fe fed3 	bl	8002890 <HAL_GetTick>
 8003aea:	4602      	mov	r2, r0
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d901      	bls.n	8003afc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003af8:	2303      	movs	r3, #3
 8003afa:	e0b1      	b.n	8003c60 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003afc:	4b4b      	ldr	r3, [pc, #300]	; (8003c2c <HAL_RCC_OscConfig+0x4c4>)
 8003afe:	6a1b      	ldr	r3, [r3, #32]
 8003b00:	f003 0302 	and.w	r3, r3, #2
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d0ee      	beq.n	8003ae6 <HAL_RCC_OscConfig+0x37e>
 8003b08:	e014      	b.n	8003b34 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b0a:	f7fe fec1 	bl	8002890 <HAL_GetTick>
 8003b0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b10:	e00a      	b.n	8003b28 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b12:	f7fe febd 	bl	8002890 <HAL_GetTick>
 8003b16:	4602      	mov	r2, r0
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	1ad3      	subs	r3, r2, r3
 8003b1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d901      	bls.n	8003b28 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003b24:	2303      	movs	r3, #3
 8003b26:	e09b      	b.n	8003c60 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b28:	4b40      	ldr	r3, [pc, #256]	; (8003c2c <HAL_RCC_OscConfig+0x4c4>)
 8003b2a:	6a1b      	ldr	r3, [r3, #32]
 8003b2c:	f003 0302 	and.w	r3, r3, #2
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d1ee      	bne.n	8003b12 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003b34:	7dfb      	ldrb	r3, [r7, #23]
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d105      	bne.n	8003b46 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b3a:	4b3c      	ldr	r3, [pc, #240]	; (8003c2c <HAL_RCC_OscConfig+0x4c4>)
 8003b3c:	69db      	ldr	r3, [r3, #28]
 8003b3e:	4a3b      	ldr	r2, [pc, #236]	; (8003c2c <HAL_RCC_OscConfig+0x4c4>)
 8003b40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b44:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	69db      	ldr	r3, [r3, #28]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	f000 8087 	beq.w	8003c5e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b50:	4b36      	ldr	r3, [pc, #216]	; (8003c2c <HAL_RCC_OscConfig+0x4c4>)
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	f003 030c 	and.w	r3, r3, #12
 8003b58:	2b08      	cmp	r3, #8
 8003b5a:	d061      	beq.n	8003c20 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	69db      	ldr	r3, [r3, #28]
 8003b60:	2b02      	cmp	r3, #2
 8003b62:	d146      	bne.n	8003bf2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b64:	4b33      	ldr	r3, [pc, #204]	; (8003c34 <HAL_RCC_OscConfig+0x4cc>)
 8003b66:	2200      	movs	r2, #0
 8003b68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b6a:	f7fe fe91 	bl	8002890 <HAL_GetTick>
 8003b6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b70:	e008      	b.n	8003b84 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b72:	f7fe fe8d 	bl	8002890 <HAL_GetTick>
 8003b76:	4602      	mov	r2, r0
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	1ad3      	subs	r3, r2, r3
 8003b7c:	2b02      	cmp	r3, #2
 8003b7e:	d901      	bls.n	8003b84 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003b80:	2303      	movs	r3, #3
 8003b82:	e06d      	b.n	8003c60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b84:	4b29      	ldr	r3, [pc, #164]	; (8003c2c <HAL_RCC_OscConfig+0x4c4>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d1f0      	bne.n	8003b72 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6a1b      	ldr	r3, [r3, #32]
 8003b94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b98:	d108      	bne.n	8003bac <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003b9a:	4b24      	ldr	r3, [pc, #144]	; (8003c2c <HAL_RCC_OscConfig+0x4c4>)
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	4921      	ldr	r1, [pc, #132]	; (8003c2c <HAL_RCC_OscConfig+0x4c4>)
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003bac:	4b1f      	ldr	r3, [pc, #124]	; (8003c2c <HAL_RCC_OscConfig+0x4c4>)
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6a19      	ldr	r1, [r3, #32]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bbc:	430b      	orrs	r3, r1
 8003bbe:	491b      	ldr	r1, [pc, #108]	; (8003c2c <HAL_RCC_OscConfig+0x4c4>)
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003bc4:	4b1b      	ldr	r3, [pc, #108]	; (8003c34 <HAL_RCC_OscConfig+0x4cc>)
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bca:	f7fe fe61 	bl	8002890 <HAL_GetTick>
 8003bce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003bd0:	e008      	b.n	8003be4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bd2:	f7fe fe5d 	bl	8002890 <HAL_GetTick>
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	1ad3      	subs	r3, r2, r3
 8003bdc:	2b02      	cmp	r3, #2
 8003bde:	d901      	bls.n	8003be4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003be0:	2303      	movs	r3, #3
 8003be2:	e03d      	b.n	8003c60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003be4:	4b11      	ldr	r3, [pc, #68]	; (8003c2c <HAL_RCC_OscConfig+0x4c4>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d0f0      	beq.n	8003bd2 <HAL_RCC_OscConfig+0x46a>
 8003bf0:	e035      	b.n	8003c5e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bf2:	4b10      	ldr	r3, [pc, #64]	; (8003c34 <HAL_RCC_OscConfig+0x4cc>)
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bf8:	f7fe fe4a 	bl	8002890 <HAL_GetTick>
 8003bfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003bfe:	e008      	b.n	8003c12 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c00:	f7fe fe46 	bl	8002890 <HAL_GetTick>
 8003c04:	4602      	mov	r2, r0
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	2b02      	cmp	r3, #2
 8003c0c:	d901      	bls.n	8003c12 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	e026      	b.n	8003c60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c12:	4b06      	ldr	r3, [pc, #24]	; (8003c2c <HAL_RCC_OscConfig+0x4c4>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d1f0      	bne.n	8003c00 <HAL_RCC_OscConfig+0x498>
 8003c1e:	e01e      	b.n	8003c5e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	69db      	ldr	r3, [r3, #28]
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d107      	bne.n	8003c38 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e019      	b.n	8003c60 <HAL_RCC_OscConfig+0x4f8>
 8003c2c:	40021000 	.word	0x40021000
 8003c30:	40007000 	.word	0x40007000
 8003c34:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003c38:	4b0b      	ldr	r3, [pc, #44]	; (8003c68 <HAL_RCC_OscConfig+0x500>)
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6a1b      	ldr	r3, [r3, #32]
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d106      	bne.n	8003c5a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c56:	429a      	cmp	r2, r3
 8003c58:	d001      	beq.n	8003c5e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e000      	b.n	8003c60 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003c5e:	2300      	movs	r3, #0
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3718      	adds	r7, #24
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	40021000 	.word	0x40021000

08003c6c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b084      	sub	sp, #16
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
 8003c74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d101      	bne.n	8003c80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e0d0      	b.n	8003e22 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c80:	4b6a      	ldr	r3, [pc, #424]	; (8003e2c <HAL_RCC_ClockConfig+0x1c0>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f003 0307 	and.w	r3, r3, #7
 8003c88:	683a      	ldr	r2, [r7, #0]
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	d910      	bls.n	8003cb0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c8e:	4b67      	ldr	r3, [pc, #412]	; (8003e2c <HAL_RCC_ClockConfig+0x1c0>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f023 0207 	bic.w	r2, r3, #7
 8003c96:	4965      	ldr	r1, [pc, #404]	; (8003e2c <HAL_RCC_ClockConfig+0x1c0>)
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c9e:	4b63      	ldr	r3, [pc, #396]	; (8003e2c <HAL_RCC_ClockConfig+0x1c0>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 0307 	and.w	r3, r3, #7
 8003ca6:	683a      	ldr	r2, [r7, #0]
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d001      	beq.n	8003cb0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	e0b8      	b.n	8003e22 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 0302 	and.w	r3, r3, #2
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d020      	beq.n	8003cfe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 0304 	and.w	r3, r3, #4
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d005      	beq.n	8003cd4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003cc8:	4b59      	ldr	r3, [pc, #356]	; (8003e30 <HAL_RCC_ClockConfig+0x1c4>)
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	4a58      	ldr	r2, [pc, #352]	; (8003e30 <HAL_RCC_ClockConfig+0x1c4>)
 8003cce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003cd2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f003 0308 	and.w	r3, r3, #8
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d005      	beq.n	8003cec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ce0:	4b53      	ldr	r3, [pc, #332]	; (8003e30 <HAL_RCC_ClockConfig+0x1c4>)
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	4a52      	ldr	r2, [pc, #328]	; (8003e30 <HAL_RCC_ClockConfig+0x1c4>)
 8003ce6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003cea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cec:	4b50      	ldr	r3, [pc, #320]	; (8003e30 <HAL_RCC_ClockConfig+0x1c4>)
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	494d      	ldr	r1, [pc, #308]	; (8003e30 <HAL_RCC_ClockConfig+0x1c4>)
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 0301 	and.w	r3, r3, #1
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d040      	beq.n	8003d8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d107      	bne.n	8003d22 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d12:	4b47      	ldr	r3, [pc, #284]	; (8003e30 <HAL_RCC_ClockConfig+0x1c4>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d115      	bne.n	8003d4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e07f      	b.n	8003e22 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	2b02      	cmp	r3, #2
 8003d28:	d107      	bne.n	8003d3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d2a:	4b41      	ldr	r3, [pc, #260]	; (8003e30 <HAL_RCC_ClockConfig+0x1c4>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d109      	bne.n	8003d4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e073      	b.n	8003e22 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d3a:	4b3d      	ldr	r3, [pc, #244]	; (8003e30 <HAL_RCC_ClockConfig+0x1c4>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 0302 	and.w	r3, r3, #2
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d101      	bne.n	8003d4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e06b      	b.n	8003e22 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d4a:	4b39      	ldr	r3, [pc, #228]	; (8003e30 <HAL_RCC_ClockConfig+0x1c4>)
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	f023 0203 	bic.w	r2, r3, #3
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	4936      	ldr	r1, [pc, #216]	; (8003e30 <HAL_RCC_ClockConfig+0x1c4>)
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d5c:	f7fe fd98 	bl	8002890 <HAL_GetTick>
 8003d60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d62:	e00a      	b.n	8003d7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d64:	f7fe fd94 	bl	8002890 <HAL_GetTick>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d901      	bls.n	8003d7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d76:	2303      	movs	r3, #3
 8003d78:	e053      	b.n	8003e22 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d7a:	4b2d      	ldr	r3, [pc, #180]	; (8003e30 <HAL_RCC_ClockConfig+0x1c4>)
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	f003 020c 	and.w	r2, r3, #12
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d1eb      	bne.n	8003d64 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d8c:	4b27      	ldr	r3, [pc, #156]	; (8003e2c <HAL_RCC_ClockConfig+0x1c0>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 0307 	and.w	r3, r3, #7
 8003d94:	683a      	ldr	r2, [r7, #0]
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d210      	bcs.n	8003dbc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d9a:	4b24      	ldr	r3, [pc, #144]	; (8003e2c <HAL_RCC_ClockConfig+0x1c0>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f023 0207 	bic.w	r2, r3, #7
 8003da2:	4922      	ldr	r1, [pc, #136]	; (8003e2c <HAL_RCC_ClockConfig+0x1c0>)
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	4313      	orrs	r3, r2
 8003da8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003daa:	4b20      	ldr	r3, [pc, #128]	; (8003e2c <HAL_RCC_ClockConfig+0x1c0>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 0307 	and.w	r3, r3, #7
 8003db2:	683a      	ldr	r2, [r7, #0]
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d001      	beq.n	8003dbc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	e032      	b.n	8003e22 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 0304 	and.w	r3, r3, #4
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d008      	beq.n	8003dda <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003dc8:	4b19      	ldr	r3, [pc, #100]	; (8003e30 <HAL_RCC_ClockConfig+0x1c4>)
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	68db      	ldr	r3, [r3, #12]
 8003dd4:	4916      	ldr	r1, [pc, #88]	; (8003e30 <HAL_RCC_ClockConfig+0x1c4>)
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 0308 	and.w	r3, r3, #8
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d009      	beq.n	8003dfa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003de6:	4b12      	ldr	r3, [pc, #72]	; (8003e30 <HAL_RCC_ClockConfig+0x1c4>)
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	691b      	ldr	r3, [r3, #16]
 8003df2:	00db      	lsls	r3, r3, #3
 8003df4:	490e      	ldr	r1, [pc, #56]	; (8003e30 <HAL_RCC_ClockConfig+0x1c4>)
 8003df6:	4313      	orrs	r3, r2
 8003df8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003dfa:	f000 f821 	bl	8003e40 <HAL_RCC_GetSysClockFreq>
 8003dfe:	4602      	mov	r2, r0
 8003e00:	4b0b      	ldr	r3, [pc, #44]	; (8003e30 <HAL_RCC_ClockConfig+0x1c4>)
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	091b      	lsrs	r3, r3, #4
 8003e06:	f003 030f 	and.w	r3, r3, #15
 8003e0a:	490a      	ldr	r1, [pc, #40]	; (8003e34 <HAL_RCC_ClockConfig+0x1c8>)
 8003e0c:	5ccb      	ldrb	r3, [r1, r3]
 8003e0e:	fa22 f303 	lsr.w	r3, r2, r3
 8003e12:	4a09      	ldr	r2, [pc, #36]	; (8003e38 <HAL_RCC_ClockConfig+0x1cc>)
 8003e14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003e16:	4b09      	ldr	r3, [pc, #36]	; (8003e3c <HAL_RCC_ClockConfig+0x1d0>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f7fe fcf6 	bl	800280c <HAL_InitTick>

  return HAL_OK;
 8003e20:	2300      	movs	r3, #0
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3710      	adds	r7, #16
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	bf00      	nop
 8003e2c:	40022000 	.word	0x40022000
 8003e30:	40021000 	.word	0x40021000
 8003e34:	0800ab7c 	.word	0x0800ab7c
 8003e38:	20000028 	.word	0x20000028
 8003e3c:	2000002c 	.word	0x2000002c

08003e40 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b087      	sub	sp, #28
 8003e44:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003e46:	2300      	movs	r3, #0
 8003e48:	60fb      	str	r3, [r7, #12]
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	60bb      	str	r3, [r7, #8]
 8003e4e:	2300      	movs	r3, #0
 8003e50:	617b      	str	r3, [r7, #20]
 8003e52:	2300      	movs	r3, #0
 8003e54:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003e56:	2300      	movs	r3, #0
 8003e58:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003e5a:	4b1e      	ldr	r3, [pc, #120]	; (8003ed4 <HAL_RCC_GetSysClockFreq+0x94>)
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	f003 030c 	and.w	r3, r3, #12
 8003e66:	2b04      	cmp	r3, #4
 8003e68:	d002      	beq.n	8003e70 <HAL_RCC_GetSysClockFreq+0x30>
 8003e6a:	2b08      	cmp	r3, #8
 8003e6c:	d003      	beq.n	8003e76 <HAL_RCC_GetSysClockFreq+0x36>
 8003e6e:	e027      	b.n	8003ec0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003e70:	4b19      	ldr	r3, [pc, #100]	; (8003ed8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003e72:	613b      	str	r3, [r7, #16]
      break;
 8003e74:	e027      	b.n	8003ec6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	0c9b      	lsrs	r3, r3, #18
 8003e7a:	f003 030f 	and.w	r3, r3, #15
 8003e7e:	4a17      	ldr	r2, [pc, #92]	; (8003edc <HAL_RCC_GetSysClockFreq+0x9c>)
 8003e80:	5cd3      	ldrb	r3, [r2, r3]
 8003e82:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d010      	beq.n	8003eb0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003e8e:	4b11      	ldr	r3, [pc, #68]	; (8003ed4 <HAL_RCC_GetSysClockFreq+0x94>)
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	0c5b      	lsrs	r3, r3, #17
 8003e94:	f003 0301 	and.w	r3, r3, #1
 8003e98:	4a11      	ldr	r2, [pc, #68]	; (8003ee0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003e9a:	5cd3      	ldrb	r3, [r2, r3]
 8003e9c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4a0d      	ldr	r2, [pc, #52]	; (8003ed8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003ea2:	fb03 f202 	mul.w	r2, r3, r2
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eac:	617b      	str	r3, [r7, #20]
 8003eae:	e004      	b.n	8003eba <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	4a0c      	ldr	r2, [pc, #48]	; (8003ee4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003eb4:	fb02 f303 	mul.w	r3, r2, r3
 8003eb8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	613b      	str	r3, [r7, #16]
      break;
 8003ebe:	e002      	b.n	8003ec6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003ec0:	4b05      	ldr	r3, [pc, #20]	; (8003ed8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003ec2:	613b      	str	r3, [r7, #16]
      break;
 8003ec4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ec6:	693b      	ldr	r3, [r7, #16]
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	371c      	adds	r7, #28
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bc80      	pop	{r7}
 8003ed0:	4770      	bx	lr
 8003ed2:	bf00      	nop
 8003ed4:	40021000 	.word	0x40021000
 8003ed8:	007a1200 	.word	0x007a1200
 8003edc:	0800ab94 	.word	0x0800ab94
 8003ee0:	0800aba4 	.word	0x0800aba4
 8003ee4:	003d0900 	.word	0x003d0900

08003ee8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003eec:	4b02      	ldr	r3, [pc, #8]	; (8003ef8 <HAL_RCC_GetHCLKFreq+0x10>)
 8003eee:	681b      	ldr	r3, [r3, #0]
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bc80      	pop	{r7}
 8003ef6:	4770      	bx	lr
 8003ef8:	20000028 	.word	0x20000028

08003efc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003f00:	f7ff fff2 	bl	8003ee8 <HAL_RCC_GetHCLKFreq>
 8003f04:	4602      	mov	r2, r0
 8003f06:	4b05      	ldr	r3, [pc, #20]	; (8003f1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	0a1b      	lsrs	r3, r3, #8
 8003f0c:	f003 0307 	and.w	r3, r3, #7
 8003f10:	4903      	ldr	r1, [pc, #12]	; (8003f20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f12:	5ccb      	ldrb	r3, [r1, r3]
 8003f14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	bd80      	pop	{r7, pc}
 8003f1c:	40021000 	.word	0x40021000
 8003f20:	0800ab8c 	.word	0x0800ab8c

08003f24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003f28:	f7ff ffde 	bl	8003ee8 <HAL_RCC_GetHCLKFreq>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	4b05      	ldr	r3, [pc, #20]	; (8003f44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	0adb      	lsrs	r3, r3, #11
 8003f34:	f003 0307 	and.w	r3, r3, #7
 8003f38:	4903      	ldr	r1, [pc, #12]	; (8003f48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f3a:	5ccb      	ldrb	r3, [r1, r3]
 8003f3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	bd80      	pop	{r7, pc}
 8003f44:	40021000 	.word	0x40021000
 8003f48:	0800ab8c 	.word	0x0800ab8c

08003f4c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b085      	sub	sp, #20
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003f54:	4b0a      	ldr	r3, [pc, #40]	; (8003f80 <RCC_Delay+0x34>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a0a      	ldr	r2, [pc, #40]	; (8003f84 <RCC_Delay+0x38>)
 8003f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f5e:	0a5b      	lsrs	r3, r3, #9
 8003f60:	687a      	ldr	r2, [r7, #4]
 8003f62:	fb02 f303 	mul.w	r3, r2, r3
 8003f66:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003f68:	bf00      	nop
  }
  while (Delay --);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	1e5a      	subs	r2, r3, #1
 8003f6e:	60fa      	str	r2, [r7, #12]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d1f9      	bne.n	8003f68 <RCC_Delay+0x1c>
}
 8003f74:	bf00      	nop
 8003f76:	bf00      	nop
 8003f78:	3714      	adds	r7, #20
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bc80      	pop	{r7}
 8003f7e:	4770      	bx	lr
 8003f80:	20000028 	.word	0x20000028
 8003f84:	10624dd3 	.word	0x10624dd3

08003f88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b082      	sub	sp, #8
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d101      	bne.n	8003f9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e041      	b.n	800401e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d106      	bne.n	8003fb4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f7fe f9f4 	bl	800239c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2202      	movs	r2, #2
 8003fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	3304      	adds	r3, #4
 8003fc4:	4619      	mov	r1, r3
 8003fc6:	4610      	mov	r0, r2
 8003fc8:	f000 fd86 	bl	8004ad8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2201      	movs	r2, #1
 8004000:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2201      	movs	r2, #1
 8004008:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2201      	movs	r2, #1
 8004018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800401c:	2300      	movs	r3, #0
}
 800401e:	4618      	mov	r0, r3
 8004020:	3708      	adds	r7, #8
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
	...

08004028 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004028:	b480      	push	{r7}
 800402a:	b085      	sub	sp, #20
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004036:	b2db      	uxtb	r3, r3
 8004038:	2b01      	cmp	r3, #1
 800403a:	d001      	beq.n	8004040 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	e044      	b.n	80040ca <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2202      	movs	r2, #2
 8004044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	68da      	ldr	r2, [r3, #12]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f042 0201 	orr.w	r2, r2, #1
 8004056:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a1d      	ldr	r2, [pc, #116]	; (80040d4 <HAL_TIM_Base_Start_IT+0xac>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d018      	beq.n	8004094 <HAL_TIM_Base_Start_IT+0x6c>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a1c      	ldr	r2, [pc, #112]	; (80040d8 <HAL_TIM_Base_Start_IT+0xb0>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d013      	beq.n	8004094 <HAL_TIM_Base_Start_IT+0x6c>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004074:	d00e      	beq.n	8004094 <HAL_TIM_Base_Start_IT+0x6c>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a18      	ldr	r2, [pc, #96]	; (80040dc <HAL_TIM_Base_Start_IT+0xb4>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d009      	beq.n	8004094 <HAL_TIM_Base_Start_IT+0x6c>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a16      	ldr	r2, [pc, #88]	; (80040e0 <HAL_TIM_Base_Start_IT+0xb8>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d004      	beq.n	8004094 <HAL_TIM_Base_Start_IT+0x6c>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a15      	ldr	r2, [pc, #84]	; (80040e4 <HAL_TIM_Base_Start_IT+0xbc>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d111      	bne.n	80040b8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	f003 0307 	and.w	r3, r3, #7
 800409e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2b06      	cmp	r3, #6
 80040a4:	d010      	beq.n	80040c8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f042 0201 	orr.w	r2, r2, #1
 80040b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040b6:	e007      	b.n	80040c8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f042 0201 	orr.w	r2, r2, #1
 80040c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80040c8:	2300      	movs	r3, #0
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	3714      	adds	r7, #20
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bc80      	pop	{r7}
 80040d2:	4770      	bx	lr
 80040d4:	40012c00 	.word	0x40012c00
 80040d8:	40013400 	.word	0x40013400
 80040dc:	40000400 	.word	0x40000400
 80040e0:	40000800 	.word	0x40000800
 80040e4:	40000c00 	.word	0x40000c00

080040e8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b082      	sub	sp, #8
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d101      	bne.n	80040fa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	e041      	b.n	800417e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004100:	b2db      	uxtb	r3, r3
 8004102:	2b00      	cmp	r3, #0
 8004104:	d106      	bne.n	8004114 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2200      	movs	r2, #0
 800410a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f000 f839 	bl	8004186 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2202      	movs	r2, #2
 8004118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	3304      	adds	r3, #4
 8004124:	4619      	mov	r1, r3
 8004126:	4610      	mov	r0, r2
 8004128:	f000 fcd6 	bl	8004ad8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2201      	movs	r2, #1
 8004130:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2201      	movs	r2, #1
 8004138:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2201      	movs	r2, #1
 8004140:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2201      	movs	r2, #1
 8004148:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2201      	movs	r2, #1
 8004150:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2201      	movs	r2, #1
 8004158:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2201      	movs	r2, #1
 8004160:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2201      	movs	r2, #1
 8004170:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2201      	movs	r2, #1
 8004178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800417c:	2300      	movs	r3, #0
}
 800417e:	4618      	mov	r0, r3
 8004180:	3708      	adds	r7, #8
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}

08004186 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004186:	b480      	push	{r7}
 8004188:	b083      	sub	sp, #12
 800418a:	af00      	add	r7, sp, #0
 800418c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800418e:	bf00      	nop
 8004190:	370c      	adds	r7, #12
 8004192:	46bd      	mov	sp, r7
 8004194:	bc80      	pop	{r7}
 8004196:	4770      	bx	lr

08004198 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b084      	sub	sp, #16
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
 80041a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d109      	bne.n	80041bc <HAL_TIM_PWM_Start+0x24>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	bf14      	ite	ne
 80041b4:	2301      	movne	r3, #1
 80041b6:	2300      	moveq	r3, #0
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	e022      	b.n	8004202 <HAL_TIM_PWM_Start+0x6a>
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	2b04      	cmp	r3, #4
 80041c0:	d109      	bne.n	80041d6 <HAL_TIM_PWM_Start+0x3e>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	bf14      	ite	ne
 80041ce:	2301      	movne	r3, #1
 80041d0:	2300      	moveq	r3, #0
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	e015      	b.n	8004202 <HAL_TIM_PWM_Start+0x6a>
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	2b08      	cmp	r3, #8
 80041da:	d109      	bne.n	80041f0 <HAL_TIM_PWM_Start+0x58>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80041e2:	b2db      	uxtb	r3, r3
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	bf14      	ite	ne
 80041e8:	2301      	movne	r3, #1
 80041ea:	2300      	moveq	r3, #0
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	e008      	b.n	8004202 <HAL_TIM_PWM_Start+0x6a>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041f6:	b2db      	uxtb	r3, r3
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	bf14      	ite	ne
 80041fc:	2301      	movne	r3, #1
 80041fe:	2300      	moveq	r3, #0
 8004200:	b2db      	uxtb	r3, r3
 8004202:	2b00      	cmp	r3, #0
 8004204:	d001      	beq.n	800420a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e072      	b.n	80042f0 <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d104      	bne.n	800421a <HAL_TIM_PWM_Start+0x82>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2202      	movs	r2, #2
 8004214:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004218:	e013      	b.n	8004242 <HAL_TIM_PWM_Start+0xaa>
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	2b04      	cmp	r3, #4
 800421e:	d104      	bne.n	800422a <HAL_TIM_PWM_Start+0x92>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2202      	movs	r2, #2
 8004224:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004228:	e00b      	b.n	8004242 <HAL_TIM_PWM_Start+0xaa>
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	2b08      	cmp	r3, #8
 800422e:	d104      	bne.n	800423a <HAL_TIM_PWM_Start+0xa2>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2202      	movs	r2, #2
 8004234:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004238:	e003      	b.n	8004242 <HAL_TIM_PWM_Start+0xaa>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2202      	movs	r2, #2
 800423e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	2201      	movs	r2, #1
 8004248:	6839      	ldr	r1, [r7, #0]
 800424a:	4618      	mov	r0, r3
 800424c:	f000 ff00 	bl	8005050 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a28      	ldr	r2, [pc, #160]	; (80042f8 <HAL_TIM_PWM_Start+0x160>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d004      	beq.n	8004264 <HAL_TIM_PWM_Start+0xcc>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a27      	ldr	r2, [pc, #156]	; (80042fc <HAL_TIM_PWM_Start+0x164>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d101      	bne.n	8004268 <HAL_TIM_PWM_Start+0xd0>
 8004264:	2301      	movs	r3, #1
 8004266:	e000      	b.n	800426a <HAL_TIM_PWM_Start+0xd2>
 8004268:	2300      	movs	r3, #0
 800426a:	2b00      	cmp	r3, #0
 800426c:	d007      	beq.n	800427e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800427c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a1d      	ldr	r2, [pc, #116]	; (80042f8 <HAL_TIM_PWM_Start+0x160>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d018      	beq.n	80042ba <HAL_TIM_PWM_Start+0x122>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a1b      	ldr	r2, [pc, #108]	; (80042fc <HAL_TIM_PWM_Start+0x164>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d013      	beq.n	80042ba <HAL_TIM_PWM_Start+0x122>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800429a:	d00e      	beq.n	80042ba <HAL_TIM_PWM_Start+0x122>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a17      	ldr	r2, [pc, #92]	; (8004300 <HAL_TIM_PWM_Start+0x168>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d009      	beq.n	80042ba <HAL_TIM_PWM_Start+0x122>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a16      	ldr	r2, [pc, #88]	; (8004304 <HAL_TIM_PWM_Start+0x16c>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d004      	beq.n	80042ba <HAL_TIM_PWM_Start+0x122>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a14      	ldr	r2, [pc, #80]	; (8004308 <HAL_TIM_PWM_Start+0x170>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d111      	bne.n	80042de <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	f003 0307 	and.w	r3, r3, #7
 80042c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2b06      	cmp	r3, #6
 80042ca:	d010      	beq.n	80042ee <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f042 0201 	orr.w	r2, r2, #1
 80042da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042dc:	e007      	b.n	80042ee <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f042 0201 	orr.w	r2, r2, #1
 80042ec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80042ee:	2300      	movs	r3, #0
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	3710      	adds	r7, #16
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}
 80042f8:	40012c00 	.word	0x40012c00
 80042fc:	40013400 	.word	0x40013400
 8004300:	40000400 	.word	0x40000400
 8004304:	40000800 	.word	0x40000800
 8004308:	40000c00 	.word	0x40000c00

0800430c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b086      	sub	sp, #24
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d101      	bne.n	8004320 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	e093      	b.n	8004448 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004326:	b2db      	uxtb	r3, r3
 8004328:	2b00      	cmp	r3, #0
 800432a:	d106      	bne.n	800433a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2200      	movs	r2, #0
 8004330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f7fe f869 	bl	800240c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2202      	movs	r2, #2
 800433e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	6812      	ldr	r2, [r2, #0]
 800434c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004350:	f023 0307 	bic.w	r3, r3, #7
 8004354:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	3304      	adds	r3, #4
 800435e:	4619      	mov	r1, r3
 8004360:	4610      	mov	r0, r2
 8004362:	f000 fbb9 	bl	8004ad8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	699b      	ldr	r3, [r3, #24]
 8004374:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	6a1b      	ldr	r3, [r3, #32]
 800437c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	697a      	ldr	r2, [r7, #20]
 8004384:	4313      	orrs	r3, r2
 8004386:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800438e:	f023 0303 	bic.w	r3, r3, #3
 8004392:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	689a      	ldr	r2, [r3, #8]
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	699b      	ldr	r3, [r3, #24]
 800439c:	021b      	lsls	r3, r3, #8
 800439e:	4313      	orrs	r3, r2
 80043a0:	693a      	ldr	r2, [r7, #16]
 80043a2:	4313      	orrs	r3, r2
 80043a4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80043ac:	f023 030c 	bic.w	r3, r3, #12
 80043b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80043b8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80043bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	68da      	ldr	r2, [r3, #12]
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	69db      	ldr	r3, [r3, #28]
 80043c6:	021b      	lsls	r3, r3, #8
 80043c8:	4313      	orrs	r3, r2
 80043ca:	693a      	ldr	r2, [r7, #16]
 80043cc:	4313      	orrs	r3, r2
 80043ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	691b      	ldr	r3, [r3, #16]
 80043d4:	011a      	lsls	r2, r3, #4
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	6a1b      	ldr	r3, [r3, #32]
 80043da:	031b      	lsls	r3, r3, #12
 80043dc:	4313      	orrs	r3, r2
 80043de:	693a      	ldr	r2, [r7, #16]
 80043e0:	4313      	orrs	r3, r2
 80043e2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80043ea:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	685a      	ldr	r2, [r3, #4]
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	695b      	ldr	r3, [r3, #20]
 80043f4:	011b      	lsls	r3, r3, #4
 80043f6:	4313      	orrs	r3, r2
 80043f8:	68fa      	ldr	r2, [r7, #12]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	697a      	ldr	r2, [r7, #20]
 8004404:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	693a      	ldr	r2, [r7, #16]
 800440c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	68fa      	ldr	r2, [r7, #12]
 8004414:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2201      	movs	r2, #1
 800441a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2201      	movs	r2, #1
 8004422:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2201      	movs	r2, #1
 800442a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2201      	movs	r2, #1
 8004432:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2201      	movs	r2, #1
 800443a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2201      	movs	r2, #1
 8004442:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004446:	2300      	movs	r3, #0
}
 8004448:	4618      	mov	r0, r3
 800444a:	3718      	adds	r7, #24
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}

08004450 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b084      	sub	sp, #16
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
 8004458:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004460:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004468:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004470:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004478:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d110      	bne.n	80044a2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004480:	7bfb      	ldrb	r3, [r7, #15]
 8004482:	2b01      	cmp	r3, #1
 8004484:	d102      	bne.n	800448c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004486:	7b7b      	ldrb	r3, [r7, #13]
 8004488:	2b01      	cmp	r3, #1
 800448a:	d001      	beq.n	8004490 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	e069      	b.n	8004564 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2202      	movs	r2, #2
 8004494:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2202      	movs	r2, #2
 800449c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80044a0:	e031      	b.n	8004506 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	2b04      	cmp	r3, #4
 80044a6:	d110      	bne.n	80044ca <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80044a8:	7bbb      	ldrb	r3, [r7, #14]
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d102      	bne.n	80044b4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80044ae:	7b3b      	ldrb	r3, [r7, #12]
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d001      	beq.n	80044b8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	e055      	b.n	8004564 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2202      	movs	r2, #2
 80044bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2202      	movs	r2, #2
 80044c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80044c8:	e01d      	b.n	8004506 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80044ca:	7bfb      	ldrb	r3, [r7, #15]
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d108      	bne.n	80044e2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80044d0:	7bbb      	ldrb	r3, [r7, #14]
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d105      	bne.n	80044e2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80044d6:	7b7b      	ldrb	r3, [r7, #13]
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d102      	bne.n	80044e2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80044dc:	7b3b      	ldrb	r3, [r7, #12]
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d001      	beq.n	80044e6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e03e      	b.n	8004564 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2202      	movs	r2, #2
 80044ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2202      	movs	r2, #2
 80044f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2202      	movs	r2, #2
 80044fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2202      	movs	r2, #2
 8004502:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d003      	beq.n	8004514 <HAL_TIM_Encoder_Start+0xc4>
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	2b04      	cmp	r3, #4
 8004510:	d008      	beq.n	8004524 <HAL_TIM_Encoder_Start+0xd4>
 8004512:	e00f      	b.n	8004534 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	2201      	movs	r2, #1
 800451a:	2100      	movs	r1, #0
 800451c:	4618      	mov	r0, r3
 800451e:	f000 fd97 	bl	8005050 <TIM_CCxChannelCmd>
      break;
 8004522:	e016      	b.n	8004552 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	2201      	movs	r2, #1
 800452a:	2104      	movs	r1, #4
 800452c:	4618      	mov	r0, r3
 800452e:	f000 fd8f 	bl	8005050 <TIM_CCxChannelCmd>
      break;
 8004532:	e00e      	b.n	8004552 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	2201      	movs	r2, #1
 800453a:	2100      	movs	r1, #0
 800453c:	4618      	mov	r0, r3
 800453e:	f000 fd87 	bl	8005050 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	2201      	movs	r2, #1
 8004548:	2104      	movs	r1, #4
 800454a:	4618      	mov	r0, r3
 800454c:	f000 fd80 	bl	8005050 <TIM_CCxChannelCmd>
      break;
 8004550:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f042 0201 	orr.w	r2, r2, #1
 8004560:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004562:	2300      	movs	r3, #0
}
 8004564:	4618      	mov	r0, r3
 8004566:	3710      	adds	r7, #16
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}

0800456c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b082      	sub	sp, #8
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	691b      	ldr	r3, [r3, #16]
 800457a:	f003 0302 	and.w	r3, r3, #2
 800457e:	2b02      	cmp	r3, #2
 8004580:	d122      	bne.n	80045c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	f003 0302 	and.w	r3, r3, #2
 800458c:	2b02      	cmp	r3, #2
 800458e:	d11b      	bne.n	80045c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f06f 0202 	mvn.w	r2, #2
 8004598:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2201      	movs	r2, #1
 800459e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	699b      	ldr	r3, [r3, #24]
 80045a6:	f003 0303 	and.w	r3, r3, #3
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d003      	beq.n	80045b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f000 fa76 	bl	8004aa0 <HAL_TIM_IC_CaptureCallback>
 80045b4:	e005      	b.n	80045c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f000 fa69 	bl	8004a8e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f000 fa78 	bl	8004ab2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	691b      	ldr	r3, [r3, #16]
 80045ce:	f003 0304 	and.w	r3, r3, #4
 80045d2:	2b04      	cmp	r3, #4
 80045d4:	d122      	bne.n	800461c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	f003 0304 	and.w	r3, r3, #4
 80045e0:	2b04      	cmp	r3, #4
 80045e2:	d11b      	bne.n	800461c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f06f 0204 	mvn.w	r2, #4
 80045ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2202      	movs	r2, #2
 80045f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	699b      	ldr	r3, [r3, #24]
 80045fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d003      	beq.n	800460a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f000 fa4c 	bl	8004aa0 <HAL_TIM_IC_CaptureCallback>
 8004608:	e005      	b.n	8004616 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f000 fa3f 	bl	8004a8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	f000 fa4e 	bl	8004ab2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2200      	movs	r2, #0
 800461a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	691b      	ldr	r3, [r3, #16]
 8004622:	f003 0308 	and.w	r3, r3, #8
 8004626:	2b08      	cmp	r3, #8
 8004628:	d122      	bne.n	8004670 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	68db      	ldr	r3, [r3, #12]
 8004630:	f003 0308 	and.w	r3, r3, #8
 8004634:	2b08      	cmp	r3, #8
 8004636:	d11b      	bne.n	8004670 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f06f 0208 	mvn.w	r2, #8
 8004640:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2204      	movs	r2, #4
 8004646:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	69db      	ldr	r3, [r3, #28]
 800464e:	f003 0303 	and.w	r3, r3, #3
 8004652:	2b00      	cmp	r3, #0
 8004654:	d003      	beq.n	800465e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f000 fa22 	bl	8004aa0 <HAL_TIM_IC_CaptureCallback>
 800465c:	e005      	b.n	800466a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f000 fa15 	bl	8004a8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	f000 fa24 	bl	8004ab2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2200      	movs	r2, #0
 800466e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	691b      	ldr	r3, [r3, #16]
 8004676:	f003 0310 	and.w	r3, r3, #16
 800467a:	2b10      	cmp	r3, #16
 800467c:	d122      	bne.n	80046c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	68db      	ldr	r3, [r3, #12]
 8004684:	f003 0310 	and.w	r3, r3, #16
 8004688:	2b10      	cmp	r3, #16
 800468a:	d11b      	bne.n	80046c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f06f 0210 	mvn.w	r2, #16
 8004694:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2208      	movs	r2, #8
 800469a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	69db      	ldr	r3, [r3, #28]
 80046a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d003      	beq.n	80046b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f000 f9f8 	bl	8004aa0 <HAL_TIM_IC_CaptureCallback>
 80046b0:	e005      	b.n	80046be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f000 f9eb 	bl	8004a8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	f000 f9fa 	bl	8004ab2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2200      	movs	r2, #0
 80046c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	691b      	ldr	r3, [r3, #16]
 80046ca:	f003 0301 	and.w	r3, r3, #1
 80046ce:	2b01      	cmp	r3, #1
 80046d0:	d10e      	bne.n	80046f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	68db      	ldr	r3, [r3, #12]
 80046d8:	f003 0301 	and.w	r3, r3, #1
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d107      	bne.n	80046f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f06f 0201 	mvn.w	r2, #1
 80046e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f7fd f90c 	bl	8001908 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	691b      	ldr	r3, [r3, #16]
 80046f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046fa:	2b80      	cmp	r3, #128	; 0x80
 80046fc:	d10e      	bne.n	800471c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	68db      	ldr	r3, [r3, #12]
 8004704:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004708:	2b80      	cmp	r3, #128	; 0x80
 800470a:	d107      	bne.n	800471c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004714:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f000 fd84 	bl	8005224 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	691b      	ldr	r3, [r3, #16]
 8004722:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004726:	2b40      	cmp	r3, #64	; 0x40
 8004728:	d10e      	bne.n	8004748 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	68db      	ldr	r3, [r3, #12]
 8004730:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004734:	2b40      	cmp	r3, #64	; 0x40
 8004736:	d107      	bne.n	8004748 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004740:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f000 f9be 	bl	8004ac4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	691b      	ldr	r3, [r3, #16]
 800474e:	f003 0320 	and.w	r3, r3, #32
 8004752:	2b20      	cmp	r3, #32
 8004754:	d10e      	bne.n	8004774 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	f003 0320 	and.w	r3, r3, #32
 8004760:	2b20      	cmp	r3, #32
 8004762:	d107      	bne.n	8004774 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f06f 0220 	mvn.w	r2, #32
 800476c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f000 fd4f 	bl	8005212 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004774:	bf00      	nop
 8004776:	3708      	adds	r7, #8
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}

0800477c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b086      	sub	sp, #24
 8004780:	af00      	add	r7, sp, #0
 8004782:	60f8      	str	r0, [r7, #12]
 8004784:	60b9      	str	r1, [r7, #8]
 8004786:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004788:	2300      	movs	r3, #0
 800478a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004792:	2b01      	cmp	r3, #1
 8004794:	d101      	bne.n	800479a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004796:	2302      	movs	r3, #2
 8004798:	e0ae      	b.n	80048f8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2201      	movs	r2, #1
 800479e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2b0c      	cmp	r3, #12
 80047a6:	f200 809f 	bhi.w	80048e8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80047aa:	a201      	add	r2, pc, #4	; (adr r2, 80047b0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80047ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047b0:	080047e5 	.word	0x080047e5
 80047b4:	080048e9 	.word	0x080048e9
 80047b8:	080048e9 	.word	0x080048e9
 80047bc:	080048e9 	.word	0x080048e9
 80047c0:	08004825 	.word	0x08004825
 80047c4:	080048e9 	.word	0x080048e9
 80047c8:	080048e9 	.word	0x080048e9
 80047cc:	080048e9 	.word	0x080048e9
 80047d0:	08004867 	.word	0x08004867
 80047d4:	080048e9 	.word	0x080048e9
 80047d8:	080048e9 	.word	0x080048e9
 80047dc:	080048e9 	.word	0x080048e9
 80047e0:	080048a7 	.word	0x080048a7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	68b9      	ldr	r1, [r7, #8]
 80047ea:	4618      	mov	r0, r3
 80047ec:	f000 f9ee 	bl	8004bcc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	699a      	ldr	r2, [r3, #24]
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f042 0208 	orr.w	r2, r2, #8
 80047fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	699a      	ldr	r2, [r3, #24]
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f022 0204 	bic.w	r2, r2, #4
 800480e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	6999      	ldr	r1, [r3, #24]
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	691a      	ldr	r2, [r3, #16]
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	430a      	orrs	r2, r1
 8004820:	619a      	str	r2, [r3, #24]
      break;
 8004822:	e064      	b.n	80048ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	68b9      	ldr	r1, [r7, #8]
 800482a:	4618      	mov	r0, r3
 800482c:	f000 fa3e 	bl	8004cac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	699a      	ldr	r2, [r3, #24]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800483e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	699a      	ldr	r2, [r3, #24]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800484e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	6999      	ldr	r1, [r3, #24]
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	691b      	ldr	r3, [r3, #16]
 800485a:	021a      	lsls	r2, r3, #8
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	430a      	orrs	r2, r1
 8004862:	619a      	str	r2, [r3, #24]
      break;
 8004864:	e043      	b.n	80048ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	68b9      	ldr	r1, [r7, #8]
 800486c:	4618      	mov	r0, r3
 800486e:	f000 fa91 	bl	8004d94 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	69da      	ldr	r2, [r3, #28]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f042 0208 	orr.w	r2, r2, #8
 8004880:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	69da      	ldr	r2, [r3, #28]
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f022 0204 	bic.w	r2, r2, #4
 8004890:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	69d9      	ldr	r1, [r3, #28]
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	691a      	ldr	r2, [r3, #16]
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	430a      	orrs	r2, r1
 80048a2:	61da      	str	r2, [r3, #28]
      break;
 80048a4:	e023      	b.n	80048ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	68b9      	ldr	r1, [r7, #8]
 80048ac:	4618      	mov	r0, r3
 80048ae:	f000 fae5 	bl	8004e7c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	69da      	ldr	r2, [r3, #28]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	69da      	ldr	r2, [r3, #28]
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	69d9      	ldr	r1, [r3, #28]
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	691b      	ldr	r3, [r3, #16]
 80048dc:	021a      	lsls	r2, r3, #8
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	430a      	orrs	r2, r1
 80048e4:	61da      	str	r2, [r3, #28]
      break;
 80048e6:	e002      	b.n	80048ee <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	75fb      	strb	r3, [r7, #23]
      break;
 80048ec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2200      	movs	r2, #0
 80048f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80048f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	3718      	adds	r7, #24
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}

08004900 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b084      	sub	sp, #16
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
 8004908:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800490a:	2300      	movs	r3, #0
 800490c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004914:	2b01      	cmp	r3, #1
 8004916:	d101      	bne.n	800491c <HAL_TIM_ConfigClockSource+0x1c>
 8004918:	2302      	movs	r3, #2
 800491a:	e0b4      	b.n	8004a86 <HAL_TIM_ConfigClockSource+0x186>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2201      	movs	r2, #1
 8004920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2202      	movs	r2, #2
 8004928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800493a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004942:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	68ba      	ldr	r2, [r7, #8]
 800494a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004954:	d03e      	beq.n	80049d4 <HAL_TIM_ConfigClockSource+0xd4>
 8004956:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800495a:	f200 8087 	bhi.w	8004a6c <HAL_TIM_ConfigClockSource+0x16c>
 800495e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004962:	f000 8086 	beq.w	8004a72 <HAL_TIM_ConfigClockSource+0x172>
 8004966:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800496a:	d87f      	bhi.n	8004a6c <HAL_TIM_ConfigClockSource+0x16c>
 800496c:	2b70      	cmp	r3, #112	; 0x70
 800496e:	d01a      	beq.n	80049a6 <HAL_TIM_ConfigClockSource+0xa6>
 8004970:	2b70      	cmp	r3, #112	; 0x70
 8004972:	d87b      	bhi.n	8004a6c <HAL_TIM_ConfigClockSource+0x16c>
 8004974:	2b60      	cmp	r3, #96	; 0x60
 8004976:	d050      	beq.n	8004a1a <HAL_TIM_ConfigClockSource+0x11a>
 8004978:	2b60      	cmp	r3, #96	; 0x60
 800497a:	d877      	bhi.n	8004a6c <HAL_TIM_ConfigClockSource+0x16c>
 800497c:	2b50      	cmp	r3, #80	; 0x50
 800497e:	d03c      	beq.n	80049fa <HAL_TIM_ConfigClockSource+0xfa>
 8004980:	2b50      	cmp	r3, #80	; 0x50
 8004982:	d873      	bhi.n	8004a6c <HAL_TIM_ConfigClockSource+0x16c>
 8004984:	2b40      	cmp	r3, #64	; 0x40
 8004986:	d058      	beq.n	8004a3a <HAL_TIM_ConfigClockSource+0x13a>
 8004988:	2b40      	cmp	r3, #64	; 0x40
 800498a:	d86f      	bhi.n	8004a6c <HAL_TIM_ConfigClockSource+0x16c>
 800498c:	2b30      	cmp	r3, #48	; 0x30
 800498e:	d064      	beq.n	8004a5a <HAL_TIM_ConfigClockSource+0x15a>
 8004990:	2b30      	cmp	r3, #48	; 0x30
 8004992:	d86b      	bhi.n	8004a6c <HAL_TIM_ConfigClockSource+0x16c>
 8004994:	2b20      	cmp	r3, #32
 8004996:	d060      	beq.n	8004a5a <HAL_TIM_ConfigClockSource+0x15a>
 8004998:	2b20      	cmp	r3, #32
 800499a:	d867      	bhi.n	8004a6c <HAL_TIM_ConfigClockSource+0x16c>
 800499c:	2b00      	cmp	r3, #0
 800499e:	d05c      	beq.n	8004a5a <HAL_TIM_ConfigClockSource+0x15a>
 80049a0:	2b10      	cmp	r3, #16
 80049a2:	d05a      	beq.n	8004a5a <HAL_TIM_ConfigClockSource+0x15a>
 80049a4:	e062      	b.n	8004a6c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6818      	ldr	r0, [r3, #0]
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	6899      	ldr	r1, [r3, #8]
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	685a      	ldr	r2, [r3, #4]
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	68db      	ldr	r3, [r3, #12]
 80049b6:	f000 fb2c 	bl	8005012 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80049c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	68ba      	ldr	r2, [r7, #8]
 80049d0:	609a      	str	r2, [r3, #8]
      break;
 80049d2:	e04f      	b.n	8004a74 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6818      	ldr	r0, [r3, #0]
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	6899      	ldr	r1, [r3, #8]
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	685a      	ldr	r2, [r3, #4]
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	68db      	ldr	r3, [r3, #12]
 80049e4:	f000 fb15 	bl	8005012 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	689a      	ldr	r2, [r3, #8]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80049f6:	609a      	str	r2, [r3, #8]
      break;
 80049f8:	e03c      	b.n	8004a74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6818      	ldr	r0, [r3, #0]
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	6859      	ldr	r1, [r3, #4]
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	68db      	ldr	r3, [r3, #12]
 8004a06:	461a      	mov	r2, r3
 8004a08:	f000 fa8c 	bl	8004f24 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	2150      	movs	r1, #80	; 0x50
 8004a12:	4618      	mov	r0, r3
 8004a14:	f000 fae3 	bl	8004fde <TIM_ITRx_SetConfig>
      break;
 8004a18:	e02c      	b.n	8004a74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6818      	ldr	r0, [r3, #0]
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	6859      	ldr	r1, [r3, #4]
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	68db      	ldr	r3, [r3, #12]
 8004a26:	461a      	mov	r2, r3
 8004a28:	f000 faaa 	bl	8004f80 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	2160      	movs	r1, #96	; 0x60
 8004a32:	4618      	mov	r0, r3
 8004a34:	f000 fad3 	bl	8004fde <TIM_ITRx_SetConfig>
      break;
 8004a38:	e01c      	b.n	8004a74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6818      	ldr	r0, [r3, #0]
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	6859      	ldr	r1, [r3, #4]
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	68db      	ldr	r3, [r3, #12]
 8004a46:	461a      	mov	r2, r3
 8004a48:	f000 fa6c 	bl	8004f24 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	2140      	movs	r1, #64	; 0x40
 8004a52:	4618      	mov	r0, r3
 8004a54:	f000 fac3 	bl	8004fde <TIM_ITRx_SetConfig>
      break;
 8004a58:	e00c      	b.n	8004a74 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4619      	mov	r1, r3
 8004a64:	4610      	mov	r0, r2
 8004a66:	f000 faba 	bl	8004fde <TIM_ITRx_SetConfig>
      break;
 8004a6a:	e003      	b.n	8004a74 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	73fb      	strb	r3, [r7, #15]
      break;
 8004a70:	e000      	b.n	8004a74 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004a72:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2201      	movs	r2, #1
 8004a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004a84:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	3710      	adds	r7, #16
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}

08004a8e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a8e:	b480      	push	{r7}
 8004a90:	b083      	sub	sp, #12
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a96:	bf00      	nop
 8004a98:	370c      	adds	r7, #12
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bc80      	pop	{r7}
 8004a9e:	4770      	bx	lr

08004aa0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b083      	sub	sp, #12
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004aa8:	bf00      	nop
 8004aaa:	370c      	adds	r7, #12
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bc80      	pop	{r7}
 8004ab0:	4770      	bx	lr

08004ab2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ab2:	b480      	push	{r7}
 8004ab4:	b083      	sub	sp, #12
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004aba:	bf00      	nop
 8004abc:	370c      	adds	r7, #12
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bc80      	pop	{r7}
 8004ac2:	4770      	bx	lr

08004ac4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b083      	sub	sp, #12
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004acc:	bf00      	nop
 8004ace:	370c      	adds	r7, #12
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bc80      	pop	{r7}
 8004ad4:	4770      	bx	lr
	...

08004ad8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b085      	sub	sp, #20
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
 8004ae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	4a33      	ldr	r2, [pc, #204]	; (8004bb8 <TIM_Base_SetConfig+0xe0>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d013      	beq.n	8004b18 <TIM_Base_SetConfig+0x40>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	4a32      	ldr	r2, [pc, #200]	; (8004bbc <TIM_Base_SetConfig+0xe4>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d00f      	beq.n	8004b18 <TIM_Base_SetConfig+0x40>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004afe:	d00b      	beq.n	8004b18 <TIM_Base_SetConfig+0x40>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	4a2f      	ldr	r2, [pc, #188]	; (8004bc0 <TIM_Base_SetConfig+0xe8>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d007      	beq.n	8004b18 <TIM_Base_SetConfig+0x40>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	4a2e      	ldr	r2, [pc, #184]	; (8004bc4 <TIM_Base_SetConfig+0xec>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d003      	beq.n	8004b18 <TIM_Base_SetConfig+0x40>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	4a2d      	ldr	r2, [pc, #180]	; (8004bc8 <TIM_Base_SetConfig+0xf0>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d108      	bne.n	8004b2a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	68fa      	ldr	r2, [r7, #12]
 8004b26:	4313      	orrs	r3, r2
 8004b28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	4a22      	ldr	r2, [pc, #136]	; (8004bb8 <TIM_Base_SetConfig+0xe0>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d013      	beq.n	8004b5a <TIM_Base_SetConfig+0x82>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	4a21      	ldr	r2, [pc, #132]	; (8004bbc <TIM_Base_SetConfig+0xe4>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d00f      	beq.n	8004b5a <TIM_Base_SetConfig+0x82>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b40:	d00b      	beq.n	8004b5a <TIM_Base_SetConfig+0x82>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	4a1e      	ldr	r2, [pc, #120]	; (8004bc0 <TIM_Base_SetConfig+0xe8>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d007      	beq.n	8004b5a <TIM_Base_SetConfig+0x82>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	4a1d      	ldr	r2, [pc, #116]	; (8004bc4 <TIM_Base_SetConfig+0xec>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d003      	beq.n	8004b5a <TIM_Base_SetConfig+0x82>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	4a1c      	ldr	r2, [pc, #112]	; (8004bc8 <TIM_Base_SetConfig+0xf0>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d108      	bne.n	8004b6c <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	68db      	ldr	r3, [r3, #12]
 8004b66:	68fa      	ldr	r2, [r7, #12]
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	695b      	ldr	r3, [r3, #20]
 8004b76:	4313      	orrs	r3, r2
 8004b78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	68fa      	ldr	r2, [r7, #12]
 8004b7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	689a      	ldr	r2, [r3, #8]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	4a09      	ldr	r2, [pc, #36]	; (8004bb8 <TIM_Base_SetConfig+0xe0>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d003      	beq.n	8004ba0 <TIM_Base_SetConfig+0xc8>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	4a08      	ldr	r2, [pc, #32]	; (8004bbc <TIM_Base_SetConfig+0xe4>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d103      	bne.n	8004ba8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	691a      	ldr	r2, [r3, #16]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2201      	movs	r2, #1
 8004bac:	615a      	str	r2, [r3, #20]
}
 8004bae:	bf00      	nop
 8004bb0:	3714      	adds	r7, #20
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bc80      	pop	{r7}
 8004bb6:	4770      	bx	lr
 8004bb8:	40012c00 	.word	0x40012c00
 8004bbc:	40013400 	.word	0x40013400
 8004bc0:	40000400 	.word	0x40000400
 8004bc4:	40000800 	.word	0x40000800
 8004bc8:	40000c00 	.word	0x40000c00

08004bcc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b087      	sub	sp, #28
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
 8004bd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6a1b      	ldr	r3, [r3, #32]
 8004bda:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6a1b      	ldr	r3, [r3, #32]
 8004be0:	f023 0201 	bic.w	r2, r3, #1
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	699b      	ldr	r3, [r3, #24]
 8004bf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f023 0303 	bic.w	r3, r3, #3
 8004c02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	68fa      	ldr	r2, [r7, #12]
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	f023 0302 	bic.w	r3, r3, #2
 8004c14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	689b      	ldr	r3, [r3, #8]
 8004c1a:	697a      	ldr	r2, [r7, #20]
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	4a20      	ldr	r2, [pc, #128]	; (8004ca4 <TIM_OC1_SetConfig+0xd8>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d003      	beq.n	8004c30 <TIM_OC1_SetConfig+0x64>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	4a1f      	ldr	r2, [pc, #124]	; (8004ca8 <TIM_OC1_SetConfig+0xdc>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d10c      	bne.n	8004c4a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	f023 0308 	bic.w	r3, r3, #8
 8004c36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	68db      	ldr	r3, [r3, #12]
 8004c3c:	697a      	ldr	r2, [r7, #20]
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	f023 0304 	bic.w	r3, r3, #4
 8004c48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	4a15      	ldr	r2, [pc, #84]	; (8004ca4 <TIM_OC1_SetConfig+0xd8>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d003      	beq.n	8004c5a <TIM_OC1_SetConfig+0x8e>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	4a14      	ldr	r2, [pc, #80]	; (8004ca8 <TIM_OC1_SetConfig+0xdc>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d111      	bne.n	8004c7e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	695b      	ldr	r3, [r3, #20]
 8004c6e:	693a      	ldr	r2, [r7, #16]
 8004c70:	4313      	orrs	r3, r2
 8004c72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	699b      	ldr	r3, [r3, #24]
 8004c78:	693a      	ldr	r2, [r7, #16]
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	693a      	ldr	r2, [r7, #16]
 8004c82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	68fa      	ldr	r2, [r7, #12]
 8004c88:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	685a      	ldr	r2, [r3, #4]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	697a      	ldr	r2, [r7, #20]
 8004c96:	621a      	str	r2, [r3, #32]
}
 8004c98:	bf00      	nop
 8004c9a:	371c      	adds	r7, #28
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bc80      	pop	{r7}
 8004ca0:	4770      	bx	lr
 8004ca2:	bf00      	nop
 8004ca4:	40012c00 	.word	0x40012c00
 8004ca8:	40013400 	.word	0x40013400

08004cac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b087      	sub	sp, #28
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6a1b      	ldr	r3, [r3, #32]
 8004cba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6a1b      	ldr	r3, [r3, #32]
 8004cc0:	f023 0210 	bic.w	r2, r3, #16
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	699b      	ldr	r3, [r3, #24]
 8004cd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ce2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	021b      	lsls	r3, r3, #8
 8004cea:	68fa      	ldr	r2, [r7, #12]
 8004cec:	4313      	orrs	r3, r2
 8004cee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	f023 0320 	bic.w	r3, r3, #32
 8004cf6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	011b      	lsls	r3, r3, #4
 8004cfe:	697a      	ldr	r2, [r7, #20]
 8004d00:	4313      	orrs	r3, r2
 8004d02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	4a21      	ldr	r2, [pc, #132]	; (8004d8c <TIM_OC2_SetConfig+0xe0>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d003      	beq.n	8004d14 <TIM_OC2_SetConfig+0x68>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	4a20      	ldr	r2, [pc, #128]	; (8004d90 <TIM_OC2_SetConfig+0xe4>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d10d      	bne.n	8004d30 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	68db      	ldr	r3, [r3, #12]
 8004d20:	011b      	lsls	r3, r3, #4
 8004d22:	697a      	ldr	r2, [r7, #20]
 8004d24:	4313      	orrs	r3, r2
 8004d26:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d2e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	4a16      	ldr	r2, [pc, #88]	; (8004d8c <TIM_OC2_SetConfig+0xe0>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d003      	beq.n	8004d40 <TIM_OC2_SetConfig+0x94>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	4a15      	ldr	r2, [pc, #84]	; (8004d90 <TIM_OC2_SetConfig+0xe4>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d113      	bne.n	8004d68 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d46:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004d48:	693b      	ldr	r3, [r7, #16]
 8004d4a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d4e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	695b      	ldr	r3, [r3, #20]
 8004d54:	009b      	lsls	r3, r3, #2
 8004d56:	693a      	ldr	r2, [r7, #16]
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	699b      	ldr	r3, [r3, #24]
 8004d60:	009b      	lsls	r3, r3, #2
 8004d62:	693a      	ldr	r2, [r7, #16]
 8004d64:	4313      	orrs	r3, r2
 8004d66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	693a      	ldr	r2, [r7, #16]
 8004d6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	68fa      	ldr	r2, [r7, #12]
 8004d72:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	685a      	ldr	r2, [r3, #4]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	697a      	ldr	r2, [r7, #20]
 8004d80:	621a      	str	r2, [r3, #32]
}
 8004d82:	bf00      	nop
 8004d84:	371c      	adds	r7, #28
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bc80      	pop	{r7}
 8004d8a:	4770      	bx	lr
 8004d8c:	40012c00 	.word	0x40012c00
 8004d90:	40013400 	.word	0x40013400

08004d94 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b087      	sub	sp, #28
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
 8004d9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6a1b      	ldr	r3, [r3, #32]
 8004da2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6a1b      	ldr	r3, [r3, #32]
 8004da8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	69db      	ldr	r3, [r3, #28]
 8004dba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f023 0303 	bic.w	r3, r3, #3
 8004dca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	68fa      	ldr	r2, [r7, #12]
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ddc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	021b      	lsls	r3, r3, #8
 8004de4:	697a      	ldr	r2, [r7, #20]
 8004de6:	4313      	orrs	r3, r2
 8004de8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	4a21      	ldr	r2, [pc, #132]	; (8004e74 <TIM_OC3_SetConfig+0xe0>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d003      	beq.n	8004dfa <TIM_OC3_SetConfig+0x66>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	4a20      	ldr	r2, [pc, #128]	; (8004e78 <TIM_OC3_SetConfig+0xe4>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d10d      	bne.n	8004e16 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e00:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	68db      	ldr	r3, [r3, #12]
 8004e06:	021b      	lsls	r3, r3, #8
 8004e08:	697a      	ldr	r2, [r7, #20]
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	4a16      	ldr	r2, [pc, #88]	; (8004e74 <TIM_OC3_SetConfig+0xe0>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d003      	beq.n	8004e26 <TIM_OC3_SetConfig+0x92>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4a15      	ldr	r2, [pc, #84]	; (8004e78 <TIM_OC3_SetConfig+0xe4>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d113      	bne.n	8004e4e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	695b      	ldr	r3, [r3, #20]
 8004e3a:	011b      	lsls	r3, r3, #4
 8004e3c:	693a      	ldr	r2, [r7, #16]
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	699b      	ldr	r3, [r3, #24]
 8004e46:	011b      	lsls	r3, r3, #4
 8004e48:	693a      	ldr	r2, [r7, #16]
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	693a      	ldr	r2, [r7, #16]
 8004e52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	68fa      	ldr	r2, [r7, #12]
 8004e58:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	685a      	ldr	r2, [r3, #4]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	697a      	ldr	r2, [r7, #20]
 8004e66:	621a      	str	r2, [r3, #32]
}
 8004e68:	bf00      	nop
 8004e6a:	371c      	adds	r7, #28
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bc80      	pop	{r7}
 8004e70:	4770      	bx	lr
 8004e72:	bf00      	nop
 8004e74:	40012c00 	.word	0x40012c00
 8004e78:	40013400 	.word	0x40013400

08004e7c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b087      	sub	sp, #28
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
 8004e84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6a1b      	ldr	r3, [r3, #32]
 8004e8a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6a1b      	ldr	r3, [r3, #32]
 8004e90:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	69db      	ldr	r3, [r3, #28]
 8004ea2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004eaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004eb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	021b      	lsls	r3, r3, #8
 8004eba:	68fa      	ldr	r2, [r7, #12]
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ec6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	031b      	lsls	r3, r3, #12
 8004ece:	693a      	ldr	r2, [r7, #16]
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	4a11      	ldr	r2, [pc, #68]	; (8004f1c <TIM_OC4_SetConfig+0xa0>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d003      	beq.n	8004ee4 <TIM_OC4_SetConfig+0x68>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	4a10      	ldr	r2, [pc, #64]	; (8004f20 <TIM_OC4_SetConfig+0xa4>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d109      	bne.n	8004ef8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004eea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	695b      	ldr	r3, [r3, #20]
 8004ef0:	019b      	lsls	r3, r3, #6
 8004ef2:	697a      	ldr	r2, [r7, #20]
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	697a      	ldr	r2, [r7, #20]
 8004efc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	68fa      	ldr	r2, [r7, #12]
 8004f02:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	685a      	ldr	r2, [r3, #4]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	693a      	ldr	r2, [r7, #16]
 8004f10:	621a      	str	r2, [r3, #32]
}
 8004f12:	bf00      	nop
 8004f14:	371c      	adds	r7, #28
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bc80      	pop	{r7}
 8004f1a:	4770      	bx	lr
 8004f1c:	40012c00 	.word	0x40012c00
 8004f20:	40013400 	.word	0x40013400

08004f24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b087      	sub	sp, #28
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	60f8      	str	r0, [r7, #12]
 8004f2c:	60b9      	str	r1, [r7, #8]
 8004f2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	6a1b      	ldr	r3, [r3, #32]
 8004f34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	6a1b      	ldr	r3, [r3, #32]
 8004f3a:	f023 0201 	bic.w	r2, r3, #1
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	699b      	ldr	r3, [r3, #24]
 8004f46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	011b      	lsls	r3, r3, #4
 8004f54:	693a      	ldr	r2, [r7, #16]
 8004f56:	4313      	orrs	r3, r2
 8004f58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	f023 030a 	bic.w	r3, r3, #10
 8004f60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f62:	697a      	ldr	r2, [r7, #20]
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	4313      	orrs	r3, r2
 8004f68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	693a      	ldr	r2, [r7, #16]
 8004f6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	697a      	ldr	r2, [r7, #20]
 8004f74:	621a      	str	r2, [r3, #32]
}
 8004f76:	bf00      	nop
 8004f78:	371c      	adds	r7, #28
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bc80      	pop	{r7}
 8004f7e:	4770      	bx	lr

08004f80 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b087      	sub	sp, #28
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	60f8      	str	r0, [r7, #12]
 8004f88:	60b9      	str	r1, [r7, #8]
 8004f8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	6a1b      	ldr	r3, [r3, #32]
 8004f90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	6a1b      	ldr	r3, [r3, #32]
 8004f96:	f023 0210 	bic.w	r2, r3, #16
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	699b      	ldr	r3, [r3, #24]
 8004fa2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004faa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	031b      	lsls	r3, r3, #12
 8004fb0:	693a      	ldr	r2, [r7, #16]
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004fbc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	011b      	lsls	r3, r3, #4
 8004fc2:	697a      	ldr	r2, [r7, #20]
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	693a      	ldr	r2, [r7, #16]
 8004fcc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	697a      	ldr	r2, [r7, #20]
 8004fd2:	621a      	str	r2, [r3, #32]
}
 8004fd4:	bf00      	nop
 8004fd6:	371c      	adds	r7, #28
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bc80      	pop	{r7}
 8004fdc:	4770      	bx	lr

08004fde <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004fde:	b480      	push	{r7}
 8004fe0:	b085      	sub	sp, #20
 8004fe2:	af00      	add	r7, sp, #0
 8004fe4:	6078      	str	r0, [r7, #4]
 8004fe6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	689b      	ldr	r3, [r3, #8]
 8004fec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ff4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ff6:	683a      	ldr	r2, [r7, #0]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	f043 0307 	orr.w	r3, r3, #7
 8005000:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	68fa      	ldr	r2, [r7, #12]
 8005006:	609a      	str	r2, [r3, #8]
}
 8005008:	bf00      	nop
 800500a:	3714      	adds	r7, #20
 800500c:	46bd      	mov	sp, r7
 800500e:	bc80      	pop	{r7}
 8005010:	4770      	bx	lr

08005012 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005012:	b480      	push	{r7}
 8005014:	b087      	sub	sp, #28
 8005016:	af00      	add	r7, sp, #0
 8005018:	60f8      	str	r0, [r7, #12]
 800501a:	60b9      	str	r1, [r7, #8]
 800501c:	607a      	str	r2, [r7, #4]
 800501e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800502c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	021a      	lsls	r2, r3, #8
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	431a      	orrs	r2, r3
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	4313      	orrs	r3, r2
 800503a:	697a      	ldr	r2, [r7, #20]
 800503c:	4313      	orrs	r3, r2
 800503e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	697a      	ldr	r2, [r7, #20]
 8005044:	609a      	str	r2, [r3, #8]
}
 8005046:	bf00      	nop
 8005048:	371c      	adds	r7, #28
 800504a:	46bd      	mov	sp, r7
 800504c:	bc80      	pop	{r7}
 800504e:	4770      	bx	lr

08005050 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005050:	b480      	push	{r7}
 8005052:	b087      	sub	sp, #28
 8005054:	af00      	add	r7, sp, #0
 8005056:	60f8      	str	r0, [r7, #12]
 8005058:	60b9      	str	r1, [r7, #8]
 800505a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	f003 031f 	and.w	r3, r3, #31
 8005062:	2201      	movs	r2, #1
 8005064:	fa02 f303 	lsl.w	r3, r2, r3
 8005068:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	6a1a      	ldr	r2, [r3, #32]
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	43db      	mvns	r3, r3
 8005072:	401a      	ands	r2, r3
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	6a1a      	ldr	r2, [r3, #32]
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	f003 031f 	and.w	r3, r3, #31
 8005082:	6879      	ldr	r1, [r7, #4]
 8005084:	fa01 f303 	lsl.w	r3, r1, r3
 8005088:	431a      	orrs	r2, r3
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	621a      	str	r2, [r3, #32]
}
 800508e:	bf00      	nop
 8005090:	371c      	adds	r7, #28
 8005092:	46bd      	mov	sp, r7
 8005094:	bc80      	pop	{r7}
 8005096:	4770      	bx	lr

08005098 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005098:	b480      	push	{r7}
 800509a:	b085      	sub	sp, #20
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
 80050a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d101      	bne.n	80050b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80050ac:	2302      	movs	r3, #2
 80050ae:	e050      	b.n	8005152 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2201      	movs	r2, #1
 80050b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2202      	movs	r2, #2
 80050bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	68fa      	ldr	r2, [r7, #12]
 80050de:	4313      	orrs	r3, r2
 80050e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	68fa      	ldr	r2, [r7, #12]
 80050e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a1b      	ldr	r2, [pc, #108]	; (800515c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d018      	beq.n	8005126 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a19      	ldr	r2, [pc, #100]	; (8005160 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d013      	beq.n	8005126 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005106:	d00e      	beq.n	8005126 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a15      	ldr	r2, [pc, #84]	; (8005164 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d009      	beq.n	8005126 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a14      	ldr	r2, [pc, #80]	; (8005168 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d004      	beq.n	8005126 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a12      	ldr	r2, [pc, #72]	; (800516c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d10c      	bne.n	8005140 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800512c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	68ba      	ldr	r2, [r7, #8]
 8005134:	4313      	orrs	r3, r2
 8005136:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	68ba      	ldr	r2, [r7, #8]
 800513e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2201      	movs	r2, #1
 8005144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2200      	movs	r2, #0
 800514c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005150:	2300      	movs	r3, #0
}
 8005152:	4618      	mov	r0, r3
 8005154:	3714      	adds	r7, #20
 8005156:	46bd      	mov	sp, r7
 8005158:	bc80      	pop	{r7}
 800515a:	4770      	bx	lr
 800515c:	40012c00 	.word	0x40012c00
 8005160:	40013400 	.word	0x40013400
 8005164:	40000400 	.word	0x40000400
 8005168:	40000800 	.word	0x40000800
 800516c:	40000c00 	.word	0x40000c00

08005170 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005170:	b480      	push	{r7}
 8005172:	b085      	sub	sp, #20
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
 8005178:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800517a:	2300      	movs	r3, #0
 800517c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005184:	2b01      	cmp	r3, #1
 8005186:	d101      	bne.n	800518c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005188:	2302      	movs	r3, #2
 800518a:	e03d      	b.n	8005208 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2201      	movs	r2, #1
 8005190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	68db      	ldr	r3, [r3, #12]
 800519e:	4313      	orrs	r3, r2
 80051a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	689b      	ldr	r3, [r3, #8]
 80051ac:	4313      	orrs	r3, r2
 80051ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	4313      	orrs	r3, r2
 80051bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4313      	orrs	r3, r2
 80051ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	691b      	ldr	r3, [r3, #16]
 80051d6:	4313      	orrs	r3, r2
 80051d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	695b      	ldr	r3, [r3, #20]
 80051e4:	4313      	orrs	r3, r2
 80051e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	69db      	ldr	r3, [r3, #28]
 80051f2:	4313      	orrs	r3, r2
 80051f4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	68fa      	ldr	r2, [r7, #12]
 80051fc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2200      	movs	r2, #0
 8005202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005206:	2300      	movs	r3, #0
}
 8005208:	4618      	mov	r0, r3
 800520a:	3714      	adds	r7, #20
 800520c:	46bd      	mov	sp, r7
 800520e:	bc80      	pop	{r7}
 8005210:	4770      	bx	lr

08005212 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005212:	b480      	push	{r7}
 8005214:	b083      	sub	sp, #12
 8005216:	af00      	add	r7, sp, #0
 8005218:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800521a:	bf00      	nop
 800521c:	370c      	adds	r7, #12
 800521e:	46bd      	mov	sp, r7
 8005220:	bc80      	pop	{r7}
 8005222:	4770      	bx	lr

08005224 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005224:	b480      	push	{r7}
 8005226:	b083      	sub	sp, #12
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800522c:	bf00      	nop
 800522e:	370c      	adds	r7, #12
 8005230:	46bd      	mov	sp, r7
 8005232:	bc80      	pop	{r7}
 8005234:	4770      	bx	lr

08005236 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005236:	b580      	push	{r7, lr}
 8005238:	b082      	sub	sp, #8
 800523a:	af00      	add	r7, sp, #0
 800523c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d101      	bne.n	8005248 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005244:	2301      	movs	r3, #1
 8005246:	e042      	b.n	80052ce <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800524e:	b2db      	uxtb	r3, r3
 8005250:	2b00      	cmp	r3, #0
 8005252:	d106      	bne.n	8005262 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2200      	movs	r2, #0
 8005258:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	f7fd f99b 	bl	8002598 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2224      	movs	r2, #36	; 0x24
 8005266:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	68da      	ldr	r2, [r3, #12]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005278:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f000 ff54 	bl	8006128 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	691a      	ldr	r2, [r3, #16]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800528e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	695a      	ldr	r2, [r3, #20]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800529e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	68da      	ldr	r2, [r3, #12]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80052ae:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2200      	movs	r2, #0
 80052b4:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2220      	movs	r2, #32
 80052ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2220      	movs	r2, #32
 80052c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2200      	movs	r2, #0
 80052ca:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80052cc:	2300      	movs	r3, #0
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3708      	adds	r7, #8
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}

080052d6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052d6:	b580      	push	{r7, lr}
 80052d8:	b08a      	sub	sp, #40	; 0x28
 80052da:	af02      	add	r7, sp, #8
 80052dc:	60f8      	str	r0, [r7, #12]
 80052de:	60b9      	str	r1, [r7, #8]
 80052e0:	603b      	str	r3, [r7, #0]
 80052e2:	4613      	mov	r3, r2
 80052e4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80052e6:	2300      	movs	r3, #0
 80052e8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052f0:	b2db      	uxtb	r3, r3
 80052f2:	2b20      	cmp	r3, #32
 80052f4:	d16d      	bne.n	80053d2 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d002      	beq.n	8005302 <HAL_UART_Transmit+0x2c>
 80052fc:	88fb      	ldrh	r3, [r7, #6]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d101      	bne.n	8005306 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	e066      	b.n	80053d4 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2200      	movs	r2, #0
 800530a:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2221      	movs	r2, #33	; 0x21
 8005310:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005314:	f7fd fabc 	bl	8002890 <HAL_GetTick>
 8005318:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	88fa      	ldrh	r2, [r7, #6]
 800531e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	88fa      	ldrh	r2, [r7, #6]
 8005324:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800532e:	d108      	bne.n	8005342 <HAL_UART_Transmit+0x6c>
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	691b      	ldr	r3, [r3, #16]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d104      	bne.n	8005342 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005338:	2300      	movs	r3, #0
 800533a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	61bb      	str	r3, [r7, #24]
 8005340:	e003      	b.n	800534a <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005346:	2300      	movs	r3, #0
 8005348:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800534a:	e02a      	b.n	80053a2 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	9300      	str	r3, [sp, #0]
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	2200      	movs	r2, #0
 8005354:	2180      	movs	r1, #128	; 0x80
 8005356:	68f8      	ldr	r0, [r7, #12]
 8005358:	f000 fc1c 	bl	8005b94 <UART_WaitOnFlagUntilTimeout>
 800535c:	4603      	mov	r3, r0
 800535e:	2b00      	cmp	r3, #0
 8005360:	d001      	beq.n	8005366 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8005362:	2303      	movs	r3, #3
 8005364:	e036      	b.n	80053d4 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005366:	69fb      	ldr	r3, [r7, #28]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d10b      	bne.n	8005384 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800536c:	69bb      	ldr	r3, [r7, #24]
 800536e:	881b      	ldrh	r3, [r3, #0]
 8005370:	461a      	mov	r2, r3
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800537a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800537c:	69bb      	ldr	r3, [r7, #24]
 800537e:	3302      	adds	r3, #2
 8005380:	61bb      	str	r3, [r7, #24]
 8005382:	e007      	b.n	8005394 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005384:	69fb      	ldr	r3, [r7, #28]
 8005386:	781a      	ldrb	r2, [r3, #0]
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800538e:	69fb      	ldr	r3, [r7, #28]
 8005390:	3301      	adds	r3, #1
 8005392:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005398:	b29b      	uxth	r3, r3
 800539a:	3b01      	subs	r3, #1
 800539c:	b29a      	uxth	r2, r3
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80053a6:	b29b      	uxth	r3, r3
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d1cf      	bne.n	800534c <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	9300      	str	r3, [sp, #0]
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	2200      	movs	r2, #0
 80053b4:	2140      	movs	r1, #64	; 0x40
 80053b6:	68f8      	ldr	r0, [r7, #12]
 80053b8:	f000 fbec 	bl	8005b94 <UART_WaitOnFlagUntilTimeout>
 80053bc:	4603      	mov	r3, r0
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d001      	beq.n	80053c6 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80053c2:	2303      	movs	r3, #3
 80053c4:	e006      	b.n	80053d4 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2220      	movs	r2, #32
 80053ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80053ce:	2300      	movs	r3, #0
 80053d0:	e000      	b.n	80053d4 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80053d2:	2302      	movs	r3, #2
  }
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	3720      	adds	r7, #32
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}

080053dc <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b084      	sub	sp, #16
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	60f8      	str	r0, [r7, #12]
 80053e4:	60b9      	str	r1, [r7, #8]
 80053e6:	4613      	mov	r3, r2
 80053e8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80053f0:	b2db      	uxtb	r3, r3
 80053f2:	2b20      	cmp	r3, #32
 80053f4:	d112      	bne.n	800541c <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d002      	beq.n	8005402 <HAL_UART_Receive_DMA+0x26>
 80053fc:	88fb      	ldrh	r3, [r7, #6]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d101      	bne.n	8005406 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005402:	2301      	movs	r3, #1
 8005404:	e00b      	b.n	800541e <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2200      	movs	r2, #0
 800540a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800540c:	88fb      	ldrh	r3, [r7, #6]
 800540e:	461a      	mov	r2, r3
 8005410:	68b9      	ldr	r1, [r7, #8]
 8005412:	68f8      	ldr	r0, [r7, #12]
 8005414:	f000 fc2c 	bl	8005c70 <UART_Start_Receive_DMA>
 8005418:	4603      	mov	r3, r0
 800541a:	e000      	b.n	800541e <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800541c:	2302      	movs	r3, #2
  }
}
 800541e:	4618      	mov	r0, r3
 8005420:	3710      	adds	r7, #16
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}
	...

08005428 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b0ba      	sub	sp, #232	; 0xe8
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	68db      	ldr	r3, [r3, #12]
 8005440:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	695b      	ldr	r3, [r3, #20]
 800544a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800544e:	2300      	movs	r3, #0
 8005450:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005454:	2300      	movs	r3, #0
 8005456:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800545a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800545e:	f003 030f 	and.w	r3, r3, #15
 8005462:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005466:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800546a:	2b00      	cmp	r3, #0
 800546c:	d10f      	bne.n	800548e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800546e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005472:	f003 0320 	and.w	r3, r3, #32
 8005476:	2b00      	cmp	r3, #0
 8005478:	d009      	beq.n	800548e <HAL_UART_IRQHandler+0x66>
 800547a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800547e:	f003 0320 	and.w	r3, r3, #32
 8005482:	2b00      	cmp	r3, #0
 8005484:	d003      	beq.n	800548e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f000 fd90 	bl	8005fac <UART_Receive_IT>
      return;
 800548c:	e25b      	b.n	8005946 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800548e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005492:	2b00      	cmp	r3, #0
 8005494:	f000 80de 	beq.w	8005654 <HAL_UART_IRQHandler+0x22c>
 8005498:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800549c:	f003 0301 	and.w	r3, r3, #1
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d106      	bne.n	80054b2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80054a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054a8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	f000 80d1 	beq.w	8005654 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80054b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054b6:	f003 0301 	and.w	r3, r3, #1
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d00b      	beq.n	80054d6 <HAL_UART_IRQHandler+0xae>
 80054be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d005      	beq.n	80054d6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054ce:	f043 0201 	orr.w	r2, r3, #1
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80054d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054da:	f003 0304 	and.w	r3, r3, #4
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d00b      	beq.n	80054fa <HAL_UART_IRQHandler+0xd2>
 80054e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80054e6:	f003 0301 	and.w	r3, r3, #1
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d005      	beq.n	80054fa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054f2:	f043 0202 	orr.w	r2, r3, #2
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80054fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054fe:	f003 0302 	and.w	r3, r3, #2
 8005502:	2b00      	cmp	r3, #0
 8005504:	d00b      	beq.n	800551e <HAL_UART_IRQHandler+0xf6>
 8005506:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800550a:	f003 0301 	and.w	r3, r3, #1
 800550e:	2b00      	cmp	r3, #0
 8005510:	d005      	beq.n	800551e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005516:	f043 0204 	orr.w	r2, r3, #4
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800551e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005522:	f003 0308 	and.w	r3, r3, #8
 8005526:	2b00      	cmp	r3, #0
 8005528:	d011      	beq.n	800554e <HAL_UART_IRQHandler+0x126>
 800552a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800552e:	f003 0320 	and.w	r3, r3, #32
 8005532:	2b00      	cmp	r3, #0
 8005534:	d105      	bne.n	8005542 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005536:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800553a:	f003 0301 	and.w	r3, r3, #1
 800553e:	2b00      	cmp	r3, #0
 8005540:	d005      	beq.n	800554e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005546:	f043 0208 	orr.w	r2, r3, #8
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005552:	2b00      	cmp	r3, #0
 8005554:	f000 81f2 	beq.w	800593c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005558:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800555c:	f003 0320 	and.w	r3, r3, #32
 8005560:	2b00      	cmp	r3, #0
 8005562:	d008      	beq.n	8005576 <HAL_UART_IRQHandler+0x14e>
 8005564:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005568:	f003 0320 	and.w	r3, r3, #32
 800556c:	2b00      	cmp	r3, #0
 800556e:	d002      	beq.n	8005576 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f000 fd1b 	bl	8005fac <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	695b      	ldr	r3, [r3, #20]
 800557c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005580:	2b00      	cmp	r3, #0
 8005582:	bf14      	ite	ne
 8005584:	2301      	movne	r3, #1
 8005586:	2300      	moveq	r3, #0
 8005588:	b2db      	uxtb	r3, r3
 800558a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005592:	f003 0308 	and.w	r3, r3, #8
 8005596:	2b00      	cmp	r3, #0
 8005598:	d103      	bne.n	80055a2 <HAL_UART_IRQHandler+0x17a>
 800559a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d04f      	beq.n	8005642 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f000 fc25 	bl	8005df2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	695b      	ldr	r3, [r3, #20]
 80055ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d041      	beq.n	800563a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	3314      	adds	r3, #20
 80055bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80055c4:	e853 3f00 	ldrex	r3, [r3]
 80055c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80055cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80055d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	3314      	adds	r3, #20
 80055de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80055e2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80055e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80055ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80055f2:	e841 2300 	strex	r3, r2, [r1]
 80055f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80055fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d1d9      	bne.n	80055b6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005606:	2b00      	cmp	r3, #0
 8005608:	d013      	beq.n	8005632 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800560e:	4a7e      	ldr	r2, [pc, #504]	; (8005808 <HAL_UART_IRQHandler+0x3e0>)
 8005610:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005616:	4618      	mov	r0, r3
 8005618:	f7fd fb88 	bl	8002d2c <HAL_DMA_Abort_IT>
 800561c:	4603      	mov	r3, r0
 800561e:	2b00      	cmp	r3, #0
 8005620:	d016      	beq.n	8005650 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005626:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005628:	687a      	ldr	r2, [r7, #4]
 800562a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800562c:	4610      	mov	r0, r2
 800562e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005630:	e00e      	b.n	8005650 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f000 f99c 	bl	8005970 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005638:	e00a      	b.n	8005650 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f000 f998 	bl	8005970 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005640:	e006      	b.n	8005650 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f000 f994 	bl	8005970 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2200      	movs	r2, #0
 800564c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800564e:	e175      	b.n	800593c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005650:	bf00      	nop
    return;
 8005652:	e173      	b.n	800593c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005658:	2b01      	cmp	r3, #1
 800565a:	f040 814f 	bne.w	80058fc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800565e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005662:	f003 0310 	and.w	r3, r3, #16
 8005666:	2b00      	cmp	r3, #0
 8005668:	f000 8148 	beq.w	80058fc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800566c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005670:	f003 0310 	and.w	r3, r3, #16
 8005674:	2b00      	cmp	r3, #0
 8005676:	f000 8141 	beq.w	80058fc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800567a:	2300      	movs	r3, #0
 800567c:	60bb      	str	r3, [r7, #8]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	60bb      	str	r3, [r7, #8]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	60bb      	str	r3, [r7, #8]
 800568e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	695b      	ldr	r3, [r3, #20]
 8005696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800569a:	2b00      	cmp	r3, #0
 800569c:	f000 80b6 	beq.w	800580c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80056ac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	f000 8145 	beq.w	8005940 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80056ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80056be:	429a      	cmp	r2, r3
 80056c0:	f080 813e 	bcs.w	8005940 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80056ca:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056d0:	699b      	ldr	r3, [r3, #24]
 80056d2:	2b20      	cmp	r3, #32
 80056d4:	f000 8088 	beq.w	80057e8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	330c      	adds	r3, #12
 80056de:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80056e6:	e853 3f00 	ldrex	r3, [r3]
 80056ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80056ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80056f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056f6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	330c      	adds	r3, #12
 8005700:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005704:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005708:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800570c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005710:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005714:	e841 2300 	strex	r3, r2, [r1]
 8005718:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800571c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005720:	2b00      	cmp	r3, #0
 8005722:	d1d9      	bne.n	80056d8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	3314      	adds	r3, #20
 800572a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800572c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800572e:	e853 3f00 	ldrex	r3, [r3]
 8005732:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005734:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005736:	f023 0301 	bic.w	r3, r3, #1
 800573a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	3314      	adds	r3, #20
 8005744:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005748:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800574c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800574e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005750:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005754:	e841 2300 	strex	r3, r2, [r1]
 8005758:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800575a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800575c:	2b00      	cmp	r3, #0
 800575e:	d1e1      	bne.n	8005724 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	3314      	adds	r3, #20
 8005766:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005768:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800576a:	e853 3f00 	ldrex	r3, [r3]
 800576e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005770:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005772:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005776:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	3314      	adds	r3, #20
 8005780:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005784:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005786:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005788:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800578a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800578c:	e841 2300 	strex	r3, r2, [r1]
 8005790:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005792:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005794:	2b00      	cmp	r3, #0
 8005796:	d1e3      	bne.n	8005760 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2220      	movs	r2, #32
 800579c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2200      	movs	r2, #0
 80057a4:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	330c      	adds	r3, #12
 80057ac:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057b0:	e853 3f00 	ldrex	r3, [r3]
 80057b4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80057b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057b8:	f023 0310 	bic.w	r3, r3, #16
 80057bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	330c      	adds	r3, #12
 80057c6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80057ca:	65ba      	str	r2, [r7, #88]	; 0x58
 80057cc:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ce:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80057d0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80057d2:	e841 2300 	strex	r3, r2, [r1]
 80057d6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80057d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d1e3      	bne.n	80057a6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057e2:	4618      	mov	r0, r3
 80057e4:	f7fd fa66 	bl	8002cb4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2202      	movs	r2, #2
 80057ec:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	1ad3      	subs	r3, r2, r3
 80057fa:	b29b      	uxth	r3, r3
 80057fc:	4619      	mov	r1, r3
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f000 f8bf 	bl	8005982 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005804:	e09c      	b.n	8005940 <HAL_UART_IRQHandler+0x518>
 8005806:	bf00      	nop
 8005808:	08005eb7 	.word	0x08005eb7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005814:	b29b      	uxth	r3, r3
 8005816:	1ad3      	subs	r3, r2, r3
 8005818:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005820:	b29b      	uxth	r3, r3
 8005822:	2b00      	cmp	r3, #0
 8005824:	f000 808e 	beq.w	8005944 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005828:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800582c:	2b00      	cmp	r3, #0
 800582e:	f000 8089 	beq.w	8005944 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	330c      	adds	r3, #12
 8005838:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800583a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800583c:	e853 3f00 	ldrex	r3, [r3]
 8005840:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005842:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005844:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005848:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	330c      	adds	r3, #12
 8005852:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005856:	647a      	str	r2, [r7, #68]	; 0x44
 8005858:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800585a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800585c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800585e:	e841 2300 	strex	r3, r2, [r1]
 8005862:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005864:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005866:	2b00      	cmp	r3, #0
 8005868:	d1e3      	bne.n	8005832 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	3314      	adds	r3, #20
 8005870:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005874:	e853 3f00 	ldrex	r3, [r3]
 8005878:	623b      	str	r3, [r7, #32]
   return(result);
 800587a:	6a3b      	ldr	r3, [r7, #32]
 800587c:	f023 0301 	bic.w	r3, r3, #1
 8005880:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	3314      	adds	r3, #20
 800588a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800588e:	633a      	str	r2, [r7, #48]	; 0x30
 8005890:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005892:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005894:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005896:	e841 2300 	strex	r3, r2, [r1]
 800589a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800589c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d1e3      	bne.n	800586a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2220      	movs	r2, #32
 80058a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2200      	movs	r2, #0
 80058ae:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	330c      	adds	r3, #12
 80058b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	e853 3f00 	ldrex	r3, [r3]
 80058be:	60fb      	str	r3, [r7, #12]
   return(result);
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	f023 0310 	bic.w	r3, r3, #16
 80058c6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	330c      	adds	r3, #12
 80058d0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80058d4:	61fa      	str	r2, [r7, #28]
 80058d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058d8:	69b9      	ldr	r1, [r7, #24]
 80058da:	69fa      	ldr	r2, [r7, #28]
 80058dc:	e841 2300 	strex	r3, r2, [r1]
 80058e0:	617b      	str	r3, [r7, #20]
   return(result);
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d1e3      	bne.n	80058b0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2202      	movs	r2, #2
 80058ec:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80058ee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80058f2:	4619      	mov	r1, r3
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	f000 f844 	bl	8005982 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80058fa:	e023      	b.n	8005944 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80058fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005900:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005904:	2b00      	cmp	r3, #0
 8005906:	d009      	beq.n	800591c <HAL_UART_IRQHandler+0x4f4>
 8005908:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800590c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005910:	2b00      	cmp	r3, #0
 8005912:	d003      	beq.n	800591c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f000 fae2 	bl	8005ede <UART_Transmit_IT>
    return;
 800591a:	e014      	b.n	8005946 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800591c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005920:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005924:	2b00      	cmp	r3, #0
 8005926:	d00e      	beq.n	8005946 <HAL_UART_IRQHandler+0x51e>
 8005928:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800592c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005930:	2b00      	cmp	r3, #0
 8005932:	d008      	beq.n	8005946 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	f000 fb21 	bl	8005f7c <UART_EndTransmit_IT>
    return;
 800593a:	e004      	b.n	8005946 <HAL_UART_IRQHandler+0x51e>
    return;
 800593c:	bf00      	nop
 800593e:	e002      	b.n	8005946 <HAL_UART_IRQHandler+0x51e>
      return;
 8005940:	bf00      	nop
 8005942:	e000      	b.n	8005946 <HAL_UART_IRQHandler+0x51e>
      return;
 8005944:	bf00      	nop
  }
}
 8005946:	37e8      	adds	r7, #232	; 0xe8
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}

0800594c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800594c:	b480      	push	{r7}
 800594e:	b083      	sub	sp, #12
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005954:	bf00      	nop
 8005956:	370c      	adds	r7, #12
 8005958:	46bd      	mov	sp, r7
 800595a:	bc80      	pop	{r7}
 800595c:	4770      	bx	lr

0800595e <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800595e:	b480      	push	{r7}
 8005960:	b083      	sub	sp, #12
 8005962:	af00      	add	r7, sp, #0
 8005964:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005966:	bf00      	nop
 8005968:	370c      	adds	r7, #12
 800596a:	46bd      	mov	sp, r7
 800596c:	bc80      	pop	{r7}
 800596e:	4770      	bx	lr

08005970 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005970:	b480      	push	{r7}
 8005972:	b083      	sub	sp, #12
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005978:	bf00      	nop
 800597a:	370c      	adds	r7, #12
 800597c:	46bd      	mov	sp, r7
 800597e:	bc80      	pop	{r7}
 8005980:	4770      	bx	lr

08005982 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005982:	b480      	push	{r7}
 8005984:	b083      	sub	sp, #12
 8005986:	af00      	add	r7, sp, #0
 8005988:	6078      	str	r0, [r7, #4]
 800598a:	460b      	mov	r3, r1
 800598c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800598e:	bf00      	nop
 8005990:	370c      	adds	r7, #12
 8005992:	46bd      	mov	sp, r7
 8005994:	bc80      	pop	{r7}
 8005996:	4770      	bx	lr

08005998 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b09c      	sub	sp, #112	; 0x70
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a4:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f003 0320 	and.w	r3, r3, #32
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d172      	bne.n	8005a9a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80059b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059b6:	2200      	movs	r2, #0
 80059b8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80059ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	330c      	adds	r3, #12
 80059c0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059c4:	e853 3f00 	ldrex	r3, [r3]
 80059c8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80059ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059d0:	66bb      	str	r3, [r7, #104]	; 0x68
 80059d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	330c      	adds	r3, #12
 80059d8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80059da:	65ba      	str	r2, [r7, #88]	; 0x58
 80059dc:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059de:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80059e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80059e2:	e841 2300 	strex	r3, r2, [r1]
 80059e6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80059e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d1e5      	bne.n	80059ba <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	3314      	adds	r3, #20
 80059f4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059f8:	e853 3f00 	ldrex	r3, [r3]
 80059fc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80059fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a00:	f023 0301 	bic.w	r3, r3, #1
 8005a04:	667b      	str	r3, [r7, #100]	; 0x64
 8005a06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	3314      	adds	r3, #20
 8005a0c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005a0e:	647a      	str	r2, [r7, #68]	; 0x44
 8005a10:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a12:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005a14:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a16:	e841 2300 	strex	r3, r2, [r1]
 8005a1a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005a1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d1e5      	bne.n	80059ee <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	3314      	adds	r3, #20
 8005a28:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a2c:	e853 3f00 	ldrex	r3, [r3]
 8005a30:	623b      	str	r3, [r7, #32]
   return(result);
 8005a32:	6a3b      	ldr	r3, [r7, #32]
 8005a34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a38:	663b      	str	r3, [r7, #96]	; 0x60
 8005a3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	3314      	adds	r3, #20
 8005a40:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005a42:	633a      	str	r2, [r7, #48]	; 0x30
 8005a44:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a46:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005a48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a4a:	e841 2300 	strex	r3, r2, [r1]
 8005a4e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d1e5      	bne.n	8005a22 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005a56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a58:	2220      	movs	r2, #32
 8005a5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a62:	2b01      	cmp	r3, #1
 8005a64:	d119      	bne.n	8005a9a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	330c      	adds	r3, #12
 8005a6c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	e853 3f00 	ldrex	r3, [r3]
 8005a74:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	f023 0310 	bic.w	r3, r3, #16
 8005a7c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	330c      	adds	r3, #12
 8005a84:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005a86:	61fa      	str	r2, [r7, #28]
 8005a88:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a8a:	69b9      	ldr	r1, [r7, #24]
 8005a8c:	69fa      	ldr	r2, [r7, #28]
 8005a8e:	e841 2300 	strex	r3, r2, [r1]
 8005a92:	617b      	str	r3, [r7, #20]
   return(result);
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d1e5      	bne.n	8005a66 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005aa0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d106      	bne.n	8005ab6 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005aa8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005aaa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005aac:	4619      	mov	r1, r3
 8005aae:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005ab0:	f7ff ff67 	bl	8005982 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005ab4:	e002      	b.n	8005abc <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8005ab6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005ab8:	f7fc fe34 	bl	8002724 <HAL_UART_RxCpltCallback>
}
 8005abc:	bf00      	nop
 8005abe:	3770      	adds	r7, #112	; 0x70
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd80      	pop	{r7, pc}

08005ac4 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b084      	sub	sp, #16
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad0:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2201      	movs	r2, #1
 8005ad6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005adc:	2b01      	cmp	r3, #1
 8005ade:	d108      	bne.n	8005af2 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005ae4:	085b      	lsrs	r3, r3, #1
 8005ae6:	b29b      	uxth	r3, r3
 8005ae8:	4619      	mov	r1, r3
 8005aea:	68f8      	ldr	r0, [r7, #12]
 8005aec:	f7ff ff49 	bl	8005982 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005af0:	e002      	b.n	8005af8 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8005af2:	68f8      	ldr	r0, [r7, #12]
 8005af4:	f7ff ff33 	bl	800595e <HAL_UART_RxHalfCpltCallback>
}
 8005af8:	bf00      	nop
 8005afa:	3710      	adds	r7, #16
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}

08005b00 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b084      	sub	sp, #16
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005b08:	2300      	movs	r3, #0
 8005b0a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b10:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	695b      	ldr	r3, [r3, #20]
 8005b18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	bf14      	ite	ne
 8005b20:	2301      	movne	r3, #1
 8005b22:	2300      	moveq	r3, #0
 8005b24:	b2db      	uxtb	r3, r3
 8005b26:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b2e:	b2db      	uxtb	r3, r3
 8005b30:	2b21      	cmp	r3, #33	; 0x21
 8005b32:	d108      	bne.n	8005b46 <UART_DMAError+0x46>
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d005      	beq.n	8005b46 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005b40:	68b8      	ldr	r0, [r7, #8]
 8005b42:	f000 f92f 	bl	8005da4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	695b      	ldr	r3, [r3, #20]
 8005b4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	bf14      	ite	ne
 8005b54:	2301      	movne	r3, #1
 8005b56:	2300      	moveq	r3, #0
 8005b58:	b2db      	uxtb	r3, r3
 8005b5a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005b62:	b2db      	uxtb	r3, r3
 8005b64:	2b22      	cmp	r3, #34	; 0x22
 8005b66:	d108      	bne.n	8005b7a <UART_DMAError+0x7a>
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d005      	beq.n	8005b7a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	2200      	movs	r2, #0
 8005b72:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005b74:	68b8      	ldr	r0, [r7, #8]
 8005b76:	f000 f93c 	bl	8005df2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b7e:	f043 0210 	orr.w	r2, r3, #16
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005b86:	68b8      	ldr	r0, [r7, #8]
 8005b88:	f7ff fef2 	bl	8005970 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b8c:	bf00      	nop
 8005b8e:	3710      	adds	r7, #16
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}

08005b94 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b090      	sub	sp, #64	; 0x40
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	60f8      	str	r0, [r7, #12]
 8005b9c:	60b9      	str	r1, [r7, #8]
 8005b9e:	603b      	str	r3, [r7, #0]
 8005ba0:	4613      	mov	r3, r2
 8005ba2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ba4:	e050      	b.n	8005c48 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ba6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bac:	d04c      	beq.n	8005c48 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005bae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d007      	beq.n	8005bc4 <UART_WaitOnFlagUntilTimeout+0x30>
 8005bb4:	f7fc fe6c 	bl	8002890 <HAL_GetTick>
 8005bb8:	4602      	mov	r2, r0
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	1ad3      	subs	r3, r2, r3
 8005bbe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d241      	bcs.n	8005c48 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	330c      	adds	r3, #12
 8005bca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bce:	e853 3f00 	ldrex	r3, [r3]
 8005bd2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005bda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	330c      	adds	r3, #12
 8005be2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005be4:	637a      	str	r2, [r7, #52]	; 0x34
 8005be6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005be8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005bea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005bec:	e841 2300 	strex	r3, r2, [r1]
 8005bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d1e5      	bne.n	8005bc4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	3314      	adds	r3, #20
 8005bfe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	e853 3f00 	ldrex	r3, [r3]
 8005c06:	613b      	str	r3, [r7, #16]
   return(result);
 8005c08:	693b      	ldr	r3, [r7, #16]
 8005c0a:	f023 0301 	bic.w	r3, r3, #1
 8005c0e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	3314      	adds	r3, #20
 8005c16:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c18:	623a      	str	r2, [r7, #32]
 8005c1a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c1c:	69f9      	ldr	r1, [r7, #28]
 8005c1e:	6a3a      	ldr	r2, [r7, #32]
 8005c20:	e841 2300 	strex	r3, r2, [r1]
 8005c24:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c26:	69bb      	ldr	r3, [r7, #24]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d1e5      	bne.n	8005bf8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2220      	movs	r2, #32
 8005c30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2220      	movs	r2, #32
 8005c38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8005c44:	2303      	movs	r3, #3
 8005c46:	e00f      	b.n	8005c68 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	681a      	ldr	r2, [r3, #0]
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	4013      	ands	r3, r2
 8005c52:	68ba      	ldr	r2, [r7, #8]
 8005c54:	429a      	cmp	r2, r3
 8005c56:	bf0c      	ite	eq
 8005c58:	2301      	moveq	r3, #1
 8005c5a:	2300      	movne	r3, #0
 8005c5c:	b2db      	uxtb	r3, r3
 8005c5e:	461a      	mov	r2, r3
 8005c60:	79fb      	ldrb	r3, [r7, #7]
 8005c62:	429a      	cmp	r2, r3
 8005c64:	d09f      	beq.n	8005ba6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005c66:	2300      	movs	r3, #0
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	3740      	adds	r7, #64	; 0x40
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}

08005c70 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b098      	sub	sp, #96	; 0x60
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	60f8      	str	r0, [r7, #12]
 8005c78:	60b9      	str	r1, [r7, #8]
 8005c7a:	4613      	mov	r3, r2
 8005c7c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005c7e:	68ba      	ldr	r2, [r7, #8]
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	88fa      	ldrh	r2, [r7, #6]
 8005c88:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	2222      	movs	r2, #34	; 0x22
 8005c94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c9c:	4a3e      	ldr	r2, [pc, #248]	; (8005d98 <UART_Start_Receive_DMA+0x128>)
 8005c9e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ca4:	4a3d      	ldr	r2, [pc, #244]	; (8005d9c <UART_Start_Receive_DMA+0x12c>)
 8005ca6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cac:	4a3c      	ldr	r2, [pc, #240]	; (8005da0 <UART_Start_Receive_DMA+0x130>)
 8005cae:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005cb8:	f107 0308 	add.w	r3, r7, #8
 8005cbc:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	3304      	adds	r3, #4
 8005cc8:	4619      	mov	r1, r3
 8005cca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ccc:	681a      	ldr	r2, [r3, #0]
 8005cce:	88fb      	ldrh	r3, [r7, #6]
 8005cd0:	f7fc ff90 	bl	8002bf4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	613b      	str	r3, [r7, #16]
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	613b      	str	r3, [r7, #16]
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	613b      	str	r3, [r7, #16]
 8005ce8:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	691b      	ldr	r3, [r3, #16]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d019      	beq.n	8005d26 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	330c      	adds	r3, #12
 8005cf8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cfc:	e853 3f00 	ldrex	r3, [r3]
 8005d00:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005d02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d08:	65bb      	str	r3, [r7, #88]	; 0x58
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	330c      	adds	r3, #12
 8005d10:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005d12:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005d14:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d16:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005d18:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005d1a:	e841 2300 	strex	r3, r2, [r1]
 8005d1e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005d20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d1e5      	bne.n	8005cf2 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	3314      	adds	r3, #20
 8005d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d30:	e853 3f00 	ldrex	r3, [r3]
 8005d34:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d38:	f043 0301 	orr.w	r3, r3, #1
 8005d3c:	657b      	str	r3, [r7, #84]	; 0x54
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	3314      	adds	r3, #20
 8005d44:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005d46:	63ba      	str	r2, [r7, #56]	; 0x38
 8005d48:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d4a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005d4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d4e:	e841 2300 	strex	r3, r2, [r1]
 8005d52:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d1e5      	bne.n	8005d26 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	3314      	adds	r3, #20
 8005d60:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d62:	69bb      	ldr	r3, [r7, #24]
 8005d64:	e853 3f00 	ldrex	r3, [r3]
 8005d68:	617b      	str	r3, [r7, #20]
   return(result);
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d70:	653b      	str	r3, [r7, #80]	; 0x50
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	3314      	adds	r3, #20
 8005d78:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005d7a:	627a      	str	r2, [r7, #36]	; 0x24
 8005d7c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d7e:	6a39      	ldr	r1, [r7, #32]
 8005d80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d82:	e841 2300 	strex	r3, r2, [r1]
 8005d86:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d88:	69fb      	ldr	r3, [r7, #28]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d1e5      	bne.n	8005d5a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8005d8e:	2300      	movs	r3, #0
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	3760      	adds	r7, #96	; 0x60
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bd80      	pop	{r7, pc}
 8005d98:	08005999 	.word	0x08005999
 8005d9c:	08005ac5 	.word	0x08005ac5
 8005da0:	08005b01 	.word	0x08005b01

08005da4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b089      	sub	sp, #36	; 0x24
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	330c      	adds	r3, #12
 8005db2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	e853 3f00 	ldrex	r3, [r3]
 8005dba:	60bb      	str	r3, [r7, #8]
   return(result);
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005dc2:	61fb      	str	r3, [r7, #28]
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	330c      	adds	r3, #12
 8005dca:	69fa      	ldr	r2, [r7, #28]
 8005dcc:	61ba      	str	r2, [r7, #24]
 8005dce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dd0:	6979      	ldr	r1, [r7, #20]
 8005dd2:	69ba      	ldr	r2, [r7, #24]
 8005dd4:	e841 2300 	strex	r3, r2, [r1]
 8005dd8:	613b      	str	r3, [r7, #16]
   return(result);
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d1e5      	bne.n	8005dac <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2220      	movs	r2, #32
 8005de4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8005de8:	bf00      	nop
 8005dea:	3724      	adds	r7, #36	; 0x24
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bc80      	pop	{r7}
 8005df0:	4770      	bx	lr

08005df2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005df2:	b480      	push	{r7}
 8005df4:	b095      	sub	sp, #84	; 0x54
 8005df6:	af00      	add	r7, sp, #0
 8005df8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	330c      	adds	r3, #12
 8005e00:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e04:	e853 3f00 	ldrex	r3, [r3]
 8005e08:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e0c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005e10:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	330c      	adds	r3, #12
 8005e18:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005e1a:	643a      	str	r2, [r7, #64]	; 0x40
 8005e1c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e1e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005e20:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005e22:	e841 2300 	strex	r3, r2, [r1]
 8005e26:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d1e5      	bne.n	8005dfa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	3314      	adds	r3, #20
 8005e34:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e36:	6a3b      	ldr	r3, [r7, #32]
 8005e38:	e853 3f00 	ldrex	r3, [r3]
 8005e3c:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e3e:	69fb      	ldr	r3, [r7, #28]
 8005e40:	f023 0301 	bic.w	r3, r3, #1
 8005e44:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	3314      	adds	r3, #20
 8005e4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e4e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005e50:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e52:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005e54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e56:	e841 2300 	strex	r3, r2, [r1]
 8005e5a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d1e5      	bne.n	8005e2e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e66:	2b01      	cmp	r3, #1
 8005e68:	d119      	bne.n	8005e9e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	330c      	adds	r3, #12
 8005e70:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	e853 3f00 	ldrex	r3, [r3]
 8005e78:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	f023 0310 	bic.w	r3, r3, #16
 8005e80:	647b      	str	r3, [r7, #68]	; 0x44
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	330c      	adds	r3, #12
 8005e88:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e8a:	61ba      	str	r2, [r7, #24]
 8005e8c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e8e:	6979      	ldr	r1, [r7, #20]
 8005e90:	69ba      	ldr	r2, [r7, #24]
 8005e92:	e841 2300 	strex	r3, r2, [r1]
 8005e96:	613b      	str	r3, [r7, #16]
   return(result);
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d1e5      	bne.n	8005e6a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2220      	movs	r2, #32
 8005ea2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005eac:	bf00      	nop
 8005eae:	3754      	adds	r7, #84	; 0x54
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bc80      	pop	{r7}
 8005eb4:	4770      	bx	lr

08005eb6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005eb6:	b580      	push	{r7, lr}
 8005eb8:	b084      	sub	sp, #16
 8005eba:	af00      	add	r7, sp, #0
 8005ebc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005ed0:	68f8      	ldr	r0, [r7, #12]
 8005ed2:	f7ff fd4d 	bl	8005970 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ed6:	bf00      	nop
 8005ed8:	3710      	adds	r7, #16
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}

08005ede <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005ede:	b480      	push	{r7}
 8005ee0:	b085      	sub	sp, #20
 8005ee2:	af00      	add	r7, sp, #0
 8005ee4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005eec:	b2db      	uxtb	r3, r3
 8005eee:	2b21      	cmp	r3, #33	; 0x21
 8005ef0:	d13e      	bne.n	8005f70 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	689b      	ldr	r3, [r3, #8]
 8005ef6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005efa:	d114      	bne.n	8005f26 <UART_Transmit_IT+0x48>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	691b      	ldr	r3, [r3, #16]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d110      	bne.n	8005f26 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6a1b      	ldr	r3, [r3, #32]
 8005f08:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	881b      	ldrh	r3, [r3, #0]
 8005f0e:	461a      	mov	r2, r3
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f18:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6a1b      	ldr	r3, [r3, #32]
 8005f1e:	1c9a      	adds	r2, r3, #2
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	621a      	str	r2, [r3, #32]
 8005f24:	e008      	b.n	8005f38 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6a1b      	ldr	r3, [r3, #32]
 8005f2a:	1c59      	adds	r1, r3, #1
 8005f2c:	687a      	ldr	r2, [r7, #4]
 8005f2e:	6211      	str	r1, [r2, #32]
 8005f30:	781a      	ldrb	r2, [r3, #0]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005f3c:	b29b      	uxth	r3, r3
 8005f3e:	3b01      	subs	r3, #1
 8005f40:	b29b      	uxth	r3, r3
 8005f42:	687a      	ldr	r2, [r7, #4]
 8005f44:	4619      	mov	r1, r3
 8005f46:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d10f      	bne.n	8005f6c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	68da      	ldr	r2, [r3, #12]
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f5a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	68da      	ldr	r2, [r3, #12]
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f6a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	e000      	b.n	8005f72 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005f70:	2302      	movs	r3, #2
  }
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	3714      	adds	r7, #20
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bc80      	pop	{r7}
 8005f7a:	4770      	bx	lr

08005f7c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b082      	sub	sp, #8
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	68da      	ldr	r2, [r3, #12]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f92:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2220      	movs	r2, #32
 8005f98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	f7ff fcd5 	bl	800594c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005fa2:	2300      	movs	r3, #0
}
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	3708      	adds	r7, #8
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	bd80      	pop	{r7, pc}

08005fac <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b08c      	sub	sp, #48	; 0x30
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005fba:	b2db      	uxtb	r3, r3
 8005fbc:	2b22      	cmp	r3, #34	; 0x22
 8005fbe:	f040 80ae 	bne.w	800611e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	689b      	ldr	r3, [r3, #8]
 8005fc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fca:	d117      	bne.n	8005ffc <UART_Receive_IT+0x50>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	691b      	ldr	r3, [r3, #16]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d113      	bne.n	8005ffc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fdc:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	b29b      	uxth	r3, r3
 8005fe6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fea:	b29a      	uxth	r2, r3
 8005fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fee:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ff4:	1c9a      	adds	r2, r3, #2
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	629a      	str	r2, [r3, #40]	; 0x28
 8005ffa:	e026      	b.n	800604a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006000:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006002:	2300      	movs	r3, #0
 8006004:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	689b      	ldr	r3, [r3, #8]
 800600a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800600e:	d007      	beq.n	8006020 <UART_Receive_IT+0x74>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d10a      	bne.n	800602e <UART_Receive_IT+0x82>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	691b      	ldr	r3, [r3, #16]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d106      	bne.n	800602e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	b2da      	uxtb	r2, r3
 8006028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800602a:	701a      	strb	r2, [r3, #0]
 800602c:	e008      	b.n	8006040 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	b2db      	uxtb	r3, r3
 8006036:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800603a:	b2da      	uxtb	r2, r3
 800603c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800603e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006044:	1c5a      	adds	r2, r3, #1
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800604e:	b29b      	uxth	r3, r3
 8006050:	3b01      	subs	r3, #1
 8006052:	b29b      	uxth	r3, r3
 8006054:	687a      	ldr	r2, [r7, #4]
 8006056:	4619      	mov	r1, r3
 8006058:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800605a:	2b00      	cmp	r3, #0
 800605c:	d15d      	bne.n	800611a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	68da      	ldr	r2, [r3, #12]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f022 0220 	bic.w	r2, r2, #32
 800606c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	68da      	ldr	r2, [r3, #12]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800607c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	695a      	ldr	r2, [r3, #20]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f022 0201 	bic.w	r2, r2, #1
 800608c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2220      	movs	r2, #32
 8006092:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2200      	movs	r2, #0
 800609a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060a0:	2b01      	cmp	r3, #1
 80060a2:	d135      	bne.n	8006110 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2200      	movs	r2, #0
 80060a8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	330c      	adds	r3, #12
 80060b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	e853 3f00 	ldrex	r3, [r3]
 80060b8:	613b      	str	r3, [r7, #16]
   return(result);
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	f023 0310 	bic.w	r3, r3, #16
 80060c0:	627b      	str	r3, [r7, #36]	; 0x24
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	330c      	adds	r3, #12
 80060c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060ca:	623a      	str	r2, [r7, #32]
 80060cc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ce:	69f9      	ldr	r1, [r7, #28]
 80060d0:	6a3a      	ldr	r2, [r7, #32]
 80060d2:	e841 2300 	strex	r3, r2, [r1]
 80060d6:	61bb      	str	r3, [r7, #24]
   return(result);
 80060d8:	69bb      	ldr	r3, [r7, #24]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d1e5      	bne.n	80060aa <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f003 0310 	and.w	r3, r3, #16
 80060e8:	2b10      	cmp	r3, #16
 80060ea:	d10a      	bne.n	8006102 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80060ec:	2300      	movs	r3, #0
 80060ee:	60fb      	str	r3, [r7, #12]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	60fb      	str	r3, [r7, #12]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	60fb      	str	r3, [r7, #12]
 8006100:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006106:	4619      	mov	r1, r3
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	f7ff fc3a 	bl	8005982 <HAL_UARTEx_RxEventCallback>
 800610e:	e002      	b.n	8006116 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f7fc fb07 	bl	8002724 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006116:	2300      	movs	r3, #0
 8006118:	e002      	b.n	8006120 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800611a:	2300      	movs	r3, #0
 800611c:	e000      	b.n	8006120 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800611e:	2302      	movs	r3, #2
  }
}
 8006120:	4618      	mov	r0, r3
 8006122:	3730      	adds	r7, #48	; 0x30
 8006124:	46bd      	mov	sp, r7
 8006126:	bd80      	pop	{r7, pc}

08006128 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b084      	sub	sp, #16
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	691b      	ldr	r3, [r3, #16]
 8006136:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	68da      	ldr	r2, [r3, #12]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	430a      	orrs	r2, r1
 8006144:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	689a      	ldr	r2, [r3, #8]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	691b      	ldr	r3, [r3, #16]
 800614e:	431a      	orrs	r2, r3
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	695b      	ldr	r3, [r3, #20]
 8006154:	4313      	orrs	r3, r2
 8006156:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	68db      	ldr	r3, [r3, #12]
 800615e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006162:	f023 030c 	bic.w	r3, r3, #12
 8006166:	687a      	ldr	r2, [r7, #4]
 8006168:	6812      	ldr	r2, [r2, #0]
 800616a:	68b9      	ldr	r1, [r7, #8]
 800616c:	430b      	orrs	r3, r1
 800616e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	695b      	ldr	r3, [r3, #20]
 8006176:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	699a      	ldr	r2, [r3, #24]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	430a      	orrs	r2, r1
 8006184:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a2c      	ldr	r2, [pc, #176]	; (800623c <UART_SetConfig+0x114>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d103      	bne.n	8006198 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006190:	f7fd fec8 	bl	8003f24 <HAL_RCC_GetPCLK2Freq>
 8006194:	60f8      	str	r0, [r7, #12]
 8006196:	e002      	b.n	800619e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006198:	f7fd feb0 	bl	8003efc <HAL_RCC_GetPCLK1Freq>
 800619c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800619e:	68fa      	ldr	r2, [r7, #12]
 80061a0:	4613      	mov	r3, r2
 80061a2:	009b      	lsls	r3, r3, #2
 80061a4:	4413      	add	r3, r2
 80061a6:	009a      	lsls	r2, r3, #2
 80061a8:	441a      	add	r2, r3
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	685b      	ldr	r3, [r3, #4]
 80061ae:	009b      	lsls	r3, r3, #2
 80061b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80061b4:	4a22      	ldr	r2, [pc, #136]	; (8006240 <UART_SetConfig+0x118>)
 80061b6:	fba2 2303 	umull	r2, r3, r2, r3
 80061ba:	095b      	lsrs	r3, r3, #5
 80061bc:	0119      	lsls	r1, r3, #4
 80061be:	68fa      	ldr	r2, [r7, #12]
 80061c0:	4613      	mov	r3, r2
 80061c2:	009b      	lsls	r3, r3, #2
 80061c4:	4413      	add	r3, r2
 80061c6:	009a      	lsls	r2, r3, #2
 80061c8:	441a      	add	r2, r3
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	009b      	lsls	r3, r3, #2
 80061d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80061d4:	4b1a      	ldr	r3, [pc, #104]	; (8006240 <UART_SetConfig+0x118>)
 80061d6:	fba3 0302 	umull	r0, r3, r3, r2
 80061da:	095b      	lsrs	r3, r3, #5
 80061dc:	2064      	movs	r0, #100	; 0x64
 80061de:	fb00 f303 	mul.w	r3, r0, r3
 80061e2:	1ad3      	subs	r3, r2, r3
 80061e4:	011b      	lsls	r3, r3, #4
 80061e6:	3332      	adds	r3, #50	; 0x32
 80061e8:	4a15      	ldr	r2, [pc, #84]	; (8006240 <UART_SetConfig+0x118>)
 80061ea:	fba2 2303 	umull	r2, r3, r2, r3
 80061ee:	095b      	lsrs	r3, r3, #5
 80061f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80061f4:	4419      	add	r1, r3
 80061f6:	68fa      	ldr	r2, [r7, #12]
 80061f8:	4613      	mov	r3, r2
 80061fa:	009b      	lsls	r3, r3, #2
 80061fc:	4413      	add	r3, r2
 80061fe:	009a      	lsls	r2, r3, #2
 8006200:	441a      	add	r2, r3
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	009b      	lsls	r3, r3, #2
 8006208:	fbb2 f2f3 	udiv	r2, r2, r3
 800620c:	4b0c      	ldr	r3, [pc, #48]	; (8006240 <UART_SetConfig+0x118>)
 800620e:	fba3 0302 	umull	r0, r3, r3, r2
 8006212:	095b      	lsrs	r3, r3, #5
 8006214:	2064      	movs	r0, #100	; 0x64
 8006216:	fb00 f303 	mul.w	r3, r0, r3
 800621a:	1ad3      	subs	r3, r2, r3
 800621c:	011b      	lsls	r3, r3, #4
 800621e:	3332      	adds	r3, #50	; 0x32
 8006220:	4a07      	ldr	r2, [pc, #28]	; (8006240 <UART_SetConfig+0x118>)
 8006222:	fba2 2303 	umull	r2, r3, r2, r3
 8006226:	095b      	lsrs	r3, r3, #5
 8006228:	f003 020f 	and.w	r2, r3, #15
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	440a      	add	r2, r1
 8006232:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006234:	bf00      	nop
 8006236:	3710      	adds	r7, #16
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}
 800623c:	40013800 	.word	0x40013800
 8006240:	51eb851f 	.word	0x51eb851f

08006244 <__errno>:
 8006244:	4b01      	ldr	r3, [pc, #4]	; (800624c <__errno+0x8>)
 8006246:	6818      	ldr	r0, [r3, #0]
 8006248:	4770      	bx	lr
 800624a:	bf00      	nop
 800624c:	20000034 	.word	0x20000034

08006250 <__libc_init_array>:
 8006250:	b570      	push	{r4, r5, r6, lr}
 8006252:	2600      	movs	r6, #0
 8006254:	4d0c      	ldr	r5, [pc, #48]	; (8006288 <__libc_init_array+0x38>)
 8006256:	4c0d      	ldr	r4, [pc, #52]	; (800628c <__libc_init_array+0x3c>)
 8006258:	1b64      	subs	r4, r4, r5
 800625a:	10a4      	asrs	r4, r4, #2
 800625c:	42a6      	cmp	r6, r4
 800625e:	d109      	bne.n	8006274 <__libc_init_array+0x24>
 8006260:	f004 fc70 	bl	800ab44 <_init>
 8006264:	2600      	movs	r6, #0
 8006266:	4d0a      	ldr	r5, [pc, #40]	; (8006290 <__libc_init_array+0x40>)
 8006268:	4c0a      	ldr	r4, [pc, #40]	; (8006294 <__libc_init_array+0x44>)
 800626a:	1b64      	subs	r4, r4, r5
 800626c:	10a4      	asrs	r4, r4, #2
 800626e:	42a6      	cmp	r6, r4
 8006270:	d105      	bne.n	800627e <__libc_init_array+0x2e>
 8006272:	bd70      	pop	{r4, r5, r6, pc}
 8006274:	f855 3b04 	ldr.w	r3, [r5], #4
 8006278:	4798      	blx	r3
 800627a:	3601      	adds	r6, #1
 800627c:	e7ee      	b.n	800625c <__libc_init_array+0xc>
 800627e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006282:	4798      	blx	r3
 8006284:	3601      	adds	r6, #1
 8006286:	e7f2      	b.n	800626e <__libc_init_array+0x1e>
 8006288:	0800b04c 	.word	0x0800b04c
 800628c:	0800b04c 	.word	0x0800b04c
 8006290:	0800b04c 	.word	0x0800b04c
 8006294:	0800b050 	.word	0x0800b050

08006298 <memset>:
 8006298:	4603      	mov	r3, r0
 800629a:	4402      	add	r2, r0
 800629c:	4293      	cmp	r3, r2
 800629e:	d100      	bne.n	80062a2 <memset+0xa>
 80062a0:	4770      	bx	lr
 80062a2:	f803 1b01 	strb.w	r1, [r3], #1
 80062a6:	e7f9      	b.n	800629c <memset+0x4>

080062a8 <__cvt>:
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062ae:	461f      	mov	r7, r3
 80062b0:	bfbb      	ittet	lt
 80062b2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80062b6:	461f      	movlt	r7, r3
 80062b8:	2300      	movge	r3, #0
 80062ba:	232d      	movlt	r3, #45	; 0x2d
 80062bc:	b088      	sub	sp, #32
 80062be:	4614      	mov	r4, r2
 80062c0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80062c2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80062c4:	7013      	strb	r3, [r2, #0]
 80062c6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80062c8:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80062cc:	f023 0820 	bic.w	r8, r3, #32
 80062d0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80062d4:	d005      	beq.n	80062e2 <__cvt+0x3a>
 80062d6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80062da:	d100      	bne.n	80062de <__cvt+0x36>
 80062dc:	3501      	adds	r5, #1
 80062de:	2302      	movs	r3, #2
 80062e0:	e000      	b.n	80062e4 <__cvt+0x3c>
 80062e2:	2303      	movs	r3, #3
 80062e4:	aa07      	add	r2, sp, #28
 80062e6:	9204      	str	r2, [sp, #16]
 80062e8:	aa06      	add	r2, sp, #24
 80062ea:	e9cd a202 	strd	sl, r2, [sp, #8]
 80062ee:	e9cd 3500 	strd	r3, r5, [sp]
 80062f2:	4622      	mov	r2, r4
 80062f4:	463b      	mov	r3, r7
 80062f6:	f001 fda3 	bl	8007e40 <_dtoa_r>
 80062fa:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80062fe:	4606      	mov	r6, r0
 8006300:	d102      	bne.n	8006308 <__cvt+0x60>
 8006302:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006304:	07db      	lsls	r3, r3, #31
 8006306:	d522      	bpl.n	800634e <__cvt+0xa6>
 8006308:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800630c:	eb06 0905 	add.w	r9, r6, r5
 8006310:	d110      	bne.n	8006334 <__cvt+0x8c>
 8006312:	7833      	ldrb	r3, [r6, #0]
 8006314:	2b30      	cmp	r3, #48	; 0x30
 8006316:	d10a      	bne.n	800632e <__cvt+0x86>
 8006318:	2200      	movs	r2, #0
 800631a:	2300      	movs	r3, #0
 800631c:	4620      	mov	r0, r4
 800631e:	4639      	mov	r1, r7
 8006320:	f7fa fbae 	bl	8000a80 <__aeabi_dcmpeq>
 8006324:	b918      	cbnz	r0, 800632e <__cvt+0x86>
 8006326:	f1c5 0501 	rsb	r5, r5, #1
 800632a:	f8ca 5000 	str.w	r5, [sl]
 800632e:	f8da 3000 	ldr.w	r3, [sl]
 8006332:	4499      	add	r9, r3
 8006334:	2200      	movs	r2, #0
 8006336:	2300      	movs	r3, #0
 8006338:	4620      	mov	r0, r4
 800633a:	4639      	mov	r1, r7
 800633c:	f7fa fba0 	bl	8000a80 <__aeabi_dcmpeq>
 8006340:	b108      	cbz	r0, 8006346 <__cvt+0x9e>
 8006342:	f8cd 901c 	str.w	r9, [sp, #28]
 8006346:	2230      	movs	r2, #48	; 0x30
 8006348:	9b07      	ldr	r3, [sp, #28]
 800634a:	454b      	cmp	r3, r9
 800634c:	d307      	bcc.n	800635e <__cvt+0xb6>
 800634e:	4630      	mov	r0, r6
 8006350:	9b07      	ldr	r3, [sp, #28]
 8006352:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006354:	1b9b      	subs	r3, r3, r6
 8006356:	6013      	str	r3, [r2, #0]
 8006358:	b008      	add	sp, #32
 800635a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800635e:	1c59      	adds	r1, r3, #1
 8006360:	9107      	str	r1, [sp, #28]
 8006362:	701a      	strb	r2, [r3, #0]
 8006364:	e7f0      	b.n	8006348 <__cvt+0xa0>

08006366 <__exponent>:
 8006366:	4603      	mov	r3, r0
 8006368:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800636a:	2900      	cmp	r1, #0
 800636c:	f803 2b02 	strb.w	r2, [r3], #2
 8006370:	bfb6      	itet	lt
 8006372:	222d      	movlt	r2, #45	; 0x2d
 8006374:	222b      	movge	r2, #43	; 0x2b
 8006376:	4249      	neglt	r1, r1
 8006378:	2909      	cmp	r1, #9
 800637a:	7042      	strb	r2, [r0, #1]
 800637c:	dd2b      	ble.n	80063d6 <__exponent+0x70>
 800637e:	f10d 0407 	add.w	r4, sp, #7
 8006382:	46a4      	mov	ip, r4
 8006384:	270a      	movs	r7, #10
 8006386:	fb91 f6f7 	sdiv	r6, r1, r7
 800638a:	460a      	mov	r2, r1
 800638c:	46a6      	mov	lr, r4
 800638e:	fb07 1516 	mls	r5, r7, r6, r1
 8006392:	2a63      	cmp	r2, #99	; 0x63
 8006394:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8006398:	4631      	mov	r1, r6
 800639a:	f104 34ff 	add.w	r4, r4, #4294967295
 800639e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80063a2:	dcf0      	bgt.n	8006386 <__exponent+0x20>
 80063a4:	3130      	adds	r1, #48	; 0x30
 80063a6:	f1ae 0502 	sub.w	r5, lr, #2
 80063aa:	f804 1c01 	strb.w	r1, [r4, #-1]
 80063ae:	4629      	mov	r1, r5
 80063b0:	1c44      	adds	r4, r0, #1
 80063b2:	4561      	cmp	r1, ip
 80063b4:	d30a      	bcc.n	80063cc <__exponent+0x66>
 80063b6:	f10d 0209 	add.w	r2, sp, #9
 80063ba:	eba2 020e 	sub.w	r2, r2, lr
 80063be:	4565      	cmp	r5, ip
 80063c0:	bf88      	it	hi
 80063c2:	2200      	movhi	r2, #0
 80063c4:	4413      	add	r3, r2
 80063c6:	1a18      	subs	r0, r3, r0
 80063c8:	b003      	add	sp, #12
 80063ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063cc:	f811 2b01 	ldrb.w	r2, [r1], #1
 80063d0:	f804 2f01 	strb.w	r2, [r4, #1]!
 80063d4:	e7ed      	b.n	80063b2 <__exponent+0x4c>
 80063d6:	2330      	movs	r3, #48	; 0x30
 80063d8:	3130      	adds	r1, #48	; 0x30
 80063da:	7083      	strb	r3, [r0, #2]
 80063dc:	70c1      	strb	r1, [r0, #3]
 80063de:	1d03      	adds	r3, r0, #4
 80063e0:	e7f1      	b.n	80063c6 <__exponent+0x60>
	...

080063e4 <_printf_float>:
 80063e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063e8:	b091      	sub	sp, #68	; 0x44
 80063ea:	460c      	mov	r4, r1
 80063ec:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80063f0:	4616      	mov	r6, r2
 80063f2:	461f      	mov	r7, r3
 80063f4:	4605      	mov	r5, r0
 80063f6:	f002 fe77 	bl	80090e8 <_localeconv_r>
 80063fa:	6803      	ldr	r3, [r0, #0]
 80063fc:	4618      	mov	r0, r3
 80063fe:	9309      	str	r3, [sp, #36]	; 0x24
 8006400:	f7f9 ff12 	bl	8000228 <strlen>
 8006404:	2300      	movs	r3, #0
 8006406:	930e      	str	r3, [sp, #56]	; 0x38
 8006408:	f8d8 3000 	ldr.w	r3, [r8]
 800640c:	900a      	str	r0, [sp, #40]	; 0x28
 800640e:	3307      	adds	r3, #7
 8006410:	f023 0307 	bic.w	r3, r3, #7
 8006414:	f103 0208 	add.w	r2, r3, #8
 8006418:	f894 9018 	ldrb.w	r9, [r4, #24]
 800641c:	f8d4 b000 	ldr.w	fp, [r4]
 8006420:	f8c8 2000 	str.w	r2, [r8]
 8006424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006428:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800642c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8006430:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8006434:	930b      	str	r3, [sp, #44]	; 0x2c
 8006436:	f04f 32ff 	mov.w	r2, #4294967295
 800643a:	4640      	mov	r0, r8
 800643c:	4b9c      	ldr	r3, [pc, #624]	; (80066b0 <_printf_float+0x2cc>)
 800643e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006440:	f7fa fb50 	bl	8000ae4 <__aeabi_dcmpun>
 8006444:	bb70      	cbnz	r0, 80064a4 <_printf_float+0xc0>
 8006446:	f04f 32ff 	mov.w	r2, #4294967295
 800644a:	4640      	mov	r0, r8
 800644c:	4b98      	ldr	r3, [pc, #608]	; (80066b0 <_printf_float+0x2cc>)
 800644e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006450:	f7fa fb2a 	bl	8000aa8 <__aeabi_dcmple>
 8006454:	bb30      	cbnz	r0, 80064a4 <_printf_float+0xc0>
 8006456:	2200      	movs	r2, #0
 8006458:	2300      	movs	r3, #0
 800645a:	4640      	mov	r0, r8
 800645c:	4651      	mov	r1, sl
 800645e:	f7fa fb19 	bl	8000a94 <__aeabi_dcmplt>
 8006462:	b110      	cbz	r0, 800646a <_printf_float+0x86>
 8006464:	232d      	movs	r3, #45	; 0x2d
 8006466:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800646a:	4b92      	ldr	r3, [pc, #584]	; (80066b4 <_printf_float+0x2d0>)
 800646c:	4892      	ldr	r0, [pc, #584]	; (80066b8 <_printf_float+0x2d4>)
 800646e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006472:	bf94      	ite	ls
 8006474:	4698      	movls	r8, r3
 8006476:	4680      	movhi	r8, r0
 8006478:	2303      	movs	r3, #3
 800647a:	f04f 0a00 	mov.w	sl, #0
 800647e:	6123      	str	r3, [r4, #16]
 8006480:	f02b 0304 	bic.w	r3, fp, #4
 8006484:	6023      	str	r3, [r4, #0]
 8006486:	4633      	mov	r3, r6
 8006488:	4621      	mov	r1, r4
 800648a:	4628      	mov	r0, r5
 800648c:	9700      	str	r7, [sp, #0]
 800648e:	aa0f      	add	r2, sp, #60	; 0x3c
 8006490:	f000 f9d4 	bl	800683c <_printf_common>
 8006494:	3001      	adds	r0, #1
 8006496:	f040 8090 	bne.w	80065ba <_printf_float+0x1d6>
 800649a:	f04f 30ff 	mov.w	r0, #4294967295
 800649e:	b011      	add	sp, #68	; 0x44
 80064a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064a4:	4642      	mov	r2, r8
 80064a6:	4653      	mov	r3, sl
 80064a8:	4640      	mov	r0, r8
 80064aa:	4651      	mov	r1, sl
 80064ac:	f7fa fb1a 	bl	8000ae4 <__aeabi_dcmpun>
 80064b0:	b148      	cbz	r0, 80064c6 <_printf_float+0xe2>
 80064b2:	f1ba 0f00 	cmp.w	sl, #0
 80064b6:	bfb8      	it	lt
 80064b8:	232d      	movlt	r3, #45	; 0x2d
 80064ba:	4880      	ldr	r0, [pc, #512]	; (80066bc <_printf_float+0x2d8>)
 80064bc:	bfb8      	it	lt
 80064be:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80064c2:	4b7f      	ldr	r3, [pc, #508]	; (80066c0 <_printf_float+0x2dc>)
 80064c4:	e7d3      	b.n	800646e <_printf_float+0x8a>
 80064c6:	6863      	ldr	r3, [r4, #4]
 80064c8:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80064cc:	1c5a      	adds	r2, r3, #1
 80064ce:	d142      	bne.n	8006556 <_printf_float+0x172>
 80064d0:	2306      	movs	r3, #6
 80064d2:	6063      	str	r3, [r4, #4]
 80064d4:	2200      	movs	r2, #0
 80064d6:	9206      	str	r2, [sp, #24]
 80064d8:	aa0e      	add	r2, sp, #56	; 0x38
 80064da:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80064de:	aa0d      	add	r2, sp, #52	; 0x34
 80064e0:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80064e4:	9203      	str	r2, [sp, #12]
 80064e6:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80064ea:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80064ee:	6023      	str	r3, [r4, #0]
 80064f0:	6863      	ldr	r3, [r4, #4]
 80064f2:	4642      	mov	r2, r8
 80064f4:	9300      	str	r3, [sp, #0]
 80064f6:	4628      	mov	r0, r5
 80064f8:	4653      	mov	r3, sl
 80064fa:	910b      	str	r1, [sp, #44]	; 0x2c
 80064fc:	f7ff fed4 	bl	80062a8 <__cvt>
 8006500:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006502:	4680      	mov	r8, r0
 8006504:	2947      	cmp	r1, #71	; 0x47
 8006506:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006508:	d108      	bne.n	800651c <_printf_float+0x138>
 800650a:	1cc8      	adds	r0, r1, #3
 800650c:	db02      	blt.n	8006514 <_printf_float+0x130>
 800650e:	6863      	ldr	r3, [r4, #4]
 8006510:	4299      	cmp	r1, r3
 8006512:	dd40      	ble.n	8006596 <_printf_float+0x1b2>
 8006514:	f1a9 0902 	sub.w	r9, r9, #2
 8006518:	fa5f f989 	uxtb.w	r9, r9
 800651c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006520:	d81f      	bhi.n	8006562 <_printf_float+0x17e>
 8006522:	464a      	mov	r2, r9
 8006524:	3901      	subs	r1, #1
 8006526:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800652a:	910d      	str	r1, [sp, #52]	; 0x34
 800652c:	f7ff ff1b 	bl	8006366 <__exponent>
 8006530:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006532:	4682      	mov	sl, r0
 8006534:	1813      	adds	r3, r2, r0
 8006536:	2a01      	cmp	r2, #1
 8006538:	6123      	str	r3, [r4, #16]
 800653a:	dc02      	bgt.n	8006542 <_printf_float+0x15e>
 800653c:	6822      	ldr	r2, [r4, #0]
 800653e:	07d2      	lsls	r2, r2, #31
 8006540:	d501      	bpl.n	8006546 <_printf_float+0x162>
 8006542:	3301      	adds	r3, #1
 8006544:	6123      	str	r3, [r4, #16]
 8006546:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800654a:	2b00      	cmp	r3, #0
 800654c:	d09b      	beq.n	8006486 <_printf_float+0xa2>
 800654e:	232d      	movs	r3, #45	; 0x2d
 8006550:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006554:	e797      	b.n	8006486 <_printf_float+0xa2>
 8006556:	2947      	cmp	r1, #71	; 0x47
 8006558:	d1bc      	bne.n	80064d4 <_printf_float+0xf0>
 800655a:	2b00      	cmp	r3, #0
 800655c:	d1ba      	bne.n	80064d4 <_printf_float+0xf0>
 800655e:	2301      	movs	r3, #1
 8006560:	e7b7      	b.n	80064d2 <_printf_float+0xee>
 8006562:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8006566:	d118      	bne.n	800659a <_printf_float+0x1b6>
 8006568:	2900      	cmp	r1, #0
 800656a:	6863      	ldr	r3, [r4, #4]
 800656c:	dd0b      	ble.n	8006586 <_printf_float+0x1a2>
 800656e:	6121      	str	r1, [r4, #16]
 8006570:	b913      	cbnz	r3, 8006578 <_printf_float+0x194>
 8006572:	6822      	ldr	r2, [r4, #0]
 8006574:	07d0      	lsls	r0, r2, #31
 8006576:	d502      	bpl.n	800657e <_printf_float+0x19a>
 8006578:	3301      	adds	r3, #1
 800657a:	440b      	add	r3, r1
 800657c:	6123      	str	r3, [r4, #16]
 800657e:	f04f 0a00 	mov.w	sl, #0
 8006582:	65a1      	str	r1, [r4, #88]	; 0x58
 8006584:	e7df      	b.n	8006546 <_printf_float+0x162>
 8006586:	b913      	cbnz	r3, 800658e <_printf_float+0x1aa>
 8006588:	6822      	ldr	r2, [r4, #0]
 800658a:	07d2      	lsls	r2, r2, #31
 800658c:	d501      	bpl.n	8006592 <_printf_float+0x1ae>
 800658e:	3302      	adds	r3, #2
 8006590:	e7f4      	b.n	800657c <_printf_float+0x198>
 8006592:	2301      	movs	r3, #1
 8006594:	e7f2      	b.n	800657c <_printf_float+0x198>
 8006596:	f04f 0967 	mov.w	r9, #103	; 0x67
 800659a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800659c:	4299      	cmp	r1, r3
 800659e:	db05      	blt.n	80065ac <_printf_float+0x1c8>
 80065a0:	6823      	ldr	r3, [r4, #0]
 80065a2:	6121      	str	r1, [r4, #16]
 80065a4:	07d8      	lsls	r0, r3, #31
 80065a6:	d5ea      	bpl.n	800657e <_printf_float+0x19a>
 80065a8:	1c4b      	adds	r3, r1, #1
 80065aa:	e7e7      	b.n	800657c <_printf_float+0x198>
 80065ac:	2900      	cmp	r1, #0
 80065ae:	bfcc      	ite	gt
 80065b0:	2201      	movgt	r2, #1
 80065b2:	f1c1 0202 	rsble	r2, r1, #2
 80065b6:	4413      	add	r3, r2
 80065b8:	e7e0      	b.n	800657c <_printf_float+0x198>
 80065ba:	6823      	ldr	r3, [r4, #0]
 80065bc:	055a      	lsls	r2, r3, #21
 80065be:	d407      	bmi.n	80065d0 <_printf_float+0x1ec>
 80065c0:	6923      	ldr	r3, [r4, #16]
 80065c2:	4642      	mov	r2, r8
 80065c4:	4631      	mov	r1, r6
 80065c6:	4628      	mov	r0, r5
 80065c8:	47b8      	blx	r7
 80065ca:	3001      	adds	r0, #1
 80065cc:	d12b      	bne.n	8006626 <_printf_float+0x242>
 80065ce:	e764      	b.n	800649a <_printf_float+0xb6>
 80065d0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80065d4:	f240 80dd 	bls.w	8006792 <_printf_float+0x3ae>
 80065d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80065dc:	2200      	movs	r2, #0
 80065de:	2300      	movs	r3, #0
 80065e0:	f7fa fa4e 	bl	8000a80 <__aeabi_dcmpeq>
 80065e4:	2800      	cmp	r0, #0
 80065e6:	d033      	beq.n	8006650 <_printf_float+0x26c>
 80065e8:	2301      	movs	r3, #1
 80065ea:	4631      	mov	r1, r6
 80065ec:	4628      	mov	r0, r5
 80065ee:	4a35      	ldr	r2, [pc, #212]	; (80066c4 <_printf_float+0x2e0>)
 80065f0:	47b8      	blx	r7
 80065f2:	3001      	adds	r0, #1
 80065f4:	f43f af51 	beq.w	800649a <_printf_float+0xb6>
 80065f8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80065fc:	429a      	cmp	r2, r3
 80065fe:	db02      	blt.n	8006606 <_printf_float+0x222>
 8006600:	6823      	ldr	r3, [r4, #0]
 8006602:	07d8      	lsls	r0, r3, #31
 8006604:	d50f      	bpl.n	8006626 <_printf_float+0x242>
 8006606:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800660a:	4631      	mov	r1, r6
 800660c:	4628      	mov	r0, r5
 800660e:	47b8      	blx	r7
 8006610:	3001      	adds	r0, #1
 8006612:	f43f af42 	beq.w	800649a <_printf_float+0xb6>
 8006616:	f04f 0800 	mov.w	r8, #0
 800661a:	f104 091a 	add.w	r9, r4, #26
 800661e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006620:	3b01      	subs	r3, #1
 8006622:	4543      	cmp	r3, r8
 8006624:	dc09      	bgt.n	800663a <_printf_float+0x256>
 8006626:	6823      	ldr	r3, [r4, #0]
 8006628:	079b      	lsls	r3, r3, #30
 800662a:	f100 8102 	bmi.w	8006832 <_printf_float+0x44e>
 800662e:	68e0      	ldr	r0, [r4, #12]
 8006630:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006632:	4298      	cmp	r0, r3
 8006634:	bfb8      	it	lt
 8006636:	4618      	movlt	r0, r3
 8006638:	e731      	b.n	800649e <_printf_float+0xba>
 800663a:	2301      	movs	r3, #1
 800663c:	464a      	mov	r2, r9
 800663e:	4631      	mov	r1, r6
 8006640:	4628      	mov	r0, r5
 8006642:	47b8      	blx	r7
 8006644:	3001      	adds	r0, #1
 8006646:	f43f af28 	beq.w	800649a <_printf_float+0xb6>
 800664a:	f108 0801 	add.w	r8, r8, #1
 800664e:	e7e6      	b.n	800661e <_printf_float+0x23a>
 8006650:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006652:	2b00      	cmp	r3, #0
 8006654:	dc38      	bgt.n	80066c8 <_printf_float+0x2e4>
 8006656:	2301      	movs	r3, #1
 8006658:	4631      	mov	r1, r6
 800665a:	4628      	mov	r0, r5
 800665c:	4a19      	ldr	r2, [pc, #100]	; (80066c4 <_printf_float+0x2e0>)
 800665e:	47b8      	blx	r7
 8006660:	3001      	adds	r0, #1
 8006662:	f43f af1a 	beq.w	800649a <_printf_float+0xb6>
 8006666:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800666a:	4313      	orrs	r3, r2
 800666c:	d102      	bne.n	8006674 <_printf_float+0x290>
 800666e:	6823      	ldr	r3, [r4, #0]
 8006670:	07d9      	lsls	r1, r3, #31
 8006672:	d5d8      	bpl.n	8006626 <_printf_float+0x242>
 8006674:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006678:	4631      	mov	r1, r6
 800667a:	4628      	mov	r0, r5
 800667c:	47b8      	blx	r7
 800667e:	3001      	adds	r0, #1
 8006680:	f43f af0b 	beq.w	800649a <_printf_float+0xb6>
 8006684:	f04f 0900 	mov.w	r9, #0
 8006688:	f104 0a1a 	add.w	sl, r4, #26
 800668c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800668e:	425b      	negs	r3, r3
 8006690:	454b      	cmp	r3, r9
 8006692:	dc01      	bgt.n	8006698 <_printf_float+0x2b4>
 8006694:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006696:	e794      	b.n	80065c2 <_printf_float+0x1de>
 8006698:	2301      	movs	r3, #1
 800669a:	4652      	mov	r2, sl
 800669c:	4631      	mov	r1, r6
 800669e:	4628      	mov	r0, r5
 80066a0:	47b8      	blx	r7
 80066a2:	3001      	adds	r0, #1
 80066a4:	f43f aef9 	beq.w	800649a <_printf_float+0xb6>
 80066a8:	f109 0901 	add.w	r9, r9, #1
 80066ac:	e7ee      	b.n	800668c <_printf_float+0x2a8>
 80066ae:	bf00      	nop
 80066b0:	7fefffff 	.word	0x7fefffff
 80066b4:	0800abac 	.word	0x0800abac
 80066b8:	0800abb0 	.word	0x0800abb0
 80066bc:	0800abb8 	.word	0x0800abb8
 80066c0:	0800abb4 	.word	0x0800abb4
 80066c4:	0800abbc 	.word	0x0800abbc
 80066c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80066ca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80066cc:	429a      	cmp	r2, r3
 80066ce:	bfa8      	it	ge
 80066d0:	461a      	movge	r2, r3
 80066d2:	2a00      	cmp	r2, #0
 80066d4:	4691      	mov	r9, r2
 80066d6:	dc37      	bgt.n	8006748 <_printf_float+0x364>
 80066d8:	f04f 0b00 	mov.w	fp, #0
 80066dc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80066e0:	f104 021a 	add.w	r2, r4, #26
 80066e4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80066e8:	ebaa 0309 	sub.w	r3, sl, r9
 80066ec:	455b      	cmp	r3, fp
 80066ee:	dc33      	bgt.n	8006758 <_printf_float+0x374>
 80066f0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80066f4:	429a      	cmp	r2, r3
 80066f6:	db3b      	blt.n	8006770 <_printf_float+0x38c>
 80066f8:	6823      	ldr	r3, [r4, #0]
 80066fa:	07da      	lsls	r2, r3, #31
 80066fc:	d438      	bmi.n	8006770 <_printf_float+0x38c>
 80066fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006700:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006702:	eba3 020a 	sub.w	r2, r3, sl
 8006706:	eba3 0901 	sub.w	r9, r3, r1
 800670a:	4591      	cmp	r9, r2
 800670c:	bfa8      	it	ge
 800670e:	4691      	movge	r9, r2
 8006710:	f1b9 0f00 	cmp.w	r9, #0
 8006714:	dc34      	bgt.n	8006780 <_printf_float+0x39c>
 8006716:	f04f 0800 	mov.w	r8, #0
 800671a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800671e:	f104 0a1a 	add.w	sl, r4, #26
 8006722:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006726:	1a9b      	subs	r3, r3, r2
 8006728:	eba3 0309 	sub.w	r3, r3, r9
 800672c:	4543      	cmp	r3, r8
 800672e:	f77f af7a 	ble.w	8006626 <_printf_float+0x242>
 8006732:	2301      	movs	r3, #1
 8006734:	4652      	mov	r2, sl
 8006736:	4631      	mov	r1, r6
 8006738:	4628      	mov	r0, r5
 800673a:	47b8      	blx	r7
 800673c:	3001      	adds	r0, #1
 800673e:	f43f aeac 	beq.w	800649a <_printf_float+0xb6>
 8006742:	f108 0801 	add.w	r8, r8, #1
 8006746:	e7ec      	b.n	8006722 <_printf_float+0x33e>
 8006748:	4613      	mov	r3, r2
 800674a:	4631      	mov	r1, r6
 800674c:	4642      	mov	r2, r8
 800674e:	4628      	mov	r0, r5
 8006750:	47b8      	blx	r7
 8006752:	3001      	adds	r0, #1
 8006754:	d1c0      	bne.n	80066d8 <_printf_float+0x2f4>
 8006756:	e6a0      	b.n	800649a <_printf_float+0xb6>
 8006758:	2301      	movs	r3, #1
 800675a:	4631      	mov	r1, r6
 800675c:	4628      	mov	r0, r5
 800675e:	920b      	str	r2, [sp, #44]	; 0x2c
 8006760:	47b8      	blx	r7
 8006762:	3001      	adds	r0, #1
 8006764:	f43f ae99 	beq.w	800649a <_printf_float+0xb6>
 8006768:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800676a:	f10b 0b01 	add.w	fp, fp, #1
 800676e:	e7b9      	b.n	80066e4 <_printf_float+0x300>
 8006770:	4631      	mov	r1, r6
 8006772:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006776:	4628      	mov	r0, r5
 8006778:	47b8      	blx	r7
 800677a:	3001      	adds	r0, #1
 800677c:	d1bf      	bne.n	80066fe <_printf_float+0x31a>
 800677e:	e68c      	b.n	800649a <_printf_float+0xb6>
 8006780:	464b      	mov	r3, r9
 8006782:	4631      	mov	r1, r6
 8006784:	4628      	mov	r0, r5
 8006786:	eb08 020a 	add.w	r2, r8, sl
 800678a:	47b8      	blx	r7
 800678c:	3001      	adds	r0, #1
 800678e:	d1c2      	bne.n	8006716 <_printf_float+0x332>
 8006790:	e683      	b.n	800649a <_printf_float+0xb6>
 8006792:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006794:	2a01      	cmp	r2, #1
 8006796:	dc01      	bgt.n	800679c <_printf_float+0x3b8>
 8006798:	07db      	lsls	r3, r3, #31
 800679a:	d537      	bpl.n	800680c <_printf_float+0x428>
 800679c:	2301      	movs	r3, #1
 800679e:	4642      	mov	r2, r8
 80067a0:	4631      	mov	r1, r6
 80067a2:	4628      	mov	r0, r5
 80067a4:	47b8      	blx	r7
 80067a6:	3001      	adds	r0, #1
 80067a8:	f43f ae77 	beq.w	800649a <_printf_float+0xb6>
 80067ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80067b0:	4631      	mov	r1, r6
 80067b2:	4628      	mov	r0, r5
 80067b4:	47b8      	blx	r7
 80067b6:	3001      	adds	r0, #1
 80067b8:	f43f ae6f 	beq.w	800649a <_printf_float+0xb6>
 80067bc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80067c0:	2200      	movs	r2, #0
 80067c2:	2300      	movs	r3, #0
 80067c4:	f7fa f95c 	bl	8000a80 <__aeabi_dcmpeq>
 80067c8:	b9d8      	cbnz	r0, 8006802 <_printf_float+0x41e>
 80067ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80067cc:	f108 0201 	add.w	r2, r8, #1
 80067d0:	3b01      	subs	r3, #1
 80067d2:	4631      	mov	r1, r6
 80067d4:	4628      	mov	r0, r5
 80067d6:	47b8      	blx	r7
 80067d8:	3001      	adds	r0, #1
 80067da:	d10e      	bne.n	80067fa <_printf_float+0x416>
 80067dc:	e65d      	b.n	800649a <_printf_float+0xb6>
 80067de:	2301      	movs	r3, #1
 80067e0:	464a      	mov	r2, r9
 80067e2:	4631      	mov	r1, r6
 80067e4:	4628      	mov	r0, r5
 80067e6:	47b8      	blx	r7
 80067e8:	3001      	adds	r0, #1
 80067ea:	f43f ae56 	beq.w	800649a <_printf_float+0xb6>
 80067ee:	f108 0801 	add.w	r8, r8, #1
 80067f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80067f4:	3b01      	subs	r3, #1
 80067f6:	4543      	cmp	r3, r8
 80067f8:	dcf1      	bgt.n	80067de <_printf_float+0x3fa>
 80067fa:	4653      	mov	r3, sl
 80067fc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006800:	e6e0      	b.n	80065c4 <_printf_float+0x1e0>
 8006802:	f04f 0800 	mov.w	r8, #0
 8006806:	f104 091a 	add.w	r9, r4, #26
 800680a:	e7f2      	b.n	80067f2 <_printf_float+0x40e>
 800680c:	2301      	movs	r3, #1
 800680e:	4642      	mov	r2, r8
 8006810:	e7df      	b.n	80067d2 <_printf_float+0x3ee>
 8006812:	2301      	movs	r3, #1
 8006814:	464a      	mov	r2, r9
 8006816:	4631      	mov	r1, r6
 8006818:	4628      	mov	r0, r5
 800681a:	47b8      	blx	r7
 800681c:	3001      	adds	r0, #1
 800681e:	f43f ae3c 	beq.w	800649a <_printf_float+0xb6>
 8006822:	f108 0801 	add.w	r8, r8, #1
 8006826:	68e3      	ldr	r3, [r4, #12]
 8006828:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800682a:	1a5b      	subs	r3, r3, r1
 800682c:	4543      	cmp	r3, r8
 800682e:	dcf0      	bgt.n	8006812 <_printf_float+0x42e>
 8006830:	e6fd      	b.n	800662e <_printf_float+0x24a>
 8006832:	f04f 0800 	mov.w	r8, #0
 8006836:	f104 0919 	add.w	r9, r4, #25
 800683a:	e7f4      	b.n	8006826 <_printf_float+0x442>

0800683c <_printf_common>:
 800683c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006840:	4616      	mov	r6, r2
 8006842:	4699      	mov	r9, r3
 8006844:	688a      	ldr	r2, [r1, #8]
 8006846:	690b      	ldr	r3, [r1, #16]
 8006848:	4607      	mov	r7, r0
 800684a:	4293      	cmp	r3, r2
 800684c:	bfb8      	it	lt
 800684e:	4613      	movlt	r3, r2
 8006850:	6033      	str	r3, [r6, #0]
 8006852:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006856:	460c      	mov	r4, r1
 8006858:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800685c:	b10a      	cbz	r2, 8006862 <_printf_common+0x26>
 800685e:	3301      	adds	r3, #1
 8006860:	6033      	str	r3, [r6, #0]
 8006862:	6823      	ldr	r3, [r4, #0]
 8006864:	0699      	lsls	r1, r3, #26
 8006866:	bf42      	ittt	mi
 8006868:	6833      	ldrmi	r3, [r6, #0]
 800686a:	3302      	addmi	r3, #2
 800686c:	6033      	strmi	r3, [r6, #0]
 800686e:	6825      	ldr	r5, [r4, #0]
 8006870:	f015 0506 	ands.w	r5, r5, #6
 8006874:	d106      	bne.n	8006884 <_printf_common+0x48>
 8006876:	f104 0a19 	add.w	sl, r4, #25
 800687a:	68e3      	ldr	r3, [r4, #12]
 800687c:	6832      	ldr	r2, [r6, #0]
 800687e:	1a9b      	subs	r3, r3, r2
 8006880:	42ab      	cmp	r3, r5
 8006882:	dc28      	bgt.n	80068d6 <_printf_common+0x9a>
 8006884:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006888:	1e13      	subs	r3, r2, #0
 800688a:	6822      	ldr	r2, [r4, #0]
 800688c:	bf18      	it	ne
 800688e:	2301      	movne	r3, #1
 8006890:	0692      	lsls	r2, r2, #26
 8006892:	d42d      	bmi.n	80068f0 <_printf_common+0xb4>
 8006894:	4649      	mov	r1, r9
 8006896:	4638      	mov	r0, r7
 8006898:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800689c:	47c0      	blx	r8
 800689e:	3001      	adds	r0, #1
 80068a0:	d020      	beq.n	80068e4 <_printf_common+0xa8>
 80068a2:	6823      	ldr	r3, [r4, #0]
 80068a4:	68e5      	ldr	r5, [r4, #12]
 80068a6:	f003 0306 	and.w	r3, r3, #6
 80068aa:	2b04      	cmp	r3, #4
 80068ac:	bf18      	it	ne
 80068ae:	2500      	movne	r5, #0
 80068b0:	6832      	ldr	r2, [r6, #0]
 80068b2:	f04f 0600 	mov.w	r6, #0
 80068b6:	68a3      	ldr	r3, [r4, #8]
 80068b8:	bf08      	it	eq
 80068ba:	1aad      	subeq	r5, r5, r2
 80068bc:	6922      	ldr	r2, [r4, #16]
 80068be:	bf08      	it	eq
 80068c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80068c4:	4293      	cmp	r3, r2
 80068c6:	bfc4      	itt	gt
 80068c8:	1a9b      	subgt	r3, r3, r2
 80068ca:	18ed      	addgt	r5, r5, r3
 80068cc:	341a      	adds	r4, #26
 80068ce:	42b5      	cmp	r5, r6
 80068d0:	d11a      	bne.n	8006908 <_printf_common+0xcc>
 80068d2:	2000      	movs	r0, #0
 80068d4:	e008      	b.n	80068e8 <_printf_common+0xac>
 80068d6:	2301      	movs	r3, #1
 80068d8:	4652      	mov	r2, sl
 80068da:	4649      	mov	r1, r9
 80068dc:	4638      	mov	r0, r7
 80068de:	47c0      	blx	r8
 80068e0:	3001      	adds	r0, #1
 80068e2:	d103      	bne.n	80068ec <_printf_common+0xb0>
 80068e4:	f04f 30ff 	mov.w	r0, #4294967295
 80068e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068ec:	3501      	adds	r5, #1
 80068ee:	e7c4      	b.n	800687a <_printf_common+0x3e>
 80068f0:	2030      	movs	r0, #48	; 0x30
 80068f2:	18e1      	adds	r1, r4, r3
 80068f4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80068f8:	1c5a      	adds	r2, r3, #1
 80068fa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80068fe:	4422      	add	r2, r4
 8006900:	3302      	adds	r3, #2
 8006902:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006906:	e7c5      	b.n	8006894 <_printf_common+0x58>
 8006908:	2301      	movs	r3, #1
 800690a:	4622      	mov	r2, r4
 800690c:	4649      	mov	r1, r9
 800690e:	4638      	mov	r0, r7
 8006910:	47c0      	blx	r8
 8006912:	3001      	adds	r0, #1
 8006914:	d0e6      	beq.n	80068e4 <_printf_common+0xa8>
 8006916:	3601      	adds	r6, #1
 8006918:	e7d9      	b.n	80068ce <_printf_common+0x92>
	...

0800691c <_printf_i>:
 800691c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006920:	7e0f      	ldrb	r7, [r1, #24]
 8006922:	4691      	mov	r9, r2
 8006924:	2f78      	cmp	r7, #120	; 0x78
 8006926:	4680      	mov	r8, r0
 8006928:	460c      	mov	r4, r1
 800692a:	469a      	mov	sl, r3
 800692c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800692e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006932:	d807      	bhi.n	8006944 <_printf_i+0x28>
 8006934:	2f62      	cmp	r7, #98	; 0x62
 8006936:	d80a      	bhi.n	800694e <_printf_i+0x32>
 8006938:	2f00      	cmp	r7, #0
 800693a:	f000 80d9 	beq.w	8006af0 <_printf_i+0x1d4>
 800693e:	2f58      	cmp	r7, #88	; 0x58
 8006940:	f000 80a4 	beq.w	8006a8c <_printf_i+0x170>
 8006944:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006948:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800694c:	e03a      	b.n	80069c4 <_printf_i+0xa8>
 800694e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006952:	2b15      	cmp	r3, #21
 8006954:	d8f6      	bhi.n	8006944 <_printf_i+0x28>
 8006956:	a101      	add	r1, pc, #4	; (adr r1, 800695c <_printf_i+0x40>)
 8006958:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800695c:	080069b5 	.word	0x080069b5
 8006960:	080069c9 	.word	0x080069c9
 8006964:	08006945 	.word	0x08006945
 8006968:	08006945 	.word	0x08006945
 800696c:	08006945 	.word	0x08006945
 8006970:	08006945 	.word	0x08006945
 8006974:	080069c9 	.word	0x080069c9
 8006978:	08006945 	.word	0x08006945
 800697c:	08006945 	.word	0x08006945
 8006980:	08006945 	.word	0x08006945
 8006984:	08006945 	.word	0x08006945
 8006988:	08006ad7 	.word	0x08006ad7
 800698c:	080069f9 	.word	0x080069f9
 8006990:	08006ab9 	.word	0x08006ab9
 8006994:	08006945 	.word	0x08006945
 8006998:	08006945 	.word	0x08006945
 800699c:	08006af9 	.word	0x08006af9
 80069a0:	08006945 	.word	0x08006945
 80069a4:	080069f9 	.word	0x080069f9
 80069a8:	08006945 	.word	0x08006945
 80069ac:	08006945 	.word	0x08006945
 80069b0:	08006ac1 	.word	0x08006ac1
 80069b4:	682b      	ldr	r3, [r5, #0]
 80069b6:	1d1a      	adds	r2, r3, #4
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	602a      	str	r2, [r5, #0]
 80069bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80069c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80069c4:	2301      	movs	r3, #1
 80069c6:	e0a4      	b.n	8006b12 <_printf_i+0x1f6>
 80069c8:	6820      	ldr	r0, [r4, #0]
 80069ca:	6829      	ldr	r1, [r5, #0]
 80069cc:	0606      	lsls	r6, r0, #24
 80069ce:	f101 0304 	add.w	r3, r1, #4
 80069d2:	d50a      	bpl.n	80069ea <_printf_i+0xce>
 80069d4:	680e      	ldr	r6, [r1, #0]
 80069d6:	602b      	str	r3, [r5, #0]
 80069d8:	2e00      	cmp	r6, #0
 80069da:	da03      	bge.n	80069e4 <_printf_i+0xc8>
 80069dc:	232d      	movs	r3, #45	; 0x2d
 80069de:	4276      	negs	r6, r6
 80069e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069e4:	230a      	movs	r3, #10
 80069e6:	485e      	ldr	r0, [pc, #376]	; (8006b60 <_printf_i+0x244>)
 80069e8:	e019      	b.n	8006a1e <_printf_i+0x102>
 80069ea:	680e      	ldr	r6, [r1, #0]
 80069ec:	f010 0f40 	tst.w	r0, #64	; 0x40
 80069f0:	602b      	str	r3, [r5, #0]
 80069f2:	bf18      	it	ne
 80069f4:	b236      	sxthne	r6, r6
 80069f6:	e7ef      	b.n	80069d8 <_printf_i+0xbc>
 80069f8:	682b      	ldr	r3, [r5, #0]
 80069fa:	6820      	ldr	r0, [r4, #0]
 80069fc:	1d19      	adds	r1, r3, #4
 80069fe:	6029      	str	r1, [r5, #0]
 8006a00:	0601      	lsls	r1, r0, #24
 8006a02:	d501      	bpl.n	8006a08 <_printf_i+0xec>
 8006a04:	681e      	ldr	r6, [r3, #0]
 8006a06:	e002      	b.n	8006a0e <_printf_i+0xf2>
 8006a08:	0646      	lsls	r6, r0, #25
 8006a0a:	d5fb      	bpl.n	8006a04 <_printf_i+0xe8>
 8006a0c:	881e      	ldrh	r6, [r3, #0]
 8006a0e:	2f6f      	cmp	r7, #111	; 0x6f
 8006a10:	bf0c      	ite	eq
 8006a12:	2308      	moveq	r3, #8
 8006a14:	230a      	movne	r3, #10
 8006a16:	4852      	ldr	r0, [pc, #328]	; (8006b60 <_printf_i+0x244>)
 8006a18:	2100      	movs	r1, #0
 8006a1a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006a1e:	6865      	ldr	r5, [r4, #4]
 8006a20:	2d00      	cmp	r5, #0
 8006a22:	bfa8      	it	ge
 8006a24:	6821      	ldrge	r1, [r4, #0]
 8006a26:	60a5      	str	r5, [r4, #8]
 8006a28:	bfa4      	itt	ge
 8006a2a:	f021 0104 	bicge.w	r1, r1, #4
 8006a2e:	6021      	strge	r1, [r4, #0]
 8006a30:	b90e      	cbnz	r6, 8006a36 <_printf_i+0x11a>
 8006a32:	2d00      	cmp	r5, #0
 8006a34:	d04d      	beq.n	8006ad2 <_printf_i+0x1b6>
 8006a36:	4615      	mov	r5, r2
 8006a38:	fbb6 f1f3 	udiv	r1, r6, r3
 8006a3c:	fb03 6711 	mls	r7, r3, r1, r6
 8006a40:	5dc7      	ldrb	r7, [r0, r7]
 8006a42:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006a46:	4637      	mov	r7, r6
 8006a48:	42bb      	cmp	r3, r7
 8006a4a:	460e      	mov	r6, r1
 8006a4c:	d9f4      	bls.n	8006a38 <_printf_i+0x11c>
 8006a4e:	2b08      	cmp	r3, #8
 8006a50:	d10b      	bne.n	8006a6a <_printf_i+0x14e>
 8006a52:	6823      	ldr	r3, [r4, #0]
 8006a54:	07de      	lsls	r6, r3, #31
 8006a56:	d508      	bpl.n	8006a6a <_printf_i+0x14e>
 8006a58:	6923      	ldr	r3, [r4, #16]
 8006a5a:	6861      	ldr	r1, [r4, #4]
 8006a5c:	4299      	cmp	r1, r3
 8006a5e:	bfde      	ittt	le
 8006a60:	2330      	movle	r3, #48	; 0x30
 8006a62:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006a66:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006a6a:	1b52      	subs	r2, r2, r5
 8006a6c:	6122      	str	r2, [r4, #16]
 8006a6e:	464b      	mov	r3, r9
 8006a70:	4621      	mov	r1, r4
 8006a72:	4640      	mov	r0, r8
 8006a74:	f8cd a000 	str.w	sl, [sp]
 8006a78:	aa03      	add	r2, sp, #12
 8006a7a:	f7ff fedf 	bl	800683c <_printf_common>
 8006a7e:	3001      	adds	r0, #1
 8006a80:	d14c      	bne.n	8006b1c <_printf_i+0x200>
 8006a82:	f04f 30ff 	mov.w	r0, #4294967295
 8006a86:	b004      	add	sp, #16
 8006a88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a8c:	4834      	ldr	r0, [pc, #208]	; (8006b60 <_printf_i+0x244>)
 8006a8e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006a92:	6829      	ldr	r1, [r5, #0]
 8006a94:	6823      	ldr	r3, [r4, #0]
 8006a96:	f851 6b04 	ldr.w	r6, [r1], #4
 8006a9a:	6029      	str	r1, [r5, #0]
 8006a9c:	061d      	lsls	r5, r3, #24
 8006a9e:	d514      	bpl.n	8006aca <_printf_i+0x1ae>
 8006aa0:	07df      	lsls	r7, r3, #31
 8006aa2:	bf44      	itt	mi
 8006aa4:	f043 0320 	orrmi.w	r3, r3, #32
 8006aa8:	6023      	strmi	r3, [r4, #0]
 8006aaa:	b91e      	cbnz	r6, 8006ab4 <_printf_i+0x198>
 8006aac:	6823      	ldr	r3, [r4, #0]
 8006aae:	f023 0320 	bic.w	r3, r3, #32
 8006ab2:	6023      	str	r3, [r4, #0]
 8006ab4:	2310      	movs	r3, #16
 8006ab6:	e7af      	b.n	8006a18 <_printf_i+0xfc>
 8006ab8:	6823      	ldr	r3, [r4, #0]
 8006aba:	f043 0320 	orr.w	r3, r3, #32
 8006abe:	6023      	str	r3, [r4, #0]
 8006ac0:	2378      	movs	r3, #120	; 0x78
 8006ac2:	4828      	ldr	r0, [pc, #160]	; (8006b64 <_printf_i+0x248>)
 8006ac4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006ac8:	e7e3      	b.n	8006a92 <_printf_i+0x176>
 8006aca:	0659      	lsls	r1, r3, #25
 8006acc:	bf48      	it	mi
 8006ace:	b2b6      	uxthmi	r6, r6
 8006ad0:	e7e6      	b.n	8006aa0 <_printf_i+0x184>
 8006ad2:	4615      	mov	r5, r2
 8006ad4:	e7bb      	b.n	8006a4e <_printf_i+0x132>
 8006ad6:	682b      	ldr	r3, [r5, #0]
 8006ad8:	6826      	ldr	r6, [r4, #0]
 8006ada:	1d18      	adds	r0, r3, #4
 8006adc:	6961      	ldr	r1, [r4, #20]
 8006ade:	6028      	str	r0, [r5, #0]
 8006ae0:	0635      	lsls	r5, r6, #24
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	d501      	bpl.n	8006aea <_printf_i+0x1ce>
 8006ae6:	6019      	str	r1, [r3, #0]
 8006ae8:	e002      	b.n	8006af0 <_printf_i+0x1d4>
 8006aea:	0670      	lsls	r0, r6, #25
 8006aec:	d5fb      	bpl.n	8006ae6 <_printf_i+0x1ca>
 8006aee:	8019      	strh	r1, [r3, #0]
 8006af0:	2300      	movs	r3, #0
 8006af2:	4615      	mov	r5, r2
 8006af4:	6123      	str	r3, [r4, #16]
 8006af6:	e7ba      	b.n	8006a6e <_printf_i+0x152>
 8006af8:	682b      	ldr	r3, [r5, #0]
 8006afa:	2100      	movs	r1, #0
 8006afc:	1d1a      	adds	r2, r3, #4
 8006afe:	602a      	str	r2, [r5, #0]
 8006b00:	681d      	ldr	r5, [r3, #0]
 8006b02:	6862      	ldr	r2, [r4, #4]
 8006b04:	4628      	mov	r0, r5
 8006b06:	f002 fb0d 	bl	8009124 <memchr>
 8006b0a:	b108      	cbz	r0, 8006b10 <_printf_i+0x1f4>
 8006b0c:	1b40      	subs	r0, r0, r5
 8006b0e:	6060      	str	r0, [r4, #4]
 8006b10:	6863      	ldr	r3, [r4, #4]
 8006b12:	6123      	str	r3, [r4, #16]
 8006b14:	2300      	movs	r3, #0
 8006b16:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b1a:	e7a8      	b.n	8006a6e <_printf_i+0x152>
 8006b1c:	462a      	mov	r2, r5
 8006b1e:	4649      	mov	r1, r9
 8006b20:	4640      	mov	r0, r8
 8006b22:	6923      	ldr	r3, [r4, #16]
 8006b24:	47d0      	blx	sl
 8006b26:	3001      	adds	r0, #1
 8006b28:	d0ab      	beq.n	8006a82 <_printf_i+0x166>
 8006b2a:	6823      	ldr	r3, [r4, #0]
 8006b2c:	079b      	lsls	r3, r3, #30
 8006b2e:	d413      	bmi.n	8006b58 <_printf_i+0x23c>
 8006b30:	68e0      	ldr	r0, [r4, #12]
 8006b32:	9b03      	ldr	r3, [sp, #12]
 8006b34:	4298      	cmp	r0, r3
 8006b36:	bfb8      	it	lt
 8006b38:	4618      	movlt	r0, r3
 8006b3a:	e7a4      	b.n	8006a86 <_printf_i+0x16a>
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	4632      	mov	r2, r6
 8006b40:	4649      	mov	r1, r9
 8006b42:	4640      	mov	r0, r8
 8006b44:	47d0      	blx	sl
 8006b46:	3001      	adds	r0, #1
 8006b48:	d09b      	beq.n	8006a82 <_printf_i+0x166>
 8006b4a:	3501      	adds	r5, #1
 8006b4c:	68e3      	ldr	r3, [r4, #12]
 8006b4e:	9903      	ldr	r1, [sp, #12]
 8006b50:	1a5b      	subs	r3, r3, r1
 8006b52:	42ab      	cmp	r3, r5
 8006b54:	dcf2      	bgt.n	8006b3c <_printf_i+0x220>
 8006b56:	e7eb      	b.n	8006b30 <_printf_i+0x214>
 8006b58:	2500      	movs	r5, #0
 8006b5a:	f104 0619 	add.w	r6, r4, #25
 8006b5e:	e7f5      	b.n	8006b4c <_printf_i+0x230>
 8006b60:	0800abbe 	.word	0x0800abbe
 8006b64:	0800abcf 	.word	0x0800abcf

08006b68 <_scanf_float>:
 8006b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b6c:	b087      	sub	sp, #28
 8006b6e:	9303      	str	r3, [sp, #12]
 8006b70:	688b      	ldr	r3, [r1, #8]
 8006b72:	4617      	mov	r7, r2
 8006b74:	1e5a      	subs	r2, r3, #1
 8006b76:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006b7a:	bf85      	ittet	hi
 8006b7c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006b80:	195b      	addhi	r3, r3, r5
 8006b82:	2300      	movls	r3, #0
 8006b84:	9302      	strhi	r3, [sp, #8]
 8006b86:	bf88      	it	hi
 8006b88:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006b8c:	468b      	mov	fp, r1
 8006b8e:	f04f 0500 	mov.w	r5, #0
 8006b92:	bf8c      	ite	hi
 8006b94:	608b      	strhi	r3, [r1, #8]
 8006b96:	9302      	strls	r3, [sp, #8]
 8006b98:	680b      	ldr	r3, [r1, #0]
 8006b9a:	4680      	mov	r8, r0
 8006b9c:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006ba0:	f84b 3b1c 	str.w	r3, [fp], #28
 8006ba4:	460c      	mov	r4, r1
 8006ba6:	465e      	mov	r6, fp
 8006ba8:	46aa      	mov	sl, r5
 8006baa:	46a9      	mov	r9, r5
 8006bac:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006bb0:	9501      	str	r5, [sp, #4]
 8006bb2:	68a2      	ldr	r2, [r4, #8]
 8006bb4:	b152      	cbz	r2, 8006bcc <_scanf_float+0x64>
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	781b      	ldrb	r3, [r3, #0]
 8006bba:	2b4e      	cmp	r3, #78	; 0x4e
 8006bbc:	d864      	bhi.n	8006c88 <_scanf_float+0x120>
 8006bbe:	2b40      	cmp	r3, #64	; 0x40
 8006bc0:	d83c      	bhi.n	8006c3c <_scanf_float+0xd4>
 8006bc2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006bc6:	b2c8      	uxtb	r0, r1
 8006bc8:	280e      	cmp	r0, #14
 8006bca:	d93a      	bls.n	8006c42 <_scanf_float+0xda>
 8006bcc:	f1b9 0f00 	cmp.w	r9, #0
 8006bd0:	d003      	beq.n	8006bda <_scanf_float+0x72>
 8006bd2:	6823      	ldr	r3, [r4, #0]
 8006bd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006bd8:	6023      	str	r3, [r4, #0]
 8006bda:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006bde:	f1ba 0f01 	cmp.w	sl, #1
 8006be2:	f200 8113 	bhi.w	8006e0c <_scanf_float+0x2a4>
 8006be6:	455e      	cmp	r6, fp
 8006be8:	f200 8105 	bhi.w	8006df6 <_scanf_float+0x28e>
 8006bec:	2501      	movs	r5, #1
 8006bee:	4628      	mov	r0, r5
 8006bf0:	b007      	add	sp, #28
 8006bf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bf6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006bfa:	2a0d      	cmp	r2, #13
 8006bfc:	d8e6      	bhi.n	8006bcc <_scanf_float+0x64>
 8006bfe:	a101      	add	r1, pc, #4	; (adr r1, 8006c04 <_scanf_float+0x9c>)
 8006c00:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006c04:	08006d43 	.word	0x08006d43
 8006c08:	08006bcd 	.word	0x08006bcd
 8006c0c:	08006bcd 	.word	0x08006bcd
 8006c10:	08006bcd 	.word	0x08006bcd
 8006c14:	08006da3 	.word	0x08006da3
 8006c18:	08006d7b 	.word	0x08006d7b
 8006c1c:	08006bcd 	.word	0x08006bcd
 8006c20:	08006bcd 	.word	0x08006bcd
 8006c24:	08006d51 	.word	0x08006d51
 8006c28:	08006bcd 	.word	0x08006bcd
 8006c2c:	08006bcd 	.word	0x08006bcd
 8006c30:	08006bcd 	.word	0x08006bcd
 8006c34:	08006bcd 	.word	0x08006bcd
 8006c38:	08006d09 	.word	0x08006d09
 8006c3c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006c40:	e7db      	b.n	8006bfa <_scanf_float+0x92>
 8006c42:	290e      	cmp	r1, #14
 8006c44:	d8c2      	bhi.n	8006bcc <_scanf_float+0x64>
 8006c46:	a001      	add	r0, pc, #4	; (adr r0, 8006c4c <_scanf_float+0xe4>)
 8006c48:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006c4c:	08006cfb 	.word	0x08006cfb
 8006c50:	08006bcd 	.word	0x08006bcd
 8006c54:	08006cfb 	.word	0x08006cfb
 8006c58:	08006d8f 	.word	0x08006d8f
 8006c5c:	08006bcd 	.word	0x08006bcd
 8006c60:	08006ca9 	.word	0x08006ca9
 8006c64:	08006ce5 	.word	0x08006ce5
 8006c68:	08006ce5 	.word	0x08006ce5
 8006c6c:	08006ce5 	.word	0x08006ce5
 8006c70:	08006ce5 	.word	0x08006ce5
 8006c74:	08006ce5 	.word	0x08006ce5
 8006c78:	08006ce5 	.word	0x08006ce5
 8006c7c:	08006ce5 	.word	0x08006ce5
 8006c80:	08006ce5 	.word	0x08006ce5
 8006c84:	08006ce5 	.word	0x08006ce5
 8006c88:	2b6e      	cmp	r3, #110	; 0x6e
 8006c8a:	d809      	bhi.n	8006ca0 <_scanf_float+0x138>
 8006c8c:	2b60      	cmp	r3, #96	; 0x60
 8006c8e:	d8b2      	bhi.n	8006bf6 <_scanf_float+0x8e>
 8006c90:	2b54      	cmp	r3, #84	; 0x54
 8006c92:	d077      	beq.n	8006d84 <_scanf_float+0x21c>
 8006c94:	2b59      	cmp	r3, #89	; 0x59
 8006c96:	d199      	bne.n	8006bcc <_scanf_float+0x64>
 8006c98:	2d07      	cmp	r5, #7
 8006c9a:	d197      	bne.n	8006bcc <_scanf_float+0x64>
 8006c9c:	2508      	movs	r5, #8
 8006c9e:	e029      	b.n	8006cf4 <_scanf_float+0x18c>
 8006ca0:	2b74      	cmp	r3, #116	; 0x74
 8006ca2:	d06f      	beq.n	8006d84 <_scanf_float+0x21c>
 8006ca4:	2b79      	cmp	r3, #121	; 0x79
 8006ca6:	e7f6      	b.n	8006c96 <_scanf_float+0x12e>
 8006ca8:	6821      	ldr	r1, [r4, #0]
 8006caa:	05c8      	lsls	r0, r1, #23
 8006cac:	d51a      	bpl.n	8006ce4 <_scanf_float+0x17c>
 8006cae:	9b02      	ldr	r3, [sp, #8]
 8006cb0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006cb4:	6021      	str	r1, [r4, #0]
 8006cb6:	f109 0901 	add.w	r9, r9, #1
 8006cba:	b11b      	cbz	r3, 8006cc4 <_scanf_float+0x15c>
 8006cbc:	3b01      	subs	r3, #1
 8006cbe:	3201      	adds	r2, #1
 8006cc0:	9302      	str	r3, [sp, #8]
 8006cc2:	60a2      	str	r2, [r4, #8]
 8006cc4:	68a3      	ldr	r3, [r4, #8]
 8006cc6:	3b01      	subs	r3, #1
 8006cc8:	60a3      	str	r3, [r4, #8]
 8006cca:	6923      	ldr	r3, [r4, #16]
 8006ccc:	3301      	adds	r3, #1
 8006cce:	6123      	str	r3, [r4, #16]
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	3b01      	subs	r3, #1
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	607b      	str	r3, [r7, #4]
 8006cd8:	f340 8084 	ble.w	8006de4 <_scanf_float+0x27c>
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	3301      	adds	r3, #1
 8006ce0:	603b      	str	r3, [r7, #0]
 8006ce2:	e766      	b.n	8006bb2 <_scanf_float+0x4a>
 8006ce4:	eb1a 0f05 	cmn.w	sl, r5
 8006ce8:	f47f af70 	bne.w	8006bcc <_scanf_float+0x64>
 8006cec:	6822      	ldr	r2, [r4, #0]
 8006cee:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006cf2:	6022      	str	r2, [r4, #0]
 8006cf4:	f806 3b01 	strb.w	r3, [r6], #1
 8006cf8:	e7e4      	b.n	8006cc4 <_scanf_float+0x15c>
 8006cfa:	6822      	ldr	r2, [r4, #0]
 8006cfc:	0610      	lsls	r0, r2, #24
 8006cfe:	f57f af65 	bpl.w	8006bcc <_scanf_float+0x64>
 8006d02:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006d06:	e7f4      	b.n	8006cf2 <_scanf_float+0x18a>
 8006d08:	f1ba 0f00 	cmp.w	sl, #0
 8006d0c:	d10e      	bne.n	8006d2c <_scanf_float+0x1c4>
 8006d0e:	f1b9 0f00 	cmp.w	r9, #0
 8006d12:	d10e      	bne.n	8006d32 <_scanf_float+0x1ca>
 8006d14:	6822      	ldr	r2, [r4, #0]
 8006d16:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006d1a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006d1e:	d108      	bne.n	8006d32 <_scanf_float+0x1ca>
 8006d20:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006d24:	f04f 0a01 	mov.w	sl, #1
 8006d28:	6022      	str	r2, [r4, #0]
 8006d2a:	e7e3      	b.n	8006cf4 <_scanf_float+0x18c>
 8006d2c:	f1ba 0f02 	cmp.w	sl, #2
 8006d30:	d055      	beq.n	8006dde <_scanf_float+0x276>
 8006d32:	2d01      	cmp	r5, #1
 8006d34:	d002      	beq.n	8006d3c <_scanf_float+0x1d4>
 8006d36:	2d04      	cmp	r5, #4
 8006d38:	f47f af48 	bne.w	8006bcc <_scanf_float+0x64>
 8006d3c:	3501      	adds	r5, #1
 8006d3e:	b2ed      	uxtb	r5, r5
 8006d40:	e7d8      	b.n	8006cf4 <_scanf_float+0x18c>
 8006d42:	f1ba 0f01 	cmp.w	sl, #1
 8006d46:	f47f af41 	bne.w	8006bcc <_scanf_float+0x64>
 8006d4a:	f04f 0a02 	mov.w	sl, #2
 8006d4e:	e7d1      	b.n	8006cf4 <_scanf_float+0x18c>
 8006d50:	b97d      	cbnz	r5, 8006d72 <_scanf_float+0x20a>
 8006d52:	f1b9 0f00 	cmp.w	r9, #0
 8006d56:	f47f af3c 	bne.w	8006bd2 <_scanf_float+0x6a>
 8006d5a:	6822      	ldr	r2, [r4, #0]
 8006d5c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006d60:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006d64:	f47f af39 	bne.w	8006bda <_scanf_float+0x72>
 8006d68:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006d6c:	2501      	movs	r5, #1
 8006d6e:	6022      	str	r2, [r4, #0]
 8006d70:	e7c0      	b.n	8006cf4 <_scanf_float+0x18c>
 8006d72:	2d03      	cmp	r5, #3
 8006d74:	d0e2      	beq.n	8006d3c <_scanf_float+0x1d4>
 8006d76:	2d05      	cmp	r5, #5
 8006d78:	e7de      	b.n	8006d38 <_scanf_float+0x1d0>
 8006d7a:	2d02      	cmp	r5, #2
 8006d7c:	f47f af26 	bne.w	8006bcc <_scanf_float+0x64>
 8006d80:	2503      	movs	r5, #3
 8006d82:	e7b7      	b.n	8006cf4 <_scanf_float+0x18c>
 8006d84:	2d06      	cmp	r5, #6
 8006d86:	f47f af21 	bne.w	8006bcc <_scanf_float+0x64>
 8006d8a:	2507      	movs	r5, #7
 8006d8c:	e7b2      	b.n	8006cf4 <_scanf_float+0x18c>
 8006d8e:	6822      	ldr	r2, [r4, #0]
 8006d90:	0591      	lsls	r1, r2, #22
 8006d92:	f57f af1b 	bpl.w	8006bcc <_scanf_float+0x64>
 8006d96:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006d9a:	6022      	str	r2, [r4, #0]
 8006d9c:	f8cd 9004 	str.w	r9, [sp, #4]
 8006da0:	e7a8      	b.n	8006cf4 <_scanf_float+0x18c>
 8006da2:	6822      	ldr	r2, [r4, #0]
 8006da4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006da8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006dac:	d006      	beq.n	8006dbc <_scanf_float+0x254>
 8006dae:	0550      	lsls	r0, r2, #21
 8006db0:	f57f af0c 	bpl.w	8006bcc <_scanf_float+0x64>
 8006db4:	f1b9 0f00 	cmp.w	r9, #0
 8006db8:	f43f af0f 	beq.w	8006bda <_scanf_float+0x72>
 8006dbc:	0591      	lsls	r1, r2, #22
 8006dbe:	bf58      	it	pl
 8006dc0:	9901      	ldrpl	r1, [sp, #4]
 8006dc2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006dc6:	bf58      	it	pl
 8006dc8:	eba9 0101 	subpl.w	r1, r9, r1
 8006dcc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006dd0:	f04f 0900 	mov.w	r9, #0
 8006dd4:	bf58      	it	pl
 8006dd6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006dda:	6022      	str	r2, [r4, #0]
 8006ddc:	e78a      	b.n	8006cf4 <_scanf_float+0x18c>
 8006dde:	f04f 0a03 	mov.w	sl, #3
 8006de2:	e787      	b.n	8006cf4 <_scanf_float+0x18c>
 8006de4:	4639      	mov	r1, r7
 8006de6:	4640      	mov	r0, r8
 8006de8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006dec:	4798      	blx	r3
 8006dee:	2800      	cmp	r0, #0
 8006df0:	f43f aedf 	beq.w	8006bb2 <_scanf_float+0x4a>
 8006df4:	e6ea      	b.n	8006bcc <_scanf_float+0x64>
 8006df6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006dfa:	463a      	mov	r2, r7
 8006dfc:	4640      	mov	r0, r8
 8006dfe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006e02:	4798      	blx	r3
 8006e04:	6923      	ldr	r3, [r4, #16]
 8006e06:	3b01      	subs	r3, #1
 8006e08:	6123      	str	r3, [r4, #16]
 8006e0a:	e6ec      	b.n	8006be6 <_scanf_float+0x7e>
 8006e0c:	1e6b      	subs	r3, r5, #1
 8006e0e:	2b06      	cmp	r3, #6
 8006e10:	d825      	bhi.n	8006e5e <_scanf_float+0x2f6>
 8006e12:	2d02      	cmp	r5, #2
 8006e14:	d836      	bhi.n	8006e84 <_scanf_float+0x31c>
 8006e16:	455e      	cmp	r6, fp
 8006e18:	f67f aee8 	bls.w	8006bec <_scanf_float+0x84>
 8006e1c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006e20:	463a      	mov	r2, r7
 8006e22:	4640      	mov	r0, r8
 8006e24:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006e28:	4798      	blx	r3
 8006e2a:	6923      	ldr	r3, [r4, #16]
 8006e2c:	3b01      	subs	r3, #1
 8006e2e:	6123      	str	r3, [r4, #16]
 8006e30:	e7f1      	b.n	8006e16 <_scanf_float+0x2ae>
 8006e32:	9802      	ldr	r0, [sp, #8]
 8006e34:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006e38:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006e3c:	463a      	mov	r2, r7
 8006e3e:	9002      	str	r0, [sp, #8]
 8006e40:	4640      	mov	r0, r8
 8006e42:	4798      	blx	r3
 8006e44:	6923      	ldr	r3, [r4, #16]
 8006e46:	3b01      	subs	r3, #1
 8006e48:	6123      	str	r3, [r4, #16]
 8006e4a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006e4e:	fa5f fa8a 	uxtb.w	sl, sl
 8006e52:	f1ba 0f02 	cmp.w	sl, #2
 8006e56:	d1ec      	bne.n	8006e32 <_scanf_float+0x2ca>
 8006e58:	3d03      	subs	r5, #3
 8006e5a:	b2ed      	uxtb	r5, r5
 8006e5c:	1b76      	subs	r6, r6, r5
 8006e5e:	6823      	ldr	r3, [r4, #0]
 8006e60:	05da      	lsls	r2, r3, #23
 8006e62:	d52f      	bpl.n	8006ec4 <_scanf_float+0x35c>
 8006e64:	055b      	lsls	r3, r3, #21
 8006e66:	d510      	bpl.n	8006e8a <_scanf_float+0x322>
 8006e68:	455e      	cmp	r6, fp
 8006e6a:	f67f aebf 	bls.w	8006bec <_scanf_float+0x84>
 8006e6e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006e72:	463a      	mov	r2, r7
 8006e74:	4640      	mov	r0, r8
 8006e76:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006e7a:	4798      	blx	r3
 8006e7c:	6923      	ldr	r3, [r4, #16]
 8006e7e:	3b01      	subs	r3, #1
 8006e80:	6123      	str	r3, [r4, #16]
 8006e82:	e7f1      	b.n	8006e68 <_scanf_float+0x300>
 8006e84:	46aa      	mov	sl, r5
 8006e86:	9602      	str	r6, [sp, #8]
 8006e88:	e7df      	b.n	8006e4a <_scanf_float+0x2e2>
 8006e8a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006e8e:	6923      	ldr	r3, [r4, #16]
 8006e90:	2965      	cmp	r1, #101	; 0x65
 8006e92:	f103 33ff 	add.w	r3, r3, #4294967295
 8006e96:	f106 35ff 	add.w	r5, r6, #4294967295
 8006e9a:	6123      	str	r3, [r4, #16]
 8006e9c:	d00c      	beq.n	8006eb8 <_scanf_float+0x350>
 8006e9e:	2945      	cmp	r1, #69	; 0x45
 8006ea0:	d00a      	beq.n	8006eb8 <_scanf_float+0x350>
 8006ea2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006ea6:	463a      	mov	r2, r7
 8006ea8:	4640      	mov	r0, r8
 8006eaa:	4798      	blx	r3
 8006eac:	6923      	ldr	r3, [r4, #16]
 8006eae:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006eb2:	3b01      	subs	r3, #1
 8006eb4:	1eb5      	subs	r5, r6, #2
 8006eb6:	6123      	str	r3, [r4, #16]
 8006eb8:	463a      	mov	r2, r7
 8006eba:	4640      	mov	r0, r8
 8006ebc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006ec0:	4798      	blx	r3
 8006ec2:	462e      	mov	r6, r5
 8006ec4:	6825      	ldr	r5, [r4, #0]
 8006ec6:	f015 0510 	ands.w	r5, r5, #16
 8006eca:	d155      	bne.n	8006f78 <_scanf_float+0x410>
 8006ecc:	7035      	strb	r5, [r6, #0]
 8006ece:	6823      	ldr	r3, [r4, #0]
 8006ed0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006ed4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ed8:	d11b      	bne.n	8006f12 <_scanf_float+0x3aa>
 8006eda:	9b01      	ldr	r3, [sp, #4]
 8006edc:	454b      	cmp	r3, r9
 8006ede:	eba3 0209 	sub.w	r2, r3, r9
 8006ee2:	d123      	bne.n	8006f2c <_scanf_float+0x3c4>
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	4659      	mov	r1, fp
 8006ee8:	4640      	mov	r0, r8
 8006eea:	f000 fe79 	bl	8007be0 <_strtod_r>
 8006eee:	6822      	ldr	r2, [r4, #0]
 8006ef0:	9b03      	ldr	r3, [sp, #12]
 8006ef2:	f012 0f02 	tst.w	r2, #2
 8006ef6:	4606      	mov	r6, r0
 8006ef8:	460f      	mov	r7, r1
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	d021      	beq.n	8006f42 <_scanf_float+0x3da>
 8006efe:	1d1a      	adds	r2, r3, #4
 8006f00:	9903      	ldr	r1, [sp, #12]
 8006f02:	600a      	str	r2, [r1, #0]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	e9c3 6700 	strd	r6, r7, [r3]
 8006f0a:	68e3      	ldr	r3, [r4, #12]
 8006f0c:	3301      	adds	r3, #1
 8006f0e:	60e3      	str	r3, [r4, #12]
 8006f10:	e66d      	b.n	8006bee <_scanf_float+0x86>
 8006f12:	9b04      	ldr	r3, [sp, #16]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d0e5      	beq.n	8006ee4 <_scanf_float+0x37c>
 8006f18:	9905      	ldr	r1, [sp, #20]
 8006f1a:	230a      	movs	r3, #10
 8006f1c:	462a      	mov	r2, r5
 8006f1e:	4640      	mov	r0, r8
 8006f20:	3101      	adds	r1, #1
 8006f22:	f000 fedf 	bl	8007ce4 <_strtol_r>
 8006f26:	9b04      	ldr	r3, [sp, #16]
 8006f28:	9e05      	ldr	r6, [sp, #20]
 8006f2a:	1ac2      	subs	r2, r0, r3
 8006f2c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006f30:	429e      	cmp	r6, r3
 8006f32:	bf28      	it	cs
 8006f34:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006f38:	4630      	mov	r0, r6
 8006f3a:	4910      	ldr	r1, [pc, #64]	; (8006f7c <_scanf_float+0x414>)
 8006f3c:	f000 f826 	bl	8006f8c <siprintf>
 8006f40:	e7d0      	b.n	8006ee4 <_scanf_float+0x37c>
 8006f42:	f012 0f04 	tst.w	r2, #4
 8006f46:	f103 0204 	add.w	r2, r3, #4
 8006f4a:	d1d9      	bne.n	8006f00 <_scanf_float+0x398>
 8006f4c:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8006f50:	f8cc 2000 	str.w	r2, [ip]
 8006f54:	f8d3 8000 	ldr.w	r8, [r3]
 8006f58:	4602      	mov	r2, r0
 8006f5a:	460b      	mov	r3, r1
 8006f5c:	f7f9 fdc2 	bl	8000ae4 <__aeabi_dcmpun>
 8006f60:	b128      	cbz	r0, 8006f6e <_scanf_float+0x406>
 8006f62:	4807      	ldr	r0, [pc, #28]	; (8006f80 <_scanf_float+0x418>)
 8006f64:	f000 f80e 	bl	8006f84 <nanf>
 8006f68:	f8c8 0000 	str.w	r0, [r8]
 8006f6c:	e7cd      	b.n	8006f0a <_scanf_float+0x3a2>
 8006f6e:	4630      	mov	r0, r6
 8006f70:	4639      	mov	r1, r7
 8006f72:	f7f9 fe15 	bl	8000ba0 <__aeabi_d2f>
 8006f76:	e7f7      	b.n	8006f68 <_scanf_float+0x400>
 8006f78:	2500      	movs	r5, #0
 8006f7a:	e638      	b.n	8006bee <_scanf_float+0x86>
 8006f7c:	0800abe0 	.word	0x0800abe0
 8006f80:	0800afe8 	.word	0x0800afe8

08006f84 <nanf>:
 8006f84:	4800      	ldr	r0, [pc, #0]	; (8006f88 <nanf+0x4>)
 8006f86:	4770      	bx	lr
 8006f88:	7fc00000 	.word	0x7fc00000

08006f8c <siprintf>:
 8006f8c:	b40e      	push	{r1, r2, r3}
 8006f8e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006f92:	b500      	push	{lr}
 8006f94:	b09c      	sub	sp, #112	; 0x70
 8006f96:	ab1d      	add	r3, sp, #116	; 0x74
 8006f98:	9002      	str	r0, [sp, #8]
 8006f9a:	9006      	str	r0, [sp, #24]
 8006f9c:	9107      	str	r1, [sp, #28]
 8006f9e:	9104      	str	r1, [sp, #16]
 8006fa0:	4808      	ldr	r0, [pc, #32]	; (8006fc4 <siprintf+0x38>)
 8006fa2:	4909      	ldr	r1, [pc, #36]	; (8006fc8 <siprintf+0x3c>)
 8006fa4:	f853 2b04 	ldr.w	r2, [r3], #4
 8006fa8:	9105      	str	r1, [sp, #20]
 8006faa:	6800      	ldr	r0, [r0, #0]
 8006fac:	a902      	add	r1, sp, #8
 8006fae:	9301      	str	r3, [sp, #4]
 8006fb0:	f002 fed8 	bl	8009d64 <_svfiprintf_r>
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	9b02      	ldr	r3, [sp, #8]
 8006fb8:	701a      	strb	r2, [r3, #0]
 8006fba:	b01c      	add	sp, #112	; 0x70
 8006fbc:	f85d eb04 	ldr.w	lr, [sp], #4
 8006fc0:	b003      	add	sp, #12
 8006fc2:	4770      	bx	lr
 8006fc4:	20000034 	.word	0x20000034
 8006fc8:	ffff0208 	.word	0xffff0208

08006fcc <sulp>:
 8006fcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fd0:	460f      	mov	r7, r1
 8006fd2:	4690      	mov	r8, r2
 8006fd4:	f002 fc32 	bl	800983c <__ulp>
 8006fd8:	4604      	mov	r4, r0
 8006fda:	460d      	mov	r5, r1
 8006fdc:	f1b8 0f00 	cmp.w	r8, #0
 8006fe0:	d011      	beq.n	8007006 <sulp+0x3a>
 8006fe2:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8006fe6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	dd0b      	ble.n	8007006 <sulp+0x3a>
 8006fee:	2400      	movs	r4, #0
 8006ff0:	051b      	lsls	r3, r3, #20
 8006ff2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006ff6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006ffa:	4622      	mov	r2, r4
 8006ffc:	462b      	mov	r3, r5
 8006ffe:	f7f9 fad7 	bl	80005b0 <__aeabi_dmul>
 8007002:	4604      	mov	r4, r0
 8007004:	460d      	mov	r5, r1
 8007006:	4620      	mov	r0, r4
 8007008:	4629      	mov	r1, r5
 800700a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08007010 <_strtod_l>:
 8007010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007014:	469b      	mov	fp, r3
 8007016:	2300      	movs	r3, #0
 8007018:	b09f      	sub	sp, #124	; 0x7c
 800701a:	931a      	str	r3, [sp, #104]	; 0x68
 800701c:	4b9e      	ldr	r3, [pc, #632]	; (8007298 <_strtod_l+0x288>)
 800701e:	4682      	mov	sl, r0
 8007020:	681f      	ldr	r7, [r3, #0]
 8007022:	460e      	mov	r6, r1
 8007024:	4638      	mov	r0, r7
 8007026:	9215      	str	r2, [sp, #84]	; 0x54
 8007028:	f7f9 f8fe 	bl	8000228 <strlen>
 800702c:	f04f 0800 	mov.w	r8, #0
 8007030:	4604      	mov	r4, r0
 8007032:	f04f 0900 	mov.w	r9, #0
 8007036:	9619      	str	r6, [sp, #100]	; 0x64
 8007038:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800703a:	781a      	ldrb	r2, [r3, #0]
 800703c:	2a2b      	cmp	r2, #43	; 0x2b
 800703e:	d04c      	beq.n	80070da <_strtod_l+0xca>
 8007040:	d83a      	bhi.n	80070b8 <_strtod_l+0xa8>
 8007042:	2a0d      	cmp	r2, #13
 8007044:	d833      	bhi.n	80070ae <_strtod_l+0x9e>
 8007046:	2a08      	cmp	r2, #8
 8007048:	d833      	bhi.n	80070b2 <_strtod_l+0xa2>
 800704a:	2a00      	cmp	r2, #0
 800704c:	d03d      	beq.n	80070ca <_strtod_l+0xba>
 800704e:	2300      	movs	r3, #0
 8007050:	930a      	str	r3, [sp, #40]	; 0x28
 8007052:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8007054:	782b      	ldrb	r3, [r5, #0]
 8007056:	2b30      	cmp	r3, #48	; 0x30
 8007058:	f040 80aa 	bne.w	80071b0 <_strtod_l+0x1a0>
 800705c:	786b      	ldrb	r3, [r5, #1]
 800705e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007062:	2b58      	cmp	r3, #88	; 0x58
 8007064:	d166      	bne.n	8007134 <_strtod_l+0x124>
 8007066:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007068:	4650      	mov	r0, sl
 800706a:	9301      	str	r3, [sp, #4]
 800706c:	ab1a      	add	r3, sp, #104	; 0x68
 800706e:	9300      	str	r3, [sp, #0]
 8007070:	4a8a      	ldr	r2, [pc, #552]	; (800729c <_strtod_l+0x28c>)
 8007072:	f8cd b008 	str.w	fp, [sp, #8]
 8007076:	ab1b      	add	r3, sp, #108	; 0x6c
 8007078:	a919      	add	r1, sp, #100	; 0x64
 800707a:	f001 fd37 	bl	8008aec <__gethex>
 800707e:	f010 0607 	ands.w	r6, r0, #7
 8007082:	4604      	mov	r4, r0
 8007084:	d005      	beq.n	8007092 <_strtod_l+0x82>
 8007086:	2e06      	cmp	r6, #6
 8007088:	d129      	bne.n	80070de <_strtod_l+0xce>
 800708a:	2300      	movs	r3, #0
 800708c:	3501      	adds	r5, #1
 800708e:	9519      	str	r5, [sp, #100]	; 0x64
 8007090:	930a      	str	r3, [sp, #40]	; 0x28
 8007092:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007094:	2b00      	cmp	r3, #0
 8007096:	f040 858a 	bne.w	8007bae <_strtod_l+0xb9e>
 800709a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800709c:	b1d3      	cbz	r3, 80070d4 <_strtod_l+0xc4>
 800709e:	4642      	mov	r2, r8
 80070a0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80070a4:	4610      	mov	r0, r2
 80070a6:	4619      	mov	r1, r3
 80070a8:	b01f      	add	sp, #124	; 0x7c
 80070aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070ae:	2a20      	cmp	r2, #32
 80070b0:	d1cd      	bne.n	800704e <_strtod_l+0x3e>
 80070b2:	3301      	adds	r3, #1
 80070b4:	9319      	str	r3, [sp, #100]	; 0x64
 80070b6:	e7bf      	b.n	8007038 <_strtod_l+0x28>
 80070b8:	2a2d      	cmp	r2, #45	; 0x2d
 80070ba:	d1c8      	bne.n	800704e <_strtod_l+0x3e>
 80070bc:	2201      	movs	r2, #1
 80070be:	920a      	str	r2, [sp, #40]	; 0x28
 80070c0:	1c5a      	adds	r2, r3, #1
 80070c2:	9219      	str	r2, [sp, #100]	; 0x64
 80070c4:	785b      	ldrb	r3, [r3, #1]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d1c3      	bne.n	8007052 <_strtod_l+0x42>
 80070ca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80070cc:	9619      	str	r6, [sp, #100]	; 0x64
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	f040 856b 	bne.w	8007baa <_strtod_l+0xb9a>
 80070d4:	4642      	mov	r2, r8
 80070d6:	464b      	mov	r3, r9
 80070d8:	e7e4      	b.n	80070a4 <_strtod_l+0x94>
 80070da:	2200      	movs	r2, #0
 80070dc:	e7ef      	b.n	80070be <_strtod_l+0xae>
 80070de:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80070e0:	b13a      	cbz	r2, 80070f2 <_strtod_l+0xe2>
 80070e2:	2135      	movs	r1, #53	; 0x35
 80070e4:	a81c      	add	r0, sp, #112	; 0x70
 80070e6:	f002 fcad 	bl	8009a44 <__copybits>
 80070ea:	4650      	mov	r0, sl
 80070ec:	991a      	ldr	r1, [sp, #104]	; 0x68
 80070ee:	f002 f875 	bl	80091dc <_Bfree>
 80070f2:	3e01      	subs	r6, #1
 80070f4:	2e04      	cmp	r6, #4
 80070f6:	d806      	bhi.n	8007106 <_strtod_l+0xf6>
 80070f8:	e8df f006 	tbb	[pc, r6]
 80070fc:	1714030a 	.word	0x1714030a
 8007100:	0a          	.byte	0x0a
 8007101:	00          	.byte	0x00
 8007102:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8007106:	0721      	lsls	r1, r4, #28
 8007108:	d5c3      	bpl.n	8007092 <_strtod_l+0x82>
 800710a:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800710e:	e7c0      	b.n	8007092 <_strtod_l+0x82>
 8007110:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007112:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8007116:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800711a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800711e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8007122:	e7f0      	b.n	8007106 <_strtod_l+0xf6>
 8007124:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80072a0 <_strtod_l+0x290>
 8007128:	e7ed      	b.n	8007106 <_strtod_l+0xf6>
 800712a:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800712e:	f04f 38ff 	mov.w	r8, #4294967295
 8007132:	e7e8      	b.n	8007106 <_strtod_l+0xf6>
 8007134:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007136:	1c5a      	adds	r2, r3, #1
 8007138:	9219      	str	r2, [sp, #100]	; 0x64
 800713a:	785b      	ldrb	r3, [r3, #1]
 800713c:	2b30      	cmp	r3, #48	; 0x30
 800713e:	d0f9      	beq.n	8007134 <_strtod_l+0x124>
 8007140:	2b00      	cmp	r3, #0
 8007142:	d0a6      	beq.n	8007092 <_strtod_l+0x82>
 8007144:	2301      	movs	r3, #1
 8007146:	9307      	str	r3, [sp, #28]
 8007148:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800714a:	220a      	movs	r2, #10
 800714c:	9308      	str	r3, [sp, #32]
 800714e:	2300      	movs	r3, #0
 8007150:	469b      	mov	fp, r3
 8007152:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8007156:	9819      	ldr	r0, [sp, #100]	; 0x64
 8007158:	7805      	ldrb	r5, [r0, #0]
 800715a:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800715e:	b2d9      	uxtb	r1, r3
 8007160:	2909      	cmp	r1, #9
 8007162:	d927      	bls.n	80071b4 <_strtod_l+0x1a4>
 8007164:	4622      	mov	r2, r4
 8007166:	4639      	mov	r1, r7
 8007168:	f002 ff12 	bl	8009f90 <strncmp>
 800716c:	2800      	cmp	r0, #0
 800716e:	d033      	beq.n	80071d8 <_strtod_l+0x1c8>
 8007170:	2000      	movs	r0, #0
 8007172:	462a      	mov	r2, r5
 8007174:	465c      	mov	r4, fp
 8007176:	4603      	mov	r3, r0
 8007178:	9004      	str	r0, [sp, #16]
 800717a:	2a65      	cmp	r2, #101	; 0x65
 800717c:	d001      	beq.n	8007182 <_strtod_l+0x172>
 800717e:	2a45      	cmp	r2, #69	; 0x45
 8007180:	d114      	bne.n	80071ac <_strtod_l+0x19c>
 8007182:	b91c      	cbnz	r4, 800718c <_strtod_l+0x17c>
 8007184:	9a07      	ldr	r2, [sp, #28]
 8007186:	4302      	orrs	r2, r0
 8007188:	d09f      	beq.n	80070ca <_strtod_l+0xba>
 800718a:	2400      	movs	r4, #0
 800718c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800718e:	1c72      	adds	r2, r6, #1
 8007190:	9219      	str	r2, [sp, #100]	; 0x64
 8007192:	7872      	ldrb	r2, [r6, #1]
 8007194:	2a2b      	cmp	r2, #43	; 0x2b
 8007196:	d079      	beq.n	800728c <_strtod_l+0x27c>
 8007198:	2a2d      	cmp	r2, #45	; 0x2d
 800719a:	f000 8083 	beq.w	80072a4 <_strtod_l+0x294>
 800719e:	2700      	movs	r7, #0
 80071a0:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80071a4:	2909      	cmp	r1, #9
 80071a6:	f240 8083 	bls.w	80072b0 <_strtod_l+0x2a0>
 80071aa:	9619      	str	r6, [sp, #100]	; 0x64
 80071ac:	2500      	movs	r5, #0
 80071ae:	e09f      	b.n	80072f0 <_strtod_l+0x2e0>
 80071b0:	2300      	movs	r3, #0
 80071b2:	e7c8      	b.n	8007146 <_strtod_l+0x136>
 80071b4:	f1bb 0f08 	cmp.w	fp, #8
 80071b8:	bfd5      	itete	le
 80071ba:	9906      	ldrle	r1, [sp, #24]
 80071bc:	9905      	ldrgt	r1, [sp, #20]
 80071be:	fb02 3301 	mlale	r3, r2, r1, r3
 80071c2:	fb02 3301 	mlagt	r3, r2, r1, r3
 80071c6:	f100 0001 	add.w	r0, r0, #1
 80071ca:	bfd4      	ite	le
 80071cc:	9306      	strle	r3, [sp, #24]
 80071ce:	9305      	strgt	r3, [sp, #20]
 80071d0:	f10b 0b01 	add.w	fp, fp, #1
 80071d4:	9019      	str	r0, [sp, #100]	; 0x64
 80071d6:	e7be      	b.n	8007156 <_strtod_l+0x146>
 80071d8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80071da:	191a      	adds	r2, r3, r4
 80071dc:	9219      	str	r2, [sp, #100]	; 0x64
 80071de:	5d1a      	ldrb	r2, [r3, r4]
 80071e0:	f1bb 0f00 	cmp.w	fp, #0
 80071e4:	d036      	beq.n	8007254 <_strtod_l+0x244>
 80071e6:	465c      	mov	r4, fp
 80071e8:	9004      	str	r0, [sp, #16]
 80071ea:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80071ee:	2b09      	cmp	r3, #9
 80071f0:	d912      	bls.n	8007218 <_strtod_l+0x208>
 80071f2:	2301      	movs	r3, #1
 80071f4:	e7c1      	b.n	800717a <_strtod_l+0x16a>
 80071f6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80071f8:	3001      	adds	r0, #1
 80071fa:	1c5a      	adds	r2, r3, #1
 80071fc:	9219      	str	r2, [sp, #100]	; 0x64
 80071fe:	785a      	ldrb	r2, [r3, #1]
 8007200:	2a30      	cmp	r2, #48	; 0x30
 8007202:	d0f8      	beq.n	80071f6 <_strtod_l+0x1e6>
 8007204:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007208:	2b08      	cmp	r3, #8
 800720a:	f200 84d5 	bhi.w	8007bb8 <_strtod_l+0xba8>
 800720e:	9004      	str	r0, [sp, #16]
 8007210:	2000      	movs	r0, #0
 8007212:	4604      	mov	r4, r0
 8007214:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007216:	9308      	str	r3, [sp, #32]
 8007218:	3a30      	subs	r2, #48	; 0x30
 800721a:	f100 0301 	add.w	r3, r0, #1
 800721e:	d013      	beq.n	8007248 <_strtod_l+0x238>
 8007220:	9904      	ldr	r1, [sp, #16]
 8007222:	1905      	adds	r5, r0, r4
 8007224:	4419      	add	r1, r3
 8007226:	9104      	str	r1, [sp, #16]
 8007228:	4623      	mov	r3, r4
 800722a:	210a      	movs	r1, #10
 800722c:	42ab      	cmp	r3, r5
 800722e:	d113      	bne.n	8007258 <_strtod_l+0x248>
 8007230:	1823      	adds	r3, r4, r0
 8007232:	2b08      	cmp	r3, #8
 8007234:	f104 0401 	add.w	r4, r4, #1
 8007238:	4404      	add	r4, r0
 800723a:	dc1b      	bgt.n	8007274 <_strtod_l+0x264>
 800723c:	230a      	movs	r3, #10
 800723e:	9906      	ldr	r1, [sp, #24]
 8007240:	fb03 2301 	mla	r3, r3, r1, r2
 8007244:	9306      	str	r3, [sp, #24]
 8007246:	2300      	movs	r3, #0
 8007248:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800724a:	4618      	mov	r0, r3
 800724c:	1c51      	adds	r1, r2, #1
 800724e:	9119      	str	r1, [sp, #100]	; 0x64
 8007250:	7852      	ldrb	r2, [r2, #1]
 8007252:	e7ca      	b.n	80071ea <_strtod_l+0x1da>
 8007254:	4658      	mov	r0, fp
 8007256:	e7d3      	b.n	8007200 <_strtod_l+0x1f0>
 8007258:	2b08      	cmp	r3, #8
 800725a:	dc04      	bgt.n	8007266 <_strtod_l+0x256>
 800725c:	9f06      	ldr	r7, [sp, #24]
 800725e:	434f      	muls	r7, r1
 8007260:	9706      	str	r7, [sp, #24]
 8007262:	3301      	adds	r3, #1
 8007264:	e7e2      	b.n	800722c <_strtod_l+0x21c>
 8007266:	1c5f      	adds	r7, r3, #1
 8007268:	2f10      	cmp	r7, #16
 800726a:	bfde      	ittt	le
 800726c:	9f05      	ldrle	r7, [sp, #20]
 800726e:	434f      	mulle	r7, r1
 8007270:	9705      	strle	r7, [sp, #20]
 8007272:	e7f6      	b.n	8007262 <_strtod_l+0x252>
 8007274:	2c10      	cmp	r4, #16
 8007276:	bfdf      	itttt	le
 8007278:	230a      	movle	r3, #10
 800727a:	9905      	ldrle	r1, [sp, #20]
 800727c:	fb03 2301 	mlale	r3, r3, r1, r2
 8007280:	9305      	strle	r3, [sp, #20]
 8007282:	e7e0      	b.n	8007246 <_strtod_l+0x236>
 8007284:	2300      	movs	r3, #0
 8007286:	9304      	str	r3, [sp, #16]
 8007288:	2301      	movs	r3, #1
 800728a:	e77b      	b.n	8007184 <_strtod_l+0x174>
 800728c:	2700      	movs	r7, #0
 800728e:	1cb2      	adds	r2, r6, #2
 8007290:	9219      	str	r2, [sp, #100]	; 0x64
 8007292:	78b2      	ldrb	r2, [r6, #2]
 8007294:	e784      	b.n	80071a0 <_strtod_l+0x190>
 8007296:	bf00      	nop
 8007298:	0800ae30 	.word	0x0800ae30
 800729c:	0800abe8 	.word	0x0800abe8
 80072a0:	7ff00000 	.word	0x7ff00000
 80072a4:	2701      	movs	r7, #1
 80072a6:	e7f2      	b.n	800728e <_strtod_l+0x27e>
 80072a8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80072aa:	1c51      	adds	r1, r2, #1
 80072ac:	9119      	str	r1, [sp, #100]	; 0x64
 80072ae:	7852      	ldrb	r2, [r2, #1]
 80072b0:	2a30      	cmp	r2, #48	; 0x30
 80072b2:	d0f9      	beq.n	80072a8 <_strtod_l+0x298>
 80072b4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80072b8:	2908      	cmp	r1, #8
 80072ba:	f63f af77 	bhi.w	80071ac <_strtod_l+0x19c>
 80072be:	f04f 0e0a 	mov.w	lr, #10
 80072c2:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 80072c6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80072c8:	9209      	str	r2, [sp, #36]	; 0x24
 80072ca:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80072cc:	1c51      	adds	r1, r2, #1
 80072ce:	9119      	str	r1, [sp, #100]	; 0x64
 80072d0:	7852      	ldrb	r2, [r2, #1]
 80072d2:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 80072d6:	2d09      	cmp	r5, #9
 80072d8:	d935      	bls.n	8007346 <_strtod_l+0x336>
 80072da:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80072dc:	1b49      	subs	r1, r1, r5
 80072de:	2908      	cmp	r1, #8
 80072e0:	f644 651f 	movw	r5, #19999	; 0x4e1f
 80072e4:	dc02      	bgt.n	80072ec <_strtod_l+0x2dc>
 80072e6:	4565      	cmp	r5, ip
 80072e8:	bfa8      	it	ge
 80072ea:	4665      	movge	r5, ip
 80072ec:	b107      	cbz	r7, 80072f0 <_strtod_l+0x2e0>
 80072ee:	426d      	negs	r5, r5
 80072f0:	2c00      	cmp	r4, #0
 80072f2:	d14c      	bne.n	800738e <_strtod_l+0x37e>
 80072f4:	9907      	ldr	r1, [sp, #28]
 80072f6:	4301      	orrs	r1, r0
 80072f8:	f47f aecb 	bne.w	8007092 <_strtod_l+0x82>
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	f47f aee4 	bne.w	80070ca <_strtod_l+0xba>
 8007302:	2a69      	cmp	r2, #105	; 0x69
 8007304:	d026      	beq.n	8007354 <_strtod_l+0x344>
 8007306:	dc23      	bgt.n	8007350 <_strtod_l+0x340>
 8007308:	2a49      	cmp	r2, #73	; 0x49
 800730a:	d023      	beq.n	8007354 <_strtod_l+0x344>
 800730c:	2a4e      	cmp	r2, #78	; 0x4e
 800730e:	f47f aedc 	bne.w	80070ca <_strtod_l+0xba>
 8007312:	499d      	ldr	r1, [pc, #628]	; (8007588 <_strtod_l+0x578>)
 8007314:	a819      	add	r0, sp, #100	; 0x64
 8007316:	f001 fe37 	bl	8008f88 <__match>
 800731a:	2800      	cmp	r0, #0
 800731c:	f43f aed5 	beq.w	80070ca <_strtod_l+0xba>
 8007320:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007322:	781b      	ldrb	r3, [r3, #0]
 8007324:	2b28      	cmp	r3, #40	; 0x28
 8007326:	d12c      	bne.n	8007382 <_strtod_l+0x372>
 8007328:	4998      	ldr	r1, [pc, #608]	; (800758c <_strtod_l+0x57c>)
 800732a:	aa1c      	add	r2, sp, #112	; 0x70
 800732c:	a819      	add	r0, sp, #100	; 0x64
 800732e:	f001 fe3f 	bl	8008fb0 <__hexnan>
 8007332:	2805      	cmp	r0, #5
 8007334:	d125      	bne.n	8007382 <_strtod_l+0x372>
 8007336:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007338:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800733c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8007340:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8007344:	e6a5      	b.n	8007092 <_strtod_l+0x82>
 8007346:	fb0e 2c0c 	mla	ip, lr, ip, r2
 800734a:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800734e:	e7bc      	b.n	80072ca <_strtod_l+0x2ba>
 8007350:	2a6e      	cmp	r2, #110	; 0x6e
 8007352:	e7dc      	b.n	800730e <_strtod_l+0x2fe>
 8007354:	498e      	ldr	r1, [pc, #568]	; (8007590 <_strtod_l+0x580>)
 8007356:	a819      	add	r0, sp, #100	; 0x64
 8007358:	f001 fe16 	bl	8008f88 <__match>
 800735c:	2800      	cmp	r0, #0
 800735e:	f43f aeb4 	beq.w	80070ca <_strtod_l+0xba>
 8007362:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007364:	498b      	ldr	r1, [pc, #556]	; (8007594 <_strtod_l+0x584>)
 8007366:	3b01      	subs	r3, #1
 8007368:	a819      	add	r0, sp, #100	; 0x64
 800736a:	9319      	str	r3, [sp, #100]	; 0x64
 800736c:	f001 fe0c 	bl	8008f88 <__match>
 8007370:	b910      	cbnz	r0, 8007378 <_strtod_l+0x368>
 8007372:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007374:	3301      	adds	r3, #1
 8007376:	9319      	str	r3, [sp, #100]	; 0x64
 8007378:	f04f 0800 	mov.w	r8, #0
 800737c:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8007598 <_strtod_l+0x588>
 8007380:	e687      	b.n	8007092 <_strtod_l+0x82>
 8007382:	4886      	ldr	r0, [pc, #536]	; (800759c <_strtod_l+0x58c>)
 8007384:	f002 fdee 	bl	8009f64 <nan>
 8007388:	4680      	mov	r8, r0
 800738a:	4689      	mov	r9, r1
 800738c:	e681      	b.n	8007092 <_strtod_l+0x82>
 800738e:	9b04      	ldr	r3, [sp, #16]
 8007390:	f1bb 0f00 	cmp.w	fp, #0
 8007394:	bf08      	it	eq
 8007396:	46a3      	moveq	fp, r4
 8007398:	1aeb      	subs	r3, r5, r3
 800739a:	2c10      	cmp	r4, #16
 800739c:	9806      	ldr	r0, [sp, #24]
 800739e:	4626      	mov	r6, r4
 80073a0:	9307      	str	r3, [sp, #28]
 80073a2:	bfa8      	it	ge
 80073a4:	2610      	movge	r6, #16
 80073a6:	f7f9 f889 	bl	80004bc <__aeabi_ui2d>
 80073aa:	2c09      	cmp	r4, #9
 80073ac:	4680      	mov	r8, r0
 80073ae:	4689      	mov	r9, r1
 80073b0:	dd13      	ble.n	80073da <_strtod_l+0x3ca>
 80073b2:	4b7b      	ldr	r3, [pc, #492]	; (80075a0 <_strtod_l+0x590>)
 80073b4:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80073b8:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80073bc:	f7f9 f8f8 	bl	80005b0 <__aeabi_dmul>
 80073c0:	4680      	mov	r8, r0
 80073c2:	9805      	ldr	r0, [sp, #20]
 80073c4:	4689      	mov	r9, r1
 80073c6:	f7f9 f879 	bl	80004bc <__aeabi_ui2d>
 80073ca:	4602      	mov	r2, r0
 80073cc:	460b      	mov	r3, r1
 80073ce:	4640      	mov	r0, r8
 80073d0:	4649      	mov	r1, r9
 80073d2:	f7f8 ff37 	bl	8000244 <__adddf3>
 80073d6:	4680      	mov	r8, r0
 80073d8:	4689      	mov	r9, r1
 80073da:	2c0f      	cmp	r4, #15
 80073dc:	dc36      	bgt.n	800744c <_strtod_l+0x43c>
 80073de:	9b07      	ldr	r3, [sp, #28]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	f43f ae56 	beq.w	8007092 <_strtod_l+0x82>
 80073e6:	dd22      	ble.n	800742e <_strtod_l+0x41e>
 80073e8:	2b16      	cmp	r3, #22
 80073ea:	dc09      	bgt.n	8007400 <_strtod_l+0x3f0>
 80073ec:	496c      	ldr	r1, [pc, #432]	; (80075a0 <_strtod_l+0x590>)
 80073ee:	4642      	mov	r2, r8
 80073f0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80073f4:	464b      	mov	r3, r9
 80073f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80073fa:	f7f9 f8d9 	bl	80005b0 <__aeabi_dmul>
 80073fe:	e7c3      	b.n	8007388 <_strtod_l+0x378>
 8007400:	9a07      	ldr	r2, [sp, #28]
 8007402:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8007406:	4293      	cmp	r3, r2
 8007408:	db20      	blt.n	800744c <_strtod_l+0x43c>
 800740a:	4d65      	ldr	r5, [pc, #404]	; (80075a0 <_strtod_l+0x590>)
 800740c:	f1c4 040f 	rsb	r4, r4, #15
 8007410:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8007414:	4642      	mov	r2, r8
 8007416:	e9d1 0100 	ldrd	r0, r1, [r1]
 800741a:	464b      	mov	r3, r9
 800741c:	f7f9 f8c8 	bl	80005b0 <__aeabi_dmul>
 8007420:	9b07      	ldr	r3, [sp, #28]
 8007422:	1b1c      	subs	r4, r3, r4
 8007424:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8007428:	e9d5 2300 	ldrd	r2, r3, [r5]
 800742c:	e7e5      	b.n	80073fa <_strtod_l+0x3ea>
 800742e:	9b07      	ldr	r3, [sp, #28]
 8007430:	3316      	adds	r3, #22
 8007432:	db0b      	blt.n	800744c <_strtod_l+0x43c>
 8007434:	9b04      	ldr	r3, [sp, #16]
 8007436:	4640      	mov	r0, r8
 8007438:	1b5d      	subs	r5, r3, r5
 800743a:	4b59      	ldr	r3, [pc, #356]	; (80075a0 <_strtod_l+0x590>)
 800743c:	4649      	mov	r1, r9
 800743e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8007442:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007446:	f7f9 f9dd 	bl	8000804 <__aeabi_ddiv>
 800744a:	e79d      	b.n	8007388 <_strtod_l+0x378>
 800744c:	9b07      	ldr	r3, [sp, #28]
 800744e:	1ba6      	subs	r6, r4, r6
 8007450:	441e      	add	r6, r3
 8007452:	2e00      	cmp	r6, #0
 8007454:	dd74      	ble.n	8007540 <_strtod_l+0x530>
 8007456:	f016 030f 	ands.w	r3, r6, #15
 800745a:	d00a      	beq.n	8007472 <_strtod_l+0x462>
 800745c:	4950      	ldr	r1, [pc, #320]	; (80075a0 <_strtod_l+0x590>)
 800745e:	4642      	mov	r2, r8
 8007460:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007464:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007468:	464b      	mov	r3, r9
 800746a:	f7f9 f8a1 	bl	80005b0 <__aeabi_dmul>
 800746e:	4680      	mov	r8, r0
 8007470:	4689      	mov	r9, r1
 8007472:	f036 060f 	bics.w	r6, r6, #15
 8007476:	d052      	beq.n	800751e <_strtod_l+0x50e>
 8007478:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 800747c:	dd27      	ble.n	80074ce <_strtod_l+0x4be>
 800747e:	f04f 0b00 	mov.w	fp, #0
 8007482:	f8cd b010 	str.w	fp, [sp, #16]
 8007486:	f8cd b020 	str.w	fp, [sp, #32]
 800748a:	f8cd b018 	str.w	fp, [sp, #24]
 800748e:	2322      	movs	r3, #34	; 0x22
 8007490:	f04f 0800 	mov.w	r8, #0
 8007494:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8007598 <_strtod_l+0x588>
 8007498:	f8ca 3000 	str.w	r3, [sl]
 800749c:	9b08      	ldr	r3, [sp, #32]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	f43f adf7 	beq.w	8007092 <_strtod_l+0x82>
 80074a4:	4650      	mov	r0, sl
 80074a6:	991a      	ldr	r1, [sp, #104]	; 0x68
 80074a8:	f001 fe98 	bl	80091dc <_Bfree>
 80074ac:	4650      	mov	r0, sl
 80074ae:	9906      	ldr	r1, [sp, #24]
 80074b0:	f001 fe94 	bl	80091dc <_Bfree>
 80074b4:	4650      	mov	r0, sl
 80074b6:	9904      	ldr	r1, [sp, #16]
 80074b8:	f001 fe90 	bl	80091dc <_Bfree>
 80074bc:	4650      	mov	r0, sl
 80074be:	9908      	ldr	r1, [sp, #32]
 80074c0:	f001 fe8c 	bl	80091dc <_Bfree>
 80074c4:	4659      	mov	r1, fp
 80074c6:	4650      	mov	r0, sl
 80074c8:	f001 fe88 	bl	80091dc <_Bfree>
 80074cc:	e5e1      	b.n	8007092 <_strtod_l+0x82>
 80074ce:	4b35      	ldr	r3, [pc, #212]	; (80075a4 <_strtod_l+0x594>)
 80074d0:	4640      	mov	r0, r8
 80074d2:	9305      	str	r3, [sp, #20]
 80074d4:	2300      	movs	r3, #0
 80074d6:	4649      	mov	r1, r9
 80074d8:	461f      	mov	r7, r3
 80074da:	1136      	asrs	r6, r6, #4
 80074dc:	2e01      	cmp	r6, #1
 80074de:	dc21      	bgt.n	8007524 <_strtod_l+0x514>
 80074e0:	b10b      	cbz	r3, 80074e6 <_strtod_l+0x4d6>
 80074e2:	4680      	mov	r8, r0
 80074e4:	4689      	mov	r9, r1
 80074e6:	4b2f      	ldr	r3, [pc, #188]	; (80075a4 <_strtod_l+0x594>)
 80074e8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80074ec:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80074f0:	4642      	mov	r2, r8
 80074f2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80074f6:	464b      	mov	r3, r9
 80074f8:	f7f9 f85a 	bl	80005b0 <__aeabi_dmul>
 80074fc:	4b26      	ldr	r3, [pc, #152]	; (8007598 <_strtod_l+0x588>)
 80074fe:	460a      	mov	r2, r1
 8007500:	400b      	ands	r3, r1
 8007502:	4929      	ldr	r1, [pc, #164]	; (80075a8 <_strtod_l+0x598>)
 8007504:	4680      	mov	r8, r0
 8007506:	428b      	cmp	r3, r1
 8007508:	d8b9      	bhi.n	800747e <_strtod_l+0x46e>
 800750a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800750e:	428b      	cmp	r3, r1
 8007510:	bf86      	itte	hi
 8007512:	f04f 38ff 	movhi.w	r8, #4294967295
 8007516:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 80075ac <_strtod_l+0x59c>
 800751a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800751e:	2300      	movs	r3, #0
 8007520:	9305      	str	r3, [sp, #20]
 8007522:	e07f      	b.n	8007624 <_strtod_l+0x614>
 8007524:	07f2      	lsls	r2, r6, #31
 8007526:	d505      	bpl.n	8007534 <_strtod_l+0x524>
 8007528:	9b05      	ldr	r3, [sp, #20]
 800752a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800752e:	f7f9 f83f 	bl	80005b0 <__aeabi_dmul>
 8007532:	2301      	movs	r3, #1
 8007534:	9a05      	ldr	r2, [sp, #20]
 8007536:	3701      	adds	r7, #1
 8007538:	3208      	adds	r2, #8
 800753a:	1076      	asrs	r6, r6, #1
 800753c:	9205      	str	r2, [sp, #20]
 800753e:	e7cd      	b.n	80074dc <_strtod_l+0x4cc>
 8007540:	d0ed      	beq.n	800751e <_strtod_l+0x50e>
 8007542:	4276      	negs	r6, r6
 8007544:	f016 020f 	ands.w	r2, r6, #15
 8007548:	d00a      	beq.n	8007560 <_strtod_l+0x550>
 800754a:	4b15      	ldr	r3, [pc, #84]	; (80075a0 <_strtod_l+0x590>)
 800754c:	4640      	mov	r0, r8
 800754e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007552:	4649      	mov	r1, r9
 8007554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007558:	f7f9 f954 	bl	8000804 <__aeabi_ddiv>
 800755c:	4680      	mov	r8, r0
 800755e:	4689      	mov	r9, r1
 8007560:	1136      	asrs	r6, r6, #4
 8007562:	d0dc      	beq.n	800751e <_strtod_l+0x50e>
 8007564:	2e1f      	cmp	r6, #31
 8007566:	dd23      	ble.n	80075b0 <_strtod_l+0x5a0>
 8007568:	f04f 0b00 	mov.w	fp, #0
 800756c:	f8cd b010 	str.w	fp, [sp, #16]
 8007570:	f8cd b020 	str.w	fp, [sp, #32]
 8007574:	f8cd b018 	str.w	fp, [sp, #24]
 8007578:	2322      	movs	r3, #34	; 0x22
 800757a:	f04f 0800 	mov.w	r8, #0
 800757e:	f04f 0900 	mov.w	r9, #0
 8007582:	f8ca 3000 	str.w	r3, [sl]
 8007586:	e789      	b.n	800749c <_strtod_l+0x48c>
 8007588:	0800abb9 	.word	0x0800abb9
 800758c:	0800abfc 	.word	0x0800abfc
 8007590:	0800abb1 	.word	0x0800abb1
 8007594:	0800ad3c 	.word	0x0800ad3c
 8007598:	7ff00000 	.word	0x7ff00000
 800759c:	0800afe8 	.word	0x0800afe8
 80075a0:	0800aec8 	.word	0x0800aec8
 80075a4:	0800aea0 	.word	0x0800aea0
 80075a8:	7ca00000 	.word	0x7ca00000
 80075ac:	7fefffff 	.word	0x7fefffff
 80075b0:	f016 0310 	ands.w	r3, r6, #16
 80075b4:	bf18      	it	ne
 80075b6:	236a      	movne	r3, #106	; 0x6a
 80075b8:	4640      	mov	r0, r8
 80075ba:	9305      	str	r3, [sp, #20]
 80075bc:	4649      	mov	r1, r9
 80075be:	2300      	movs	r3, #0
 80075c0:	4fb0      	ldr	r7, [pc, #704]	; (8007884 <_strtod_l+0x874>)
 80075c2:	07f2      	lsls	r2, r6, #31
 80075c4:	d504      	bpl.n	80075d0 <_strtod_l+0x5c0>
 80075c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075ca:	f7f8 fff1 	bl	80005b0 <__aeabi_dmul>
 80075ce:	2301      	movs	r3, #1
 80075d0:	1076      	asrs	r6, r6, #1
 80075d2:	f107 0708 	add.w	r7, r7, #8
 80075d6:	d1f4      	bne.n	80075c2 <_strtod_l+0x5b2>
 80075d8:	b10b      	cbz	r3, 80075de <_strtod_l+0x5ce>
 80075da:	4680      	mov	r8, r0
 80075dc:	4689      	mov	r9, r1
 80075de:	9b05      	ldr	r3, [sp, #20]
 80075e0:	b1c3      	cbz	r3, 8007614 <_strtod_l+0x604>
 80075e2:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80075e6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	4649      	mov	r1, r9
 80075ee:	dd11      	ble.n	8007614 <_strtod_l+0x604>
 80075f0:	2b1f      	cmp	r3, #31
 80075f2:	f340 8127 	ble.w	8007844 <_strtod_l+0x834>
 80075f6:	2b34      	cmp	r3, #52	; 0x34
 80075f8:	bfd8      	it	le
 80075fa:	f04f 33ff 	movle.w	r3, #4294967295
 80075fe:	f04f 0800 	mov.w	r8, #0
 8007602:	bfcf      	iteee	gt
 8007604:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8007608:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800760c:	fa03 f202 	lslle.w	r2, r3, r2
 8007610:	ea02 0901 	andle.w	r9, r2, r1
 8007614:	2200      	movs	r2, #0
 8007616:	2300      	movs	r3, #0
 8007618:	4640      	mov	r0, r8
 800761a:	4649      	mov	r1, r9
 800761c:	f7f9 fa30 	bl	8000a80 <__aeabi_dcmpeq>
 8007620:	2800      	cmp	r0, #0
 8007622:	d1a1      	bne.n	8007568 <_strtod_l+0x558>
 8007624:	9b06      	ldr	r3, [sp, #24]
 8007626:	465a      	mov	r2, fp
 8007628:	9300      	str	r3, [sp, #0]
 800762a:	4650      	mov	r0, sl
 800762c:	4623      	mov	r3, r4
 800762e:	9908      	ldr	r1, [sp, #32]
 8007630:	f001 fe3c 	bl	80092ac <__s2b>
 8007634:	9008      	str	r0, [sp, #32]
 8007636:	2800      	cmp	r0, #0
 8007638:	f43f af21 	beq.w	800747e <_strtod_l+0x46e>
 800763c:	9b04      	ldr	r3, [sp, #16]
 800763e:	f04f 0b00 	mov.w	fp, #0
 8007642:	1b5d      	subs	r5, r3, r5
 8007644:	9b07      	ldr	r3, [sp, #28]
 8007646:	f8cd b010 	str.w	fp, [sp, #16]
 800764a:	2b00      	cmp	r3, #0
 800764c:	bfb4      	ite	lt
 800764e:	462b      	movlt	r3, r5
 8007650:	2300      	movge	r3, #0
 8007652:	930e      	str	r3, [sp, #56]	; 0x38
 8007654:	9b07      	ldr	r3, [sp, #28]
 8007656:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800765a:	9314      	str	r3, [sp, #80]	; 0x50
 800765c:	9b08      	ldr	r3, [sp, #32]
 800765e:	4650      	mov	r0, sl
 8007660:	6859      	ldr	r1, [r3, #4]
 8007662:	f001 fd7b 	bl	800915c <_Balloc>
 8007666:	9006      	str	r0, [sp, #24]
 8007668:	2800      	cmp	r0, #0
 800766a:	f43f af10 	beq.w	800748e <_strtod_l+0x47e>
 800766e:	9b08      	ldr	r3, [sp, #32]
 8007670:	300c      	adds	r0, #12
 8007672:	691a      	ldr	r2, [r3, #16]
 8007674:	f103 010c 	add.w	r1, r3, #12
 8007678:	3202      	adds	r2, #2
 800767a:	0092      	lsls	r2, r2, #2
 800767c:	f001 fd60 	bl	8009140 <memcpy>
 8007680:	ab1c      	add	r3, sp, #112	; 0x70
 8007682:	9301      	str	r3, [sp, #4]
 8007684:	ab1b      	add	r3, sp, #108	; 0x6c
 8007686:	9300      	str	r3, [sp, #0]
 8007688:	4642      	mov	r2, r8
 800768a:	464b      	mov	r3, r9
 800768c:	4650      	mov	r0, sl
 800768e:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8007692:	f002 f94d 	bl	8009930 <__d2b>
 8007696:	901a      	str	r0, [sp, #104]	; 0x68
 8007698:	2800      	cmp	r0, #0
 800769a:	f43f aef8 	beq.w	800748e <_strtod_l+0x47e>
 800769e:	2101      	movs	r1, #1
 80076a0:	4650      	mov	r0, sl
 80076a2:	f001 fe9b 	bl	80093dc <__i2b>
 80076a6:	4603      	mov	r3, r0
 80076a8:	9004      	str	r0, [sp, #16]
 80076aa:	2800      	cmp	r0, #0
 80076ac:	f43f aeef 	beq.w	800748e <_strtod_l+0x47e>
 80076b0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80076b2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80076b4:	2d00      	cmp	r5, #0
 80076b6:	bfab      	itete	ge
 80076b8:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80076ba:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 80076bc:	18ee      	addge	r6, r5, r3
 80076be:	1b5c      	sublt	r4, r3, r5
 80076c0:	9b05      	ldr	r3, [sp, #20]
 80076c2:	bfa8      	it	ge
 80076c4:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 80076c6:	eba5 0503 	sub.w	r5, r5, r3
 80076ca:	4415      	add	r5, r2
 80076cc:	4b6e      	ldr	r3, [pc, #440]	; (8007888 <_strtod_l+0x878>)
 80076ce:	f105 35ff 	add.w	r5, r5, #4294967295
 80076d2:	bfb8      	it	lt
 80076d4:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 80076d6:	429d      	cmp	r5, r3
 80076d8:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80076dc:	f280 80c4 	bge.w	8007868 <_strtod_l+0x858>
 80076e0:	1b5b      	subs	r3, r3, r5
 80076e2:	2b1f      	cmp	r3, #31
 80076e4:	f04f 0701 	mov.w	r7, #1
 80076e8:	eba2 0203 	sub.w	r2, r2, r3
 80076ec:	f300 80b1 	bgt.w	8007852 <_strtod_l+0x842>
 80076f0:	2500      	movs	r5, #0
 80076f2:	fa07 f303 	lsl.w	r3, r7, r3
 80076f6:	930f      	str	r3, [sp, #60]	; 0x3c
 80076f8:	18b7      	adds	r7, r6, r2
 80076fa:	9b05      	ldr	r3, [sp, #20]
 80076fc:	42be      	cmp	r6, r7
 80076fe:	4414      	add	r4, r2
 8007700:	441c      	add	r4, r3
 8007702:	4633      	mov	r3, r6
 8007704:	bfa8      	it	ge
 8007706:	463b      	movge	r3, r7
 8007708:	42a3      	cmp	r3, r4
 800770a:	bfa8      	it	ge
 800770c:	4623      	movge	r3, r4
 800770e:	2b00      	cmp	r3, #0
 8007710:	bfc2      	ittt	gt
 8007712:	1aff      	subgt	r7, r7, r3
 8007714:	1ae4      	subgt	r4, r4, r3
 8007716:	1af6      	subgt	r6, r6, r3
 8007718:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800771a:	2b00      	cmp	r3, #0
 800771c:	dd17      	ble.n	800774e <_strtod_l+0x73e>
 800771e:	461a      	mov	r2, r3
 8007720:	4650      	mov	r0, sl
 8007722:	9904      	ldr	r1, [sp, #16]
 8007724:	f001 ff18 	bl	8009558 <__pow5mult>
 8007728:	9004      	str	r0, [sp, #16]
 800772a:	2800      	cmp	r0, #0
 800772c:	f43f aeaf 	beq.w	800748e <_strtod_l+0x47e>
 8007730:	4601      	mov	r1, r0
 8007732:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007734:	4650      	mov	r0, sl
 8007736:	f001 fe67 	bl	8009408 <__multiply>
 800773a:	9009      	str	r0, [sp, #36]	; 0x24
 800773c:	2800      	cmp	r0, #0
 800773e:	f43f aea6 	beq.w	800748e <_strtod_l+0x47e>
 8007742:	4650      	mov	r0, sl
 8007744:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007746:	f001 fd49 	bl	80091dc <_Bfree>
 800774a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800774c:	931a      	str	r3, [sp, #104]	; 0x68
 800774e:	2f00      	cmp	r7, #0
 8007750:	f300 808e 	bgt.w	8007870 <_strtod_l+0x860>
 8007754:	9b07      	ldr	r3, [sp, #28]
 8007756:	2b00      	cmp	r3, #0
 8007758:	dd08      	ble.n	800776c <_strtod_l+0x75c>
 800775a:	4650      	mov	r0, sl
 800775c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800775e:	9906      	ldr	r1, [sp, #24]
 8007760:	f001 fefa 	bl	8009558 <__pow5mult>
 8007764:	9006      	str	r0, [sp, #24]
 8007766:	2800      	cmp	r0, #0
 8007768:	f43f ae91 	beq.w	800748e <_strtod_l+0x47e>
 800776c:	2c00      	cmp	r4, #0
 800776e:	dd08      	ble.n	8007782 <_strtod_l+0x772>
 8007770:	4622      	mov	r2, r4
 8007772:	4650      	mov	r0, sl
 8007774:	9906      	ldr	r1, [sp, #24]
 8007776:	f001 ff49 	bl	800960c <__lshift>
 800777a:	9006      	str	r0, [sp, #24]
 800777c:	2800      	cmp	r0, #0
 800777e:	f43f ae86 	beq.w	800748e <_strtod_l+0x47e>
 8007782:	2e00      	cmp	r6, #0
 8007784:	dd08      	ble.n	8007798 <_strtod_l+0x788>
 8007786:	4632      	mov	r2, r6
 8007788:	4650      	mov	r0, sl
 800778a:	9904      	ldr	r1, [sp, #16]
 800778c:	f001 ff3e 	bl	800960c <__lshift>
 8007790:	9004      	str	r0, [sp, #16]
 8007792:	2800      	cmp	r0, #0
 8007794:	f43f ae7b 	beq.w	800748e <_strtod_l+0x47e>
 8007798:	4650      	mov	r0, sl
 800779a:	9a06      	ldr	r2, [sp, #24]
 800779c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800779e:	f001 ffc1 	bl	8009724 <__mdiff>
 80077a2:	4683      	mov	fp, r0
 80077a4:	2800      	cmp	r0, #0
 80077a6:	f43f ae72 	beq.w	800748e <_strtod_l+0x47e>
 80077aa:	2400      	movs	r4, #0
 80077ac:	68c3      	ldr	r3, [r0, #12]
 80077ae:	9904      	ldr	r1, [sp, #16]
 80077b0:	60c4      	str	r4, [r0, #12]
 80077b2:	930b      	str	r3, [sp, #44]	; 0x2c
 80077b4:	f001 ff9a 	bl	80096ec <__mcmp>
 80077b8:	42a0      	cmp	r0, r4
 80077ba:	da6b      	bge.n	8007894 <_strtod_l+0x884>
 80077bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80077be:	ea53 0308 	orrs.w	r3, r3, r8
 80077c2:	f040 8091 	bne.w	80078e8 <_strtod_l+0x8d8>
 80077c6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	f040 808c 	bne.w	80078e8 <_strtod_l+0x8d8>
 80077d0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80077d4:	0d1b      	lsrs	r3, r3, #20
 80077d6:	051b      	lsls	r3, r3, #20
 80077d8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80077dc:	f240 8084 	bls.w	80078e8 <_strtod_l+0x8d8>
 80077e0:	f8db 3014 	ldr.w	r3, [fp, #20]
 80077e4:	b91b      	cbnz	r3, 80077ee <_strtod_l+0x7de>
 80077e6:	f8db 3010 	ldr.w	r3, [fp, #16]
 80077ea:	2b01      	cmp	r3, #1
 80077ec:	dd7c      	ble.n	80078e8 <_strtod_l+0x8d8>
 80077ee:	4659      	mov	r1, fp
 80077f0:	2201      	movs	r2, #1
 80077f2:	4650      	mov	r0, sl
 80077f4:	f001 ff0a 	bl	800960c <__lshift>
 80077f8:	9904      	ldr	r1, [sp, #16]
 80077fa:	4683      	mov	fp, r0
 80077fc:	f001 ff76 	bl	80096ec <__mcmp>
 8007800:	2800      	cmp	r0, #0
 8007802:	dd71      	ble.n	80078e8 <_strtod_l+0x8d8>
 8007804:	9905      	ldr	r1, [sp, #20]
 8007806:	464b      	mov	r3, r9
 8007808:	4a20      	ldr	r2, [pc, #128]	; (800788c <_strtod_l+0x87c>)
 800780a:	2900      	cmp	r1, #0
 800780c:	f000 808c 	beq.w	8007928 <_strtod_l+0x918>
 8007810:	ea02 0109 	and.w	r1, r2, r9
 8007814:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007818:	f300 8086 	bgt.w	8007928 <_strtod_l+0x918>
 800781c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007820:	f77f aeaa 	ble.w	8007578 <_strtod_l+0x568>
 8007824:	4640      	mov	r0, r8
 8007826:	4649      	mov	r1, r9
 8007828:	4b19      	ldr	r3, [pc, #100]	; (8007890 <_strtod_l+0x880>)
 800782a:	2200      	movs	r2, #0
 800782c:	f7f8 fec0 	bl	80005b0 <__aeabi_dmul>
 8007830:	460b      	mov	r3, r1
 8007832:	4303      	orrs	r3, r0
 8007834:	bf08      	it	eq
 8007836:	2322      	moveq	r3, #34	; 0x22
 8007838:	4680      	mov	r8, r0
 800783a:	4689      	mov	r9, r1
 800783c:	bf08      	it	eq
 800783e:	f8ca 3000 	streq.w	r3, [sl]
 8007842:	e62f      	b.n	80074a4 <_strtod_l+0x494>
 8007844:	f04f 32ff 	mov.w	r2, #4294967295
 8007848:	fa02 f303 	lsl.w	r3, r2, r3
 800784c:	ea03 0808 	and.w	r8, r3, r8
 8007850:	e6e0      	b.n	8007614 <_strtod_l+0x604>
 8007852:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8007856:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800785a:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800785e:	35e2      	adds	r5, #226	; 0xe2
 8007860:	fa07 f505 	lsl.w	r5, r7, r5
 8007864:	970f      	str	r7, [sp, #60]	; 0x3c
 8007866:	e747      	b.n	80076f8 <_strtod_l+0x6e8>
 8007868:	2301      	movs	r3, #1
 800786a:	2500      	movs	r5, #0
 800786c:	930f      	str	r3, [sp, #60]	; 0x3c
 800786e:	e743      	b.n	80076f8 <_strtod_l+0x6e8>
 8007870:	463a      	mov	r2, r7
 8007872:	4650      	mov	r0, sl
 8007874:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007876:	f001 fec9 	bl	800960c <__lshift>
 800787a:	901a      	str	r0, [sp, #104]	; 0x68
 800787c:	2800      	cmp	r0, #0
 800787e:	f47f af69 	bne.w	8007754 <_strtod_l+0x744>
 8007882:	e604      	b.n	800748e <_strtod_l+0x47e>
 8007884:	0800ac10 	.word	0x0800ac10
 8007888:	fffffc02 	.word	0xfffffc02
 800788c:	7ff00000 	.word	0x7ff00000
 8007890:	39500000 	.word	0x39500000
 8007894:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8007898:	d165      	bne.n	8007966 <_strtod_l+0x956>
 800789a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800789c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80078a0:	b35a      	cbz	r2, 80078fa <_strtod_l+0x8ea>
 80078a2:	4a99      	ldr	r2, [pc, #612]	; (8007b08 <_strtod_l+0xaf8>)
 80078a4:	4293      	cmp	r3, r2
 80078a6:	d12b      	bne.n	8007900 <_strtod_l+0x8f0>
 80078a8:	9b05      	ldr	r3, [sp, #20]
 80078aa:	4641      	mov	r1, r8
 80078ac:	b303      	cbz	r3, 80078f0 <_strtod_l+0x8e0>
 80078ae:	464a      	mov	r2, r9
 80078b0:	4b96      	ldr	r3, [pc, #600]	; (8007b0c <_strtod_l+0xafc>)
 80078b2:	4013      	ands	r3, r2
 80078b4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80078b8:	f04f 32ff 	mov.w	r2, #4294967295
 80078bc:	d81b      	bhi.n	80078f6 <_strtod_l+0x8e6>
 80078be:	0d1b      	lsrs	r3, r3, #20
 80078c0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80078c4:	fa02 f303 	lsl.w	r3, r2, r3
 80078c8:	4299      	cmp	r1, r3
 80078ca:	d119      	bne.n	8007900 <_strtod_l+0x8f0>
 80078cc:	4b90      	ldr	r3, [pc, #576]	; (8007b10 <_strtod_l+0xb00>)
 80078ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80078d0:	429a      	cmp	r2, r3
 80078d2:	d102      	bne.n	80078da <_strtod_l+0x8ca>
 80078d4:	3101      	adds	r1, #1
 80078d6:	f43f adda 	beq.w	800748e <_strtod_l+0x47e>
 80078da:	f04f 0800 	mov.w	r8, #0
 80078de:	4b8b      	ldr	r3, [pc, #556]	; (8007b0c <_strtod_l+0xafc>)
 80078e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80078e2:	401a      	ands	r2, r3
 80078e4:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 80078e8:	9b05      	ldr	r3, [sp, #20]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d19a      	bne.n	8007824 <_strtod_l+0x814>
 80078ee:	e5d9      	b.n	80074a4 <_strtod_l+0x494>
 80078f0:	f04f 33ff 	mov.w	r3, #4294967295
 80078f4:	e7e8      	b.n	80078c8 <_strtod_l+0x8b8>
 80078f6:	4613      	mov	r3, r2
 80078f8:	e7e6      	b.n	80078c8 <_strtod_l+0x8b8>
 80078fa:	ea53 0308 	orrs.w	r3, r3, r8
 80078fe:	d081      	beq.n	8007804 <_strtod_l+0x7f4>
 8007900:	b1e5      	cbz	r5, 800793c <_strtod_l+0x92c>
 8007902:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007904:	421d      	tst	r5, r3
 8007906:	d0ef      	beq.n	80078e8 <_strtod_l+0x8d8>
 8007908:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800790a:	4640      	mov	r0, r8
 800790c:	4649      	mov	r1, r9
 800790e:	9a05      	ldr	r2, [sp, #20]
 8007910:	b1c3      	cbz	r3, 8007944 <_strtod_l+0x934>
 8007912:	f7ff fb5b 	bl	8006fcc <sulp>
 8007916:	4602      	mov	r2, r0
 8007918:	460b      	mov	r3, r1
 800791a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800791e:	f7f8 fc91 	bl	8000244 <__adddf3>
 8007922:	4680      	mov	r8, r0
 8007924:	4689      	mov	r9, r1
 8007926:	e7df      	b.n	80078e8 <_strtod_l+0x8d8>
 8007928:	4013      	ands	r3, r2
 800792a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800792e:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8007932:	f04f 38ff 	mov.w	r8, #4294967295
 8007936:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800793a:	e7d5      	b.n	80078e8 <_strtod_l+0x8d8>
 800793c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800793e:	ea13 0f08 	tst.w	r3, r8
 8007942:	e7e0      	b.n	8007906 <_strtod_l+0x8f6>
 8007944:	f7ff fb42 	bl	8006fcc <sulp>
 8007948:	4602      	mov	r2, r0
 800794a:	460b      	mov	r3, r1
 800794c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007950:	f7f8 fc76 	bl	8000240 <__aeabi_dsub>
 8007954:	2200      	movs	r2, #0
 8007956:	2300      	movs	r3, #0
 8007958:	4680      	mov	r8, r0
 800795a:	4689      	mov	r9, r1
 800795c:	f7f9 f890 	bl	8000a80 <__aeabi_dcmpeq>
 8007960:	2800      	cmp	r0, #0
 8007962:	d0c1      	beq.n	80078e8 <_strtod_l+0x8d8>
 8007964:	e608      	b.n	8007578 <_strtod_l+0x568>
 8007966:	4658      	mov	r0, fp
 8007968:	9904      	ldr	r1, [sp, #16]
 800796a:	f002 f83d 	bl	80099e8 <__ratio>
 800796e:	2200      	movs	r2, #0
 8007970:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007974:	4606      	mov	r6, r0
 8007976:	460f      	mov	r7, r1
 8007978:	f7f9 f896 	bl	8000aa8 <__aeabi_dcmple>
 800797c:	2800      	cmp	r0, #0
 800797e:	d070      	beq.n	8007a62 <_strtod_l+0xa52>
 8007980:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007982:	2b00      	cmp	r3, #0
 8007984:	d042      	beq.n	8007a0c <_strtod_l+0x9fc>
 8007986:	2600      	movs	r6, #0
 8007988:	4f62      	ldr	r7, [pc, #392]	; (8007b14 <_strtod_l+0xb04>)
 800798a:	4d62      	ldr	r5, [pc, #392]	; (8007b14 <_strtod_l+0xb04>)
 800798c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800798e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007992:	0d1b      	lsrs	r3, r3, #20
 8007994:	051b      	lsls	r3, r3, #20
 8007996:	930f      	str	r3, [sp, #60]	; 0x3c
 8007998:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800799a:	4b5f      	ldr	r3, [pc, #380]	; (8007b18 <_strtod_l+0xb08>)
 800799c:	429a      	cmp	r2, r3
 800799e:	f040 80c3 	bne.w	8007b28 <_strtod_l+0xb18>
 80079a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079a4:	4640      	mov	r0, r8
 80079a6:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 80079aa:	4649      	mov	r1, r9
 80079ac:	f001 ff46 	bl	800983c <__ulp>
 80079b0:	4602      	mov	r2, r0
 80079b2:	460b      	mov	r3, r1
 80079b4:	4630      	mov	r0, r6
 80079b6:	4639      	mov	r1, r7
 80079b8:	f7f8 fdfa 	bl	80005b0 <__aeabi_dmul>
 80079bc:	4642      	mov	r2, r8
 80079be:	464b      	mov	r3, r9
 80079c0:	f7f8 fc40 	bl	8000244 <__adddf3>
 80079c4:	460b      	mov	r3, r1
 80079c6:	4951      	ldr	r1, [pc, #324]	; (8007b0c <_strtod_l+0xafc>)
 80079c8:	4a54      	ldr	r2, [pc, #336]	; (8007b1c <_strtod_l+0xb0c>)
 80079ca:	4019      	ands	r1, r3
 80079cc:	4291      	cmp	r1, r2
 80079ce:	4680      	mov	r8, r0
 80079d0:	d95d      	bls.n	8007a8e <_strtod_l+0xa7e>
 80079d2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80079d4:	4b4e      	ldr	r3, [pc, #312]	; (8007b10 <_strtod_l+0xb00>)
 80079d6:	429a      	cmp	r2, r3
 80079d8:	d103      	bne.n	80079e2 <_strtod_l+0x9d2>
 80079da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80079dc:	3301      	adds	r3, #1
 80079de:	f43f ad56 	beq.w	800748e <_strtod_l+0x47e>
 80079e2:	f04f 38ff 	mov.w	r8, #4294967295
 80079e6:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8007b10 <_strtod_l+0xb00>
 80079ea:	4650      	mov	r0, sl
 80079ec:	991a      	ldr	r1, [sp, #104]	; 0x68
 80079ee:	f001 fbf5 	bl	80091dc <_Bfree>
 80079f2:	4650      	mov	r0, sl
 80079f4:	9906      	ldr	r1, [sp, #24]
 80079f6:	f001 fbf1 	bl	80091dc <_Bfree>
 80079fa:	4650      	mov	r0, sl
 80079fc:	9904      	ldr	r1, [sp, #16]
 80079fe:	f001 fbed 	bl	80091dc <_Bfree>
 8007a02:	4659      	mov	r1, fp
 8007a04:	4650      	mov	r0, sl
 8007a06:	f001 fbe9 	bl	80091dc <_Bfree>
 8007a0a:	e627      	b.n	800765c <_strtod_l+0x64c>
 8007a0c:	f1b8 0f00 	cmp.w	r8, #0
 8007a10:	d119      	bne.n	8007a46 <_strtod_l+0xa36>
 8007a12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007a18:	b9e3      	cbnz	r3, 8007a54 <_strtod_l+0xa44>
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	4630      	mov	r0, r6
 8007a1e:	4639      	mov	r1, r7
 8007a20:	4b3c      	ldr	r3, [pc, #240]	; (8007b14 <_strtod_l+0xb04>)
 8007a22:	f7f9 f837 	bl	8000a94 <__aeabi_dcmplt>
 8007a26:	b9c8      	cbnz	r0, 8007a5c <_strtod_l+0xa4c>
 8007a28:	2200      	movs	r2, #0
 8007a2a:	4630      	mov	r0, r6
 8007a2c:	4639      	mov	r1, r7
 8007a2e:	4b3c      	ldr	r3, [pc, #240]	; (8007b20 <_strtod_l+0xb10>)
 8007a30:	f7f8 fdbe 	bl	80005b0 <__aeabi_dmul>
 8007a34:	4604      	mov	r4, r0
 8007a36:	460d      	mov	r5, r1
 8007a38:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8007a3c:	9416      	str	r4, [sp, #88]	; 0x58
 8007a3e:	9317      	str	r3, [sp, #92]	; 0x5c
 8007a40:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 8007a44:	e7a2      	b.n	800798c <_strtod_l+0x97c>
 8007a46:	f1b8 0f01 	cmp.w	r8, #1
 8007a4a:	d103      	bne.n	8007a54 <_strtod_l+0xa44>
 8007a4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	f43f ad92 	beq.w	8007578 <_strtod_l+0x568>
 8007a54:	2600      	movs	r6, #0
 8007a56:	2400      	movs	r4, #0
 8007a58:	4f32      	ldr	r7, [pc, #200]	; (8007b24 <_strtod_l+0xb14>)
 8007a5a:	e796      	b.n	800798a <_strtod_l+0x97a>
 8007a5c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8007a5e:	4d30      	ldr	r5, [pc, #192]	; (8007b20 <_strtod_l+0xb10>)
 8007a60:	e7ea      	b.n	8007a38 <_strtod_l+0xa28>
 8007a62:	4b2f      	ldr	r3, [pc, #188]	; (8007b20 <_strtod_l+0xb10>)
 8007a64:	2200      	movs	r2, #0
 8007a66:	4630      	mov	r0, r6
 8007a68:	4639      	mov	r1, r7
 8007a6a:	f7f8 fda1 	bl	80005b0 <__aeabi_dmul>
 8007a6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a70:	4604      	mov	r4, r0
 8007a72:	460d      	mov	r5, r1
 8007a74:	b933      	cbnz	r3, 8007a84 <_strtod_l+0xa74>
 8007a76:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007a7a:	9010      	str	r0, [sp, #64]	; 0x40
 8007a7c:	9311      	str	r3, [sp, #68]	; 0x44
 8007a7e:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8007a82:	e783      	b.n	800798c <_strtod_l+0x97c>
 8007a84:	4602      	mov	r2, r0
 8007a86:	460b      	mov	r3, r1
 8007a88:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8007a8c:	e7f7      	b.n	8007a7e <_strtod_l+0xa6e>
 8007a8e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8007a92:	9b05      	ldr	r3, [sp, #20]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d1a8      	bne.n	80079ea <_strtod_l+0x9da>
 8007a98:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007a9c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007a9e:	0d1b      	lsrs	r3, r3, #20
 8007aa0:	051b      	lsls	r3, r3, #20
 8007aa2:	429a      	cmp	r2, r3
 8007aa4:	d1a1      	bne.n	80079ea <_strtod_l+0x9da>
 8007aa6:	4620      	mov	r0, r4
 8007aa8:	4629      	mov	r1, r5
 8007aaa:	f7f9 fbc3 	bl	8001234 <__aeabi_d2lz>
 8007aae:	f7f8 fd51 	bl	8000554 <__aeabi_l2d>
 8007ab2:	4602      	mov	r2, r0
 8007ab4:	460b      	mov	r3, r1
 8007ab6:	4620      	mov	r0, r4
 8007ab8:	4629      	mov	r1, r5
 8007aba:	f7f8 fbc1 	bl	8000240 <__aeabi_dsub>
 8007abe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007ac0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007ac4:	ea43 0308 	orr.w	r3, r3, r8
 8007ac8:	4313      	orrs	r3, r2
 8007aca:	4604      	mov	r4, r0
 8007acc:	460d      	mov	r5, r1
 8007ace:	d066      	beq.n	8007b9e <_strtod_l+0xb8e>
 8007ad0:	a309      	add	r3, pc, #36	; (adr r3, 8007af8 <_strtod_l+0xae8>)
 8007ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ad6:	f7f8 ffdd 	bl	8000a94 <__aeabi_dcmplt>
 8007ada:	2800      	cmp	r0, #0
 8007adc:	f47f ace2 	bne.w	80074a4 <_strtod_l+0x494>
 8007ae0:	a307      	add	r3, pc, #28	; (adr r3, 8007b00 <_strtod_l+0xaf0>)
 8007ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ae6:	4620      	mov	r0, r4
 8007ae8:	4629      	mov	r1, r5
 8007aea:	f7f8 fff1 	bl	8000ad0 <__aeabi_dcmpgt>
 8007aee:	2800      	cmp	r0, #0
 8007af0:	f43f af7b 	beq.w	80079ea <_strtod_l+0x9da>
 8007af4:	e4d6      	b.n	80074a4 <_strtod_l+0x494>
 8007af6:	bf00      	nop
 8007af8:	94a03595 	.word	0x94a03595
 8007afc:	3fdfffff 	.word	0x3fdfffff
 8007b00:	35afe535 	.word	0x35afe535
 8007b04:	3fe00000 	.word	0x3fe00000
 8007b08:	000fffff 	.word	0x000fffff
 8007b0c:	7ff00000 	.word	0x7ff00000
 8007b10:	7fefffff 	.word	0x7fefffff
 8007b14:	3ff00000 	.word	0x3ff00000
 8007b18:	7fe00000 	.word	0x7fe00000
 8007b1c:	7c9fffff 	.word	0x7c9fffff
 8007b20:	3fe00000 	.word	0x3fe00000
 8007b24:	bff00000 	.word	0xbff00000
 8007b28:	9b05      	ldr	r3, [sp, #20]
 8007b2a:	b313      	cbz	r3, 8007b72 <_strtod_l+0xb62>
 8007b2c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007b2e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007b32:	d81e      	bhi.n	8007b72 <_strtod_l+0xb62>
 8007b34:	a326      	add	r3, pc, #152	; (adr r3, 8007bd0 <_strtod_l+0xbc0>)
 8007b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b3a:	4620      	mov	r0, r4
 8007b3c:	4629      	mov	r1, r5
 8007b3e:	f7f8 ffb3 	bl	8000aa8 <__aeabi_dcmple>
 8007b42:	b190      	cbz	r0, 8007b6a <_strtod_l+0xb5a>
 8007b44:	4629      	mov	r1, r5
 8007b46:	4620      	mov	r0, r4
 8007b48:	f7f9 f80a 	bl	8000b60 <__aeabi_d2uiz>
 8007b4c:	2801      	cmp	r0, #1
 8007b4e:	bf38      	it	cc
 8007b50:	2001      	movcc	r0, #1
 8007b52:	f7f8 fcb3 	bl	80004bc <__aeabi_ui2d>
 8007b56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b58:	4604      	mov	r4, r0
 8007b5a:	460d      	mov	r5, r1
 8007b5c:	b9d3      	cbnz	r3, 8007b94 <_strtod_l+0xb84>
 8007b5e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007b62:	9012      	str	r0, [sp, #72]	; 0x48
 8007b64:	9313      	str	r3, [sp, #76]	; 0x4c
 8007b66:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8007b6a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007b6c:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8007b70:	1a9f      	subs	r7, r3, r2
 8007b72:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007b76:	f001 fe61 	bl	800983c <__ulp>
 8007b7a:	4602      	mov	r2, r0
 8007b7c:	460b      	mov	r3, r1
 8007b7e:	4630      	mov	r0, r6
 8007b80:	4639      	mov	r1, r7
 8007b82:	f7f8 fd15 	bl	80005b0 <__aeabi_dmul>
 8007b86:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007b8a:	f7f8 fb5b 	bl	8000244 <__adddf3>
 8007b8e:	4680      	mov	r8, r0
 8007b90:	4689      	mov	r9, r1
 8007b92:	e77e      	b.n	8007a92 <_strtod_l+0xa82>
 8007b94:	4602      	mov	r2, r0
 8007b96:	460b      	mov	r3, r1
 8007b98:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8007b9c:	e7e3      	b.n	8007b66 <_strtod_l+0xb56>
 8007b9e:	a30e      	add	r3, pc, #56	; (adr r3, 8007bd8 <_strtod_l+0xbc8>)
 8007ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ba4:	f7f8 ff76 	bl	8000a94 <__aeabi_dcmplt>
 8007ba8:	e7a1      	b.n	8007aee <_strtod_l+0xade>
 8007baa:	2300      	movs	r3, #0
 8007bac:	930a      	str	r3, [sp, #40]	; 0x28
 8007bae:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007bb0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007bb2:	6013      	str	r3, [r2, #0]
 8007bb4:	f7ff ba71 	b.w	800709a <_strtod_l+0x8a>
 8007bb8:	2a65      	cmp	r2, #101	; 0x65
 8007bba:	f43f ab63 	beq.w	8007284 <_strtod_l+0x274>
 8007bbe:	2a45      	cmp	r2, #69	; 0x45
 8007bc0:	f43f ab60 	beq.w	8007284 <_strtod_l+0x274>
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	f7ff bb95 	b.w	80072f4 <_strtod_l+0x2e4>
 8007bca:	bf00      	nop
 8007bcc:	f3af 8000 	nop.w
 8007bd0:	ffc00000 	.word	0xffc00000
 8007bd4:	41dfffff 	.word	0x41dfffff
 8007bd8:	94a03595 	.word	0x94a03595
 8007bdc:	3fcfffff 	.word	0x3fcfffff

08007be0 <_strtod_r>:
 8007be0:	4b01      	ldr	r3, [pc, #4]	; (8007be8 <_strtod_r+0x8>)
 8007be2:	f7ff ba15 	b.w	8007010 <_strtod_l>
 8007be6:	bf00      	nop
 8007be8:	2000009c 	.word	0x2000009c

08007bec <_strtol_l.constprop.0>:
 8007bec:	2b01      	cmp	r3, #1
 8007bee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007bf2:	4680      	mov	r8, r0
 8007bf4:	d001      	beq.n	8007bfa <_strtol_l.constprop.0+0xe>
 8007bf6:	2b24      	cmp	r3, #36	; 0x24
 8007bf8:	d906      	bls.n	8007c08 <_strtol_l.constprop.0+0x1c>
 8007bfa:	f7fe fb23 	bl	8006244 <__errno>
 8007bfe:	2316      	movs	r3, #22
 8007c00:	6003      	str	r3, [r0, #0]
 8007c02:	2000      	movs	r0, #0
 8007c04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c08:	460d      	mov	r5, r1
 8007c0a:	4f35      	ldr	r7, [pc, #212]	; (8007ce0 <_strtol_l.constprop.0+0xf4>)
 8007c0c:	4628      	mov	r0, r5
 8007c0e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007c12:	5de6      	ldrb	r6, [r4, r7]
 8007c14:	f016 0608 	ands.w	r6, r6, #8
 8007c18:	d1f8      	bne.n	8007c0c <_strtol_l.constprop.0+0x20>
 8007c1a:	2c2d      	cmp	r4, #45	; 0x2d
 8007c1c:	d12f      	bne.n	8007c7e <_strtol_l.constprop.0+0x92>
 8007c1e:	2601      	movs	r6, #1
 8007c20:	782c      	ldrb	r4, [r5, #0]
 8007c22:	1c85      	adds	r5, r0, #2
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d057      	beq.n	8007cd8 <_strtol_l.constprop.0+0xec>
 8007c28:	2b10      	cmp	r3, #16
 8007c2a:	d109      	bne.n	8007c40 <_strtol_l.constprop.0+0x54>
 8007c2c:	2c30      	cmp	r4, #48	; 0x30
 8007c2e:	d107      	bne.n	8007c40 <_strtol_l.constprop.0+0x54>
 8007c30:	7828      	ldrb	r0, [r5, #0]
 8007c32:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8007c36:	2858      	cmp	r0, #88	; 0x58
 8007c38:	d149      	bne.n	8007cce <_strtol_l.constprop.0+0xe2>
 8007c3a:	2310      	movs	r3, #16
 8007c3c:	786c      	ldrb	r4, [r5, #1]
 8007c3e:	3502      	adds	r5, #2
 8007c40:	2700      	movs	r7, #0
 8007c42:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8007c46:	f10e 3eff 	add.w	lr, lr, #4294967295
 8007c4a:	fbbe f9f3 	udiv	r9, lr, r3
 8007c4e:	4638      	mov	r0, r7
 8007c50:	fb03 ea19 	mls	sl, r3, r9, lr
 8007c54:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8007c58:	f1bc 0f09 	cmp.w	ip, #9
 8007c5c:	d814      	bhi.n	8007c88 <_strtol_l.constprop.0+0x9c>
 8007c5e:	4664      	mov	r4, ip
 8007c60:	42a3      	cmp	r3, r4
 8007c62:	dd22      	ble.n	8007caa <_strtol_l.constprop.0+0xbe>
 8007c64:	2f00      	cmp	r7, #0
 8007c66:	db1d      	blt.n	8007ca4 <_strtol_l.constprop.0+0xb8>
 8007c68:	4581      	cmp	r9, r0
 8007c6a:	d31b      	bcc.n	8007ca4 <_strtol_l.constprop.0+0xb8>
 8007c6c:	d101      	bne.n	8007c72 <_strtol_l.constprop.0+0x86>
 8007c6e:	45a2      	cmp	sl, r4
 8007c70:	db18      	blt.n	8007ca4 <_strtol_l.constprop.0+0xb8>
 8007c72:	2701      	movs	r7, #1
 8007c74:	fb00 4003 	mla	r0, r0, r3, r4
 8007c78:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007c7c:	e7ea      	b.n	8007c54 <_strtol_l.constprop.0+0x68>
 8007c7e:	2c2b      	cmp	r4, #43	; 0x2b
 8007c80:	bf04      	itt	eq
 8007c82:	782c      	ldrbeq	r4, [r5, #0]
 8007c84:	1c85      	addeq	r5, r0, #2
 8007c86:	e7cd      	b.n	8007c24 <_strtol_l.constprop.0+0x38>
 8007c88:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8007c8c:	f1bc 0f19 	cmp.w	ip, #25
 8007c90:	d801      	bhi.n	8007c96 <_strtol_l.constprop.0+0xaa>
 8007c92:	3c37      	subs	r4, #55	; 0x37
 8007c94:	e7e4      	b.n	8007c60 <_strtol_l.constprop.0+0x74>
 8007c96:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8007c9a:	f1bc 0f19 	cmp.w	ip, #25
 8007c9e:	d804      	bhi.n	8007caa <_strtol_l.constprop.0+0xbe>
 8007ca0:	3c57      	subs	r4, #87	; 0x57
 8007ca2:	e7dd      	b.n	8007c60 <_strtol_l.constprop.0+0x74>
 8007ca4:	f04f 37ff 	mov.w	r7, #4294967295
 8007ca8:	e7e6      	b.n	8007c78 <_strtol_l.constprop.0+0x8c>
 8007caa:	2f00      	cmp	r7, #0
 8007cac:	da07      	bge.n	8007cbe <_strtol_l.constprop.0+0xd2>
 8007cae:	2322      	movs	r3, #34	; 0x22
 8007cb0:	4670      	mov	r0, lr
 8007cb2:	f8c8 3000 	str.w	r3, [r8]
 8007cb6:	2a00      	cmp	r2, #0
 8007cb8:	d0a4      	beq.n	8007c04 <_strtol_l.constprop.0+0x18>
 8007cba:	1e69      	subs	r1, r5, #1
 8007cbc:	e005      	b.n	8007cca <_strtol_l.constprop.0+0xde>
 8007cbe:	b106      	cbz	r6, 8007cc2 <_strtol_l.constprop.0+0xd6>
 8007cc0:	4240      	negs	r0, r0
 8007cc2:	2a00      	cmp	r2, #0
 8007cc4:	d09e      	beq.n	8007c04 <_strtol_l.constprop.0+0x18>
 8007cc6:	2f00      	cmp	r7, #0
 8007cc8:	d1f7      	bne.n	8007cba <_strtol_l.constprop.0+0xce>
 8007cca:	6011      	str	r1, [r2, #0]
 8007ccc:	e79a      	b.n	8007c04 <_strtol_l.constprop.0+0x18>
 8007cce:	2430      	movs	r4, #48	; 0x30
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d1b5      	bne.n	8007c40 <_strtol_l.constprop.0+0x54>
 8007cd4:	2308      	movs	r3, #8
 8007cd6:	e7b3      	b.n	8007c40 <_strtol_l.constprop.0+0x54>
 8007cd8:	2c30      	cmp	r4, #48	; 0x30
 8007cda:	d0a9      	beq.n	8007c30 <_strtol_l.constprop.0+0x44>
 8007cdc:	230a      	movs	r3, #10
 8007cde:	e7af      	b.n	8007c40 <_strtol_l.constprop.0+0x54>
 8007ce0:	0800ac39 	.word	0x0800ac39

08007ce4 <_strtol_r>:
 8007ce4:	f7ff bf82 	b.w	8007bec <_strtol_l.constprop.0>

08007ce8 <_vsiprintf_r>:
 8007ce8:	b500      	push	{lr}
 8007cea:	b09b      	sub	sp, #108	; 0x6c
 8007cec:	9100      	str	r1, [sp, #0]
 8007cee:	9104      	str	r1, [sp, #16]
 8007cf0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007cf4:	9105      	str	r1, [sp, #20]
 8007cf6:	9102      	str	r1, [sp, #8]
 8007cf8:	4905      	ldr	r1, [pc, #20]	; (8007d10 <_vsiprintf_r+0x28>)
 8007cfa:	9103      	str	r1, [sp, #12]
 8007cfc:	4669      	mov	r1, sp
 8007cfe:	f002 f831 	bl	8009d64 <_svfiprintf_r>
 8007d02:	2200      	movs	r2, #0
 8007d04:	9b00      	ldr	r3, [sp, #0]
 8007d06:	701a      	strb	r2, [r3, #0]
 8007d08:	b01b      	add	sp, #108	; 0x6c
 8007d0a:	f85d fb04 	ldr.w	pc, [sp], #4
 8007d0e:	bf00      	nop
 8007d10:	ffff0208 	.word	0xffff0208

08007d14 <vsiprintf>:
 8007d14:	4613      	mov	r3, r2
 8007d16:	460a      	mov	r2, r1
 8007d18:	4601      	mov	r1, r0
 8007d1a:	4802      	ldr	r0, [pc, #8]	; (8007d24 <vsiprintf+0x10>)
 8007d1c:	6800      	ldr	r0, [r0, #0]
 8007d1e:	f7ff bfe3 	b.w	8007ce8 <_vsiprintf_r>
 8007d22:	bf00      	nop
 8007d24:	20000034 	.word	0x20000034

08007d28 <quorem>:
 8007d28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d2c:	6903      	ldr	r3, [r0, #16]
 8007d2e:	690c      	ldr	r4, [r1, #16]
 8007d30:	4607      	mov	r7, r0
 8007d32:	42a3      	cmp	r3, r4
 8007d34:	f2c0 8082 	blt.w	8007e3c <quorem+0x114>
 8007d38:	3c01      	subs	r4, #1
 8007d3a:	f100 0514 	add.w	r5, r0, #20
 8007d3e:	f101 0814 	add.w	r8, r1, #20
 8007d42:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007d46:	9301      	str	r3, [sp, #4]
 8007d48:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007d4c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007d50:	3301      	adds	r3, #1
 8007d52:	429a      	cmp	r2, r3
 8007d54:	fbb2 f6f3 	udiv	r6, r2, r3
 8007d58:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007d5c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007d60:	d331      	bcc.n	8007dc6 <quorem+0x9e>
 8007d62:	f04f 0e00 	mov.w	lr, #0
 8007d66:	4640      	mov	r0, r8
 8007d68:	46ac      	mov	ip, r5
 8007d6a:	46f2      	mov	sl, lr
 8007d6c:	f850 2b04 	ldr.w	r2, [r0], #4
 8007d70:	b293      	uxth	r3, r2
 8007d72:	fb06 e303 	mla	r3, r6, r3, lr
 8007d76:	0c12      	lsrs	r2, r2, #16
 8007d78:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007d7c:	b29b      	uxth	r3, r3
 8007d7e:	fb06 e202 	mla	r2, r6, r2, lr
 8007d82:	ebaa 0303 	sub.w	r3, sl, r3
 8007d86:	f8dc a000 	ldr.w	sl, [ip]
 8007d8a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007d8e:	fa1f fa8a 	uxth.w	sl, sl
 8007d92:	4453      	add	r3, sl
 8007d94:	f8dc a000 	ldr.w	sl, [ip]
 8007d98:	b292      	uxth	r2, r2
 8007d9a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007d9e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007da2:	b29b      	uxth	r3, r3
 8007da4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007da8:	4581      	cmp	r9, r0
 8007daa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007dae:	f84c 3b04 	str.w	r3, [ip], #4
 8007db2:	d2db      	bcs.n	8007d6c <quorem+0x44>
 8007db4:	f855 300b 	ldr.w	r3, [r5, fp]
 8007db8:	b92b      	cbnz	r3, 8007dc6 <quorem+0x9e>
 8007dba:	9b01      	ldr	r3, [sp, #4]
 8007dbc:	3b04      	subs	r3, #4
 8007dbe:	429d      	cmp	r5, r3
 8007dc0:	461a      	mov	r2, r3
 8007dc2:	d32f      	bcc.n	8007e24 <quorem+0xfc>
 8007dc4:	613c      	str	r4, [r7, #16]
 8007dc6:	4638      	mov	r0, r7
 8007dc8:	f001 fc90 	bl	80096ec <__mcmp>
 8007dcc:	2800      	cmp	r0, #0
 8007dce:	db25      	blt.n	8007e1c <quorem+0xf4>
 8007dd0:	4628      	mov	r0, r5
 8007dd2:	f04f 0c00 	mov.w	ip, #0
 8007dd6:	3601      	adds	r6, #1
 8007dd8:	f858 1b04 	ldr.w	r1, [r8], #4
 8007ddc:	f8d0 e000 	ldr.w	lr, [r0]
 8007de0:	b28b      	uxth	r3, r1
 8007de2:	ebac 0303 	sub.w	r3, ip, r3
 8007de6:	fa1f f28e 	uxth.w	r2, lr
 8007dea:	4413      	add	r3, r2
 8007dec:	0c0a      	lsrs	r2, r1, #16
 8007dee:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007df2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007df6:	b29b      	uxth	r3, r3
 8007df8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007dfc:	45c1      	cmp	r9, r8
 8007dfe:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007e02:	f840 3b04 	str.w	r3, [r0], #4
 8007e06:	d2e7      	bcs.n	8007dd8 <quorem+0xb0>
 8007e08:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007e0c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007e10:	b922      	cbnz	r2, 8007e1c <quorem+0xf4>
 8007e12:	3b04      	subs	r3, #4
 8007e14:	429d      	cmp	r5, r3
 8007e16:	461a      	mov	r2, r3
 8007e18:	d30a      	bcc.n	8007e30 <quorem+0x108>
 8007e1a:	613c      	str	r4, [r7, #16]
 8007e1c:	4630      	mov	r0, r6
 8007e1e:	b003      	add	sp, #12
 8007e20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e24:	6812      	ldr	r2, [r2, #0]
 8007e26:	3b04      	subs	r3, #4
 8007e28:	2a00      	cmp	r2, #0
 8007e2a:	d1cb      	bne.n	8007dc4 <quorem+0x9c>
 8007e2c:	3c01      	subs	r4, #1
 8007e2e:	e7c6      	b.n	8007dbe <quorem+0x96>
 8007e30:	6812      	ldr	r2, [r2, #0]
 8007e32:	3b04      	subs	r3, #4
 8007e34:	2a00      	cmp	r2, #0
 8007e36:	d1f0      	bne.n	8007e1a <quorem+0xf2>
 8007e38:	3c01      	subs	r4, #1
 8007e3a:	e7eb      	b.n	8007e14 <quorem+0xec>
 8007e3c:	2000      	movs	r0, #0
 8007e3e:	e7ee      	b.n	8007e1e <quorem+0xf6>

08007e40 <_dtoa_r>:
 8007e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e44:	4616      	mov	r6, r2
 8007e46:	461f      	mov	r7, r3
 8007e48:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007e4a:	b099      	sub	sp, #100	; 0x64
 8007e4c:	4605      	mov	r5, r0
 8007e4e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007e52:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8007e56:	b974      	cbnz	r4, 8007e76 <_dtoa_r+0x36>
 8007e58:	2010      	movs	r0, #16
 8007e5a:	f001 f949 	bl	80090f0 <malloc>
 8007e5e:	4602      	mov	r2, r0
 8007e60:	6268      	str	r0, [r5, #36]	; 0x24
 8007e62:	b920      	cbnz	r0, 8007e6e <_dtoa_r+0x2e>
 8007e64:	21ea      	movs	r1, #234	; 0xea
 8007e66:	4ba8      	ldr	r3, [pc, #672]	; (8008108 <_dtoa_r+0x2c8>)
 8007e68:	48a8      	ldr	r0, [pc, #672]	; (800810c <_dtoa_r+0x2cc>)
 8007e6a:	f002 f8b3 	bl	8009fd4 <__assert_func>
 8007e6e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007e72:	6004      	str	r4, [r0, #0]
 8007e74:	60c4      	str	r4, [r0, #12]
 8007e76:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007e78:	6819      	ldr	r1, [r3, #0]
 8007e7a:	b151      	cbz	r1, 8007e92 <_dtoa_r+0x52>
 8007e7c:	685a      	ldr	r2, [r3, #4]
 8007e7e:	2301      	movs	r3, #1
 8007e80:	4093      	lsls	r3, r2
 8007e82:	604a      	str	r2, [r1, #4]
 8007e84:	608b      	str	r3, [r1, #8]
 8007e86:	4628      	mov	r0, r5
 8007e88:	f001 f9a8 	bl	80091dc <_Bfree>
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007e90:	601a      	str	r2, [r3, #0]
 8007e92:	1e3b      	subs	r3, r7, #0
 8007e94:	bfaf      	iteee	ge
 8007e96:	2300      	movge	r3, #0
 8007e98:	2201      	movlt	r2, #1
 8007e9a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007e9e:	9305      	strlt	r3, [sp, #20]
 8007ea0:	bfa8      	it	ge
 8007ea2:	f8c8 3000 	strge.w	r3, [r8]
 8007ea6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8007eaa:	4b99      	ldr	r3, [pc, #612]	; (8008110 <_dtoa_r+0x2d0>)
 8007eac:	bfb8      	it	lt
 8007eae:	f8c8 2000 	strlt.w	r2, [r8]
 8007eb2:	ea33 0309 	bics.w	r3, r3, r9
 8007eb6:	d119      	bne.n	8007eec <_dtoa_r+0xac>
 8007eb8:	f242 730f 	movw	r3, #9999	; 0x270f
 8007ebc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007ebe:	6013      	str	r3, [r2, #0]
 8007ec0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007ec4:	4333      	orrs	r3, r6
 8007ec6:	f000 857f 	beq.w	80089c8 <_dtoa_r+0xb88>
 8007eca:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007ecc:	b953      	cbnz	r3, 8007ee4 <_dtoa_r+0xa4>
 8007ece:	4b91      	ldr	r3, [pc, #580]	; (8008114 <_dtoa_r+0x2d4>)
 8007ed0:	e022      	b.n	8007f18 <_dtoa_r+0xd8>
 8007ed2:	4b91      	ldr	r3, [pc, #580]	; (8008118 <_dtoa_r+0x2d8>)
 8007ed4:	9303      	str	r3, [sp, #12]
 8007ed6:	3308      	adds	r3, #8
 8007ed8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007eda:	6013      	str	r3, [r2, #0]
 8007edc:	9803      	ldr	r0, [sp, #12]
 8007ede:	b019      	add	sp, #100	; 0x64
 8007ee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ee4:	4b8b      	ldr	r3, [pc, #556]	; (8008114 <_dtoa_r+0x2d4>)
 8007ee6:	9303      	str	r3, [sp, #12]
 8007ee8:	3303      	adds	r3, #3
 8007eea:	e7f5      	b.n	8007ed8 <_dtoa_r+0x98>
 8007eec:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007ef0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8007ef4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007ef8:	2200      	movs	r2, #0
 8007efa:	2300      	movs	r3, #0
 8007efc:	f7f8 fdc0 	bl	8000a80 <__aeabi_dcmpeq>
 8007f00:	4680      	mov	r8, r0
 8007f02:	b158      	cbz	r0, 8007f1c <_dtoa_r+0xdc>
 8007f04:	2301      	movs	r3, #1
 8007f06:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007f08:	6013      	str	r3, [r2, #0]
 8007f0a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	f000 8558 	beq.w	80089c2 <_dtoa_r+0xb82>
 8007f12:	4882      	ldr	r0, [pc, #520]	; (800811c <_dtoa_r+0x2dc>)
 8007f14:	6018      	str	r0, [r3, #0]
 8007f16:	1e43      	subs	r3, r0, #1
 8007f18:	9303      	str	r3, [sp, #12]
 8007f1a:	e7df      	b.n	8007edc <_dtoa_r+0x9c>
 8007f1c:	ab16      	add	r3, sp, #88	; 0x58
 8007f1e:	9301      	str	r3, [sp, #4]
 8007f20:	ab17      	add	r3, sp, #92	; 0x5c
 8007f22:	9300      	str	r3, [sp, #0]
 8007f24:	4628      	mov	r0, r5
 8007f26:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007f2a:	f001 fd01 	bl	8009930 <__d2b>
 8007f2e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007f32:	4683      	mov	fp, r0
 8007f34:	2c00      	cmp	r4, #0
 8007f36:	d07f      	beq.n	8008038 <_dtoa_r+0x1f8>
 8007f38:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007f3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007f3e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8007f42:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007f46:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8007f4a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8007f4e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8007f52:	2200      	movs	r2, #0
 8007f54:	4b72      	ldr	r3, [pc, #456]	; (8008120 <_dtoa_r+0x2e0>)
 8007f56:	f7f8 f973 	bl	8000240 <__aeabi_dsub>
 8007f5a:	a365      	add	r3, pc, #404	; (adr r3, 80080f0 <_dtoa_r+0x2b0>)
 8007f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f60:	f7f8 fb26 	bl	80005b0 <__aeabi_dmul>
 8007f64:	a364      	add	r3, pc, #400	; (adr r3, 80080f8 <_dtoa_r+0x2b8>)
 8007f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f6a:	f7f8 f96b 	bl	8000244 <__adddf3>
 8007f6e:	4606      	mov	r6, r0
 8007f70:	4620      	mov	r0, r4
 8007f72:	460f      	mov	r7, r1
 8007f74:	f7f8 fab2 	bl	80004dc <__aeabi_i2d>
 8007f78:	a361      	add	r3, pc, #388	; (adr r3, 8008100 <_dtoa_r+0x2c0>)
 8007f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f7e:	f7f8 fb17 	bl	80005b0 <__aeabi_dmul>
 8007f82:	4602      	mov	r2, r0
 8007f84:	460b      	mov	r3, r1
 8007f86:	4630      	mov	r0, r6
 8007f88:	4639      	mov	r1, r7
 8007f8a:	f7f8 f95b 	bl	8000244 <__adddf3>
 8007f8e:	4606      	mov	r6, r0
 8007f90:	460f      	mov	r7, r1
 8007f92:	f7f8 fdbd 	bl	8000b10 <__aeabi_d2iz>
 8007f96:	2200      	movs	r2, #0
 8007f98:	4682      	mov	sl, r0
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	4630      	mov	r0, r6
 8007f9e:	4639      	mov	r1, r7
 8007fa0:	f7f8 fd78 	bl	8000a94 <__aeabi_dcmplt>
 8007fa4:	b148      	cbz	r0, 8007fba <_dtoa_r+0x17a>
 8007fa6:	4650      	mov	r0, sl
 8007fa8:	f7f8 fa98 	bl	80004dc <__aeabi_i2d>
 8007fac:	4632      	mov	r2, r6
 8007fae:	463b      	mov	r3, r7
 8007fb0:	f7f8 fd66 	bl	8000a80 <__aeabi_dcmpeq>
 8007fb4:	b908      	cbnz	r0, 8007fba <_dtoa_r+0x17a>
 8007fb6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007fba:	f1ba 0f16 	cmp.w	sl, #22
 8007fbe:	d858      	bhi.n	8008072 <_dtoa_r+0x232>
 8007fc0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007fc4:	4b57      	ldr	r3, [pc, #348]	; (8008124 <_dtoa_r+0x2e4>)
 8007fc6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fce:	f7f8 fd61 	bl	8000a94 <__aeabi_dcmplt>
 8007fd2:	2800      	cmp	r0, #0
 8007fd4:	d04f      	beq.n	8008076 <_dtoa_r+0x236>
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007fdc:	930f      	str	r3, [sp, #60]	; 0x3c
 8007fde:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007fe0:	1b1c      	subs	r4, r3, r4
 8007fe2:	1e63      	subs	r3, r4, #1
 8007fe4:	9309      	str	r3, [sp, #36]	; 0x24
 8007fe6:	bf49      	itett	mi
 8007fe8:	f1c4 0301 	rsbmi	r3, r4, #1
 8007fec:	2300      	movpl	r3, #0
 8007fee:	9306      	strmi	r3, [sp, #24]
 8007ff0:	2300      	movmi	r3, #0
 8007ff2:	bf54      	ite	pl
 8007ff4:	9306      	strpl	r3, [sp, #24]
 8007ff6:	9309      	strmi	r3, [sp, #36]	; 0x24
 8007ff8:	f1ba 0f00 	cmp.w	sl, #0
 8007ffc:	db3d      	blt.n	800807a <_dtoa_r+0x23a>
 8007ffe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008000:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8008004:	4453      	add	r3, sl
 8008006:	9309      	str	r3, [sp, #36]	; 0x24
 8008008:	2300      	movs	r3, #0
 800800a:	930a      	str	r3, [sp, #40]	; 0x28
 800800c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800800e:	2b09      	cmp	r3, #9
 8008010:	f200 808c 	bhi.w	800812c <_dtoa_r+0x2ec>
 8008014:	2b05      	cmp	r3, #5
 8008016:	bfc4      	itt	gt
 8008018:	3b04      	subgt	r3, #4
 800801a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800801c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800801e:	bfc8      	it	gt
 8008020:	2400      	movgt	r4, #0
 8008022:	f1a3 0302 	sub.w	r3, r3, #2
 8008026:	bfd8      	it	le
 8008028:	2401      	movle	r4, #1
 800802a:	2b03      	cmp	r3, #3
 800802c:	f200 808a 	bhi.w	8008144 <_dtoa_r+0x304>
 8008030:	e8df f003 	tbb	[pc, r3]
 8008034:	5b4d4f2d 	.word	0x5b4d4f2d
 8008038:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800803c:	441c      	add	r4, r3
 800803e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8008042:	2b20      	cmp	r3, #32
 8008044:	bfc3      	ittte	gt
 8008046:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800804a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800804e:	fa09 f303 	lslgt.w	r3, r9, r3
 8008052:	f1c3 0320 	rsble	r3, r3, #32
 8008056:	bfc6      	itte	gt
 8008058:	fa26 f000 	lsrgt.w	r0, r6, r0
 800805c:	4318      	orrgt	r0, r3
 800805e:	fa06 f003 	lslle.w	r0, r6, r3
 8008062:	f7f8 fa2b 	bl	80004bc <__aeabi_ui2d>
 8008066:	2301      	movs	r3, #1
 8008068:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800806c:	3c01      	subs	r4, #1
 800806e:	9313      	str	r3, [sp, #76]	; 0x4c
 8008070:	e76f      	b.n	8007f52 <_dtoa_r+0x112>
 8008072:	2301      	movs	r3, #1
 8008074:	e7b2      	b.n	8007fdc <_dtoa_r+0x19c>
 8008076:	900f      	str	r0, [sp, #60]	; 0x3c
 8008078:	e7b1      	b.n	8007fde <_dtoa_r+0x19e>
 800807a:	9b06      	ldr	r3, [sp, #24]
 800807c:	eba3 030a 	sub.w	r3, r3, sl
 8008080:	9306      	str	r3, [sp, #24]
 8008082:	f1ca 0300 	rsb	r3, sl, #0
 8008086:	930a      	str	r3, [sp, #40]	; 0x28
 8008088:	2300      	movs	r3, #0
 800808a:	930e      	str	r3, [sp, #56]	; 0x38
 800808c:	e7be      	b.n	800800c <_dtoa_r+0x1cc>
 800808e:	2300      	movs	r3, #0
 8008090:	930b      	str	r3, [sp, #44]	; 0x2c
 8008092:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008094:	2b00      	cmp	r3, #0
 8008096:	dc58      	bgt.n	800814a <_dtoa_r+0x30a>
 8008098:	f04f 0901 	mov.w	r9, #1
 800809c:	464b      	mov	r3, r9
 800809e:	f8cd 9020 	str.w	r9, [sp, #32]
 80080a2:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 80080a6:	2200      	movs	r2, #0
 80080a8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80080aa:	6042      	str	r2, [r0, #4]
 80080ac:	2204      	movs	r2, #4
 80080ae:	f102 0614 	add.w	r6, r2, #20
 80080b2:	429e      	cmp	r6, r3
 80080b4:	6841      	ldr	r1, [r0, #4]
 80080b6:	d94e      	bls.n	8008156 <_dtoa_r+0x316>
 80080b8:	4628      	mov	r0, r5
 80080ba:	f001 f84f 	bl	800915c <_Balloc>
 80080be:	9003      	str	r0, [sp, #12]
 80080c0:	2800      	cmp	r0, #0
 80080c2:	d14c      	bne.n	800815e <_dtoa_r+0x31e>
 80080c4:	4602      	mov	r2, r0
 80080c6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80080ca:	4b17      	ldr	r3, [pc, #92]	; (8008128 <_dtoa_r+0x2e8>)
 80080cc:	e6cc      	b.n	8007e68 <_dtoa_r+0x28>
 80080ce:	2301      	movs	r3, #1
 80080d0:	e7de      	b.n	8008090 <_dtoa_r+0x250>
 80080d2:	2300      	movs	r3, #0
 80080d4:	930b      	str	r3, [sp, #44]	; 0x2c
 80080d6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80080d8:	eb0a 0903 	add.w	r9, sl, r3
 80080dc:	f109 0301 	add.w	r3, r9, #1
 80080e0:	2b01      	cmp	r3, #1
 80080e2:	9308      	str	r3, [sp, #32]
 80080e4:	bfb8      	it	lt
 80080e6:	2301      	movlt	r3, #1
 80080e8:	e7dd      	b.n	80080a6 <_dtoa_r+0x266>
 80080ea:	2301      	movs	r3, #1
 80080ec:	e7f2      	b.n	80080d4 <_dtoa_r+0x294>
 80080ee:	bf00      	nop
 80080f0:	636f4361 	.word	0x636f4361
 80080f4:	3fd287a7 	.word	0x3fd287a7
 80080f8:	8b60c8b3 	.word	0x8b60c8b3
 80080fc:	3fc68a28 	.word	0x3fc68a28
 8008100:	509f79fb 	.word	0x509f79fb
 8008104:	3fd34413 	.word	0x3fd34413
 8008108:	0800ad46 	.word	0x0800ad46
 800810c:	0800ad5d 	.word	0x0800ad5d
 8008110:	7ff00000 	.word	0x7ff00000
 8008114:	0800ad42 	.word	0x0800ad42
 8008118:	0800ad39 	.word	0x0800ad39
 800811c:	0800abbd 	.word	0x0800abbd
 8008120:	3ff80000 	.word	0x3ff80000
 8008124:	0800aec8 	.word	0x0800aec8
 8008128:	0800adb8 	.word	0x0800adb8
 800812c:	2401      	movs	r4, #1
 800812e:	2300      	movs	r3, #0
 8008130:	940b      	str	r4, [sp, #44]	; 0x2c
 8008132:	9322      	str	r3, [sp, #136]	; 0x88
 8008134:	f04f 39ff 	mov.w	r9, #4294967295
 8008138:	2200      	movs	r2, #0
 800813a:	2312      	movs	r3, #18
 800813c:	f8cd 9020 	str.w	r9, [sp, #32]
 8008140:	9223      	str	r2, [sp, #140]	; 0x8c
 8008142:	e7b0      	b.n	80080a6 <_dtoa_r+0x266>
 8008144:	2301      	movs	r3, #1
 8008146:	930b      	str	r3, [sp, #44]	; 0x2c
 8008148:	e7f4      	b.n	8008134 <_dtoa_r+0x2f4>
 800814a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800814e:	464b      	mov	r3, r9
 8008150:	f8cd 9020 	str.w	r9, [sp, #32]
 8008154:	e7a7      	b.n	80080a6 <_dtoa_r+0x266>
 8008156:	3101      	adds	r1, #1
 8008158:	6041      	str	r1, [r0, #4]
 800815a:	0052      	lsls	r2, r2, #1
 800815c:	e7a7      	b.n	80080ae <_dtoa_r+0x26e>
 800815e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008160:	9a03      	ldr	r2, [sp, #12]
 8008162:	601a      	str	r2, [r3, #0]
 8008164:	9b08      	ldr	r3, [sp, #32]
 8008166:	2b0e      	cmp	r3, #14
 8008168:	f200 80a8 	bhi.w	80082bc <_dtoa_r+0x47c>
 800816c:	2c00      	cmp	r4, #0
 800816e:	f000 80a5 	beq.w	80082bc <_dtoa_r+0x47c>
 8008172:	f1ba 0f00 	cmp.w	sl, #0
 8008176:	dd34      	ble.n	80081e2 <_dtoa_r+0x3a2>
 8008178:	4a9a      	ldr	r2, [pc, #616]	; (80083e4 <_dtoa_r+0x5a4>)
 800817a:	f00a 030f 	and.w	r3, sl, #15
 800817e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008182:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008186:	e9d3 3400 	ldrd	r3, r4, [r3]
 800818a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800818e:	ea4f 142a 	mov.w	r4, sl, asr #4
 8008192:	d016      	beq.n	80081c2 <_dtoa_r+0x382>
 8008194:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008198:	4b93      	ldr	r3, [pc, #588]	; (80083e8 <_dtoa_r+0x5a8>)
 800819a:	2703      	movs	r7, #3
 800819c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80081a0:	f7f8 fb30 	bl	8000804 <__aeabi_ddiv>
 80081a4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80081a8:	f004 040f 	and.w	r4, r4, #15
 80081ac:	4e8e      	ldr	r6, [pc, #568]	; (80083e8 <_dtoa_r+0x5a8>)
 80081ae:	b954      	cbnz	r4, 80081c6 <_dtoa_r+0x386>
 80081b0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80081b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80081b8:	f7f8 fb24 	bl	8000804 <__aeabi_ddiv>
 80081bc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80081c0:	e029      	b.n	8008216 <_dtoa_r+0x3d6>
 80081c2:	2702      	movs	r7, #2
 80081c4:	e7f2      	b.n	80081ac <_dtoa_r+0x36c>
 80081c6:	07e1      	lsls	r1, r4, #31
 80081c8:	d508      	bpl.n	80081dc <_dtoa_r+0x39c>
 80081ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80081ce:	e9d6 2300 	ldrd	r2, r3, [r6]
 80081d2:	f7f8 f9ed 	bl	80005b0 <__aeabi_dmul>
 80081d6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80081da:	3701      	adds	r7, #1
 80081dc:	1064      	asrs	r4, r4, #1
 80081de:	3608      	adds	r6, #8
 80081e0:	e7e5      	b.n	80081ae <_dtoa_r+0x36e>
 80081e2:	f000 80a5 	beq.w	8008330 <_dtoa_r+0x4f0>
 80081e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80081ea:	f1ca 0400 	rsb	r4, sl, #0
 80081ee:	4b7d      	ldr	r3, [pc, #500]	; (80083e4 <_dtoa_r+0x5a4>)
 80081f0:	f004 020f 	and.w	r2, r4, #15
 80081f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80081f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081fc:	f7f8 f9d8 	bl	80005b0 <__aeabi_dmul>
 8008200:	2702      	movs	r7, #2
 8008202:	2300      	movs	r3, #0
 8008204:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008208:	4e77      	ldr	r6, [pc, #476]	; (80083e8 <_dtoa_r+0x5a8>)
 800820a:	1124      	asrs	r4, r4, #4
 800820c:	2c00      	cmp	r4, #0
 800820e:	f040 8084 	bne.w	800831a <_dtoa_r+0x4da>
 8008212:	2b00      	cmp	r3, #0
 8008214:	d1d2      	bne.n	80081bc <_dtoa_r+0x37c>
 8008216:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008218:	2b00      	cmp	r3, #0
 800821a:	f000 808b 	beq.w	8008334 <_dtoa_r+0x4f4>
 800821e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008222:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008226:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800822a:	2200      	movs	r2, #0
 800822c:	4b6f      	ldr	r3, [pc, #444]	; (80083ec <_dtoa_r+0x5ac>)
 800822e:	f7f8 fc31 	bl	8000a94 <__aeabi_dcmplt>
 8008232:	2800      	cmp	r0, #0
 8008234:	d07e      	beq.n	8008334 <_dtoa_r+0x4f4>
 8008236:	9b08      	ldr	r3, [sp, #32]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d07b      	beq.n	8008334 <_dtoa_r+0x4f4>
 800823c:	f1b9 0f00 	cmp.w	r9, #0
 8008240:	dd38      	ble.n	80082b4 <_dtoa_r+0x474>
 8008242:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008246:	2200      	movs	r2, #0
 8008248:	4b69      	ldr	r3, [pc, #420]	; (80083f0 <_dtoa_r+0x5b0>)
 800824a:	f7f8 f9b1 	bl	80005b0 <__aeabi_dmul>
 800824e:	464c      	mov	r4, r9
 8008250:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008254:	f10a 38ff 	add.w	r8, sl, #4294967295
 8008258:	3701      	adds	r7, #1
 800825a:	4638      	mov	r0, r7
 800825c:	f7f8 f93e 	bl	80004dc <__aeabi_i2d>
 8008260:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008264:	f7f8 f9a4 	bl	80005b0 <__aeabi_dmul>
 8008268:	2200      	movs	r2, #0
 800826a:	4b62      	ldr	r3, [pc, #392]	; (80083f4 <_dtoa_r+0x5b4>)
 800826c:	f7f7 ffea 	bl	8000244 <__adddf3>
 8008270:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8008274:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008278:	9611      	str	r6, [sp, #68]	; 0x44
 800827a:	2c00      	cmp	r4, #0
 800827c:	d15d      	bne.n	800833a <_dtoa_r+0x4fa>
 800827e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008282:	2200      	movs	r2, #0
 8008284:	4b5c      	ldr	r3, [pc, #368]	; (80083f8 <_dtoa_r+0x5b8>)
 8008286:	f7f7 ffdb 	bl	8000240 <__aeabi_dsub>
 800828a:	4602      	mov	r2, r0
 800828c:	460b      	mov	r3, r1
 800828e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008292:	4633      	mov	r3, r6
 8008294:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008296:	f7f8 fc1b 	bl	8000ad0 <__aeabi_dcmpgt>
 800829a:	2800      	cmp	r0, #0
 800829c:	f040 829c 	bne.w	80087d8 <_dtoa_r+0x998>
 80082a0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80082a4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80082a6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80082aa:	f7f8 fbf3 	bl	8000a94 <__aeabi_dcmplt>
 80082ae:	2800      	cmp	r0, #0
 80082b0:	f040 8290 	bne.w	80087d4 <_dtoa_r+0x994>
 80082b4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80082b8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80082bc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80082be:	2b00      	cmp	r3, #0
 80082c0:	f2c0 8152 	blt.w	8008568 <_dtoa_r+0x728>
 80082c4:	f1ba 0f0e 	cmp.w	sl, #14
 80082c8:	f300 814e 	bgt.w	8008568 <_dtoa_r+0x728>
 80082cc:	4b45      	ldr	r3, [pc, #276]	; (80083e4 <_dtoa_r+0x5a4>)
 80082ce:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80082d2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80082d6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80082da:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80082dc:	2b00      	cmp	r3, #0
 80082de:	f280 80db 	bge.w	8008498 <_dtoa_r+0x658>
 80082e2:	9b08      	ldr	r3, [sp, #32]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	f300 80d7 	bgt.w	8008498 <_dtoa_r+0x658>
 80082ea:	f040 8272 	bne.w	80087d2 <_dtoa_r+0x992>
 80082ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80082f2:	2200      	movs	r2, #0
 80082f4:	4b40      	ldr	r3, [pc, #256]	; (80083f8 <_dtoa_r+0x5b8>)
 80082f6:	f7f8 f95b 	bl	80005b0 <__aeabi_dmul>
 80082fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80082fe:	f7f8 fbdd 	bl	8000abc <__aeabi_dcmpge>
 8008302:	9c08      	ldr	r4, [sp, #32]
 8008304:	4626      	mov	r6, r4
 8008306:	2800      	cmp	r0, #0
 8008308:	f040 8248 	bne.w	800879c <_dtoa_r+0x95c>
 800830c:	2331      	movs	r3, #49	; 0x31
 800830e:	9f03      	ldr	r7, [sp, #12]
 8008310:	f10a 0a01 	add.w	sl, sl, #1
 8008314:	f807 3b01 	strb.w	r3, [r7], #1
 8008318:	e244      	b.n	80087a4 <_dtoa_r+0x964>
 800831a:	07e2      	lsls	r2, r4, #31
 800831c:	d505      	bpl.n	800832a <_dtoa_r+0x4ea>
 800831e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008322:	f7f8 f945 	bl	80005b0 <__aeabi_dmul>
 8008326:	2301      	movs	r3, #1
 8008328:	3701      	adds	r7, #1
 800832a:	1064      	asrs	r4, r4, #1
 800832c:	3608      	adds	r6, #8
 800832e:	e76d      	b.n	800820c <_dtoa_r+0x3cc>
 8008330:	2702      	movs	r7, #2
 8008332:	e770      	b.n	8008216 <_dtoa_r+0x3d6>
 8008334:	46d0      	mov	r8, sl
 8008336:	9c08      	ldr	r4, [sp, #32]
 8008338:	e78f      	b.n	800825a <_dtoa_r+0x41a>
 800833a:	9903      	ldr	r1, [sp, #12]
 800833c:	4b29      	ldr	r3, [pc, #164]	; (80083e4 <_dtoa_r+0x5a4>)
 800833e:	4421      	add	r1, r4
 8008340:	9112      	str	r1, [sp, #72]	; 0x48
 8008342:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008344:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008348:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800834c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008350:	2900      	cmp	r1, #0
 8008352:	d055      	beq.n	8008400 <_dtoa_r+0x5c0>
 8008354:	2000      	movs	r0, #0
 8008356:	4929      	ldr	r1, [pc, #164]	; (80083fc <_dtoa_r+0x5bc>)
 8008358:	f7f8 fa54 	bl	8000804 <__aeabi_ddiv>
 800835c:	463b      	mov	r3, r7
 800835e:	4632      	mov	r2, r6
 8008360:	f7f7 ff6e 	bl	8000240 <__aeabi_dsub>
 8008364:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008368:	9f03      	ldr	r7, [sp, #12]
 800836a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800836e:	f7f8 fbcf 	bl	8000b10 <__aeabi_d2iz>
 8008372:	4604      	mov	r4, r0
 8008374:	f7f8 f8b2 	bl	80004dc <__aeabi_i2d>
 8008378:	4602      	mov	r2, r0
 800837a:	460b      	mov	r3, r1
 800837c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008380:	f7f7 ff5e 	bl	8000240 <__aeabi_dsub>
 8008384:	4602      	mov	r2, r0
 8008386:	460b      	mov	r3, r1
 8008388:	3430      	adds	r4, #48	; 0x30
 800838a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800838e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008392:	f807 4b01 	strb.w	r4, [r7], #1
 8008396:	f7f8 fb7d 	bl	8000a94 <__aeabi_dcmplt>
 800839a:	2800      	cmp	r0, #0
 800839c:	d174      	bne.n	8008488 <_dtoa_r+0x648>
 800839e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80083a2:	2000      	movs	r0, #0
 80083a4:	4911      	ldr	r1, [pc, #68]	; (80083ec <_dtoa_r+0x5ac>)
 80083a6:	f7f7 ff4b 	bl	8000240 <__aeabi_dsub>
 80083aa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80083ae:	f7f8 fb71 	bl	8000a94 <__aeabi_dcmplt>
 80083b2:	2800      	cmp	r0, #0
 80083b4:	f040 80b7 	bne.w	8008526 <_dtoa_r+0x6e6>
 80083b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80083ba:	429f      	cmp	r7, r3
 80083bc:	f43f af7a 	beq.w	80082b4 <_dtoa_r+0x474>
 80083c0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80083c4:	2200      	movs	r2, #0
 80083c6:	4b0a      	ldr	r3, [pc, #40]	; (80083f0 <_dtoa_r+0x5b0>)
 80083c8:	f7f8 f8f2 	bl	80005b0 <__aeabi_dmul>
 80083cc:	2200      	movs	r2, #0
 80083ce:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80083d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80083d6:	4b06      	ldr	r3, [pc, #24]	; (80083f0 <_dtoa_r+0x5b0>)
 80083d8:	f7f8 f8ea 	bl	80005b0 <__aeabi_dmul>
 80083dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80083e0:	e7c3      	b.n	800836a <_dtoa_r+0x52a>
 80083e2:	bf00      	nop
 80083e4:	0800aec8 	.word	0x0800aec8
 80083e8:	0800aea0 	.word	0x0800aea0
 80083ec:	3ff00000 	.word	0x3ff00000
 80083f0:	40240000 	.word	0x40240000
 80083f4:	401c0000 	.word	0x401c0000
 80083f8:	40140000 	.word	0x40140000
 80083fc:	3fe00000 	.word	0x3fe00000
 8008400:	4630      	mov	r0, r6
 8008402:	4639      	mov	r1, r7
 8008404:	f7f8 f8d4 	bl	80005b0 <__aeabi_dmul>
 8008408:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800840a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800840e:	9c03      	ldr	r4, [sp, #12]
 8008410:	9314      	str	r3, [sp, #80]	; 0x50
 8008412:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008416:	f7f8 fb7b 	bl	8000b10 <__aeabi_d2iz>
 800841a:	9015      	str	r0, [sp, #84]	; 0x54
 800841c:	f7f8 f85e 	bl	80004dc <__aeabi_i2d>
 8008420:	4602      	mov	r2, r0
 8008422:	460b      	mov	r3, r1
 8008424:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008428:	f7f7 ff0a 	bl	8000240 <__aeabi_dsub>
 800842c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800842e:	4606      	mov	r6, r0
 8008430:	3330      	adds	r3, #48	; 0x30
 8008432:	f804 3b01 	strb.w	r3, [r4], #1
 8008436:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008438:	460f      	mov	r7, r1
 800843a:	429c      	cmp	r4, r3
 800843c:	f04f 0200 	mov.w	r2, #0
 8008440:	d124      	bne.n	800848c <_dtoa_r+0x64c>
 8008442:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008446:	4bb0      	ldr	r3, [pc, #704]	; (8008708 <_dtoa_r+0x8c8>)
 8008448:	f7f7 fefc 	bl	8000244 <__adddf3>
 800844c:	4602      	mov	r2, r0
 800844e:	460b      	mov	r3, r1
 8008450:	4630      	mov	r0, r6
 8008452:	4639      	mov	r1, r7
 8008454:	f7f8 fb3c 	bl	8000ad0 <__aeabi_dcmpgt>
 8008458:	2800      	cmp	r0, #0
 800845a:	d163      	bne.n	8008524 <_dtoa_r+0x6e4>
 800845c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008460:	2000      	movs	r0, #0
 8008462:	49a9      	ldr	r1, [pc, #676]	; (8008708 <_dtoa_r+0x8c8>)
 8008464:	f7f7 feec 	bl	8000240 <__aeabi_dsub>
 8008468:	4602      	mov	r2, r0
 800846a:	460b      	mov	r3, r1
 800846c:	4630      	mov	r0, r6
 800846e:	4639      	mov	r1, r7
 8008470:	f7f8 fb10 	bl	8000a94 <__aeabi_dcmplt>
 8008474:	2800      	cmp	r0, #0
 8008476:	f43f af1d 	beq.w	80082b4 <_dtoa_r+0x474>
 800847a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800847c:	1e7b      	subs	r3, r7, #1
 800847e:	9314      	str	r3, [sp, #80]	; 0x50
 8008480:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8008484:	2b30      	cmp	r3, #48	; 0x30
 8008486:	d0f8      	beq.n	800847a <_dtoa_r+0x63a>
 8008488:	46c2      	mov	sl, r8
 800848a:	e03b      	b.n	8008504 <_dtoa_r+0x6c4>
 800848c:	4b9f      	ldr	r3, [pc, #636]	; (800870c <_dtoa_r+0x8cc>)
 800848e:	f7f8 f88f 	bl	80005b0 <__aeabi_dmul>
 8008492:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008496:	e7bc      	b.n	8008412 <_dtoa_r+0x5d2>
 8008498:	9f03      	ldr	r7, [sp, #12]
 800849a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800849e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80084a2:	4640      	mov	r0, r8
 80084a4:	4649      	mov	r1, r9
 80084a6:	f7f8 f9ad 	bl	8000804 <__aeabi_ddiv>
 80084aa:	f7f8 fb31 	bl	8000b10 <__aeabi_d2iz>
 80084ae:	4604      	mov	r4, r0
 80084b0:	f7f8 f814 	bl	80004dc <__aeabi_i2d>
 80084b4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80084b8:	f7f8 f87a 	bl	80005b0 <__aeabi_dmul>
 80084bc:	4602      	mov	r2, r0
 80084be:	460b      	mov	r3, r1
 80084c0:	4640      	mov	r0, r8
 80084c2:	4649      	mov	r1, r9
 80084c4:	f7f7 febc 	bl	8000240 <__aeabi_dsub>
 80084c8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80084cc:	f807 6b01 	strb.w	r6, [r7], #1
 80084d0:	9e03      	ldr	r6, [sp, #12]
 80084d2:	f8dd c020 	ldr.w	ip, [sp, #32]
 80084d6:	1bbe      	subs	r6, r7, r6
 80084d8:	45b4      	cmp	ip, r6
 80084da:	4602      	mov	r2, r0
 80084dc:	460b      	mov	r3, r1
 80084de:	d136      	bne.n	800854e <_dtoa_r+0x70e>
 80084e0:	f7f7 feb0 	bl	8000244 <__adddf3>
 80084e4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80084e8:	4680      	mov	r8, r0
 80084ea:	4689      	mov	r9, r1
 80084ec:	f7f8 faf0 	bl	8000ad0 <__aeabi_dcmpgt>
 80084f0:	bb58      	cbnz	r0, 800854a <_dtoa_r+0x70a>
 80084f2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80084f6:	4640      	mov	r0, r8
 80084f8:	4649      	mov	r1, r9
 80084fa:	f7f8 fac1 	bl	8000a80 <__aeabi_dcmpeq>
 80084fe:	b108      	cbz	r0, 8008504 <_dtoa_r+0x6c4>
 8008500:	07e1      	lsls	r1, r4, #31
 8008502:	d422      	bmi.n	800854a <_dtoa_r+0x70a>
 8008504:	4628      	mov	r0, r5
 8008506:	4659      	mov	r1, fp
 8008508:	f000 fe68 	bl	80091dc <_Bfree>
 800850c:	2300      	movs	r3, #0
 800850e:	703b      	strb	r3, [r7, #0]
 8008510:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008512:	f10a 0001 	add.w	r0, sl, #1
 8008516:	6018      	str	r0, [r3, #0]
 8008518:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800851a:	2b00      	cmp	r3, #0
 800851c:	f43f acde 	beq.w	8007edc <_dtoa_r+0x9c>
 8008520:	601f      	str	r7, [r3, #0]
 8008522:	e4db      	b.n	8007edc <_dtoa_r+0x9c>
 8008524:	4627      	mov	r7, r4
 8008526:	463b      	mov	r3, r7
 8008528:	461f      	mov	r7, r3
 800852a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800852e:	2a39      	cmp	r2, #57	; 0x39
 8008530:	d107      	bne.n	8008542 <_dtoa_r+0x702>
 8008532:	9a03      	ldr	r2, [sp, #12]
 8008534:	429a      	cmp	r2, r3
 8008536:	d1f7      	bne.n	8008528 <_dtoa_r+0x6e8>
 8008538:	2230      	movs	r2, #48	; 0x30
 800853a:	9903      	ldr	r1, [sp, #12]
 800853c:	f108 0801 	add.w	r8, r8, #1
 8008540:	700a      	strb	r2, [r1, #0]
 8008542:	781a      	ldrb	r2, [r3, #0]
 8008544:	3201      	adds	r2, #1
 8008546:	701a      	strb	r2, [r3, #0]
 8008548:	e79e      	b.n	8008488 <_dtoa_r+0x648>
 800854a:	46d0      	mov	r8, sl
 800854c:	e7eb      	b.n	8008526 <_dtoa_r+0x6e6>
 800854e:	2200      	movs	r2, #0
 8008550:	4b6e      	ldr	r3, [pc, #440]	; (800870c <_dtoa_r+0x8cc>)
 8008552:	f7f8 f82d 	bl	80005b0 <__aeabi_dmul>
 8008556:	2200      	movs	r2, #0
 8008558:	2300      	movs	r3, #0
 800855a:	4680      	mov	r8, r0
 800855c:	4689      	mov	r9, r1
 800855e:	f7f8 fa8f 	bl	8000a80 <__aeabi_dcmpeq>
 8008562:	2800      	cmp	r0, #0
 8008564:	d09b      	beq.n	800849e <_dtoa_r+0x65e>
 8008566:	e7cd      	b.n	8008504 <_dtoa_r+0x6c4>
 8008568:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800856a:	2a00      	cmp	r2, #0
 800856c:	f000 80d0 	beq.w	8008710 <_dtoa_r+0x8d0>
 8008570:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008572:	2a01      	cmp	r2, #1
 8008574:	f300 80ae 	bgt.w	80086d4 <_dtoa_r+0x894>
 8008578:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800857a:	2a00      	cmp	r2, #0
 800857c:	f000 80a6 	beq.w	80086cc <_dtoa_r+0x88c>
 8008580:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008584:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008586:	9f06      	ldr	r7, [sp, #24]
 8008588:	9a06      	ldr	r2, [sp, #24]
 800858a:	2101      	movs	r1, #1
 800858c:	441a      	add	r2, r3
 800858e:	9206      	str	r2, [sp, #24]
 8008590:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008592:	4628      	mov	r0, r5
 8008594:	441a      	add	r2, r3
 8008596:	9209      	str	r2, [sp, #36]	; 0x24
 8008598:	f000 ff20 	bl	80093dc <__i2b>
 800859c:	4606      	mov	r6, r0
 800859e:	2f00      	cmp	r7, #0
 80085a0:	dd0c      	ble.n	80085bc <_dtoa_r+0x77c>
 80085a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	dd09      	ble.n	80085bc <_dtoa_r+0x77c>
 80085a8:	42bb      	cmp	r3, r7
 80085aa:	bfa8      	it	ge
 80085ac:	463b      	movge	r3, r7
 80085ae:	9a06      	ldr	r2, [sp, #24]
 80085b0:	1aff      	subs	r7, r7, r3
 80085b2:	1ad2      	subs	r2, r2, r3
 80085b4:	9206      	str	r2, [sp, #24]
 80085b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80085b8:	1ad3      	subs	r3, r2, r3
 80085ba:	9309      	str	r3, [sp, #36]	; 0x24
 80085bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085be:	b1f3      	cbz	r3, 80085fe <_dtoa_r+0x7be>
 80085c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	f000 80a8 	beq.w	8008718 <_dtoa_r+0x8d8>
 80085c8:	2c00      	cmp	r4, #0
 80085ca:	dd10      	ble.n	80085ee <_dtoa_r+0x7ae>
 80085cc:	4631      	mov	r1, r6
 80085ce:	4622      	mov	r2, r4
 80085d0:	4628      	mov	r0, r5
 80085d2:	f000 ffc1 	bl	8009558 <__pow5mult>
 80085d6:	465a      	mov	r2, fp
 80085d8:	4601      	mov	r1, r0
 80085da:	4606      	mov	r6, r0
 80085dc:	4628      	mov	r0, r5
 80085de:	f000 ff13 	bl	8009408 <__multiply>
 80085e2:	4680      	mov	r8, r0
 80085e4:	4659      	mov	r1, fp
 80085e6:	4628      	mov	r0, r5
 80085e8:	f000 fdf8 	bl	80091dc <_Bfree>
 80085ec:	46c3      	mov	fp, r8
 80085ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085f0:	1b1a      	subs	r2, r3, r4
 80085f2:	d004      	beq.n	80085fe <_dtoa_r+0x7be>
 80085f4:	4659      	mov	r1, fp
 80085f6:	4628      	mov	r0, r5
 80085f8:	f000 ffae 	bl	8009558 <__pow5mult>
 80085fc:	4683      	mov	fp, r0
 80085fe:	2101      	movs	r1, #1
 8008600:	4628      	mov	r0, r5
 8008602:	f000 feeb 	bl	80093dc <__i2b>
 8008606:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008608:	4604      	mov	r4, r0
 800860a:	2b00      	cmp	r3, #0
 800860c:	f340 8086 	ble.w	800871c <_dtoa_r+0x8dc>
 8008610:	461a      	mov	r2, r3
 8008612:	4601      	mov	r1, r0
 8008614:	4628      	mov	r0, r5
 8008616:	f000 ff9f 	bl	8009558 <__pow5mult>
 800861a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800861c:	4604      	mov	r4, r0
 800861e:	2b01      	cmp	r3, #1
 8008620:	dd7f      	ble.n	8008722 <_dtoa_r+0x8e2>
 8008622:	f04f 0800 	mov.w	r8, #0
 8008626:	6923      	ldr	r3, [r4, #16]
 8008628:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800862c:	6918      	ldr	r0, [r3, #16]
 800862e:	f000 fe87 	bl	8009340 <__hi0bits>
 8008632:	f1c0 0020 	rsb	r0, r0, #32
 8008636:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008638:	4418      	add	r0, r3
 800863a:	f010 001f 	ands.w	r0, r0, #31
 800863e:	f000 8092 	beq.w	8008766 <_dtoa_r+0x926>
 8008642:	f1c0 0320 	rsb	r3, r0, #32
 8008646:	2b04      	cmp	r3, #4
 8008648:	f340 808a 	ble.w	8008760 <_dtoa_r+0x920>
 800864c:	f1c0 001c 	rsb	r0, r0, #28
 8008650:	9b06      	ldr	r3, [sp, #24]
 8008652:	4407      	add	r7, r0
 8008654:	4403      	add	r3, r0
 8008656:	9306      	str	r3, [sp, #24]
 8008658:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800865a:	4403      	add	r3, r0
 800865c:	9309      	str	r3, [sp, #36]	; 0x24
 800865e:	9b06      	ldr	r3, [sp, #24]
 8008660:	2b00      	cmp	r3, #0
 8008662:	dd05      	ble.n	8008670 <_dtoa_r+0x830>
 8008664:	4659      	mov	r1, fp
 8008666:	461a      	mov	r2, r3
 8008668:	4628      	mov	r0, r5
 800866a:	f000 ffcf 	bl	800960c <__lshift>
 800866e:	4683      	mov	fp, r0
 8008670:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008672:	2b00      	cmp	r3, #0
 8008674:	dd05      	ble.n	8008682 <_dtoa_r+0x842>
 8008676:	4621      	mov	r1, r4
 8008678:	461a      	mov	r2, r3
 800867a:	4628      	mov	r0, r5
 800867c:	f000 ffc6 	bl	800960c <__lshift>
 8008680:	4604      	mov	r4, r0
 8008682:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008684:	2b00      	cmp	r3, #0
 8008686:	d070      	beq.n	800876a <_dtoa_r+0x92a>
 8008688:	4621      	mov	r1, r4
 800868a:	4658      	mov	r0, fp
 800868c:	f001 f82e 	bl	80096ec <__mcmp>
 8008690:	2800      	cmp	r0, #0
 8008692:	da6a      	bge.n	800876a <_dtoa_r+0x92a>
 8008694:	2300      	movs	r3, #0
 8008696:	4659      	mov	r1, fp
 8008698:	220a      	movs	r2, #10
 800869a:	4628      	mov	r0, r5
 800869c:	f000 fdc0 	bl	8009220 <__multadd>
 80086a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80086a2:	4683      	mov	fp, r0
 80086a4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	f000 8194 	beq.w	80089d6 <_dtoa_r+0xb96>
 80086ae:	4631      	mov	r1, r6
 80086b0:	2300      	movs	r3, #0
 80086b2:	220a      	movs	r2, #10
 80086b4:	4628      	mov	r0, r5
 80086b6:	f000 fdb3 	bl	8009220 <__multadd>
 80086ba:	f1b9 0f00 	cmp.w	r9, #0
 80086be:	4606      	mov	r6, r0
 80086c0:	f300 8093 	bgt.w	80087ea <_dtoa_r+0x9aa>
 80086c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80086c6:	2b02      	cmp	r3, #2
 80086c8:	dc57      	bgt.n	800877a <_dtoa_r+0x93a>
 80086ca:	e08e      	b.n	80087ea <_dtoa_r+0x9aa>
 80086cc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80086ce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80086d2:	e757      	b.n	8008584 <_dtoa_r+0x744>
 80086d4:	9b08      	ldr	r3, [sp, #32]
 80086d6:	1e5c      	subs	r4, r3, #1
 80086d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086da:	42a3      	cmp	r3, r4
 80086dc:	bfb7      	itett	lt
 80086de:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80086e0:	1b1c      	subge	r4, r3, r4
 80086e2:	1ae2      	sublt	r2, r4, r3
 80086e4:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80086e6:	bfbe      	ittt	lt
 80086e8:	940a      	strlt	r4, [sp, #40]	; 0x28
 80086ea:	189b      	addlt	r3, r3, r2
 80086ec:	930e      	strlt	r3, [sp, #56]	; 0x38
 80086ee:	9b08      	ldr	r3, [sp, #32]
 80086f0:	bfb8      	it	lt
 80086f2:	2400      	movlt	r4, #0
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	bfbb      	ittet	lt
 80086f8:	9b06      	ldrlt	r3, [sp, #24]
 80086fa:	9a08      	ldrlt	r2, [sp, #32]
 80086fc:	9f06      	ldrge	r7, [sp, #24]
 80086fe:	1a9f      	sublt	r7, r3, r2
 8008700:	bfac      	ite	ge
 8008702:	9b08      	ldrge	r3, [sp, #32]
 8008704:	2300      	movlt	r3, #0
 8008706:	e73f      	b.n	8008588 <_dtoa_r+0x748>
 8008708:	3fe00000 	.word	0x3fe00000
 800870c:	40240000 	.word	0x40240000
 8008710:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008712:	9f06      	ldr	r7, [sp, #24]
 8008714:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8008716:	e742      	b.n	800859e <_dtoa_r+0x75e>
 8008718:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800871a:	e76b      	b.n	80085f4 <_dtoa_r+0x7b4>
 800871c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800871e:	2b01      	cmp	r3, #1
 8008720:	dc19      	bgt.n	8008756 <_dtoa_r+0x916>
 8008722:	9b04      	ldr	r3, [sp, #16]
 8008724:	b9bb      	cbnz	r3, 8008756 <_dtoa_r+0x916>
 8008726:	9b05      	ldr	r3, [sp, #20]
 8008728:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800872c:	b99b      	cbnz	r3, 8008756 <_dtoa_r+0x916>
 800872e:	9b05      	ldr	r3, [sp, #20]
 8008730:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008734:	0d1b      	lsrs	r3, r3, #20
 8008736:	051b      	lsls	r3, r3, #20
 8008738:	b183      	cbz	r3, 800875c <_dtoa_r+0x91c>
 800873a:	f04f 0801 	mov.w	r8, #1
 800873e:	9b06      	ldr	r3, [sp, #24]
 8008740:	3301      	adds	r3, #1
 8008742:	9306      	str	r3, [sp, #24]
 8008744:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008746:	3301      	adds	r3, #1
 8008748:	9309      	str	r3, [sp, #36]	; 0x24
 800874a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800874c:	2b00      	cmp	r3, #0
 800874e:	f47f af6a 	bne.w	8008626 <_dtoa_r+0x7e6>
 8008752:	2001      	movs	r0, #1
 8008754:	e76f      	b.n	8008636 <_dtoa_r+0x7f6>
 8008756:	f04f 0800 	mov.w	r8, #0
 800875a:	e7f6      	b.n	800874a <_dtoa_r+0x90a>
 800875c:	4698      	mov	r8, r3
 800875e:	e7f4      	b.n	800874a <_dtoa_r+0x90a>
 8008760:	f43f af7d 	beq.w	800865e <_dtoa_r+0x81e>
 8008764:	4618      	mov	r0, r3
 8008766:	301c      	adds	r0, #28
 8008768:	e772      	b.n	8008650 <_dtoa_r+0x810>
 800876a:	9b08      	ldr	r3, [sp, #32]
 800876c:	2b00      	cmp	r3, #0
 800876e:	dc36      	bgt.n	80087de <_dtoa_r+0x99e>
 8008770:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008772:	2b02      	cmp	r3, #2
 8008774:	dd33      	ble.n	80087de <_dtoa_r+0x99e>
 8008776:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800877a:	f1b9 0f00 	cmp.w	r9, #0
 800877e:	d10d      	bne.n	800879c <_dtoa_r+0x95c>
 8008780:	4621      	mov	r1, r4
 8008782:	464b      	mov	r3, r9
 8008784:	2205      	movs	r2, #5
 8008786:	4628      	mov	r0, r5
 8008788:	f000 fd4a 	bl	8009220 <__multadd>
 800878c:	4601      	mov	r1, r0
 800878e:	4604      	mov	r4, r0
 8008790:	4658      	mov	r0, fp
 8008792:	f000 ffab 	bl	80096ec <__mcmp>
 8008796:	2800      	cmp	r0, #0
 8008798:	f73f adb8 	bgt.w	800830c <_dtoa_r+0x4cc>
 800879c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800879e:	9f03      	ldr	r7, [sp, #12]
 80087a0:	ea6f 0a03 	mvn.w	sl, r3
 80087a4:	f04f 0800 	mov.w	r8, #0
 80087a8:	4621      	mov	r1, r4
 80087aa:	4628      	mov	r0, r5
 80087ac:	f000 fd16 	bl	80091dc <_Bfree>
 80087b0:	2e00      	cmp	r6, #0
 80087b2:	f43f aea7 	beq.w	8008504 <_dtoa_r+0x6c4>
 80087b6:	f1b8 0f00 	cmp.w	r8, #0
 80087ba:	d005      	beq.n	80087c8 <_dtoa_r+0x988>
 80087bc:	45b0      	cmp	r8, r6
 80087be:	d003      	beq.n	80087c8 <_dtoa_r+0x988>
 80087c0:	4641      	mov	r1, r8
 80087c2:	4628      	mov	r0, r5
 80087c4:	f000 fd0a 	bl	80091dc <_Bfree>
 80087c8:	4631      	mov	r1, r6
 80087ca:	4628      	mov	r0, r5
 80087cc:	f000 fd06 	bl	80091dc <_Bfree>
 80087d0:	e698      	b.n	8008504 <_dtoa_r+0x6c4>
 80087d2:	2400      	movs	r4, #0
 80087d4:	4626      	mov	r6, r4
 80087d6:	e7e1      	b.n	800879c <_dtoa_r+0x95c>
 80087d8:	46c2      	mov	sl, r8
 80087da:	4626      	mov	r6, r4
 80087dc:	e596      	b.n	800830c <_dtoa_r+0x4cc>
 80087de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80087e0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	f000 80fd 	beq.w	80089e4 <_dtoa_r+0xba4>
 80087ea:	2f00      	cmp	r7, #0
 80087ec:	dd05      	ble.n	80087fa <_dtoa_r+0x9ba>
 80087ee:	4631      	mov	r1, r6
 80087f0:	463a      	mov	r2, r7
 80087f2:	4628      	mov	r0, r5
 80087f4:	f000 ff0a 	bl	800960c <__lshift>
 80087f8:	4606      	mov	r6, r0
 80087fa:	f1b8 0f00 	cmp.w	r8, #0
 80087fe:	d05c      	beq.n	80088ba <_dtoa_r+0xa7a>
 8008800:	4628      	mov	r0, r5
 8008802:	6871      	ldr	r1, [r6, #4]
 8008804:	f000 fcaa 	bl	800915c <_Balloc>
 8008808:	4607      	mov	r7, r0
 800880a:	b928      	cbnz	r0, 8008818 <_dtoa_r+0x9d8>
 800880c:	4602      	mov	r2, r0
 800880e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008812:	4b7f      	ldr	r3, [pc, #508]	; (8008a10 <_dtoa_r+0xbd0>)
 8008814:	f7ff bb28 	b.w	8007e68 <_dtoa_r+0x28>
 8008818:	6932      	ldr	r2, [r6, #16]
 800881a:	f106 010c 	add.w	r1, r6, #12
 800881e:	3202      	adds	r2, #2
 8008820:	0092      	lsls	r2, r2, #2
 8008822:	300c      	adds	r0, #12
 8008824:	f000 fc8c 	bl	8009140 <memcpy>
 8008828:	2201      	movs	r2, #1
 800882a:	4639      	mov	r1, r7
 800882c:	4628      	mov	r0, r5
 800882e:	f000 feed 	bl	800960c <__lshift>
 8008832:	46b0      	mov	r8, r6
 8008834:	4606      	mov	r6, r0
 8008836:	9b03      	ldr	r3, [sp, #12]
 8008838:	3301      	adds	r3, #1
 800883a:	9308      	str	r3, [sp, #32]
 800883c:	9b03      	ldr	r3, [sp, #12]
 800883e:	444b      	add	r3, r9
 8008840:	930a      	str	r3, [sp, #40]	; 0x28
 8008842:	9b04      	ldr	r3, [sp, #16]
 8008844:	f003 0301 	and.w	r3, r3, #1
 8008848:	9309      	str	r3, [sp, #36]	; 0x24
 800884a:	9b08      	ldr	r3, [sp, #32]
 800884c:	4621      	mov	r1, r4
 800884e:	3b01      	subs	r3, #1
 8008850:	4658      	mov	r0, fp
 8008852:	9304      	str	r3, [sp, #16]
 8008854:	f7ff fa68 	bl	8007d28 <quorem>
 8008858:	4603      	mov	r3, r0
 800885a:	4641      	mov	r1, r8
 800885c:	3330      	adds	r3, #48	; 0x30
 800885e:	9006      	str	r0, [sp, #24]
 8008860:	4658      	mov	r0, fp
 8008862:	930b      	str	r3, [sp, #44]	; 0x2c
 8008864:	f000 ff42 	bl	80096ec <__mcmp>
 8008868:	4632      	mov	r2, r6
 800886a:	4681      	mov	r9, r0
 800886c:	4621      	mov	r1, r4
 800886e:	4628      	mov	r0, r5
 8008870:	f000 ff58 	bl	8009724 <__mdiff>
 8008874:	68c2      	ldr	r2, [r0, #12]
 8008876:	4607      	mov	r7, r0
 8008878:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800887a:	bb02      	cbnz	r2, 80088be <_dtoa_r+0xa7e>
 800887c:	4601      	mov	r1, r0
 800887e:	4658      	mov	r0, fp
 8008880:	f000 ff34 	bl	80096ec <__mcmp>
 8008884:	4602      	mov	r2, r0
 8008886:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008888:	4639      	mov	r1, r7
 800888a:	4628      	mov	r0, r5
 800888c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8008890:	f000 fca4 	bl	80091dc <_Bfree>
 8008894:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008896:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008898:	9f08      	ldr	r7, [sp, #32]
 800889a:	ea43 0102 	orr.w	r1, r3, r2
 800889e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088a0:	430b      	orrs	r3, r1
 80088a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80088a4:	d10d      	bne.n	80088c2 <_dtoa_r+0xa82>
 80088a6:	2b39      	cmp	r3, #57	; 0x39
 80088a8:	d029      	beq.n	80088fe <_dtoa_r+0xabe>
 80088aa:	f1b9 0f00 	cmp.w	r9, #0
 80088ae:	dd01      	ble.n	80088b4 <_dtoa_r+0xa74>
 80088b0:	9b06      	ldr	r3, [sp, #24]
 80088b2:	3331      	adds	r3, #49	; 0x31
 80088b4:	9a04      	ldr	r2, [sp, #16]
 80088b6:	7013      	strb	r3, [r2, #0]
 80088b8:	e776      	b.n	80087a8 <_dtoa_r+0x968>
 80088ba:	4630      	mov	r0, r6
 80088bc:	e7b9      	b.n	8008832 <_dtoa_r+0x9f2>
 80088be:	2201      	movs	r2, #1
 80088c0:	e7e2      	b.n	8008888 <_dtoa_r+0xa48>
 80088c2:	f1b9 0f00 	cmp.w	r9, #0
 80088c6:	db06      	blt.n	80088d6 <_dtoa_r+0xa96>
 80088c8:	9922      	ldr	r1, [sp, #136]	; 0x88
 80088ca:	ea41 0909 	orr.w	r9, r1, r9
 80088ce:	9909      	ldr	r1, [sp, #36]	; 0x24
 80088d0:	ea59 0101 	orrs.w	r1, r9, r1
 80088d4:	d120      	bne.n	8008918 <_dtoa_r+0xad8>
 80088d6:	2a00      	cmp	r2, #0
 80088d8:	ddec      	ble.n	80088b4 <_dtoa_r+0xa74>
 80088da:	4659      	mov	r1, fp
 80088dc:	2201      	movs	r2, #1
 80088de:	4628      	mov	r0, r5
 80088e0:	9308      	str	r3, [sp, #32]
 80088e2:	f000 fe93 	bl	800960c <__lshift>
 80088e6:	4621      	mov	r1, r4
 80088e8:	4683      	mov	fp, r0
 80088ea:	f000 feff 	bl	80096ec <__mcmp>
 80088ee:	2800      	cmp	r0, #0
 80088f0:	9b08      	ldr	r3, [sp, #32]
 80088f2:	dc02      	bgt.n	80088fa <_dtoa_r+0xaba>
 80088f4:	d1de      	bne.n	80088b4 <_dtoa_r+0xa74>
 80088f6:	07da      	lsls	r2, r3, #31
 80088f8:	d5dc      	bpl.n	80088b4 <_dtoa_r+0xa74>
 80088fa:	2b39      	cmp	r3, #57	; 0x39
 80088fc:	d1d8      	bne.n	80088b0 <_dtoa_r+0xa70>
 80088fe:	2339      	movs	r3, #57	; 0x39
 8008900:	9a04      	ldr	r2, [sp, #16]
 8008902:	7013      	strb	r3, [r2, #0]
 8008904:	463b      	mov	r3, r7
 8008906:	461f      	mov	r7, r3
 8008908:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800890c:	3b01      	subs	r3, #1
 800890e:	2a39      	cmp	r2, #57	; 0x39
 8008910:	d050      	beq.n	80089b4 <_dtoa_r+0xb74>
 8008912:	3201      	adds	r2, #1
 8008914:	701a      	strb	r2, [r3, #0]
 8008916:	e747      	b.n	80087a8 <_dtoa_r+0x968>
 8008918:	2a00      	cmp	r2, #0
 800891a:	dd03      	ble.n	8008924 <_dtoa_r+0xae4>
 800891c:	2b39      	cmp	r3, #57	; 0x39
 800891e:	d0ee      	beq.n	80088fe <_dtoa_r+0xabe>
 8008920:	3301      	adds	r3, #1
 8008922:	e7c7      	b.n	80088b4 <_dtoa_r+0xa74>
 8008924:	9a08      	ldr	r2, [sp, #32]
 8008926:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008928:	f802 3c01 	strb.w	r3, [r2, #-1]
 800892c:	428a      	cmp	r2, r1
 800892e:	d02a      	beq.n	8008986 <_dtoa_r+0xb46>
 8008930:	4659      	mov	r1, fp
 8008932:	2300      	movs	r3, #0
 8008934:	220a      	movs	r2, #10
 8008936:	4628      	mov	r0, r5
 8008938:	f000 fc72 	bl	8009220 <__multadd>
 800893c:	45b0      	cmp	r8, r6
 800893e:	4683      	mov	fp, r0
 8008940:	f04f 0300 	mov.w	r3, #0
 8008944:	f04f 020a 	mov.w	r2, #10
 8008948:	4641      	mov	r1, r8
 800894a:	4628      	mov	r0, r5
 800894c:	d107      	bne.n	800895e <_dtoa_r+0xb1e>
 800894e:	f000 fc67 	bl	8009220 <__multadd>
 8008952:	4680      	mov	r8, r0
 8008954:	4606      	mov	r6, r0
 8008956:	9b08      	ldr	r3, [sp, #32]
 8008958:	3301      	adds	r3, #1
 800895a:	9308      	str	r3, [sp, #32]
 800895c:	e775      	b.n	800884a <_dtoa_r+0xa0a>
 800895e:	f000 fc5f 	bl	8009220 <__multadd>
 8008962:	4631      	mov	r1, r6
 8008964:	4680      	mov	r8, r0
 8008966:	2300      	movs	r3, #0
 8008968:	220a      	movs	r2, #10
 800896a:	4628      	mov	r0, r5
 800896c:	f000 fc58 	bl	8009220 <__multadd>
 8008970:	4606      	mov	r6, r0
 8008972:	e7f0      	b.n	8008956 <_dtoa_r+0xb16>
 8008974:	f1b9 0f00 	cmp.w	r9, #0
 8008978:	bfcc      	ite	gt
 800897a:	464f      	movgt	r7, r9
 800897c:	2701      	movle	r7, #1
 800897e:	f04f 0800 	mov.w	r8, #0
 8008982:	9a03      	ldr	r2, [sp, #12]
 8008984:	4417      	add	r7, r2
 8008986:	4659      	mov	r1, fp
 8008988:	2201      	movs	r2, #1
 800898a:	4628      	mov	r0, r5
 800898c:	9308      	str	r3, [sp, #32]
 800898e:	f000 fe3d 	bl	800960c <__lshift>
 8008992:	4621      	mov	r1, r4
 8008994:	4683      	mov	fp, r0
 8008996:	f000 fea9 	bl	80096ec <__mcmp>
 800899a:	2800      	cmp	r0, #0
 800899c:	dcb2      	bgt.n	8008904 <_dtoa_r+0xac4>
 800899e:	d102      	bne.n	80089a6 <_dtoa_r+0xb66>
 80089a0:	9b08      	ldr	r3, [sp, #32]
 80089a2:	07db      	lsls	r3, r3, #31
 80089a4:	d4ae      	bmi.n	8008904 <_dtoa_r+0xac4>
 80089a6:	463b      	mov	r3, r7
 80089a8:	461f      	mov	r7, r3
 80089aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80089ae:	2a30      	cmp	r2, #48	; 0x30
 80089b0:	d0fa      	beq.n	80089a8 <_dtoa_r+0xb68>
 80089b2:	e6f9      	b.n	80087a8 <_dtoa_r+0x968>
 80089b4:	9a03      	ldr	r2, [sp, #12]
 80089b6:	429a      	cmp	r2, r3
 80089b8:	d1a5      	bne.n	8008906 <_dtoa_r+0xac6>
 80089ba:	2331      	movs	r3, #49	; 0x31
 80089bc:	f10a 0a01 	add.w	sl, sl, #1
 80089c0:	e779      	b.n	80088b6 <_dtoa_r+0xa76>
 80089c2:	4b14      	ldr	r3, [pc, #80]	; (8008a14 <_dtoa_r+0xbd4>)
 80089c4:	f7ff baa8 	b.w	8007f18 <_dtoa_r+0xd8>
 80089c8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	f47f aa81 	bne.w	8007ed2 <_dtoa_r+0x92>
 80089d0:	4b11      	ldr	r3, [pc, #68]	; (8008a18 <_dtoa_r+0xbd8>)
 80089d2:	f7ff baa1 	b.w	8007f18 <_dtoa_r+0xd8>
 80089d6:	f1b9 0f00 	cmp.w	r9, #0
 80089da:	dc03      	bgt.n	80089e4 <_dtoa_r+0xba4>
 80089dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80089de:	2b02      	cmp	r3, #2
 80089e0:	f73f aecb 	bgt.w	800877a <_dtoa_r+0x93a>
 80089e4:	9f03      	ldr	r7, [sp, #12]
 80089e6:	4621      	mov	r1, r4
 80089e8:	4658      	mov	r0, fp
 80089ea:	f7ff f99d 	bl	8007d28 <quorem>
 80089ee:	9a03      	ldr	r2, [sp, #12]
 80089f0:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80089f4:	f807 3b01 	strb.w	r3, [r7], #1
 80089f8:	1aba      	subs	r2, r7, r2
 80089fa:	4591      	cmp	r9, r2
 80089fc:	ddba      	ble.n	8008974 <_dtoa_r+0xb34>
 80089fe:	4659      	mov	r1, fp
 8008a00:	2300      	movs	r3, #0
 8008a02:	220a      	movs	r2, #10
 8008a04:	4628      	mov	r0, r5
 8008a06:	f000 fc0b 	bl	8009220 <__multadd>
 8008a0a:	4683      	mov	fp, r0
 8008a0c:	e7eb      	b.n	80089e6 <_dtoa_r+0xba6>
 8008a0e:	bf00      	nop
 8008a10:	0800adb8 	.word	0x0800adb8
 8008a14:	0800abbc 	.word	0x0800abbc
 8008a18:	0800ad39 	.word	0x0800ad39

08008a1c <rshift>:
 8008a1c:	6903      	ldr	r3, [r0, #16]
 8008a1e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008a22:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008a26:	f100 0414 	add.w	r4, r0, #20
 8008a2a:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008a2e:	dd46      	ble.n	8008abe <rshift+0xa2>
 8008a30:	f011 011f 	ands.w	r1, r1, #31
 8008a34:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008a38:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008a3c:	d10c      	bne.n	8008a58 <rshift+0x3c>
 8008a3e:	4629      	mov	r1, r5
 8008a40:	f100 0710 	add.w	r7, r0, #16
 8008a44:	42b1      	cmp	r1, r6
 8008a46:	d335      	bcc.n	8008ab4 <rshift+0x98>
 8008a48:	1a9b      	subs	r3, r3, r2
 8008a4a:	009b      	lsls	r3, r3, #2
 8008a4c:	1eea      	subs	r2, r5, #3
 8008a4e:	4296      	cmp	r6, r2
 8008a50:	bf38      	it	cc
 8008a52:	2300      	movcc	r3, #0
 8008a54:	4423      	add	r3, r4
 8008a56:	e015      	b.n	8008a84 <rshift+0x68>
 8008a58:	46a1      	mov	r9, r4
 8008a5a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008a5e:	f1c1 0820 	rsb	r8, r1, #32
 8008a62:	40cf      	lsrs	r7, r1
 8008a64:	f105 0e04 	add.w	lr, r5, #4
 8008a68:	4576      	cmp	r6, lr
 8008a6a:	46f4      	mov	ip, lr
 8008a6c:	d816      	bhi.n	8008a9c <rshift+0x80>
 8008a6e:	1a9a      	subs	r2, r3, r2
 8008a70:	0092      	lsls	r2, r2, #2
 8008a72:	3a04      	subs	r2, #4
 8008a74:	3501      	adds	r5, #1
 8008a76:	42ae      	cmp	r6, r5
 8008a78:	bf38      	it	cc
 8008a7a:	2200      	movcc	r2, #0
 8008a7c:	18a3      	adds	r3, r4, r2
 8008a7e:	50a7      	str	r7, [r4, r2]
 8008a80:	b107      	cbz	r7, 8008a84 <rshift+0x68>
 8008a82:	3304      	adds	r3, #4
 8008a84:	42a3      	cmp	r3, r4
 8008a86:	eba3 0204 	sub.w	r2, r3, r4
 8008a8a:	bf08      	it	eq
 8008a8c:	2300      	moveq	r3, #0
 8008a8e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008a92:	6102      	str	r2, [r0, #16]
 8008a94:	bf08      	it	eq
 8008a96:	6143      	streq	r3, [r0, #20]
 8008a98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008a9c:	f8dc c000 	ldr.w	ip, [ip]
 8008aa0:	fa0c fc08 	lsl.w	ip, ip, r8
 8008aa4:	ea4c 0707 	orr.w	r7, ip, r7
 8008aa8:	f849 7b04 	str.w	r7, [r9], #4
 8008aac:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008ab0:	40cf      	lsrs	r7, r1
 8008ab2:	e7d9      	b.n	8008a68 <rshift+0x4c>
 8008ab4:	f851 cb04 	ldr.w	ip, [r1], #4
 8008ab8:	f847 cf04 	str.w	ip, [r7, #4]!
 8008abc:	e7c2      	b.n	8008a44 <rshift+0x28>
 8008abe:	4623      	mov	r3, r4
 8008ac0:	e7e0      	b.n	8008a84 <rshift+0x68>

08008ac2 <__hexdig_fun>:
 8008ac2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008ac6:	2b09      	cmp	r3, #9
 8008ac8:	d802      	bhi.n	8008ad0 <__hexdig_fun+0xe>
 8008aca:	3820      	subs	r0, #32
 8008acc:	b2c0      	uxtb	r0, r0
 8008ace:	4770      	bx	lr
 8008ad0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008ad4:	2b05      	cmp	r3, #5
 8008ad6:	d801      	bhi.n	8008adc <__hexdig_fun+0x1a>
 8008ad8:	3847      	subs	r0, #71	; 0x47
 8008ada:	e7f7      	b.n	8008acc <__hexdig_fun+0xa>
 8008adc:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008ae0:	2b05      	cmp	r3, #5
 8008ae2:	d801      	bhi.n	8008ae8 <__hexdig_fun+0x26>
 8008ae4:	3827      	subs	r0, #39	; 0x27
 8008ae6:	e7f1      	b.n	8008acc <__hexdig_fun+0xa>
 8008ae8:	2000      	movs	r0, #0
 8008aea:	4770      	bx	lr

08008aec <__gethex>:
 8008aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008af0:	b08b      	sub	sp, #44	; 0x2c
 8008af2:	9305      	str	r3, [sp, #20]
 8008af4:	4bb2      	ldr	r3, [pc, #712]	; (8008dc0 <__gethex+0x2d4>)
 8008af6:	9002      	str	r0, [sp, #8]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	468b      	mov	fp, r1
 8008afc:	4618      	mov	r0, r3
 8008afe:	4690      	mov	r8, r2
 8008b00:	9303      	str	r3, [sp, #12]
 8008b02:	f7f7 fb91 	bl	8000228 <strlen>
 8008b06:	4682      	mov	sl, r0
 8008b08:	9b03      	ldr	r3, [sp, #12]
 8008b0a:	f8db 2000 	ldr.w	r2, [fp]
 8008b0e:	4403      	add	r3, r0
 8008b10:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008b14:	9306      	str	r3, [sp, #24]
 8008b16:	1c93      	adds	r3, r2, #2
 8008b18:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008b1c:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008b20:	32fe      	adds	r2, #254	; 0xfe
 8008b22:	18d1      	adds	r1, r2, r3
 8008b24:	461f      	mov	r7, r3
 8008b26:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008b2a:	9101      	str	r1, [sp, #4]
 8008b2c:	2830      	cmp	r0, #48	; 0x30
 8008b2e:	d0f8      	beq.n	8008b22 <__gethex+0x36>
 8008b30:	f7ff ffc7 	bl	8008ac2 <__hexdig_fun>
 8008b34:	4604      	mov	r4, r0
 8008b36:	2800      	cmp	r0, #0
 8008b38:	d13a      	bne.n	8008bb0 <__gethex+0xc4>
 8008b3a:	4652      	mov	r2, sl
 8008b3c:	4638      	mov	r0, r7
 8008b3e:	9903      	ldr	r1, [sp, #12]
 8008b40:	f001 fa26 	bl	8009f90 <strncmp>
 8008b44:	4605      	mov	r5, r0
 8008b46:	2800      	cmp	r0, #0
 8008b48:	d166      	bne.n	8008c18 <__gethex+0x12c>
 8008b4a:	f817 000a 	ldrb.w	r0, [r7, sl]
 8008b4e:	eb07 060a 	add.w	r6, r7, sl
 8008b52:	f7ff ffb6 	bl	8008ac2 <__hexdig_fun>
 8008b56:	2800      	cmp	r0, #0
 8008b58:	d060      	beq.n	8008c1c <__gethex+0x130>
 8008b5a:	4633      	mov	r3, r6
 8008b5c:	7818      	ldrb	r0, [r3, #0]
 8008b5e:	461f      	mov	r7, r3
 8008b60:	2830      	cmp	r0, #48	; 0x30
 8008b62:	f103 0301 	add.w	r3, r3, #1
 8008b66:	d0f9      	beq.n	8008b5c <__gethex+0x70>
 8008b68:	f7ff ffab 	bl	8008ac2 <__hexdig_fun>
 8008b6c:	2301      	movs	r3, #1
 8008b6e:	fab0 f480 	clz	r4, r0
 8008b72:	4635      	mov	r5, r6
 8008b74:	0964      	lsrs	r4, r4, #5
 8008b76:	9301      	str	r3, [sp, #4]
 8008b78:	463a      	mov	r2, r7
 8008b7a:	4616      	mov	r6, r2
 8008b7c:	7830      	ldrb	r0, [r6, #0]
 8008b7e:	3201      	adds	r2, #1
 8008b80:	f7ff ff9f 	bl	8008ac2 <__hexdig_fun>
 8008b84:	2800      	cmp	r0, #0
 8008b86:	d1f8      	bne.n	8008b7a <__gethex+0x8e>
 8008b88:	4652      	mov	r2, sl
 8008b8a:	4630      	mov	r0, r6
 8008b8c:	9903      	ldr	r1, [sp, #12]
 8008b8e:	f001 f9ff 	bl	8009f90 <strncmp>
 8008b92:	b980      	cbnz	r0, 8008bb6 <__gethex+0xca>
 8008b94:	b94d      	cbnz	r5, 8008baa <__gethex+0xbe>
 8008b96:	eb06 050a 	add.w	r5, r6, sl
 8008b9a:	462a      	mov	r2, r5
 8008b9c:	4616      	mov	r6, r2
 8008b9e:	7830      	ldrb	r0, [r6, #0]
 8008ba0:	3201      	adds	r2, #1
 8008ba2:	f7ff ff8e 	bl	8008ac2 <__hexdig_fun>
 8008ba6:	2800      	cmp	r0, #0
 8008ba8:	d1f8      	bne.n	8008b9c <__gethex+0xb0>
 8008baa:	1bad      	subs	r5, r5, r6
 8008bac:	00ad      	lsls	r5, r5, #2
 8008bae:	e004      	b.n	8008bba <__gethex+0xce>
 8008bb0:	2400      	movs	r4, #0
 8008bb2:	4625      	mov	r5, r4
 8008bb4:	e7e0      	b.n	8008b78 <__gethex+0x8c>
 8008bb6:	2d00      	cmp	r5, #0
 8008bb8:	d1f7      	bne.n	8008baa <__gethex+0xbe>
 8008bba:	7833      	ldrb	r3, [r6, #0]
 8008bbc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008bc0:	2b50      	cmp	r3, #80	; 0x50
 8008bc2:	d139      	bne.n	8008c38 <__gethex+0x14c>
 8008bc4:	7873      	ldrb	r3, [r6, #1]
 8008bc6:	2b2b      	cmp	r3, #43	; 0x2b
 8008bc8:	d02a      	beq.n	8008c20 <__gethex+0x134>
 8008bca:	2b2d      	cmp	r3, #45	; 0x2d
 8008bcc:	d02c      	beq.n	8008c28 <__gethex+0x13c>
 8008bce:	f04f 0900 	mov.w	r9, #0
 8008bd2:	1c71      	adds	r1, r6, #1
 8008bd4:	7808      	ldrb	r0, [r1, #0]
 8008bd6:	f7ff ff74 	bl	8008ac2 <__hexdig_fun>
 8008bda:	1e43      	subs	r3, r0, #1
 8008bdc:	b2db      	uxtb	r3, r3
 8008bde:	2b18      	cmp	r3, #24
 8008be0:	d82a      	bhi.n	8008c38 <__gethex+0x14c>
 8008be2:	f1a0 0210 	sub.w	r2, r0, #16
 8008be6:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008bea:	f7ff ff6a 	bl	8008ac2 <__hexdig_fun>
 8008bee:	1e43      	subs	r3, r0, #1
 8008bf0:	b2db      	uxtb	r3, r3
 8008bf2:	2b18      	cmp	r3, #24
 8008bf4:	d91b      	bls.n	8008c2e <__gethex+0x142>
 8008bf6:	f1b9 0f00 	cmp.w	r9, #0
 8008bfa:	d000      	beq.n	8008bfe <__gethex+0x112>
 8008bfc:	4252      	negs	r2, r2
 8008bfe:	4415      	add	r5, r2
 8008c00:	f8cb 1000 	str.w	r1, [fp]
 8008c04:	b1d4      	cbz	r4, 8008c3c <__gethex+0x150>
 8008c06:	9b01      	ldr	r3, [sp, #4]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	bf14      	ite	ne
 8008c0c:	2700      	movne	r7, #0
 8008c0e:	2706      	moveq	r7, #6
 8008c10:	4638      	mov	r0, r7
 8008c12:	b00b      	add	sp, #44	; 0x2c
 8008c14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c18:	463e      	mov	r6, r7
 8008c1a:	4625      	mov	r5, r4
 8008c1c:	2401      	movs	r4, #1
 8008c1e:	e7cc      	b.n	8008bba <__gethex+0xce>
 8008c20:	f04f 0900 	mov.w	r9, #0
 8008c24:	1cb1      	adds	r1, r6, #2
 8008c26:	e7d5      	b.n	8008bd4 <__gethex+0xe8>
 8008c28:	f04f 0901 	mov.w	r9, #1
 8008c2c:	e7fa      	b.n	8008c24 <__gethex+0x138>
 8008c2e:	230a      	movs	r3, #10
 8008c30:	fb03 0202 	mla	r2, r3, r2, r0
 8008c34:	3a10      	subs	r2, #16
 8008c36:	e7d6      	b.n	8008be6 <__gethex+0xfa>
 8008c38:	4631      	mov	r1, r6
 8008c3a:	e7e1      	b.n	8008c00 <__gethex+0x114>
 8008c3c:	4621      	mov	r1, r4
 8008c3e:	1bf3      	subs	r3, r6, r7
 8008c40:	3b01      	subs	r3, #1
 8008c42:	2b07      	cmp	r3, #7
 8008c44:	dc0a      	bgt.n	8008c5c <__gethex+0x170>
 8008c46:	9802      	ldr	r0, [sp, #8]
 8008c48:	f000 fa88 	bl	800915c <_Balloc>
 8008c4c:	4604      	mov	r4, r0
 8008c4e:	b940      	cbnz	r0, 8008c62 <__gethex+0x176>
 8008c50:	4602      	mov	r2, r0
 8008c52:	21de      	movs	r1, #222	; 0xde
 8008c54:	4b5b      	ldr	r3, [pc, #364]	; (8008dc4 <__gethex+0x2d8>)
 8008c56:	485c      	ldr	r0, [pc, #368]	; (8008dc8 <__gethex+0x2dc>)
 8008c58:	f001 f9bc 	bl	8009fd4 <__assert_func>
 8008c5c:	3101      	adds	r1, #1
 8008c5e:	105b      	asrs	r3, r3, #1
 8008c60:	e7ef      	b.n	8008c42 <__gethex+0x156>
 8008c62:	f04f 0b00 	mov.w	fp, #0
 8008c66:	f100 0914 	add.w	r9, r0, #20
 8008c6a:	f1ca 0301 	rsb	r3, sl, #1
 8008c6e:	f8cd 9010 	str.w	r9, [sp, #16]
 8008c72:	f8cd b004 	str.w	fp, [sp, #4]
 8008c76:	9308      	str	r3, [sp, #32]
 8008c78:	42b7      	cmp	r7, r6
 8008c7a:	d33f      	bcc.n	8008cfc <__gethex+0x210>
 8008c7c:	9f04      	ldr	r7, [sp, #16]
 8008c7e:	9b01      	ldr	r3, [sp, #4]
 8008c80:	f847 3b04 	str.w	r3, [r7], #4
 8008c84:	eba7 0709 	sub.w	r7, r7, r9
 8008c88:	10bf      	asrs	r7, r7, #2
 8008c8a:	6127      	str	r7, [r4, #16]
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	f000 fb57 	bl	8009340 <__hi0bits>
 8008c92:	017f      	lsls	r7, r7, #5
 8008c94:	f8d8 6000 	ldr.w	r6, [r8]
 8008c98:	1a3f      	subs	r7, r7, r0
 8008c9a:	42b7      	cmp	r7, r6
 8008c9c:	dd62      	ble.n	8008d64 <__gethex+0x278>
 8008c9e:	1bbf      	subs	r7, r7, r6
 8008ca0:	4639      	mov	r1, r7
 8008ca2:	4620      	mov	r0, r4
 8008ca4:	f000 fef1 	bl	8009a8a <__any_on>
 8008ca8:	4682      	mov	sl, r0
 8008caa:	b1a8      	cbz	r0, 8008cd8 <__gethex+0x1ec>
 8008cac:	f04f 0a01 	mov.w	sl, #1
 8008cb0:	1e7b      	subs	r3, r7, #1
 8008cb2:	1159      	asrs	r1, r3, #5
 8008cb4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008cb8:	f003 021f 	and.w	r2, r3, #31
 8008cbc:	fa0a f202 	lsl.w	r2, sl, r2
 8008cc0:	420a      	tst	r2, r1
 8008cc2:	d009      	beq.n	8008cd8 <__gethex+0x1ec>
 8008cc4:	4553      	cmp	r3, sl
 8008cc6:	dd05      	ble.n	8008cd4 <__gethex+0x1e8>
 8008cc8:	4620      	mov	r0, r4
 8008cca:	1eb9      	subs	r1, r7, #2
 8008ccc:	f000 fedd 	bl	8009a8a <__any_on>
 8008cd0:	2800      	cmp	r0, #0
 8008cd2:	d144      	bne.n	8008d5e <__gethex+0x272>
 8008cd4:	f04f 0a02 	mov.w	sl, #2
 8008cd8:	4639      	mov	r1, r7
 8008cda:	4620      	mov	r0, r4
 8008cdc:	f7ff fe9e 	bl	8008a1c <rshift>
 8008ce0:	443d      	add	r5, r7
 8008ce2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008ce6:	42ab      	cmp	r3, r5
 8008ce8:	da4a      	bge.n	8008d80 <__gethex+0x294>
 8008cea:	4621      	mov	r1, r4
 8008cec:	9802      	ldr	r0, [sp, #8]
 8008cee:	f000 fa75 	bl	80091dc <_Bfree>
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008cf6:	27a3      	movs	r7, #163	; 0xa3
 8008cf8:	6013      	str	r3, [r2, #0]
 8008cfa:	e789      	b.n	8008c10 <__gethex+0x124>
 8008cfc:	1e73      	subs	r3, r6, #1
 8008cfe:	9a06      	ldr	r2, [sp, #24]
 8008d00:	9307      	str	r3, [sp, #28]
 8008d02:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008d06:	4293      	cmp	r3, r2
 8008d08:	d019      	beq.n	8008d3e <__gethex+0x252>
 8008d0a:	f1bb 0f20 	cmp.w	fp, #32
 8008d0e:	d107      	bne.n	8008d20 <__gethex+0x234>
 8008d10:	9b04      	ldr	r3, [sp, #16]
 8008d12:	9a01      	ldr	r2, [sp, #4]
 8008d14:	f843 2b04 	str.w	r2, [r3], #4
 8008d18:	9304      	str	r3, [sp, #16]
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	469b      	mov	fp, r3
 8008d1e:	9301      	str	r3, [sp, #4]
 8008d20:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008d24:	f7ff fecd 	bl	8008ac2 <__hexdig_fun>
 8008d28:	9b01      	ldr	r3, [sp, #4]
 8008d2a:	f000 000f 	and.w	r0, r0, #15
 8008d2e:	fa00 f00b 	lsl.w	r0, r0, fp
 8008d32:	4303      	orrs	r3, r0
 8008d34:	9301      	str	r3, [sp, #4]
 8008d36:	f10b 0b04 	add.w	fp, fp, #4
 8008d3a:	9b07      	ldr	r3, [sp, #28]
 8008d3c:	e00d      	b.n	8008d5a <__gethex+0x26e>
 8008d3e:	9a08      	ldr	r2, [sp, #32]
 8008d40:	1e73      	subs	r3, r6, #1
 8008d42:	4413      	add	r3, r2
 8008d44:	42bb      	cmp	r3, r7
 8008d46:	d3e0      	bcc.n	8008d0a <__gethex+0x21e>
 8008d48:	4618      	mov	r0, r3
 8008d4a:	4652      	mov	r2, sl
 8008d4c:	9903      	ldr	r1, [sp, #12]
 8008d4e:	9309      	str	r3, [sp, #36]	; 0x24
 8008d50:	f001 f91e 	bl	8009f90 <strncmp>
 8008d54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d56:	2800      	cmp	r0, #0
 8008d58:	d1d7      	bne.n	8008d0a <__gethex+0x21e>
 8008d5a:	461e      	mov	r6, r3
 8008d5c:	e78c      	b.n	8008c78 <__gethex+0x18c>
 8008d5e:	f04f 0a03 	mov.w	sl, #3
 8008d62:	e7b9      	b.n	8008cd8 <__gethex+0x1ec>
 8008d64:	da09      	bge.n	8008d7a <__gethex+0x28e>
 8008d66:	1bf7      	subs	r7, r6, r7
 8008d68:	4621      	mov	r1, r4
 8008d6a:	463a      	mov	r2, r7
 8008d6c:	9802      	ldr	r0, [sp, #8]
 8008d6e:	f000 fc4d 	bl	800960c <__lshift>
 8008d72:	4604      	mov	r4, r0
 8008d74:	1bed      	subs	r5, r5, r7
 8008d76:	f100 0914 	add.w	r9, r0, #20
 8008d7a:	f04f 0a00 	mov.w	sl, #0
 8008d7e:	e7b0      	b.n	8008ce2 <__gethex+0x1f6>
 8008d80:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008d84:	42a8      	cmp	r0, r5
 8008d86:	dd72      	ble.n	8008e6e <__gethex+0x382>
 8008d88:	1b45      	subs	r5, r0, r5
 8008d8a:	42ae      	cmp	r6, r5
 8008d8c:	dc35      	bgt.n	8008dfa <__gethex+0x30e>
 8008d8e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008d92:	2b02      	cmp	r3, #2
 8008d94:	d029      	beq.n	8008dea <__gethex+0x2fe>
 8008d96:	2b03      	cmp	r3, #3
 8008d98:	d02b      	beq.n	8008df2 <__gethex+0x306>
 8008d9a:	2b01      	cmp	r3, #1
 8008d9c:	d11c      	bne.n	8008dd8 <__gethex+0x2ec>
 8008d9e:	42ae      	cmp	r6, r5
 8008da0:	d11a      	bne.n	8008dd8 <__gethex+0x2ec>
 8008da2:	2e01      	cmp	r6, #1
 8008da4:	d112      	bne.n	8008dcc <__gethex+0x2e0>
 8008da6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008daa:	9a05      	ldr	r2, [sp, #20]
 8008dac:	2762      	movs	r7, #98	; 0x62
 8008dae:	6013      	str	r3, [r2, #0]
 8008db0:	2301      	movs	r3, #1
 8008db2:	6123      	str	r3, [r4, #16]
 8008db4:	f8c9 3000 	str.w	r3, [r9]
 8008db8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008dba:	601c      	str	r4, [r3, #0]
 8008dbc:	e728      	b.n	8008c10 <__gethex+0x124>
 8008dbe:	bf00      	nop
 8008dc0:	0800ae30 	.word	0x0800ae30
 8008dc4:	0800adb8 	.word	0x0800adb8
 8008dc8:	0800adc9 	.word	0x0800adc9
 8008dcc:	4620      	mov	r0, r4
 8008dce:	1e71      	subs	r1, r6, #1
 8008dd0:	f000 fe5b 	bl	8009a8a <__any_on>
 8008dd4:	2800      	cmp	r0, #0
 8008dd6:	d1e6      	bne.n	8008da6 <__gethex+0x2ba>
 8008dd8:	4621      	mov	r1, r4
 8008dda:	9802      	ldr	r0, [sp, #8]
 8008ddc:	f000 f9fe 	bl	80091dc <_Bfree>
 8008de0:	2300      	movs	r3, #0
 8008de2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008de4:	2750      	movs	r7, #80	; 0x50
 8008de6:	6013      	str	r3, [r2, #0]
 8008de8:	e712      	b.n	8008c10 <__gethex+0x124>
 8008dea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d1f3      	bne.n	8008dd8 <__gethex+0x2ec>
 8008df0:	e7d9      	b.n	8008da6 <__gethex+0x2ba>
 8008df2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d1d6      	bne.n	8008da6 <__gethex+0x2ba>
 8008df8:	e7ee      	b.n	8008dd8 <__gethex+0x2ec>
 8008dfa:	1e6f      	subs	r7, r5, #1
 8008dfc:	f1ba 0f00 	cmp.w	sl, #0
 8008e00:	d132      	bne.n	8008e68 <__gethex+0x37c>
 8008e02:	b127      	cbz	r7, 8008e0e <__gethex+0x322>
 8008e04:	4639      	mov	r1, r7
 8008e06:	4620      	mov	r0, r4
 8008e08:	f000 fe3f 	bl	8009a8a <__any_on>
 8008e0c:	4682      	mov	sl, r0
 8008e0e:	2101      	movs	r1, #1
 8008e10:	117b      	asrs	r3, r7, #5
 8008e12:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008e16:	f007 071f 	and.w	r7, r7, #31
 8008e1a:	fa01 f707 	lsl.w	r7, r1, r7
 8008e1e:	421f      	tst	r7, r3
 8008e20:	f04f 0702 	mov.w	r7, #2
 8008e24:	4629      	mov	r1, r5
 8008e26:	4620      	mov	r0, r4
 8008e28:	bf18      	it	ne
 8008e2a:	f04a 0a02 	orrne.w	sl, sl, #2
 8008e2e:	1b76      	subs	r6, r6, r5
 8008e30:	f7ff fdf4 	bl	8008a1c <rshift>
 8008e34:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008e38:	f1ba 0f00 	cmp.w	sl, #0
 8008e3c:	d048      	beq.n	8008ed0 <__gethex+0x3e4>
 8008e3e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008e42:	2b02      	cmp	r3, #2
 8008e44:	d015      	beq.n	8008e72 <__gethex+0x386>
 8008e46:	2b03      	cmp	r3, #3
 8008e48:	d017      	beq.n	8008e7a <__gethex+0x38e>
 8008e4a:	2b01      	cmp	r3, #1
 8008e4c:	d109      	bne.n	8008e62 <__gethex+0x376>
 8008e4e:	f01a 0f02 	tst.w	sl, #2
 8008e52:	d006      	beq.n	8008e62 <__gethex+0x376>
 8008e54:	f8d9 0000 	ldr.w	r0, [r9]
 8008e58:	ea4a 0a00 	orr.w	sl, sl, r0
 8008e5c:	f01a 0f01 	tst.w	sl, #1
 8008e60:	d10e      	bne.n	8008e80 <__gethex+0x394>
 8008e62:	f047 0710 	orr.w	r7, r7, #16
 8008e66:	e033      	b.n	8008ed0 <__gethex+0x3e4>
 8008e68:	f04f 0a01 	mov.w	sl, #1
 8008e6c:	e7cf      	b.n	8008e0e <__gethex+0x322>
 8008e6e:	2701      	movs	r7, #1
 8008e70:	e7e2      	b.n	8008e38 <__gethex+0x34c>
 8008e72:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008e74:	f1c3 0301 	rsb	r3, r3, #1
 8008e78:	9315      	str	r3, [sp, #84]	; 0x54
 8008e7a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d0f0      	beq.n	8008e62 <__gethex+0x376>
 8008e80:	f04f 0c00 	mov.w	ip, #0
 8008e84:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008e88:	f104 0314 	add.w	r3, r4, #20
 8008e8c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008e90:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008e94:	4618      	mov	r0, r3
 8008e96:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e9a:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008e9e:	d01c      	beq.n	8008eda <__gethex+0x3ee>
 8008ea0:	3201      	adds	r2, #1
 8008ea2:	6002      	str	r2, [r0, #0]
 8008ea4:	2f02      	cmp	r7, #2
 8008ea6:	f104 0314 	add.w	r3, r4, #20
 8008eaa:	d13d      	bne.n	8008f28 <__gethex+0x43c>
 8008eac:	f8d8 2000 	ldr.w	r2, [r8]
 8008eb0:	3a01      	subs	r2, #1
 8008eb2:	42b2      	cmp	r2, r6
 8008eb4:	d10a      	bne.n	8008ecc <__gethex+0x3e0>
 8008eb6:	2201      	movs	r2, #1
 8008eb8:	1171      	asrs	r1, r6, #5
 8008eba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008ebe:	f006 061f 	and.w	r6, r6, #31
 8008ec2:	fa02 f606 	lsl.w	r6, r2, r6
 8008ec6:	421e      	tst	r6, r3
 8008ec8:	bf18      	it	ne
 8008eca:	4617      	movne	r7, r2
 8008ecc:	f047 0720 	orr.w	r7, r7, #32
 8008ed0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008ed2:	601c      	str	r4, [r3, #0]
 8008ed4:	9b05      	ldr	r3, [sp, #20]
 8008ed6:	601d      	str	r5, [r3, #0]
 8008ed8:	e69a      	b.n	8008c10 <__gethex+0x124>
 8008eda:	4299      	cmp	r1, r3
 8008edc:	f843 cc04 	str.w	ip, [r3, #-4]
 8008ee0:	d8d8      	bhi.n	8008e94 <__gethex+0x3a8>
 8008ee2:	68a3      	ldr	r3, [r4, #8]
 8008ee4:	459b      	cmp	fp, r3
 8008ee6:	db17      	blt.n	8008f18 <__gethex+0x42c>
 8008ee8:	6861      	ldr	r1, [r4, #4]
 8008eea:	9802      	ldr	r0, [sp, #8]
 8008eec:	3101      	adds	r1, #1
 8008eee:	f000 f935 	bl	800915c <_Balloc>
 8008ef2:	4681      	mov	r9, r0
 8008ef4:	b918      	cbnz	r0, 8008efe <__gethex+0x412>
 8008ef6:	4602      	mov	r2, r0
 8008ef8:	2184      	movs	r1, #132	; 0x84
 8008efa:	4b19      	ldr	r3, [pc, #100]	; (8008f60 <__gethex+0x474>)
 8008efc:	e6ab      	b.n	8008c56 <__gethex+0x16a>
 8008efe:	6922      	ldr	r2, [r4, #16]
 8008f00:	f104 010c 	add.w	r1, r4, #12
 8008f04:	3202      	adds	r2, #2
 8008f06:	0092      	lsls	r2, r2, #2
 8008f08:	300c      	adds	r0, #12
 8008f0a:	f000 f919 	bl	8009140 <memcpy>
 8008f0e:	4621      	mov	r1, r4
 8008f10:	9802      	ldr	r0, [sp, #8]
 8008f12:	f000 f963 	bl	80091dc <_Bfree>
 8008f16:	464c      	mov	r4, r9
 8008f18:	6923      	ldr	r3, [r4, #16]
 8008f1a:	1c5a      	adds	r2, r3, #1
 8008f1c:	6122      	str	r2, [r4, #16]
 8008f1e:	2201      	movs	r2, #1
 8008f20:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008f24:	615a      	str	r2, [r3, #20]
 8008f26:	e7bd      	b.n	8008ea4 <__gethex+0x3b8>
 8008f28:	6922      	ldr	r2, [r4, #16]
 8008f2a:	455a      	cmp	r2, fp
 8008f2c:	dd0b      	ble.n	8008f46 <__gethex+0x45a>
 8008f2e:	2101      	movs	r1, #1
 8008f30:	4620      	mov	r0, r4
 8008f32:	f7ff fd73 	bl	8008a1c <rshift>
 8008f36:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008f3a:	3501      	adds	r5, #1
 8008f3c:	42ab      	cmp	r3, r5
 8008f3e:	f6ff aed4 	blt.w	8008cea <__gethex+0x1fe>
 8008f42:	2701      	movs	r7, #1
 8008f44:	e7c2      	b.n	8008ecc <__gethex+0x3e0>
 8008f46:	f016 061f 	ands.w	r6, r6, #31
 8008f4a:	d0fa      	beq.n	8008f42 <__gethex+0x456>
 8008f4c:	4453      	add	r3, sl
 8008f4e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008f52:	f000 f9f5 	bl	8009340 <__hi0bits>
 8008f56:	f1c6 0620 	rsb	r6, r6, #32
 8008f5a:	42b0      	cmp	r0, r6
 8008f5c:	dbe7      	blt.n	8008f2e <__gethex+0x442>
 8008f5e:	e7f0      	b.n	8008f42 <__gethex+0x456>
 8008f60:	0800adb8 	.word	0x0800adb8

08008f64 <L_shift>:
 8008f64:	f1c2 0208 	rsb	r2, r2, #8
 8008f68:	0092      	lsls	r2, r2, #2
 8008f6a:	b570      	push	{r4, r5, r6, lr}
 8008f6c:	f1c2 0620 	rsb	r6, r2, #32
 8008f70:	6843      	ldr	r3, [r0, #4]
 8008f72:	6804      	ldr	r4, [r0, #0]
 8008f74:	fa03 f506 	lsl.w	r5, r3, r6
 8008f78:	432c      	orrs	r4, r5
 8008f7a:	40d3      	lsrs	r3, r2
 8008f7c:	6004      	str	r4, [r0, #0]
 8008f7e:	f840 3f04 	str.w	r3, [r0, #4]!
 8008f82:	4288      	cmp	r0, r1
 8008f84:	d3f4      	bcc.n	8008f70 <L_shift+0xc>
 8008f86:	bd70      	pop	{r4, r5, r6, pc}

08008f88 <__match>:
 8008f88:	b530      	push	{r4, r5, lr}
 8008f8a:	6803      	ldr	r3, [r0, #0]
 8008f8c:	3301      	adds	r3, #1
 8008f8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f92:	b914      	cbnz	r4, 8008f9a <__match+0x12>
 8008f94:	6003      	str	r3, [r0, #0]
 8008f96:	2001      	movs	r0, #1
 8008f98:	bd30      	pop	{r4, r5, pc}
 8008f9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f9e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008fa2:	2d19      	cmp	r5, #25
 8008fa4:	bf98      	it	ls
 8008fa6:	3220      	addls	r2, #32
 8008fa8:	42a2      	cmp	r2, r4
 8008faa:	d0f0      	beq.n	8008f8e <__match+0x6>
 8008fac:	2000      	movs	r0, #0
 8008fae:	e7f3      	b.n	8008f98 <__match+0x10>

08008fb0 <__hexnan>:
 8008fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fb4:	2500      	movs	r5, #0
 8008fb6:	680b      	ldr	r3, [r1, #0]
 8008fb8:	4682      	mov	sl, r0
 8008fba:	115e      	asrs	r6, r3, #5
 8008fbc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008fc0:	f013 031f 	ands.w	r3, r3, #31
 8008fc4:	bf18      	it	ne
 8008fc6:	3604      	addne	r6, #4
 8008fc8:	1f37      	subs	r7, r6, #4
 8008fca:	46b9      	mov	r9, r7
 8008fcc:	463c      	mov	r4, r7
 8008fce:	46ab      	mov	fp, r5
 8008fd0:	b087      	sub	sp, #28
 8008fd2:	4690      	mov	r8, r2
 8008fd4:	6802      	ldr	r2, [r0, #0]
 8008fd6:	9301      	str	r3, [sp, #4]
 8008fd8:	f846 5c04 	str.w	r5, [r6, #-4]
 8008fdc:	9502      	str	r5, [sp, #8]
 8008fde:	7851      	ldrb	r1, [r2, #1]
 8008fe0:	1c53      	adds	r3, r2, #1
 8008fe2:	9303      	str	r3, [sp, #12]
 8008fe4:	b341      	cbz	r1, 8009038 <__hexnan+0x88>
 8008fe6:	4608      	mov	r0, r1
 8008fe8:	9205      	str	r2, [sp, #20]
 8008fea:	9104      	str	r1, [sp, #16]
 8008fec:	f7ff fd69 	bl	8008ac2 <__hexdig_fun>
 8008ff0:	2800      	cmp	r0, #0
 8008ff2:	d14f      	bne.n	8009094 <__hexnan+0xe4>
 8008ff4:	9904      	ldr	r1, [sp, #16]
 8008ff6:	9a05      	ldr	r2, [sp, #20]
 8008ff8:	2920      	cmp	r1, #32
 8008ffa:	d818      	bhi.n	800902e <__hexnan+0x7e>
 8008ffc:	9b02      	ldr	r3, [sp, #8]
 8008ffe:	459b      	cmp	fp, r3
 8009000:	dd13      	ble.n	800902a <__hexnan+0x7a>
 8009002:	454c      	cmp	r4, r9
 8009004:	d206      	bcs.n	8009014 <__hexnan+0x64>
 8009006:	2d07      	cmp	r5, #7
 8009008:	dc04      	bgt.n	8009014 <__hexnan+0x64>
 800900a:	462a      	mov	r2, r5
 800900c:	4649      	mov	r1, r9
 800900e:	4620      	mov	r0, r4
 8009010:	f7ff ffa8 	bl	8008f64 <L_shift>
 8009014:	4544      	cmp	r4, r8
 8009016:	d950      	bls.n	80090ba <__hexnan+0x10a>
 8009018:	2300      	movs	r3, #0
 800901a:	f1a4 0904 	sub.w	r9, r4, #4
 800901e:	f844 3c04 	str.w	r3, [r4, #-4]
 8009022:	461d      	mov	r5, r3
 8009024:	464c      	mov	r4, r9
 8009026:	f8cd b008 	str.w	fp, [sp, #8]
 800902a:	9a03      	ldr	r2, [sp, #12]
 800902c:	e7d7      	b.n	8008fde <__hexnan+0x2e>
 800902e:	2929      	cmp	r1, #41	; 0x29
 8009030:	d156      	bne.n	80090e0 <__hexnan+0x130>
 8009032:	3202      	adds	r2, #2
 8009034:	f8ca 2000 	str.w	r2, [sl]
 8009038:	f1bb 0f00 	cmp.w	fp, #0
 800903c:	d050      	beq.n	80090e0 <__hexnan+0x130>
 800903e:	454c      	cmp	r4, r9
 8009040:	d206      	bcs.n	8009050 <__hexnan+0xa0>
 8009042:	2d07      	cmp	r5, #7
 8009044:	dc04      	bgt.n	8009050 <__hexnan+0xa0>
 8009046:	462a      	mov	r2, r5
 8009048:	4649      	mov	r1, r9
 800904a:	4620      	mov	r0, r4
 800904c:	f7ff ff8a 	bl	8008f64 <L_shift>
 8009050:	4544      	cmp	r4, r8
 8009052:	d934      	bls.n	80090be <__hexnan+0x10e>
 8009054:	4623      	mov	r3, r4
 8009056:	f1a8 0204 	sub.w	r2, r8, #4
 800905a:	f853 1b04 	ldr.w	r1, [r3], #4
 800905e:	429f      	cmp	r7, r3
 8009060:	f842 1f04 	str.w	r1, [r2, #4]!
 8009064:	d2f9      	bcs.n	800905a <__hexnan+0xaa>
 8009066:	1b3b      	subs	r3, r7, r4
 8009068:	f023 0303 	bic.w	r3, r3, #3
 800906c:	3304      	adds	r3, #4
 800906e:	3401      	adds	r4, #1
 8009070:	3e03      	subs	r6, #3
 8009072:	42b4      	cmp	r4, r6
 8009074:	bf88      	it	hi
 8009076:	2304      	movhi	r3, #4
 8009078:	2200      	movs	r2, #0
 800907a:	4443      	add	r3, r8
 800907c:	f843 2b04 	str.w	r2, [r3], #4
 8009080:	429f      	cmp	r7, r3
 8009082:	d2fb      	bcs.n	800907c <__hexnan+0xcc>
 8009084:	683b      	ldr	r3, [r7, #0]
 8009086:	b91b      	cbnz	r3, 8009090 <__hexnan+0xe0>
 8009088:	4547      	cmp	r7, r8
 800908a:	d127      	bne.n	80090dc <__hexnan+0x12c>
 800908c:	2301      	movs	r3, #1
 800908e:	603b      	str	r3, [r7, #0]
 8009090:	2005      	movs	r0, #5
 8009092:	e026      	b.n	80090e2 <__hexnan+0x132>
 8009094:	3501      	adds	r5, #1
 8009096:	2d08      	cmp	r5, #8
 8009098:	f10b 0b01 	add.w	fp, fp, #1
 800909c:	dd06      	ble.n	80090ac <__hexnan+0xfc>
 800909e:	4544      	cmp	r4, r8
 80090a0:	d9c3      	bls.n	800902a <__hexnan+0x7a>
 80090a2:	2300      	movs	r3, #0
 80090a4:	2501      	movs	r5, #1
 80090a6:	f844 3c04 	str.w	r3, [r4, #-4]
 80090aa:	3c04      	subs	r4, #4
 80090ac:	6822      	ldr	r2, [r4, #0]
 80090ae:	f000 000f 	and.w	r0, r0, #15
 80090b2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80090b6:	6022      	str	r2, [r4, #0]
 80090b8:	e7b7      	b.n	800902a <__hexnan+0x7a>
 80090ba:	2508      	movs	r5, #8
 80090bc:	e7b5      	b.n	800902a <__hexnan+0x7a>
 80090be:	9b01      	ldr	r3, [sp, #4]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d0df      	beq.n	8009084 <__hexnan+0xd4>
 80090c4:	f04f 32ff 	mov.w	r2, #4294967295
 80090c8:	f1c3 0320 	rsb	r3, r3, #32
 80090cc:	fa22 f303 	lsr.w	r3, r2, r3
 80090d0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80090d4:	401a      	ands	r2, r3
 80090d6:	f846 2c04 	str.w	r2, [r6, #-4]
 80090da:	e7d3      	b.n	8009084 <__hexnan+0xd4>
 80090dc:	3f04      	subs	r7, #4
 80090de:	e7d1      	b.n	8009084 <__hexnan+0xd4>
 80090e0:	2004      	movs	r0, #4
 80090e2:	b007      	add	sp, #28
 80090e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080090e8 <_localeconv_r>:
 80090e8:	4800      	ldr	r0, [pc, #0]	; (80090ec <_localeconv_r+0x4>)
 80090ea:	4770      	bx	lr
 80090ec:	2000018c 	.word	0x2000018c

080090f0 <malloc>:
 80090f0:	4b02      	ldr	r3, [pc, #8]	; (80090fc <malloc+0xc>)
 80090f2:	4601      	mov	r1, r0
 80090f4:	6818      	ldr	r0, [r3, #0]
 80090f6:	f000 bd65 	b.w	8009bc4 <_malloc_r>
 80090fa:	bf00      	nop
 80090fc:	20000034 	.word	0x20000034

08009100 <__ascii_mbtowc>:
 8009100:	b082      	sub	sp, #8
 8009102:	b901      	cbnz	r1, 8009106 <__ascii_mbtowc+0x6>
 8009104:	a901      	add	r1, sp, #4
 8009106:	b142      	cbz	r2, 800911a <__ascii_mbtowc+0x1a>
 8009108:	b14b      	cbz	r3, 800911e <__ascii_mbtowc+0x1e>
 800910a:	7813      	ldrb	r3, [r2, #0]
 800910c:	600b      	str	r3, [r1, #0]
 800910e:	7812      	ldrb	r2, [r2, #0]
 8009110:	1e10      	subs	r0, r2, #0
 8009112:	bf18      	it	ne
 8009114:	2001      	movne	r0, #1
 8009116:	b002      	add	sp, #8
 8009118:	4770      	bx	lr
 800911a:	4610      	mov	r0, r2
 800911c:	e7fb      	b.n	8009116 <__ascii_mbtowc+0x16>
 800911e:	f06f 0001 	mvn.w	r0, #1
 8009122:	e7f8      	b.n	8009116 <__ascii_mbtowc+0x16>

08009124 <memchr>:
 8009124:	4603      	mov	r3, r0
 8009126:	b510      	push	{r4, lr}
 8009128:	b2c9      	uxtb	r1, r1
 800912a:	4402      	add	r2, r0
 800912c:	4293      	cmp	r3, r2
 800912e:	4618      	mov	r0, r3
 8009130:	d101      	bne.n	8009136 <memchr+0x12>
 8009132:	2000      	movs	r0, #0
 8009134:	e003      	b.n	800913e <memchr+0x1a>
 8009136:	7804      	ldrb	r4, [r0, #0]
 8009138:	3301      	adds	r3, #1
 800913a:	428c      	cmp	r4, r1
 800913c:	d1f6      	bne.n	800912c <memchr+0x8>
 800913e:	bd10      	pop	{r4, pc}

08009140 <memcpy>:
 8009140:	440a      	add	r2, r1
 8009142:	4291      	cmp	r1, r2
 8009144:	f100 33ff 	add.w	r3, r0, #4294967295
 8009148:	d100      	bne.n	800914c <memcpy+0xc>
 800914a:	4770      	bx	lr
 800914c:	b510      	push	{r4, lr}
 800914e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009152:	4291      	cmp	r1, r2
 8009154:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009158:	d1f9      	bne.n	800914e <memcpy+0xe>
 800915a:	bd10      	pop	{r4, pc}

0800915c <_Balloc>:
 800915c:	b570      	push	{r4, r5, r6, lr}
 800915e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009160:	4604      	mov	r4, r0
 8009162:	460d      	mov	r5, r1
 8009164:	b976      	cbnz	r6, 8009184 <_Balloc+0x28>
 8009166:	2010      	movs	r0, #16
 8009168:	f7ff ffc2 	bl	80090f0 <malloc>
 800916c:	4602      	mov	r2, r0
 800916e:	6260      	str	r0, [r4, #36]	; 0x24
 8009170:	b920      	cbnz	r0, 800917c <_Balloc+0x20>
 8009172:	2166      	movs	r1, #102	; 0x66
 8009174:	4b17      	ldr	r3, [pc, #92]	; (80091d4 <_Balloc+0x78>)
 8009176:	4818      	ldr	r0, [pc, #96]	; (80091d8 <_Balloc+0x7c>)
 8009178:	f000 ff2c 	bl	8009fd4 <__assert_func>
 800917c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009180:	6006      	str	r6, [r0, #0]
 8009182:	60c6      	str	r6, [r0, #12]
 8009184:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009186:	68f3      	ldr	r3, [r6, #12]
 8009188:	b183      	cbz	r3, 80091ac <_Balloc+0x50>
 800918a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800918c:	68db      	ldr	r3, [r3, #12]
 800918e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009192:	b9b8      	cbnz	r0, 80091c4 <_Balloc+0x68>
 8009194:	2101      	movs	r1, #1
 8009196:	fa01 f605 	lsl.w	r6, r1, r5
 800919a:	1d72      	adds	r2, r6, #5
 800919c:	4620      	mov	r0, r4
 800919e:	0092      	lsls	r2, r2, #2
 80091a0:	f000 fc94 	bl	8009acc <_calloc_r>
 80091a4:	b160      	cbz	r0, 80091c0 <_Balloc+0x64>
 80091a6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80091aa:	e00e      	b.n	80091ca <_Balloc+0x6e>
 80091ac:	2221      	movs	r2, #33	; 0x21
 80091ae:	2104      	movs	r1, #4
 80091b0:	4620      	mov	r0, r4
 80091b2:	f000 fc8b 	bl	8009acc <_calloc_r>
 80091b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80091b8:	60f0      	str	r0, [r6, #12]
 80091ba:	68db      	ldr	r3, [r3, #12]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d1e4      	bne.n	800918a <_Balloc+0x2e>
 80091c0:	2000      	movs	r0, #0
 80091c2:	bd70      	pop	{r4, r5, r6, pc}
 80091c4:	6802      	ldr	r2, [r0, #0]
 80091c6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80091ca:	2300      	movs	r3, #0
 80091cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80091d0:	e7f7      	b.n	80091c2 <_Balloc+0x66>
 80091d2:	bf00      	nop
 80091d4:	0800ad46 	.word	0x0800ad46
 80091d8:	0800ae44 	.word	0x0800ae44

080091dc <_Bfree>:
 80091dc:	b570      	push	{r4, r5, r6, lr}
 80091de:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80091e0:	4605      	mov	r5, r0
 80091e2:	460c      	mov	r4, r1
 80091e4:	b976      	cbnz	r6, 8009204 <_Bfree+0x28>
 80091e6:	2010      	movs	r0, #16
 80091e8:	f7ff ff82 	bl	80090f0 <malloc>
 80091ec:	4602      	mov	r2, r0
 80091ee:	6268      	str	r0, [r5, #36]	; 0x24
 80091f0:	b920      	cbnz	r0, 80091fc <_Bfree+0x20>
 80091f2:	218a      	movs	r1, #138	; 0x8a
 80091f4:	4b08      	ldr	r3, [pc, #32]	; (8009218 <_Bfree+0x3c>)
 80091f6:	4809      	ldr	r0, [pc, #36]	; (800921c <_Bfree+0x40>)
 80091f8:	f000 feec 	bl	8009fd4 <__assert_func>
 80091fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009200:	6006      	str	r6, [r0, #0]
 8009202:	60c6      	str	r6, [r0, #12]
 8009204:	b13c      	cbz	r4, 8009216 <_Bfree+0x3a>
 8009206:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009208:	6862      	ldr	r2, [r4, #4]
 800920a:	68db      	ldr	r3, [r3, #12]
 800920c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009210:	6021      	str	r1, [r4, #0]
 8009212:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009216:	bd70      	pop	{r4, r5, r6, pc}
 8009218:	0800ad46 	.word	0x0800ad46
 800921c:	0800ae44 	.word	0x0800ae44

08009220 <__multadd>:
 8009220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009224:	4607      	mov	r7, r0
 8009226:	460c      	mov	r4, r1
 8009228:	461e      	mov	r6, r3
 800922a:	2000      	movs	r0, #0
 800922c:	690d      	ldr	r5, [r1, #16]
 800922e:	f101 0c14 	add.w	ip, r1, #20
 8009232:	f8dc 3000 	ldr.w	r3, [ip]
 8009236:	3001      	adds	r0, #1
 8009238:	b299      	uxth	r1, r3
 800923a:	fb02 6101 	mla	r1, r2, r1, r6
 800923e:	0c1e      	lsrs	r6, r3, #16
 8009240:	0c0b      	lsrs	r3, r1, #16
 8009242:	fb02 3306 	mla	r3, r2, r6, r3
 8009246:	b289      	uxth	r1, r1
 8009248:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800924c:	4285      	cmp	r5, r0
 800924e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009252:	f84c 1b04 	str.w	r1, [ip], #4
 8009256:	dcec      	bgt.n	8009232 <__multadd+0x12>
 8009258:	b30e      	cbz	r6, 800929e <__multadd+0x7e>
 800925a:	68a3      	ldr	r3, [r4, #8]
 800925c:	42ab      	cmp	r3, r5
 800925e:	dc19      	bgt.n	8009294 <__multadd+0x74>
 8009260:	6861      	ldr	r1, [r4, #4]
 8009262:	4638      	mov	r0, r7
 8009264:	3101      	adds	r1, #1
 8009266:	f7ff ff79 	bl	800915c <_Balloc>
 800926a:	4680      	mov	r8, r0
 800926c:	b928      	cbnz	r0, 800927a <__multadd+0x5a>
 800926e:	4602      	mov	r2, r0
 8009270:	21b5      	movs	r1, #181	; 0xb5
 8009272:	4b0c      	ldr	r3, [pc, #48]	; (80092a4 <__multadd+0x84>)
 8009274:	480c      	ldr	r0, [pc, #48]	; (80092a8 <__multadd+0x88>)
 8009276:	f000 fead 	bl	8009fd4 <__assert_func>
 800927a:	6922      	ldr	r2, [r4, #16]
 800927c:	f104 010c 	add.w	r1, r4, #12
 8009280:	3202      	adds	r2, #2
 8009282:	0092      	lsls	r2, r2, #2
 8009284:	300c      	adds	r0, #12
 8009286:	f7ff ff5b 	bl	8009140 <memcpy>
 800928a:	4621      	mov	r1, r4
 800928c:	4638      	mov	r0, r7
 800928e:	f7ff ffa5 	bl	80091dc <_Bfree>
 8009292:	4644      	mov	r4, r8
 8009294:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009298:	3501      	adds	r5, #1
 800929a:	615e      	str	r6, [r3, #20]
 800929c:	6125      	str	r5, [r4, #16]
 800929e:	4620      	mov	r0, r4
 80092a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092a4:	0800adb8 	.word	0x0800adb8
 80092a8:	0800ae44 	.word	0x0800ae44

080092ac <__s2b>:
 80092ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80092b0:	4615      	mov	r5, r2
 80092b2:	2209      	movs	r2, #9
 80092b4:	461f      	mov	r7, r3
 80092b6:	3308      	adds	r3, #8
 80092b8:	460c      	mov	r4, r1
 80092ba:	fb93 f3f2 	sdiv	r3, r3, r2
 80092be:	4606      	mov	r6, r0
 80092c0:	2201      	movs	r2, #1
 80092c2:	2100      	movs	r1, #0
 80092c4:	429a      	cmp	r2, r3
 80092c6:	db09      	blt.n	80092dc <__s2b+0x30>
 80092c8:	4630      	mov	r0, r6
 80092ca:	f7ff ff47 	bl	800915c <_Balloc>
 80092ce:	b940      	cbnz	r0, 80092e2 <__s2b+0x36>
 80092d0:	4602      	mov	r2, r0
 80092d2:	21ce      	movs	r1, #206	; 0xce
 80092d4:	4b18      	ldr	r3, [pc, #96]	; (8009338 <__s2b+0x8c>)
 80092d6:	4819      	ldr	r0, [pc, #100]	; (800933c <__s2b+0x90>)
 80092d8:	f000 fe7c 	bl	8009fd4 <__assert_func>
 80092dc:	0052      	lsls	r2, r2, #1
 80092de:	3101      	adds	r1, #1
 80092e0:	e7f0      	b.n	80092c4 <__s2b+0x18>
 80092e2:	9b08      	ldr	r3, [sp, #32]
 80092e4:	2d09      	cmp	r5, #9
 80092e6:	6143      	str	r3, [r0, #20]
 80092e8:	f04f 0301 	mov.w	r3, #1
 80092ec:	6103      	str	r3, [r0, #16]
 80092ee:	dd16      	ble.n	800931e <__s2b+0x72>
 80092f0:	f104 0909 	add.w	r9, r4, #9
 80092f4:	46c8      	mov	r8, r9
 80092f6:	442c      	add	r4, r5
 80092f8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80092fc:	4601      	mov	r1, r0
 80092fe:	220a      	movs	r2, #10
 8009300:	4630      	mov	r0, r6
 8009302:	3b30      	subs	r3, #48	; 0x30
 8009304:	f7ff ff8c 	bl	8009220 <__multadd>
 8009308:	45a0      	cmp	r8, r4
 800930a:	d1f5      	bne.n	80092f8 <__s2b+0x4c>
 800930c:	f1a5 0408 	sub.w	r4, r5, #8
 8009310:	444c      	add	r4, r9
 8009312:	1b2d      	subs	r5, r5, r4
 8009314:	1963      	adds	r3, r4, r5
 8009316:	42bb      	cmp	r3, r7
 8009318:	db04      	blt.n	8009324 <__s2b+0x78>
 800931a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800931e:	2509      	movs	r5, #9
 8009320:	340a      	adds	r4, #10
 8009322:	e7f6      	b.n	8009312 <__s2b+0x66>
 8009324:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009328:	4601      	mov	r1, r0
 800932a:	220a      	movs	r2, #10
 800932c:	4630      	mov	r0, r6
 800932e:	3b30      	subs	r3, #48	; 0x30
 8009330:	f7ff ff76 	bl	8009220 <__multadd>
 8009334:	e7ee      	b.n	8009314 <__s2b+0x68>
 8009336:	bf00      	nop
 8009338:	0800adb8 	.word	0x0800adb8
 800933c:	0800ae44 	.word	0x0800ae44

08009340 <__hi0bits>:
 8009340:	0c02      	lsrs	r2, r0, #16
 8009342:	0412      	lsls	r2, r2, #16
 8009344:	4603      	mov	r3, r0
 8009346:	b9ca      	cbnz	r2, 800937c <__hi0bits+0x3c>
 8009348:	0403      	lsls	r3, r0, #16
 800934a:	2010      	movs	r0, #16
 800934c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009350:	bf04      	itt	eq
 8009352:	021b      	lsleq	r3, r3, #8
 8009354:	3008      	addeq	r0, #8
 8009356:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800935a:	bf04      	itt	eq
 800935c:	011b      	lsleq	r3, r3, #4
 800935e:	3004      	addeq	r0, #4
 8009360:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009364:	bf04      	itt	eq
 8009366:	009b      	lsleq	r3, r3, #2
 8009368:	3002      	addeq	r0, #2
 800936a:	2b00      	cmp	r3, #0
 800936c:	db05      	blt.n	800937a <__hi0bits+0x3a>
 800936e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8009372:	f100 0001 	add.w	r0, r0, #1
 8009376:	bf08      	it	eq
 8009378:	2020      	moveq	r0, #32
 800937a:	4770      	bx	lr
 800937c:	2000      	movs	r0, #0
 800937e:	e7e5      	b.n	800934c <__hi0bits+0xc>

08009380 <__lo0bits>:
 8009380:	6803      	ldr	r3, [r0, #0]
 8009382:	4602      	mov	r2, r0
 8009384:	f013 0007 	ands.w	r0, r3, #7
 8009388:	d00b      	beq.n	80093a2 <__lo0bits+0x22>
 800938a:	07d9      	lsls	r1, r3, #31
 800938c:	d421      	bmi.n	80093d2 <__lo0bits+0x52>
 800938e:	0798      	lsls	r0, r3, #30
 8009390:	bf49      	itett	mi
 8009392:	085b      	lsrmi	r3, r3, #1
 8009394:	089b      	lsrpl	r3, r3, #2
 8009396:	2001      	movmi	r0, #1
 8009398:	6013      	strmi	r3, [r2, #0]
 800939a:	bf5c      	itt	pl
 800939c:	2002      	movpl	r0, #2
 800939e:	6013      	strpl	r3, [r2, #0]
 80093a0:	4770      	bx	lr
 80093a2:	b299      	uxth	r1, r3
 80093a4:	b909      	cbnz	r1, 80093aa <__lo0bits+0x2a>
 80093a6:	2010      	movs	r0, #16
 80093a8:	0c1b      	lsrs	r3, r3, #16
 80093aa:	b2d9      	uxtb	r1, r3
 80093ac:	b909      	cbnz	r1, 80093b2 <__lo0bits+0x32>
 80093ae:	3008      	adds	r0, #8
 80093b0:	0a1b      	lsrs	r3, r3, #8
 80093b2:	0719      	lsls	r1, r3, #28
 80093b4:	bf04      	itt	eq
 80093b6:	091b      	lsreq	r3, r3, #4
 80093b8:	3004      	addeq	r0, #4
 80093ba:	0799      	lsls	r1, r3, #30
 80093bc:	bf04      	itt	eq
 80093be:	089b      	lsreq	r3, r3, #2
 80093c0:	3002      	addeq	r0, #2
 80093c2:	07d9      	lsls	r1, r3, #31
 80093c4:	d403      	bmi.n	80093ce <__lo0bits+0x4e>
 80093c6:	085b      	lsrs	r3, r3, #1
 80093c8:	f100 0001 	add.w	r0, r0, #1
 80093cc:	d003      	beq.n	80093d6 <__lo0bits+0x56>
 80093ce:	6013      	str	r3, [r2, #0]
 80093d0:	4770      	bx	lr
 80093d2:	2000      	movs	r0, #0
 80093d4:	4770      	bx	lr
 80093d6:	2020      	movs	r0, #32
 80093d8:	4770      	bx	lr
	...

080093dc <__i2b>:
 80093dc:	b510      	push	{r4, lr}
 80093de:	460c      	mov	r4, r1
 80093e0:	2101      	movs	r1, #1
 80093e2:	f7ff febb 	bl	800915c <_Balloc>
 80093e6:	4602      	mov	r2, r0
 80093e8:	b928      	cbnz	r0, 80093f6 <__i2b+0x1a>
 80093ea:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80093ee:	4b04      	ldr	r3, [pc, #16]	; (8009400 <__i2b+0x24>)
 80093f0:	4804      	ldr	r0, [pc, #16]	; (8009404 <__i2b+0x28>)
 80093f2:	f000 fdef 	bl	8009fd4 <__assert_func>
 80093f6:	2301      	movs	r3, #1
 80093f8:	6144      	str	r4, [r0, #20]
 80093fa:	6103      	str	r3, [r0, #16]
 80093fc:	bd10      	pop	{r4, pc}
 80093fe:	bf00      	nop
 8009400:	0800adb8 	.word	0x0800adb8
 8009404:	0800ae44 	.word	0x0800ae44

08009408 <__multiply>:
 8009408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800940c:	4691      	mov	r9, r2
 800940e:	690a      	ldr	r2, [r1, #16]
 8009410:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009414:	460c      	mov	r4, r1
 8009416:	429a      	cmp	r2, r3
 8009418:	bfbe      	ittt	lt
 800941a:	460b      	movlt	r3, r1
 800941c:	464c      	movlt	r4, r9
 800941e:	4699      	movlt	r9, r3
 8009420:	6927      	ldr	r7, [r4, #16]
 8009422:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009426:	68a3      	ldr	r3, [r4, #8]
 8009428:	6861      	ldr	r1, [r4, #4]
 800942a:	eb07 060a 	add.w	r6, r7, sl
 800942e:	42b3      	cmp	r3, r6
 8009430:	b085      	sub	sp, #20
 8009432:	bfb8      	it	lt
 8009434:	3101      	addlt	r1, #1
 8009436:	f7ff fe91 	bl	800915c <_Balloc>
 800943a:	b930      	cbnz	r0, 800944a <__multiply+0x42>
 800943c:	4602      	mov	r2, r0
 800943e:	f240 115d 	movw	r1, #349	; 0x15d
 8009442:	4b43      	ldr	r3, [pc, #268]	; (8009550 <__multiply+0x148>)
 8009444:	4843      	ldr	r0, [pc, #268]	; (8009554 <__multiply+0x14c>)
 8009446:	f000 fdc5 	bl	8009fd4 <__assert_func>
 800944a:	f100 0514 	add.w	r5, r0, #20
 800944e:	462b      	mov	r3, r5
 8009450:	2200      	movs	r2, #0
 8009452:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009456:	4543      	cmp	r3, r8
 8009458:	d321      	bcc.n	800949e <__multiply+0x96>
 800945a:	f104 0314 	add.w	r3, r4, #20
 800945e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009462:	f109 0314 	add.w	r3, r9, #20
 8009466:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800946a:	9202      	str	r2, [sp, #8]
 800946c:	1b3a      	subs	r2, r7, r4
 800946e:	3a15      	subs	r2, #21
 8009470:	f022 0203 	bic.w	r2, r2, #3
 8009474:	3204      	adds	r2, #4
 8009476:	f104 0115 	add.w	r1, r4, #21
 800947a:	428f      	cmp	r7, r1
 800947c:	bf38      	it	cc
 800947e:	2204      	movcc	r2, #4
 8009480:	9201      	str	r2, [sp, #4]
 8009482:	9a02      	ldr	r2, [sp, #8]
 8009484:	9303      	str	r3, [sp, #12]
 8009486:	429a      	cmp	r2, r3
 8009488:	d80c      	bhi.n	80094a4 <__multiply+0x9c>
 800948a:	2e00      	cmp	r6, #0
 800948c:	dd03      	ble.n	8009496 <__multiply+0x8e>
 800948e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009492:	2b00      	cmp	r3, #0
 8009494:	d059      	beq.n	800954a <__multiply+0x142>
 8009496:	6106      	str	r6, [r0, #16]
 8009498:	b005      	add	sp, #20
 800949a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800949e:	f843 2b04 	str.w	r2, [r3], #4
 80094a2:	e7d8      	b.n	8009456 <__multiply+0x4e>
 80094a4:	f8b3 a000 	ldrh.w	sl, [r3]
 80094a8:	f1ba 0f00 	cmp.w	sl, #0
 80094ac:	d023      	beq.n	80094f6 <__multiply+0xee>
 80094ae:	46a9      	mov	r9, r5
 80094b0:	f04f 0c00 	mov.w	ip, #0
 80094b4:	f104 0e14 	add.w	lr, r4, #20
 80094b8:	f85e 2b04 	ldr.w	r2, [lr], #4
 80094bc:	f8d9 1000 	ldr.w	r1, [r9]
 80094c0:	fa1f fb82 	uxth.w	fp, r2
 80094c4:	b289      	uxth	r1, r1
 80094c6:	fb0a 110b 	mla	r1, sl, fp, r1
 80094ca:	4461      	add	r1, ip
 80094cc:	f8d9 c000 	ldr.w	ip, [r9]
 80094d0:	0c12      	lsrs	r2, r2, #16
 80094d2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80094d6:	fb0a c202 	mla	r2, sl, r2, ip
 80094da:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80094de:	b289      	uxth	r1, r1
 80094e0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80094e4:	4577      	cmp	r7, lr
 80094e6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80094ea:	f849 1b04 	str.w	r1, [r9], #4
 80094ee:	d8e3      	bhi.n	80094b8 <__multiply+0xb0>
 80094f0:	9a01      	ldr	r2, [sp, #4]
 80094f2:	f845 c002 	str.w	ip, [r5, r2]
 80094f6:	9a03      	ldr	r2, [sp, #12]
 80094f8:	3304      	adds	r3, #4
 80094fa:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80094fe:	f1b9 0f00 	cmp.w	r9, #0
 8009502:	d020      	beq.n	8009546 <__multiply+0x13e>
 8009504:	46ae      	mov	lr, r5
 8009506:	f04f 0a00 	mov.w	sl, #0
 800950a:	6829      	ldr	r1, [r5, #0]
 800950c:	f104 0c14 	add.w	ip, r4, #20
 8009510:	f8bc b000 	ldrh.w	fp, [ip]
 8009514:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009518:	b289      	uxth	r1, r1
 800951a:	fb09 220b 	mla	r2, r9, fp, r2
 800951e:	4492      	add	sl, r2
 8009520:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009524:	f84e 1b04 	str.w	r1, [lr], #4
 8009528:	f85c 2b04 	ldr.w	r2, [ip], #4
 800952c:	f8be 1000 	ldrh.w	r1, [lr]
 8009530:	0c12      	lsrs	r2, r2, #16
 8009532:	fb09 1102 	mla	r1, r9, r2, r1
 8009536:	4567      	cmp	r7, ip
 8009538:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800953c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009540:	d8e6      	bhi.n	8009510 <__multiply+0x108>
 8009542:	9a01      	ldr	r2, [sp, #4]
 8009544:	50a9      	str	r1, [r5, r2]
 8009546:	3504      	adds	r5, #4
 8009548:	e79b      	b.n	8009482 <__multiply+0x7a>
 800954a:	3e01      	subs	r6, #1
 800954c:	e79d      	b.n	800948a <__multiply+0x82>
 800954e:	bf00      	nop
 8009550:	0800adb8 	.word	0x0800adb8
 8009554:	0800ae44 	.word	0x0800ae44

08009558 <__pow5mult>:
 8009558:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800955c:	4615      	mov	r5, r2
 800955e:	f012 0203 	ands.w	r2, r2, #3
 8009562:	4606      	mov	r6, r0
 8009564:	460f      	mov	r7, r1
 8009566:	d007      	beq.n	8009578 <__pow5mult+0x20>
 8009568:	4c25      	ldr	r4, [pc, #148]	; (8009600 <__pow5mult+0xa8>)
 800956a:	3a01      	subs	r2, #1
 800956c:	2300      	movs	r3, #0
 800956e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009572:	f7ff fe55 	bl	8009220 <__multadd>
 8009576:	4607      	mov	r7, r0
 8009578:	10ad      	asrs	r5, r5, #2
 800957a:	d03d      	beq.n	80095f8 <__pow5mult+0xa0>
 800957c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800957e:	b97c      	cbnz	r4, 80095a0 <__pow5mult+0x48>
 8009580:	2010      	movs	r0, #16
 8009582:	f7ff fdb5 	bl	80090f0 <malloc>
 8009586:	4602      	mov	r2, r0
 8009588:	6270      	str	r0, [r6, #36]	; 0x24
 800958a:	b928      	cbnz	r0, 8009598 <__pow5mult+0x40>
 800958c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009590:	4b1c      	ldr	r3, [pc, #112]	; (8009604 <__pow5mult+0xac>)
 8009592:	481d      	ldr	r0, [pc, #116]	; (8009608 <__pow5mult+0xb0>)
 8009594:	f000 fd1e 	bl	8009fd4 <__assert_func>
 8009598:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800959c:	6004      	str	r4, [r0, #0]
 800959e:	60c4      	str	r4, [r0, #12]
 80095a0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80095a4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80095a8:	b94c      	cbnz	r4, 80095be <__pow5mult+0x66>
 80095aa:	f240 2171 	movw	r1, #625	; 0x271
 80095ae:	4630      	mov	r0, r6
 80095b0:	f7ff ff14 	bl	80093dc <__i2b>
 80095b4:	2300      	movs	r3, #0
 80095b6:	4604      	mov	r4, r0
 80095b8:	f8c8 0008 	str.w	r0, [r8, #8]
 80095bc:	6003      	str	r3, [r0, #0]
 80095be:	f04f 0900 	mov.w	r9, #0
 80095c2:	07eb      	lsls	r3, r5, #31
 80095c4:	d50a      	bpl.n	80095dc <__pow5mult+0x84>
 80095c6:	4639      	mov	r1, r7
 80095c8:	4622      	mov	r2, r4
 80095ca:	4630      	mov	r0, r6
 80095cc:	f7ff ff1c 	bl	8009408 <__multiply>
 80095d0:	4680      	mov	r8, r0
 80095d2:	4639      	mov	r1, r7
 80095d4:	4630      	mov	r0, r6
 80095d6:	f7ff fe01 	bl	80091dc <_Bfree>
 80095da:	4647      	mov	r7, r8
 80095dc:	106d      	asrs	r5, r5, #1
 80095de:	d00b      	beq.n	80095f8 <__pow5mult+0xa0>
 80095e0:	6820      	ldr	r0, [r4, #0]
 80095e2:	b938      	cbnz	r0, 80095f4 <__pow5mult+0x9c>
 80095e4:	4622      	mov	r2, r4
 80095e6:	4621      	mov	r1, r4
 80095e8:	4630      	mov	r0, r6
 80095ea:	f7ff ff0d 	bl	8009408 <__multiply>
 80095ee:	6020      	str	r0, [r4, #0]
 80095f0:	f8c0 9000 	str.w	r9, [r0]
 80095f4:	4604      	mov	r4, r0
 80095f6:	e7e4      	b.n	80095c2 <__pow5mult+0x6a>
 80095f8:	4638      	mov	r0, r7
 80095fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80095fe:	bf00      	nop
 8009600:	0800af90 	.word	0x0800af90
 8009604:	0800ad46 	.word	0x0800ad46
 8009608:	0800ae44 	.word	0x0800ae44

0800960c <__lshift>:
 800960c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009610:	460c      	mov	r4, r1
 8009612:	4607      	mov	r7, r0
 8009614:	4691      	mov	r9, r2
 8009616:	6923      	ldr	r3, [r4, #16]
 8009618:	6849      	ldr	r1, [r1, #4]
 800961a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800961e:	68a3      	ldr	r3, [r4, #8]
 8009620:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009624:	f108 0601 	add.w	r6, r8, #1
 8009628:	42b3      	cmp	r3, r6
 800962a:	db0b      	blt.n	8009644 <__lshift+0x38>
 800962c:	4638      	mov	r0, r7
 800962e:	f7ff fd95 	bl	800915c <_Balloc>
 8009632:	4605      	mov	r5, r0
 8009634:	b948      	cbnz	r0, 800964a <__lshift+0x3e>
 8009636:	4602      	mov	r2, r0
 8009638:	f240 11d9 	movw	r1, #473	; 0x1d9
 800963c:	4b29      	ldr	r3, [pc, #164]	; (80096e4 <__lshift+0xd8>)
 800963e:	482a      	ldr	r0, [pc, #168]	; (80096e8 <__lshift+0xdc>)
 8009640:	f000 fcc8 	bl	8009fd4 <__assert_func>
 8009644:	3101      	adds	r1, #1
 8009646:	005b      	lsls	r3, r3, #1
 8009648:	e7ee      	b.n	8009628 <__lshift+0x1c>
 800964a:	2300      	movs	r3, #0
 800964c:	f100 0114 	add.w	r1, r0, #20
 8009650:	f100 0210 	add.w	r2, r0, #16
 8009654:	4618      	mov	r0, r3
 8009656:	4553      	cmp	r3, sl
 8009658:	db37      	blt.n	80096ca <__lshift+0xbe>
 800965a:	6920      	ldr	r0, [r4, #16]
 800965c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009660:	f104 0314 	add.w	r3, r4, #20
 8009664:	f019 091f 	ands.w	r9, r9, #31
 8009668:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800966c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009670:	d02f      	beq.n	80096d2 <__lshift+0xc6>
 8009672:	468a      	mov	sl, r1
 8009674:	f04f 0c00 	mov.w	ip, #0
 8009678:	f1c9 0e20 	rsb	lr, r9, #32
 800967c:	681a      	ldr	r2, [r3, #0]
 800967e:	fa02 f209 	lsl.w	r2, r2, r9
 8009682:	ea42 020c 	orr.w	r2, r2, ip
 8009686:	f84a 2b04 	str.w	r2, [sl], #4
 800968a:	f853 2b04 	ldr.w	r2, [r3], #4
 800968e:	4298      	cmp	r0, r3
 8009690:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009694:	d8f2      	bhi.n	800967c <__lshift+0x70>
 8009696:	1b03      	subs	r3, r0, r4
 8009698:	3b15      	subs	r3, #21
 800969a:	f023 0303 	bic.w	r3, r3, #3
 800969e:	3304      	adds	r3, #4
 80096a0:	f104 0215 	add.w	r2, r4, #21
 80096a4:	4290      	cmp	r0, r2
 80096a6:	bf38      	it	cc
 80096a8:	2304      	movcc	r3, #4
 80096aa:	f841 c003 	str.w	ip, [r1, r3]
 80096ae:	f1bc 0f00 	cmp.w	ip, #0
 80096b2:	d001      	beq.n	80096b8 <__lshift+0xac>
 80096b4:	f108 0602 	add.w	r6, r8, #2
 80096b8:	3e01      	subs	r6, #1
 80096ba:	4638      	mov	r0, r7
 80096bc:	4621      	mov	r1, r4
 80096be:	612e      	str	r6, [r5, #16]
 80096c0:	f7ff fd8c 	bl	80091dc <_Bfree>
 80096c4:	4628      	mov	r0, r5
 80096c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096ca:	f842 0f04 	str.w	r0, [r2, #4]!
 80096ce:	3301      	adds	r3, #1
 80096d0:	e7c1      	b.n	8009656 <__lshift+0x4a>
 80096d2:	3904      	subs	r1, #4
 80096d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80096d8:	4298      	cmp	r0, r3
 80096da:	f841 2f04 	str.w	r2, [r1, #4]!
 80096de:	d8f9      	bhi.n	80096d4 <__lshift+0xc8>
 80096e0:	e7ea      	b.n	80096b8 <__lshift+0xac>
 80096e2:	bf00      	nop
 80096e4:	0800adb8 	.word	0x0800adb8
 80096e8:	0800ae44 	.word	0x0800ae44

080096ec <__mcmp>:
 80096ec:	4603      	mov	r3, r0
 80096ee:	690a      	ldr	r2, [r1, #16]
 80096f0:	6900      	ldr	r0, [r0, #16]
 80096f2:	b530      	push	{r4, r5, lr}
 80096f4:	1a80      	subs	r0, r0, r2
 80096f6:	d10d      	bne.n	8009714 <__mcmp+0x28>
 80096f8:	3314      	adds	r3, #20
 80096fa:	3114      	adds	r1, #20
 80096fc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009700:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009704:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009708:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800970c:	4295      	cmp	r5, r2
 800970e:	d002      	beq.n	8009716 <__mcmp+0x2a>
 8009710:	d304      	bcc.n	800971c <__mcmp+0x30>
 8009712:	2001      	movs	r0, #1
 8009714:	bd30      	pop	{r4, r5, pc}
 8009716:	42a3      	cmp	r3, r4
 8009718:	d3f4      	bcc.n	8009704 <__mcmp+0x18>
 800971a:	e7fb      	b.n	8009714 <__mcmp+0x28>
 800971c:	f04f 30ff 	mov.w	r0, #4294967295
 8009720:	e7f8      	b.n	8009714 <__mcmp+0x28>
	...

08009724 <__mdiff>:
 8009724:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009728:	460d      	mov	r5, r1
 800972a:	4607      	mov	r7, r0
 800972c:	4611      	mov	r1, r2
 800972e:	4628      	mov	r0, r5
 8009730:	4614      	mov	r4, r2
 8009732:	f7ff ffdb 	bl	80096ec <__mcmp>
 8009736:	1e06      	subs	r6, r0, #0
 8009738:	d111      	bne.n	800975e <__mdiff+0x3a>
 800973a:	4631      	mov	r1, r6
 800973c:	4638      	mov	r0, r7
 800973e:	f7ff fd0d 	bl	800915c <_Balloc>
 8009742:	4602      	mov	r2, r0
 8009744:	b928      	cbnz	r0, 8009752 <__mdiff+0x2e>
 8009746:	f240 2132 	movw	r1, #562	; 0x232
 800974a:	4b3a      	ldr	r3, [pc, #232]	; (8009834 <__mdiff+0x110>)
 800974c:	483a      	ldr	r0, [pc, #232]	; (8009838 <__mdiff+0x114>)
 800974e:	f000 fc41 	bl	8009fd4 <__assert_func>
 8009752:	2301      	movs	r3, #1
 8009754:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009758:	4610      	mov	r0, r2
 800975a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800975e:	bfa4      	itt	ge
 8009760:	4623      	movge	r3, r4
 8009762:	462c      	movge	r4, r5
 8009764:	4638      	mov	r0, r7
 8009766:	6861      	ldr	r1, [r4, #4]
 8009768:	bfa6      	itte	ge
 800976a:	461d      	movge	r5, r3
 800976c:	2600      	movge	r6, #0
 800976e:	2601      	movlt	r6, #1
 8009770:	f7ff fcf4 	bl	800915c <_Balloc>
 8009774:	4602      	mov	r2, r0
 8009776:	b918      	cbnz	r0, 8009780 <__mdiff+0x5c>
 8009778:	f44f 7110 	mov.w	r1, #576	; 0x240
 800977c:	4b2d      	ldr	r3, [pc, #180]	; (8009834 <__mdiff+0x110>)
 800977e:	e7e5      	b.n	800974c <__mdiff+0x28>
 8009780:	f102 0814 	add.w	r8, r2, #20
 8009784:	46c2      	mov	sl, r8
 8009786:	f04f 0c00 	mov.w	ip, #0
 800978a:	6927      	ldr	r7, [r4, #16]
 800978c:	60c6      	str	r6, [r0, #12]
 800978e:	692e      	ldr	r6, [r5, #16]
 8009790:	f104 0014 	add.w	r0, r4, #20
 8009794:	f105 0914 	add.w	r9, r5, #20
 8009798:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800979c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80097a0:	3410      	adds	r4, #16
 80097a2:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80097a6:	f859 3b04 	ldr.w	r3, [r9], #4
 80097aa:	fa1f f18b 	uxth.w	r1, fp
 80097ae:	448c      	add	ip, r1
 80097b0:	b299      	uxth	r1, r3
 80097b2:	0c1b      	lsrs	r3, r3, #16
 80097b4:	ebac 0101 	sub.w	r1, ip, r1
 80097b8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80097bc:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80097c0:	b289      	uxth	r1, r1
 80097c2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80097c6:	454e      	cmp	r6, r9
 80097c8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80097cc:	f84a 3b04 	str.w	r3, [sl], #4
 80097d0:	d8e7      	bhi.n	80097a2 <__mdiff+0x7e>
 80097d2:	1b73      	subs	r3, r6, r5
 80097d4:	3b15      	subs	r3, #21
 80097d6:	f023 0303 	bic.w	r3, r3, #3
 80097da:	3515      	adds	r5, #21
 80097dc:	3304      	adds	r3, #4
 80097de:	42ae      	cmp	r6, r5
 80097e0:	bf38      	it	cc
 80097e2:	2304      	movcc	r3, #4
 80097e4:	4418      	add	r0, r3
 80097e6:	4443      	add	r3, r8
 80097e8:	461e      	mov	r6, r3
 80097ea:	4605      	mov	r5, r0
 80097ec:	4575      	cmp	r5, lr
 80097ee:	d30e      	bcc.n	800980e <__mdiff+0xea>
 80097f0:	f10e 0103 	add.w	r1, lr, #3
 80097f4:	1a09      	subs	r1, r1, r0
 80097f6:	f021 0103 	bic.w	r1, r1, #3
 80097fa:	3803      	subs	r0, #3
 80097fc:	4586      	cmp	lr, r0
 80097fe:	bf38      	it	cc
 8009800:	2100      	movcc	r1, #0
 8009802:	4419      	add	r1, r3
 8009804:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8009808:	b18b      	cbz	r3, 800982e <__mdiff+0x10a>
 800980a:	6117      	str	r7, [r2, #16]
 800980c:	e7a4      	b.n	8009758 <__mdiff+0x34>
 800980e:	f855 8b04 	ldr.w	r8, [r5], #4
 8009812:	fa1f f188 	uxth.w	r1, r8
 8009816:	4461      	add	r1, ip
 8009818:	140c      	asrs	r4, r1, #16
 800981a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800981e:	b289      	uxth	r1, r1
 8009820:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009824:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8009828:	f846 1b04 	str.w	r1, [r6], #4
 800982c:	e7de      	b.n	80097ec <__mdiff+0xc8>
 800982e:	3f01      	subs	r7, #1
 8009830:	e7e8      	b.n	8009804 <__mdiff+0xe0>
 8009832:	bf00      	nop
 8009834:	0800adb8 	.word	0x0800adb8
 8009838:	0800ae44 	.word	0x0800ae44

0800983c <__ulp>:
 800983c:	4b11      	ldr	r3, [pc, #68]	; (8009884 <__ulp+0x48>)
 800983e:	400b      	ands	r3, r1
 8009840:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8009844:	2b00      	cmp	r3, #0
 8009846:	dd02      	ble.n	800984e <__ulp+0x12>
 8009848:	2000      	movs	r0, #0
 800984a:	4619      	mov	r1, r3
 800984c:	4770      	bx	lr
 800984e:	425b      	negs	r3, r3
 8009850:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8009854:	f04f 0000 	mov.w	r0, #0
 8009858:	f04f 0100 	mov.w	r1, #0
 800985c:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009860:	da04      	bge.n	800986c <__ulp+0x30>
 8009862:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009866:	fa43 f102 	asr.w	r1, r3, r2
 800986a:	4770      	bx	lr
 800986c:	f1a2 0314 	sub.w	r3, r2, #20
 8009870:	2b1e      	cmp	r3, #30
 8009872:	bfd6      	itet	le
 8009874:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8009878:	2301      	movgt	r3, #1
 800987a:	fa22 f303 	lsrle.w	r3, r2, r3
 800987e:	4618      	mov	r0, r3
 8009880:	4770      	bx	lr
 8009882:	bf00      	nop
 8009884:	7ff00000 	.word	0x7ff00000

08009888 <__b2d>:
 8009888:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800988c:	6907      	ldr	r7, [r0, #16]
 800988e:	f100 0914 	add.w	r9, r0, #20
 8009892:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8009896:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800989a:	f1a7 0804 	sub.w	r8, r7, #4
 800989e:	4630      	mov	r0, r6
 80098a0:	f7ff fd4e 	bl	8009340 <__hi0bits>
 80098a4:	f1c0 0320 	rsb	r3, r0, #32
 80098a8:	280a      	cmp	r0, #10
 80098aa:	600b      	str	r3, [r1, #0]
 80098ac:	491f      	ldr	r1, [pc, #124]	; (800992c <__b2d+0xa4>)
 80098ae:	dc17      	bgt.n	80098e0 <__b2d+0x58>
 80098b0:	45c1      	cmp	r9, r8
 80098b2:	bf28      	it	cs
 80098b4:	2200      	movcs	r2, #0
 80098b6:	f1c0 0c0b 	rsb	ip, r0, #11
 80098ba:	fa26 f30c 	lsr.w	r3, r6, ip
 80098be:	bf38      	it	cc
 80098c0:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80098c4:	ea43 0501 	orr.w	r5, r3, r1
 80098c8:	f100 0315 	add.w	r3, r0, #21
 80098cc:	fa06 f303 	lsl.w	r3, r6, r3
 80098d0:	fa22 f20c 	lsr.w	r2, r2, ip
 80098d4:	ea43 0402 	orr.w	r4, r3, r2
 80098d8:	4620      	mov	r0, r4
 80098da:	4629      	mov	r1, r5
 80098dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80098e0:	45c1      	cmp	r9, r8
 80098e2:	bf2e      	itee	cs
 80098e4:	2200      	movcs	r2, #0
 80098e6:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80098ea:	f1a7 0808 	subcc.w	r8, r7, #8
 80098ee:	f1b0 030b 	subs.w	r3, r0, #11
 80098f2:	d016      	beq.n	8009922 <__b2d+0x9a>
 80098f4:	f1c3 0720 	rsb	r7, r3, #32
 80098f8:	fa22 f107 	lsr.w	r1, r2, r7
 80098fc:	45c8      	cmp	r8, r9
 80098fe:	fa06 f603 	lsl.w	r6, r6, r3
 8009902:	ea46 0601 	orr.w	r6, r6, r1
 8009906:	bf94      	ite	ls
 8009908:	2100      	movls	r1, #0
 800990a:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800990e:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8009912:	fa02 f003 	lsl.w	r0, r2, r3
 8009916:	40f9      	lsrs	r1, r7
 8009918:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800991c:	ea40 0401 	orr.w	r4, r0, r1
 8009920:	e7da      	b.n	80098d8 <__b2d+0x50>
 8009922:	4614      	mov	r4, r2
 8009924:	ea46 0501 	orr.w	r5, r6, r1
 8009928:	e7d6      	b.n	80098d8 <__b2d+0x50>
 800992a:	bf00      	nop
 800992c:	3ff00000 	.word	0x3ff00000

08009930 <__d2b>:
 8009930:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009934:	2101      	movs	r1, #1
 8009936:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800993a:	4690      	mov	r8, r2
 800993c:	461d      	mov	r5, r3
 800993e:	f7ff fc0d 	bl	800915c <_Balloc>
 8009942:	4604      	mov	r4, r0
 8009944:	b930      	cbnz	r0, 8009954 <__d2b+0x24>
 8009946:	4602      	mov	r2, r0
 8009948:	f240 310a 	movw	r1, #778	; 0x30a
 800994c:	4b24      	ldr	r3, [pc, #144]	; (80099e0 <__d2b+0xb0>)
 800994e:	4825      	ldr	r0, [pc, #148]	; (80099e4 <__d2b+0xb4>)
 8009950:	f000 fb40 	bl	8009fd4 <__assert_func>
 8009954:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8009958:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800995c:	bb2d      	cbnz	r5, 80099aa <__d2b+0x7a>
 800995e:	9301      	str	r3, [sp, #4]
 8009960:	f1b8 0300 	subs.w	r3, r8, #0
 8009964:	d026      	beq.n	80099b4 <__d2b+0x84>
 8009966:	4668      	mov	r0, sp
 8009968:	9300      	str	r3, [sp, #0]
 800996a:	f7ff fd09 	bl	8009380 <__lo0bits>
 800996e:	9900      	ldr	r1, [sp, #0]
 8009970:	b1f0      	cbz	r0, 80099b0 <__d2b+0x80>
 8009972:	9a01      	ldr	r2, [sp, #4]
 8009974:	f1c0 0320 	rsb	r3, r0, #32
 8009978:	fa02 f303 	lsl.w	r3, r2, r3
 800997c:	430b      	orrs	r3, r1
 800997e:	40c2      	lsrs	r2, r0
 8009980:	6163      	str	r3, [r4, #20]
 8009982:	9201      	str	r2, [sp, #4]
 8009984:	9b01      	ldr	r3, [sp, #4]
 8009986:	2b00      	cmp	r3, #0
 8009988:	bf14      	ite	ne
 800998a:	2102      	movne	r1, #2
 800998c:	2101      	moveq	r1, #1
 800998e:	61a3      	str	r3, [r4, #24]
 8009990:	6121      	str	r1, [r4, #16]
 8009992:	b1c5      	cbz	r5, 80099c6 <__d2b+0x96>
 8009994:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009998:	4405      	add	r5, r0
 800999a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800999e:	603d      	str	r5, [r7, #0]
 80099a0:	6030      	str	r0, [r6, #0]
 80099a2:	4620      	mov	r0, r4
 80099a4:	b002      	add	sp, #8
 80099a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80099ae:	e7d6      	b.n	800995e <__d2b+0x2e>
 80099b0:	6161      	str	r1, [r4, #20]
 80099b2:	e7e7      	b.n	8009984 <__d2b+0x54>
 80099b4:	a801      	add	r0, sp, #4
 80099b6:	f7ff fce3 	bl	8009380 <__lo0bits>
 80099ba:	2101      	movs	r1, #1
 80099bc:	9b01      	ldr	r3, [sp, #4]
 80099be:	6121      	str	r1, [r4, #16]
 80099c0:	6163      	str	r3, [r4, #20]
 80099c2:	3020      	adds	r0, #32
 80099c4:	e7e5      	b.n	8009992 <__d2b+0x62>
 80099c6:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80099ca:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80099ce:	6038      	str	r0, [r7, #0]
 80099d0:	6918      	ldr	r0, [r3, #16]
 80099d2:	f7ff fcb5 	bl	8009340 <__hi0bits>
 80099d6:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80099da:	6031      	str	r1, [r6, #0]
 80099dc:	e7e1      	b.n	80099a2 <__d2b+0x72>
 80099de:	bf00      	nop
 80099e0:	0800adb8 	.word	0x0800adb8
 80099e4:	0800ae44 	.word	0x0800ae44

080099e8 <__ratio>:
 80099e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099ec:	4688      	mov	r8, r1
 80099ee:	4669      	mov	r1, sp
 80099f0:	4681      	mov	r9, r0
 80099f2:	f7ff ff49 	bl	8009888 <__b2d>
 80099f6:	460f      	mov	r7, r1
 80099f8:	4604      	mov	r4, r0
 80099fa:	460d      	mov	r5, r1
 80099fc:	4640      	mov	r0, r8
 80099fe:	a901      	add	r1, sp, #4
 8009a00:	f7ff ff42 	bl	8009888 <__b2d>
 8009a04:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009a08:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009a0c:	468b      	mov	fp, r1
 8009a0e:	eba3 0c02 	sub.w	ip, r3, r2
 8009a12:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009a16:	1a9b      	subs	r3, r3, r2
 8009a18:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	bfd5      	itete	le
 8009a20:	460a      	movle	r2, r1
 8009a22:	462a      	movgt	r2, r5
 8009a24:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009a28:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009a2c:	bfd8      	it	le
 8009a2e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009a32:	465b      	mov	r3, fp
 8009a34:	4602      	mov	r2, r0
 8009a36:	4639      	mov	r1, r7
 8009a38:	4620      	mov	r0, r4
 8009a3a:	f7f6 fee3 	bl	8000804 <__aeabi_ddiv>
 8009a3e:	b003      	add	sp, #12
 8009a40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009a44 <__copybits>:
 8009a44:	3901      	subs	r1, #1
 8009a46:	b570      	push	{r4, r5, r6, lr}
 8009a48:	1149      	asrs	r1, r1, #5
 8009a4a:	6914      	ldr	r4, [r2, #16]
 8009a4c:	3101      	adds	r1, #1
 8009a4e:	f102 0314 	add.w	r3, r2, #20
 8009a52:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009a56:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009a5a:	1f05      	subs	r5, r0, #4
 8009a5c:	42a3      	cmp	r3, r4
 8009a5e:	d30c      	bcc.n	8009a7a <__copybits+0x36>
 8009a60:	1aa3      	subs	r3, r4, r2
 8009a62:	3b11      	subs	r3, #17
 8009a64:	f023 0303 	bic.w	r3, r3, #3
 8009a68:	3211      	adds	r2, #17
 8009a6a:	42a2      	cmp	r2, r4
 8009a6c:	bf88      	it	hi
 8009a6e:	2300      	movhi	r3, #0
 8009a70:	4418      	add	r0, r3
 8009a72:	2300      	movs	r3, #0
 8009a74:	4288      	cmp	r0, r1
 8009a76:	d305      	bcc.n	8009a84 <__copybits+0x40>
 8009a78:	bd70      	pop	{r4, r5, r6, pc}
 8009a7a:	f853 6b04 	ldr.w	r6, [r3], #4
 8009a7e:	f845 6f04 	str.w	r6, [r5, #4]!
 8009a82:	e7eb      	b.n	8009a5c <__copybits+0x18>
 8009a84:	f840 3b04 	str.w	r3, [r0], #4
 8009a88:	e7f4      	b.n	8009a74 <__copybits+0x30>

08009a8a <__any_on>:
 8009a8a:	f100 0214 	add.w	r2, r0, #20
 8009a8e:	6900      	ldr	r0, [r0, #16]
 8009a90:	114b      	asrs	r3, r1, #5
 8009a92:	4298      	cmp	r0, r3
 8009a94:	b510      	push	{r4, lr}
 8009a96:	db11      	blt.n	8009abc <__any_on+0x32>
 8009a98:	dd0a      	ble.n	8009ab0 <__any_on+0x26>
 8009a9a:	f011 011f 	ands.w	r1, r1, #31
 8009a9e:	d007      	beq.n	8009ab0 <__any_on+0x26>
 8009aa0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009aa4:	fa24 f001 	lsr.w	r0, r4, r1
 8009aa8:	fa00 f101 	lsl.w	r1, r0, r1
 8009aac:	428c      	cmp	r4, r1
 8009aae:	d10b      	bne.n	8009ac8 <__any_on+0x3e>
 8009ab0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009ab4:	4293      	cmp	r3, r2
 8009ab6:	d803      	bhi.n	8009ac0 <__any_on+0x36>
 8009ab8:	2000      	movs	r0, #0
 8009aba:	bd10      	pop	{r4, pc}
 8009abc:	4603      	mov	r3, r0
 8009abe:	e7f7      	b.n	8009ab0 <__any_on+0x26>
 8009ac0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009ac4:	2900      	cmp	r1, #0
 8009ac6:	d0f5      	beq.n	8009ab4 <__any_on+0x2a>
 8009ac8:	2001      	movs	r0, #1
 8009aca:	e7f6      	b.n	8009aba <__any_on+0x30>

08009acc <_calloc_r>:
 8009acc:	b570      	push	{r4, r5, r6, lr}
 8009ace:	fba1 5402 	umull	r5, r4, r1, r2
 8009ad2:	b934      	cbnz	r4, 8009ae2 <_calloc_r+0x16>
 8009ad4:	4629      	mov	r1, r5
 8009ad6:	f000 f875 	bl	8009bc4 <_malloc_r>
 8009ada:	4606      	mov	r6, r0
 8009adc:	b928      	cbnz	r0, 8009aea <_calloc_r+0x1e>
 8009ade:	4630      	mov	r0, r6
 8009ae0:	bd70      	pop	{r4, r5, r6, pc}
 8009ae2:	220c      	movs	r2, #12
 8009ae4:	2600      	movs	r6, #0
 8009ae6:	6002      	str	r2, [r0, #0]
 8009ae8:	e7f9      	b.n	8009ade <_calloc_r+0x12>
 8009aea:	462a      	mov	r2, r5
 8009aec:	4621      	mov	r1, r4
 8009aee:	f7fc fbd3 	bl	8006298 <memset>
 8009af2:	e7f4      	b.n	8009ade <_calloc_r+0x12>

08009af4 <_free_r>:
 8009af4:	b538      	push	{r3, r4, r5, lr}
 8009af6:	4605      	mov	r5, r0
 8009af8:	2900      	cmp	r1, #0
 8009afa:	d040      	beq.n	8009b7e <_free_r+0x8a>
 8009afc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b00:	1f0c      	subs	r4, r1, #4
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	bfb8      	it	lt
 8009b06:	18e4      	addlt	r4, r4, r3
 8009b08:	f000 faae 	bl	800a068 <__malloc_lock>
 8009b0c:	4a1c      	ldr	r2, [pc, #112]	; (8009b80 <_free_r+0x8c>)
 8009b0e:	6813      	ldr	r3, [r2, #0]
 8009b10:	b933      	cbnz	r3, 8009b20 <_free_r+0x2c>
 8009b12:	6063      	str	r3, [r4, #4]
 8009b14:	6014      	str	r4, [r2, #0]
 8009b16:	4628      	mov	r0, r5
 8009b18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009b1c:	f000 baaa 	b.w	800a074 <__malloc_unlock>
 8009b20:	42a3      	cmp	r3, r4
 8009b22:	d908      	bls.n	8009b36 <_free_r+0x42>
 8009b24:	6820      	ldr	r0, [r4, #0]
 8009b26:	1821      	adds	r1, r4, r0
 8009b28:	428b      	cmp	r3, r1
 8009b2a:	bf01      	itttt	eq
 8009b2c:	6819      	ldreq	r1, [r3, #0]
 8009b2e:	685b      	ldreq	r3, [r3, #4]
 8009b30:	1809      	addeq	r1, r1, r0
 8009b32:	6021      	streq	r1, [r4, #0]
 8009b34:	e7ed      	b.n	8009b12 <_free_r+0x1e>
 8009b36:	461a      	mov	r2, r3
 8009b38:	685b      	ldr	r3, [r3, #4]
 8009b3a:	b10b      	cbz	r3, 8009b40 <_free_r+0x4c>
 8009b3c:	42a3      	cmp	r3, r4
 8009b3e:	d9fa      	bls.n	8009b36 <_free_r+0x42>
 8009b40:	6811      	ldr	r1, [r2, #0]
 8009b42:	1850      	adds	r0, r2, r1
 8009b44:	42a0      	cmp	r0, r4
 8009b46:	d10b      	bne.n	8009b60 <_free_r+0x6c>
 8009b48:	6820      	ldr	r0, [r4, #0]
 8009b4a:	4401      	add	r1, r0
 8009b4c:	1850      	adds	r0, r2, r1
 8009b4e:	4283      	cmp	r3, r0
 8009b50:	6011      	str	r1, [r2, #0]
 8009b52:	d1e0      	bne.n	8009b16 <_free_r+0x22>
 8009b54:	6818      	ldr	r0, [r3, #0]
 8009b56:	685b      	ldr	r3, [r3, #4]
 8009b58:	4401      	add	r1, r0
 8009b5a:	6011      	str	r1, [r2, #0]
 8009b5c:	6053      	str	r3, [r2, #4]
 8009b5e:	e7da      	b.n	8009b16 <_free_r+0x22>
 8009b60:	d902      	bls.n	8009b68 <_free_r+0x74>
 8009b62:	230c      	movs	r3, #12
 8009b64:	602b      	str	r3, [r5, #0]
 8009b66:	e7d6      	b.n	8009b16 <_free_r+0x22>
 8009b68:	6820      	ldr	r0, [r4, #0]
 8009b6a:	1821      	adds	r1, r4, r0
 8009b6c:	428b      	cmp	r3, r1
 8009b6e:	bf01      	itttt	eq
 8009b70:	6819      	ldreq	r1, [r3, #0]
 8009b72:	685b      	ldreq	r3, [r3, #4]
 8009b74:	1809      	addeq	r1, r1, r0
 8009b76:	6021      	streq	r1, [r4, #0]
 8009b78:	6063      	str	r3, [r4, #4]
 8009b7a:	6054      	str	r4, [r2, #4]
 8009b7c:	e7cb      	b.n	8009b16 <_free_r+0x22>
 8009b7e:	bd38      	pop	{r3, r4, r5, pc}
 8009b80:	20000420 	.word	0x20000420

08009b84 <sbrk_aligned>:
 8009b84:	b570      	push	{r4, r5, r6, lr}
 8009b86:	4e0e      	ldr	r6, [pc, #56]	; (8009bc0 <sbrk_aligned+0x3c>)
 8009b88:	460c      	mov	r4, r1
 8009b8a:	6831      	ldr	r1, [r6, #0]
 8009b8c:	4605      	mov	r5, r0
 8009b8e:	b911      	cbnz	r1, 8009b96 <sbrk_aligned+0x12>
 8009b90:	f000 f9ee 	bl	8009f70 <_sbrk_r>
 8009b94:	6030      	str	r0, [r6, #0]
 8009b96:	4621      	mov	r1, r4
 8009b98:	4628      	mov	r0, r5
 8009b9a:	f000 f9e9 	bl	8009f70 <_sbrk_r>
 8009b9e:	1c43      	adds	r3, r0, #1
 8009ba0:	d00a      	beq.n	8009bb8 <sbrk_aligned+0x34>
 8009ba2:	1cc4      	adds	r4, r0, #3
 8009ba4:	f024 0403 	bic.w	r4, r4, #3
 8009ba8:	42a0      	cmp	r0, r4
 8009baa:	d007      	beq.n	8009bbc <sbrk_aligned+0x38>
 8009bac:	1a21      	subs	r1, r4, r0
 8009bae:	4628      	mov	r0, r5
 8009bb0:	f000 f9de 	bl	8009f70 <_sbrk_r>
 8009bb4:	3001      	adds	r0, #1
 8009bb6:	d101      	bne.n	8009bbc <sbrk_aligned+0x38>
 8009bb8:	f04f 34ff 	mov.w	r4, #4294967295
 8009bbc:	4620      	mov	r0, r4
 8009bbe:	bd70      	pop	{r4, r5, r6, pc}
 8009bc0:	20000424 	.word	0x20000424

08009bc4 <_malloc_r>:
 8009bc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009bc8:	1ccd      	adds	r5, r1, #3
 8009bca:	f025 0503 	bic.w	r5, r5, #3
 8009bce:	3508      	adds	r5, #8
 8009bd0:	2d0c      	cmp	r5, #12
 8009bd2:	bf38      	it	cc
 8009bd4:	250c      	movcc	r5, #12
 8009bd6:	2d00      	cmp	r5, #0
 8009bd8:	4607      	mov	r7, r0
 8009bda:	db01      	blt.n	8009be0 <_malloc_r+0x1c>
 8009bdc:	42a9      	cmp	r1, r5
 8009bde:	d905      	bls.n	8009bec <_malloc_r+0x28>
 8009be0:	230c      	movs	r3, #12
 8009be2:	2600      	movs	r6, #0
 8009be4:	603b      	str	r3, [r7, #0]
 8009be6:	4630      	mov	r0, r6
 8009be8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009bec:	4e2e      	ldr	r6, [pc, #184]	; (8009ca8 <_malloc_r+0xe4>)
 8009bee:	f000 fa3b 	bl	800a068 <__malloc_lock>
 8009bf2:	6833      	ldr	r3, [r6, #0]
 8009bf4:	461c      	mov	r4, r3
 8009bf6:	bb34      	cbnz	r4, 8009c46 <_malloc_r+0x82>
 8009bf8:	4629      	mov	r1, r5
 8009bfa:	4638      	mov	r0, r7
 8009bfc:	f7ff ffc2 	bl	8009b84 <sbrk_aligned>
 8009c00:	1c43      	adds	r3, r0, #1
 8009c02:	4604      	mov	r4, r0
 8009c04:	d14d      	bne.n	8009ca2 <_malloc_r+0xde>
 8009c06:	6834      	ldr	r4, [r6, #0]
 8009c08:	4626      	mov	r6, r4
 8009c0a:	2e00      	cmp	r6, #0
 8009c0c:	d140      	bne.n	8009c90 <_malloc_r+0xcc>
 8009c0e:	6823      	ldr	r3, [r4, #0]
 8009c10:	4631      	mov	r1, r6
 8009c12:	4638      	mov	r0, r7
 8009c14:	eb04 0803 	add.w	r8, r4, r3
 8009c18:	f000 f9aa 	bl	8009f70 <_sbrk_r>
 8009c1c:	4580      	cmp	r8, r0
 8009c1e:	d13a      	bne.n	8009c96 <_malloc_r+0xd2>
 8009c20:	6821      	ldr	r1, [r4, #0]
 8009c22:	3503      	adds	r5, #3
 8009c24:	1a6d      	subs	r5, r5, r1
 8009c26:	f025 0503 	bic.w	r5, r5, #3
 8009c2a:	3508      	adds	r5, #8
 8009c2c:	2d0c      	cmp	r5, #12
 8009c2e:	bf38      	it	cc
 8009c30:	250c      	movcc	r5, #12
 8009c32:	4638      	mov	r0, r7
 8009c34:	4629      	mov	r1, r5
 8009c36:	f7ff ffa5 	bl	8009b84 <sbrk_aligned>
 8009c3a:	3001      	adds	r0, #1
 8009c3c:	d02b      	beq.n	8009c96 <_malloc_r+0xd2>
 8009c3e:	6823      	ldr	r3, [r4, #0]
 8009c40:	442b      	add	r3, r5
 8009c42:	6023      	str	r3, [r4, #0]
 8009c44:	e00e      	b.n	8009c64 <_malloc_r+0xa0>
 8009c46:	6822      	ldr	r2, [r4, #0]
 8009c48:	1b52      	subs	r2, r2, r5
 8009c4a:	d41e      	bmi.n	8009c8a <_malloc_r+0xc6>
 8009c4c:	2a0b      	cmp	r2, #11
 8009c4e:	d916      	bls.n	8009c7e <_malloc_r+0xba>
 8009c50:	1961      	adds	r1, r4, r5
 8009c52:	42a3      	cmp	r3, r4
 8009c54:	6025      	str	r5, [r4, #0]
 8009c56:	bf18      	it	ne
 8009c58:	6059      	strne	r1, [r3, #4]
 8009c5a:	6863      	ldr	r3, [r4, #4]
 8009c5c:	bf08      	it	eq
 8009c5e:	6031      	streq	r1, [r6, #0]
 8009c60:	5162      	str	r2, [r4, r5]
 8009c62:	604b      	str	r3, [r1, #4]
 8009c64:	4638      	mov	r0, r7
 8009c66:	f104 060b 	add.w	r6, r4, #11
 8009c6a:	f000 fa03 	bl	800a074 <__malloc_unlock>
 8009c6e:	f026 0607 	bic.w	r6, r6, #7
 8009c72:	1d23      	adds	r3, r4, #4
 8009c74:	1af2      	subs	r2, r6, r3
 8009c76:	d0b6      	beq.n	8009be6 <_malloc_r+0x22>
 8009c78:	1b9b      	subs	r3, r3, r6
 8009c7a:	50a3      	str	r3, [r4, r2]
 8009c7c:	e7b3      	b.n	8009be6 <_malloc_r+0x22>
 8009c7e:	6862      	ldr	r2, [r4, #4]
 8009c80:	42a3      	cmp	r3, r4
 8009c82:	bf0c      	ite	eq
 8009c84:	6032      	streq	r2, [r6, #0]
 8009c86:	605a      	strne	r2, [r3, #4]
 8009c88:	e7ec      	b.n	8009c64 <_malloc_r+0xa0>
 8009c8a:	4623      	mov	r3, r4
 8009c8c:	6864      	ldr	r4, [r4, #4]
 8009c8e:	e7b2      	b.n	8009bf6 <_malloc_r+0x32>
 8009c90:	4634      	mov	r4, r6
 8009c92:	6876      	ldr	r6, [r6, #4]
 8009c94:	e7b9      	b.n	8009c0a <_malloc_r+0x46>
 8009c96:	230c      	movs	r3, #12
 8009c98:	4638      	mov	r0, r7
 8009c9a:	603b      	str	r3, [r7, #0]
 8009c9c:	f000 f9ea 	bl	800a074 <__malloc_unlock>
 8009ca0:	e7a1      	b.n	8009be6 <_malloc_r+0x22>
 8009ca2:	6025      	str	r5, [r4, #0]
 8009ca4:	e7de      	b.n	8009c64 <_malloc_r+0xa0>
 8009ca6:	bf00      	nop
 8009ca8:	20000420 	.word	0x20000420

08009cac <__ssputs_r>:
 8009cac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009cb0:	688e      	ldr	r6, [r1, #8]
 8009cb2:	4682      	mov	sl, r0
 8009cb4:	429e      	cmp	r6, r3
 8009cb6:	460c      	mov	r4, r1
 8009cb8:	4690      	mov	r8, r2
 8009cba:	461f      	mov	r7, r3
 8009cbc:	d838      	bhi.n	8009d30 <__ssputs_r+0x84>
 8009cbe:	898a      	ldrh	r2, [r1, #12]
 8009cc0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009cc4:	d032      	beq.n	8009d2c <__ssputs_r+0x80>
 8009cc6:	6825      	ldr	r5, [r4, #0]
 8009cc8:	6909      	ldr	r1, [r1, #16]
 8009cca:	3301      	adds	r3, #1
 8009ccc:	eba5 0901 	sub.w	r9, r5, r1
 8009cd0:	6965      	ldr	r5, [r4, #20]
 8009cd2:	444b      	add	r3, r9
 8009cd4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009cd8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009cdc:	106d      	asrs	r5, r5, #1
 8009cde:	429d      	cmp	r5, r3
 8009ce0:	bf38      	it	cc
 8009ce2:	461d      	movcc	r5, r3
 8009ce4:	0553      	lsls	r3, r2, #21
 8009ce6:	d531      	bpl.n	8009d4c <__ssputs_r+0xa0>
 8009ce8:	4629      	mov	r1, r5
 8009cea:	f7ff ff6b 	bl	8009bc4 <_malloc_r>
 8009cee:	4606      	mov	r6, r0
 8009cf0:	b950      	cbnz	r0, 8009d08 <__ssputs_r+0x5c>
 8009cf2:	230c      	movs	r3, #12
 8009cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8009cf8:	f8ca 3000 	str.w	r3, [sl]
 8009cfc:	89a3      	ldrh	r3, [r4, #12]
 8009cfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d02:	81a3      	strh	r3, [r4, #12]
 8009d04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d08:	464a      	mov	r2, r9
 8009d0a:	6921      	ldr	r1, [r4, #16]
 8009d0c:	f7ff fa18 	bl	8009140 <memcpy>
 8009d10:	89a3      	ldrh	r3, [r4, #12]
 8009d12:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009d16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d1a:	81a3      	strh	r3, [r4, #12]
 8009d1c:	6126      	str	r6, [r4, #16]
 8009d1e:	444e      	add	r6, r9
 8009d20:	6026      	str	r6, [r4, #0]
 8009d22:	463e      	mov	r6, r7
 8009d24:	6165      	str	r5, [r4, #20]
 8009d26:	eba5 0509 	sub.w	r5, r5, r9
 8009d2a:	60a5      	str	r5, [r4, #8]
 8009d2c:	42be      	cmp	r6, r7
 8009d2e:	d900      	bls.n	8009d32 <__ssputs_r+0x86>
 8009d30:	463e      	mov	r6, r7
 8009d32:	4632      	mov	r2, r6
 8009d34:	4641      	mov	r1, r8
 8009d36:	6820      	ldr	r0, [r4, #0]
 8009d38:	f000 f97c 	bl	800a034 <memmove>
 8009d3c:	68a3      	ldr	r3, [r4, #8]
 8009d3e:	2000      	movs	r0, #0
 8009d40:	1b9b      	subs	r3, r3, r6
 8009d42:	60a3      	str	r3, [r4, #8]
 8009d44:	6823      	ldr	r3, [r4, #0]
 8009d46:	4433      	add	r3, r6
 8009d48:	6023      	str	r3, [r4, #0]
 8009d4a:	e7db      	b.n	8009d04 <__ssputs_r+0x58>
 8009d4c:	462a      	mov	r2, r5
 8009d4e:	f000 f997 	bl	800a080 <_realloc_r>
 8009d52:	4606      	mov	r6, r0
 8009d54:	2800      	cmp	r0, #0
 8009d56:	d1e1      	bne.n	8009d1c <__ssputs_r+0x70>
 8009d58:	4650      	mov	r0, sl
 8009d5a:	6921      	ldr	r1, [r4, #16]
 8009d5c:	f7ff feca 	bl	8009af4 <_free_r>
 8009d60:	e7c7      	b.n	8009cf2 <__ssputs_r+0x46>
	...

08009d64 <_svfiprintf_r>:
 8009d64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d68:	4698      	mov	r8, r3
 8009d6a:	898b      	ldrh	r3, [r1, #12]
 8009d6c:	4607      	mov	r7, r0
 8009d6e:	061b      	lsls	r3, r3, #24
 8009d70:	460d      	mov	r5, r1
 8009d72:	4614      	mov	r4, r2
 8009d74:	b09d      	sub	sp, #116	; 0x74
 8009d76:	d50e      	bpl.n	8009d96 <_svfiprintf_r+0x32>
 8009d78:	690b      	ldr	r3, [r1, #16]
 8009d7a:	b963      	cbnz	r3, 8009d96 <_svfiprintf_r+0x32>
 8009d7c:	2140      	movs	r1, #64	; 0x40
 8009d7e:	f7ff ff21 	bl	8009bc4 <_malloc_r>
 8009d82:	6028      	str	r0, [r5, #0]
 8009d84:	6128      	str	r0, [r5, #16]
 8009d86:	b920      	cbnz	r0, 8009d92 <_svfiprintf_r+0x2e>
 8009d88:	230c      	movs	r3, #12
 8009d8a:	603b      	str	r3, [r7, #0]
 8009d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8009d90:	e0d1      	b.n	8009f36 <_svfiprintf_r+0x1d2>
 8009d92:	2340      	movs	r3, #64	; 0x40
 8009d94:	616b      	str	r3, [r5, #20]
 8009d96:	2300      	movs	r3, #0
 8009d98:	9309      	str	r3, [sp, #36]	; 0x24
 8009d9a:	2320      	movs	r3, #32
 8009d9c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009da0:	2330      	movs	r3, #48	; 0x30
 8009da2:	f04f 0901 	mov.w	r9, #1
 8009da6:	f8cd 800c 	str.w	r8, [sp, #12]
 8009daa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009f50 <_svfiprintf_r+0x1ec>
 8009dae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009db2:	4623      	mov	r3, r4
 8009db4:	469a      	mov	sl, r3
 8009db6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009dba:	b10a      	cbz	r2, 8009dc0 <_svfiprintf_r+0x5c>
 8009dbc:	2a25      	cmp	r2, #37	; 0x25
 8009dbe:	d1f9      	bne.n	8009db4 <_svfiprintf_r+0x50>
 8009dc0:	ebba 0b04 	subs.w	fp, sl, r4
 8009dc4:	d00b      	beq.n	8009dde <_svfiprintf_r+0x7a>
 8009dc6:	465b      	mov	r3, fp
 8009dc8:	4622      	mov	r2, r4
 8009dca:	4629      	mov	r1, r5
 8009dcc:	4638      	mov	r0, r7
 8009dce:	f7ff ff6d 	bl	8009cac <__ssputs_r>
 8009dd2:	3001      	adds	r0, #1
 8009dd4:	f000 80aa 	beq.w	8009f2c <_svfiprintf_r+0x1c8>
 8009dd8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009dda:	445a      	add	r2, fp
 8009ddc:	9209      	str	r2, [sp, #36]	; 0x24
 8009dde:	f89a 3000 	ldrb.w	r3, [sl]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	f000 80a2 	beq.w	8009f2c <_svfiprintf_r+0x1c8>
 8009de8:	2300      	movs	r3, #0
 8009dea:	f04f 32ff 	mov.w	r2, #4294967295
 8009dee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009df2:	f10a 0a01 	add.w	sl, sl, #1
 8009df6:	9304      	str	r3, [sp, #16]
 8009df8:	9307      	str	r3, [sp, #28]
 8009dfa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009dfe:	931a      	str	r3, [sp, #104]	; 0x68
 8009e00:	4654      	mov	r4, sl
 8009e02:	2205      	movs	r2, #5
 8009e04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e08:	4851      	ldr	r0, [pc, #324]	; (8009f50 <_svfiprintf_r+0x1ec>)
 8009e0a:	f7ff f98b 	bl	8009124 <memchr>
 8009e0e:	9a04      	ldr	r2, [sp, #16]
 8009e10:	b9d8      	cbnz	r0, 8009e4a <_svfiprintf_r+0xe6>
 8009e12:	06d0      	lsls	r0, r2, #27
 8009e14:	bf44      	itt	mi
 8009e16:	2320      	movmi	r3, #32
 8009e18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e1c:	0711      	lsls	r1, r2, #28
 8009e1e:	bf44      	itt	mi
 8009e20:	232b      	movmi	r3, #43	; 0x2b
 8009e22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e26:	f89a 3000 	ldrb.w	r3, [sl]
 8009e2a:	2b2a      	cmp	r3, #42	; 0x2a
 8009e2c:	d015      	beq.n	8009e5a <_svfiprintf_r+0xf6>
 8009e2e:	4654      	mov	r4, sl
 8009e30:	2000      	movs	r0, #0
 8009e32:	f04f 0c0a 	mov.w	ip, #10
 8009e36:	9a07      	ldr	r2, [sp, #28]
 8009e38:	4621      	mov	r1, r4
 8009e3a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e3e:	3b30      	subs	r3, #48	; 0x30
 8009e40:	2b09      	cmp	r3, #9
 8009e42:	d94e      	bls.n	8009ee2 <_svfiprintf_r+0x17e>
 8009e44:	b1b0      	cbz	r0, 8009e74 <_svfiprintf_r+0x110>
 8009e46:	9207      	str	r2, [sp, #28]
 8009e48:	e014      	b.n	8009e74 <_svfiprintf_r+0x110>
 8009e4a:	eba0 0308 	sub.w	r3, r0, r8
 8009e4e:	fa09 f303 	lsl.w	r3, r9, r3
 8009e52:	4313      	orrs	r3, r2
 8009e54:	46a2      	mov	sl, r4
 8009e56:	9304      	str	r3, [sp, #16]
 8009e58:	e7d2      	b.n	8009e00 <_svfiprintf_r+0x9c>
 8009e5a:	9b03      	ldr	r3, [sp, #12]
 8009e5c:	1d19      	adds	r1, r3, #4
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	9103      	str	r1, [sp, #12]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	bfbb      	ittet	lt
 8009e66:	425b      	neglt	r3, r3
 8009e68:	f042 0202 	orrlt.w	r2, r2, #2
 8009e6c:	9307      	strge	r3, [sp, #28]
 8009e6e:	9307      	strlt	r3, [sp, #28]
 8009e70:	bfb8      	it	lt
 8009e72:	9204      	strlt	r2, [sp, #16]
 8009e74:	7823      	ldrb	r3, [r4, #0]
 8009e76:	2b2e      	cmp	r3, #46	; 0x2e
 8009e78:	d10c      	bne.n	8009e94 <_svfiprintf_r+0x130>
 8009e7a:	7863      	ldrb	r3, [r4, #1]
 8009e7c:	2b2a      	cmp	r3, #42	; 0x2a
 8009e7e:	d135      	bne.n	8009eec <_svfiprintf_r+0x188>
 8009e80:	9b03      	ldr	r3, [sp, #12]
 8009e82:	3402      	adds	r4, #2
 8009e84:	1d1a      	adds	r2, r3, #4
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	9203      	str	r2, [sp, #12]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	bfb8      	it	lt
 8009e8e:	f04f 33ff 	movlt.w	r3, #4294967295
 8009e92:	9305      	str	r3, [sp, #20]
 8009e94:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8009f54 <_svfiprintf_r+0x1f0>
 8009e98:	2203      	movs	r2, #3
 8009e9a:	4650      	mov	r0, sl
 8009e9c:	7821      	ldrb	r1, [r4, #0]
 8009e9e:	f7ff f941 	bl	8009124 <memchr>
 8009ea2:	b140      	cbz	r0, 8009eb6 <_svfiprintf_r+0x152>
 8009ea4:	2340      	movs	r3, #64	; 0x40
 8009ea6:	eba0 000a 	sub.w	r0, r0, sl
 8009eaa:	fa03 f000 	lsl.w	r0, r3, r0
 8009eae:	9b04      	ldr	r3, [sp, #16]
 8009eb0:	3401      	adds	r4, #1
 8009eb2:	4303      	orrs	r3, r0
 8009eb4:	9304      	str	r3, [sp, #16]
 8009eb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009eba:	2206      	movs	r2, #6
 8009ebc:	4826      	ldr	r0, [pc, #152]	; (8009f58 <_svfiprintf_r+0x1f4>)
 8009ebe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009ec2:	f7ff f92f 	bl	8009124 <memchr>
 8009ec6:	2800      	cmp	r0, #0
 8009ec8:	d038      	beq.n	8009f3c <_svfiprintf_r+0x1d8>
 8009eca:	4b24      	ldr	r3, [pc, #144]	; (8009f5c <_svfiprintf_r+0x1f8>)
 8009ecc:	bb1b      	cbnz	r3, 8009f16 <_svfiprintf_r+0x1b2>
 8009ece:	9b03      	ldr	r3, [sp, #12]
 8009ed0:	3307      	adds	r3, #7
 8009ed2:	f023 0307 	bic.w	r3, r3, #7
 8009ed6:	3308      	adds	r3, #8
 8009ed8:	9303      	str	r3, [sp, #12]
 8009eda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009edc:	4433      	add	r3, r6
 8009ede:	9309      	str	r3, [sp, #36]	; 0x24
 8009ee0:	e767      	b.n	8009db2 <_svfiprintf_r+0x4e>
 8009ee2:	460c      	mov	r4, r1
 8009ee4:	2001      	movs	r0, #1
 8009ee6:	fb0c 3202 	mla	r2, ip, r2, r3
 8009eea:	e7a5      	b.n	8009e38 <_svfiprintf_r+0xd4>
 8009eec:	2300      	movs	r3, #0
 8009eee:	f04f 0c0a 	mov.w	ip, #10
 8009ef2:	4619      	mov	r1, r3
 8009ef4:	3401      	adds	r4, #1
 8009ef6:	9305      	str	r3, [sp, #20]
 8009ef8:	4620      	mov	r0, r4
 8009efa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009efe:	3a30      	subs	r2, #48	; 0x30
 8009f00:	2a09      	cmp	r2, #9
 8009f02:	d903      	bls.n	8009f0c <_svfiprintf_r+0x1a8>
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d0c5      	beq.n	8009e94 <_svfiprintf_r+0x130>
 8009f08:	9105      	str	r1, [sp, #20]
 8009f0a:	e7c3      	b.n	8009e94 <_svfiprintf_r+0x130>
 8009f0c:	4604      	mov	r4, r0
 8009f0e:	2301      	movs	r3, #1
 8009f10:	fb0c 2101 	mla	r1, ip, r1, r2
 8009f14:	e7f0      	b.n	8009ef8 <_svfiprintf_r+0x194>
 8009f16:	ab03      	add	r3, sp, #12
 8009f18:	9300      	str	r3, [sp, #0]
 8009f1a:	462a      	mov	r2, r5
 8009f1c:	4638      	mov	r0, r7
 8009f1e:	4b10      	ldr	r3, [pc, #64]	; (8009f60 <_svfiprintf_r+0x1fc>)
 8009f20:	a904      	add	r1, sp, #16
 8009f22:	f7fc fa5f 	bl	80063e4 <_printf_float>
 8009f26:	1c42      	adds	r2, r0, #1
 8009f28:	4606      	mov	r6, r0
 8009f2a:	d1d6      	bne.n	8009eda <_svfiprintf_r+0x176>
 8009f2c:	89ab      	ldrh	r3, [r5, #12]
 8009f2e:	065b      	lsls	r3, r3, #25
 8009f30:	f53f af2c 	bmi.w	8009d8c <_svfiprintf_r+0x28>
 8009f34:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009f36:	b01d      	add	sp, #116	; 0x74
 8009f38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f3c:	ab03      	add	r3, sp, #12
 8009f3e:	9300      	str	r3, [sp, #0]
 8009f40:	462a      	mov	r2, r5
 8009f42:	4638      	mov	r0, r7
 8009f44:	4b06      	ldr	r3, [pc, #24]	; (8009f60 <_svfiprintf_r+0x1fc>)
 8009f46:	a904      	add	r1, sp, #16
 8009f48:	f7fc fce8 	bl	800691c <_printf_i>
 8009f4c:	e7eb      	b.n	8009f26 <_svfiprintf_r+0x1c2>
 8009f4e:	bf00      	nop
 8009f50:	0800af9c 	.word	0x0800af9c
 8009f54:	0800afa2 	.word	0x0800afa2
 8009f58:	0800afa6 	.word	0x0800afa6
 8009f5c:	080063e5 	.word	0x080063e5
 8009f60:	08009cad 	.word	0x08009cad

08009f64 <nan>:
 8009f64:	2000      	movs	r0, #0
 8009f66:	4901      	ldr	r1, [pc, #4]	; (8009f6c <nan+0x8>)
 8009f68:	4770      	bx	lr
 8009f6a:	bf00      	nop
 8009f6c:	7ff80000 	.word	0x7ff80000

08009f70 <_sbrk_r>:
 8009f70:	b538      	push	{r3, r4, r5, lr}
 8009f72:	2300      	movs	r3, #0
 8009f74:	4d05      	ldr	r5, [pc, #20]	; (8009f8c <_sbrk_r+0x1c>)
 8009f76:	4604      	mov	r4, r0
 8009f78:	4608      	mov	r0, r1
 8009f7a:	602b      	str	r3, [r5, #0]
 8009f7c:	f7f8 f86e 	bl	800205c <_sbrk>
 8009f80:	1c43      	adds	r3, r0, #1
 8009f82:	d102      	bne.n	8009f8a <_sbrk_r+0x1a>
 8009f84:	682b      	ldr	r3, [r5, #0]
 8009f86:	b103      	cbz	r3, 8009f8a <_sbrk_r+0x1a>
 8009f88:	6023      	str	r3, [r4, #0]
 8009f8a:	bd38      	pop	{r3, r4, r5, pc}
 8009f8c:	20000428 	.word	0x20000428

08009f90 <strncmp>:
 8009f90:	4603      	mov	r3, r0
 8009f92:	b510      	push	{r4, lr}
 8009f94:	b172      	cbz	r2, 8009fb4 <strncmp+0x24>
 8009f96:	3901      	subs	r1, #1
 8009f98:	1884      	adds	r4, r0, r2
 8009f9a:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009f9e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009fa2:	4290      	cmp	r0, r2
 8009fa4:	d101      	bne.n	8009faa <strncmp+0x1a>
 8009fa6:	42a3      	cmp	r3, r4
 8009fa8:	d101      	bne.n	8009fae <strncmp+0x1e>
 8009faa:	1a80      	subs	r0, r0, r2
 8009fac:	bd10      	pop	{r4, pc}
 8009fae:	2800      	cmp	r0, #0
 8009fb0:	d1f3      	bne.n	8009f9a <strncmp+0xa>
 8009fb2:	e7fa      	b.n	8009faa <strncmp+0x1a>
 8009fb4:	4610      	mov	r0, r2
 8009fb6:	e7f9      	b.n	8009fac <strncmp+0x1c>

08009fb8 <__ascii_wctomb>:
 8009fb8:	4603      	mov	r3, r0
 8009fba:	4608      	mov	r0, r1
 8009fbc:	b141      	cbz	r1, 8009fd0 <__ascii_wctomb+0x18>
 8009fbe:	2aff      	cmp	r2, #255	; 0xff
 8009fc0:	d904      	bls.n	8009fcc <__ascii_wctomb+0x14>
 8009fc2:	228a      	movs	r2, #138	; 0x8a
 8009fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8009fc8:	601a      	str	r2, [r3, #0]
 8009fca:	4770      	bx	lr
 8009fcc:	2001      	movs	r0, #1
 8009fce:	700a      	strb	r2, [r1, #0]
 8009fd0:	4770      	bx	lr
	...

08009fd4 <__assert_func>:
 8009fd4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009fd6:	4614      	mov	r4, r2
 8009fd8:	461a      	mov	r2, r3
 8009fda:	4b09      	ldr	r3, [pc, #36]	; (800a000 <__assert_func+0x2c>)
 8009fdc:	4605      	mov	r5, r0
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	68d8      	ldr	r0, [r3, #12]
 8009fe2:	b14c      	cbz	r4, 8009ff8 <__assert_func+0x24>
 8009fe4:	4b07      	ldr	r3, [pc, #28]	; (800a004 <__assert_func+0x30>)
 8009fe6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009fea:	9100      	str	r1, [sp, #0]
 8009fec:	462b      	mov	r3, r5
 8009fee:	4906      	ldr	r1, [pc, #24]	; (800a008 <__assert_func+0x34>)
 8009ff0:	f000 f80e 	bl	800a010 <fiprintf>
 8009ff4:	f000 fa8a 	bl	800a50c <abort>
 8009ff8:	4b04      	ldr	r3, [pc, #16]	; (800a00c <__assert_func+0x38>)
 8009ffa:	461c      	mov	r4, r3
 8009ffc:	e7f3      	b.n	8009fe6 <__assert_func+0x12>
 8009ffe:	bf00      	nop
 800a000:	20000034 	.word	0x20000034
 800a004:	0800afad 	.word	0x0800afad
 800a008:	0800afba 	.word	0x0800afba
 800a00c:	0800afe8 	.word	0x0800afe8

0800a010 <fiprintf>:
 800a010:	b40e      	push	{r1, r2, r3}
 800a012:	b503      	push	{r0, r1, lr}
 800a014:	4601      	mov	r1, r0
 800a016:	ab03      	add	r3, sp, #12
 800a018:	4805      	ldr	r0, [pc, #20]	; (800a030 <fiprintf+0x20>)
 800a01a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a01e:	6800      	ldr	r0, [r0, #0]
 800a020:	9301      	str	r3, [sp, #4]
 800a022:	f000 f883 	bl	800a12c <_vfiprintf_r>
 800a026:	b002      	add	sp, #8
 800a028:	f85d eb04 	ldr.w	lr, [sp], #4
 800a02c:	b003      	add	sp, #12
 800a02e:	4770      	bx	lr
 800a030:	20000034 	.word	0x20000034

0800a034 <memmove>:
 800a034:	4288      	cmp	r0, r1
 800a036:	b510      	push	{r4, lr}
 800a038:	eb01 0402 	add.w	r4, r1, r2
 800a03c:	d902      	bls.n	800a044 <memmove+0x10>
 800a03e:	4284      	cmp	r4, r0
 800a040:	4623      	mov	r3, r4
 800a042:	d807      	bhi.n	800a054 <memmove+0x20>
 800a044:	1e43      	subs	r3, r0, #1
 800a046:	42a1      	cmp	r1, r4
 800a048:	d008      	beq.n	800a05c <memmove+0x28>
 800a04a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a04e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a052:	e7f8      	b.n	800a046 <memmove+0x12>
 800a054:	4601      	mov	r1, r0
 800a056:	4402      	add	r2, r0
 800a058:	428a      	cmp	r2, r1
 800a05a:	d100      	bne.n	800a05e <memmove+0x2a>
 800a05c:	bd10      	pop	{r4, pc}
 800a05e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a062:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a066:	e7f7      	b.n	800a058 <memmove+0x24>

0800a068 <__malloc_lock>:
 800a068:	4801      	ldr	r0, [pc, #4]	; (800a070 <__malloc_lock+0x8>)
 800a06a:	f000 bc0b 	b.w	800a884 <__retarget_lock_acquire_recursive>
 800a06e:	bf00      	nop
 800a070:	2000042c 	.word	0x2000042c

0800a074 <__malloc_unlock>:
 800a074:	4801      	ldr	r0, [pc, #4]	; (800a07c <__malloc_unlock+0x8>)
 800a076:	f000 bc06 	b.w	800a886 <__retarget_lock_release_recursive>
 800a07a:	bf00      	nop
 800a07c:	2000042c 	.word	0x2000042c

0800a080 <_realloc_r>:
 800a080:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a084:	4680      	mov	r8, r0
 800a086:	4614      	mov	r4, r2
 800a088:	460e      	mov	r6, r1
 800a08a:	b921      	cbnz	r1, 800a096 <_realloc_r+0x16>
 800a08c:	4611      	mov	r1, r2
 800a08e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a092:	f7ff bd97 	b.w	8009bc4 <_malloc_r>
 800a096:	b92a      	cbnz	r2, 800a0a4 <_realloc_r+0x24>
 800a098:	f7ff fd2c 	bl	8009af4 <_free_r>
 800a09c:	4625      	mov	r5, r4
 800a09e:	4628      	mov	r0, r5
 800a0a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a0a4:	f000 fc56 	bl	800a954 <_malloc_usable_size_r>
 800a0a8:	4284      	cmp	r4, r0
 800a0aa:	4607      	mov	r7, r0
 800a0ac:	d802      	bhi.n	800a0b4 <_realloc_r+0x34>
 800a0ae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a0b2:	d812      	bhi.n	800a0da <_realloc_r+0x5a>
 800a0b4:	4621      	mov	r1, r4
 800a0b6:	4640      	mov	r0, r8
 800a0b8:	f7ff fd84 	bl	8009bc4 <_malloc_r>
 800a0bc:	4605      	mov	r5, r0
 800a0be:	2800      	cmp	r0, #0
 800a0c0:	d0ed      	beq.n	800a09e <_realloc_r+0x1e>
 800a0c2:	42bc      	cmp	r4, r7
 800a0c4:	4622      	mov	r2, r4
 800a0c6:	4631      	mov	r1, r6
 800a0c8:	bf28      	it	cs
 800a0ca:	463a      	movcs	r2, r7
 800a0cc:	f7ff f838 	bl	8009140 <memcpy>
 800a0d0:	4631      	mov	r1, r6
 800a0d2:	4640      	mov	r0, r8
 800a0d4:	f7ff fd0e 	bl	8009af4 <_free_r>
 800a0d8:	e7e1      	b.n	800a09e <_realloc_r+0x1e>
 800a0da:	4635      	mov	r5, r6
 800a0dc:	e7df      	b.n	800a09e <_realloc_r+0x1e>

0800a0de <__sfputc_r>:
 800a0de:	6893      	ldr	r3, [r2, #8]
 800a0e0:	b410      	push	{r4}
 800a0e2:	3b01      	subs	r3, #1
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	6093      	str	r3, [r2, #8]
 800a0e8:	da07      	bge.n	800a0fa <__sfputc_r+0x1c>
 800a0ea:	6994      	ldr	r4, [r2, #24]
 800a0ec:	42a3      	cmp	r3, r4
 800a0ee:	db01      	blt.n	800a0f4 <__sfputc_r+0x16>
 800a0f0:	290a      	cmp	r1, #10
 800a0f2:	d102      	bne.n	800a0fa <__sfputc_r+0x1c>
 800a0f4:	bc10      	pop	{r4}
 800a0f6:	f000 b949 	b.w	800a38c <__swbuf_r>
 800a0fa:	6813      	ldr	r3, [r2, #0]
 800a0fc:	1c58      	adds	r0, r3, #1
 800a0fe:	6010      	str	r0, [r2, #0]
 800a100:	7019      	strb	r1, [r3, #0]
 800a102:	4608      	mov	r0, r1
 800a104:	bc10      	pop	{r4}
 800a106:	4770      	bx	lr

0800a108 <__sfputs_r>:
 800a108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a10a:	4606      	mov	r6, r0
 800a10c:	460f      	mov	r7, r1
 800a10e:	4614      	mov	r4, r2
 800a110:	18d5      	adds	r5, r2, r3
 800a112:	42ac      	cmp	r4, r5
 800a114:	d101      	bne.n	800a11a <__sfputs_r+0x12>
 800a116:	2000      	movs	r0, #0
 800a118:	e007      	b.n	800a12a <__sfputs_r+0x22>
 800a11a:	463a      	mov	r2, r7
 800a11c:	4630      	mov	r0, r6
 800a11e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a122:	f7ff ffdc 	bl	800a0de <__sfputc_r>
 800a126:	1c43      	adds	r3, r0, #1
 800a128:	d1f3      	bne.n	800a112 <__sfputs_r+0xa>
 800a12a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a12c <_vfiprintf_r>:
 800a12c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a130:	460d      	mov	r5, r1
 800a132:	4614      	mov	r4, r2
 800a134:	4698      	mov	r8, r3
 800a136:	4606      	mov	r6, r0
 800a138:	b09d      	sub	sp, #116	; 0x74
 800a13a:	b118      	cbz	r0, 800a144 <_vfiprintf_r+0x18>
 800a13c:	6983      	ldr	r3, [r0, #24]
 800a13e:	b90b      	cbnz	r3, 800a144 <_vfiprintf_r+0x18>
 800a140:	f000 fb02 	bl	800a748 <__sinit>
 800a144:	4b89      	ldr	r3, [pc, #548]	; (800a36c <_vfiprintf_r+0x240>)
 800a146:	429d      	cmp	r5, r3
 800a148:	d11b      	bne.n	800a182 <_vfiprintf_r+0x56>
 800a14a:	6875      	ldr	r5, [r6, #4]
 800a14c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a14e:	07d9      	lsls	r1, r3, #31
 800a150:	d405      	bmi.n	800a15e <_vfiprintf_r+0x32>
 800a152:	89ab      	ldrh	r3, [r5, #12]
 800a154:	059a      	lsls	r2, r3, #22
 800a156:	d402      	bmi.n	800a15e <_vfiprintf_r+0x32>
 800a158:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a15a:	f000 fb93 	bl	800a884 <__retarget_lock_acquire_recursive>
 800a15e:	89ab      	ldrh	r3, [r5, #12]
 800a160:	071b      	lsls	r3, r3, #28
 800a162:	d501      	bpl.n	800a168 <_vfiprintf_r+0x3c>
 800a164:	692b      	ldr	r3, [r5, #16]
 800a166:	b9eb      	cbnz	r3, 800a1a4 <_vfiprintf_r+0x78>
 800a168:	4629      	mov	r1, r5
 800a16a:	4630      	mov	r0, r6
 800a16c:	f000 f960 	bl	800a430 <__swsetup_r>
 800a170:	b1c0      	cbz	r0, 800a1a4 <_vfiprintf_r+0x78>
 800a172:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a174:	07dc      	lsls	r4, r3, #31
 800a176:	d50e      	bpl.n	800a196 <_vfiprintf_r+0x6a>
 800a178:	f04f 30ff 	mov.w	r0, #4294967295
 800a17c:	b01d      	add	sp, #116	; 0x74
 800a17e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a182:	4b7b      	ldr	r3, [pc, #492]	; (800a370 <_vfiprintf_r+0x244>)
 800a184:	429d      	cmp	r5, r3
 800a186:	d101      	bne.n	800a18c <_vfiprintf_r+0x60>
 800a188:	68b5      	ldr	r5, [r6, #8]
 800a18a:	e7df      	b.n	800a14c <_vfiprintf_r+0x20>
 800a18c:	4b79      	ldr	r3, [pc, #484]	; (800a374 <_vfiprintf_r+0x248>)
 800a18e:	429d      	cmp	r5, r3
 800a190:	bf08      	it	eq
 800a192:	68f5      	ldreq	r5, [r6, #12]
 800a194:	e7da      	b.n	800a14c <_vfiprintf_r+0x20>
 800a196:	89ab      	ldrh	r3, [r5, #12]
 800a198:	0598      	lsls	r0, r3, #22
 800a19a:	d4ed      	bmi.n	800a178 <_vfiprintf_r+0x4c>
 800a19c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a19e:	f000 fb72 	bl	800a886 <__retarget_lock_release_recursive>
 800a1a2:	e7e9      	b.n	800a178 <_vfiprintf_r+0x4c>
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	9309      	str	r3, [sp, #36]	; 0x24
 800a1a8:	2320      	movs	r3, #32
 800a1aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a1ae:	2330      	movs	r3, #48	; 0x30
 800a1b0:	f04f 0901 	mov.w	r9, #1
 800a1b4:	f8cd 800c 	str.w	r8, [sp, #12]
 800a1b8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800a378 <_vfiprintf_r+0x24c>
 800a1bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a1c0:	4623      	mov	r3, r4
 800a1c2:	469a      	mov	sl, r3
 800a1c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a1c8:	b10a      	cbz	r2, 800a1ce <_vfiprintf_r+0xa2>
 800a1ca:	2a25      	cmp	r2, #37	; 0x25
 800a1cc:	d1f9      	bne.n	800a1c2 <_vfiprintf_r+0x96>
 800a1ce:	ebba 0b04 	subs.w	fp, sl, r4
 800a1d2:	d00b      	beq.n	800a1ec <_vfiprintf_r+0xc0>
 800a1d4:	465b      	mov	r3, fp
 800a1d6:	4622      	mov	r2, r4
 800a1d8:	4629      	mov	r1, r5
 800a1da:	4630      	mov	r0, r6
 800a1dc:	f7ff ff94 	bl	800a108 <__sfputs_r>
 800a1e0:	3001      	adds	r0, #1
 800a1e2:	f000 80aa 	beq.w	800a33a <_vfiprintf_r+0x20e>
 800a1e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a1e8:	445a      	add	r2, fp
 800a1ea:	9209      	str	r2, [sp, #36]	; 0x24
 800a1ec:	f89a 3000 	ldrb.w	r3, [sl]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	f000 80a2 	beq.w	800a33a <_vfiprintf_r+0x20e>
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	f04f 32ff 	mov.w	r2, #4294967295
 800a1fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a200:	f10a 0a01 	add.w	sl, sl, #1
 800a204:	9304      	str	r3, [sp, #16]
 800a206:	9307      	str	r3, [sp, #28]
 800a208:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a20c:	931a      	str	r3, [sp, #104]	; 0x68
 800a20e:	4654      	mov	r4, sl
 800a210:	2205      	movs	r2, #5
 800a212:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a216:	4858      	ldr	r0, [pc, #352]	; (800a378 <_vfiprintf_r+0x24c>)
 800a218:	f7fe ff84 	bl	8009124 <memchr>
 800a21c:	9a04      	ldr	r2, [sp, #16]
 800a21e:	b9d8      	cbnz	r0, 800a258 <_vfiprintf_r+0x12c>
 800a220:	06d1      	lsls	r1, r2, #27
 800a222:	bf44      	itt	mi
 800a224:	2320      	movmi	r3, #32
 800a226:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a22a:	0713      	lsls	r3, r2, #28
 800a22c:	bf44      	itt	mi
 800a22e:	232b      	movmi	r3, #43	; 0x2b
 800a230:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a234:	f89a 3000 	ldrb.w	r3, [sl]
 800a238:	2b2a      	cmp	r3, #42	; 0x2a
 800a23a:	d015      	beq.n	800a268 <_vfiprintf_r+0x13c>
 800a23c:	4654      	mov	r4, sl
 800a23e:	2000      	movs	r0, #0
 800a240:	f04f 0c0a 	mov.w	ip, #10
 800a244:	9a07      	ldr	r2, [sp, #28]
 800a246:	4621      	mov	r1, r4
 800a248:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a24c:	3b30      	subs	r3, #48	; 0x30
 800a24e:	2b09      	cmp	r3, #9
 800a250:	d94e      	bls.n	800a2f0 <_vfiprintf_r+0x1c4>
 800a252:	b1b0      	cbz	r0, 800a282 <_vfiprintf_r+0x156>
 800a254:	9207      	str	r2, [sp, #28]
 800a256:	e014      	b.n	800a282 <_vfiprintf_r+0x156>
 800a258:	eba0 0308 	sub.w	r3, r0, r8
 800a25c:	fa09 f303 	lsl.w	r3, r9, r3
 800a260:	4313      	orrs	r3, r2
 800a262:	46a2      	mov	sl, r4
 800a264:	9304      	str	r3, [sp, #16]
 800a266:	e7d2      	b.n	800a20e <_vfiprintf_r+0xe2>
 800a268:	9b03      	ldr	r3, [sp, #12]
 800a26a:	1d19      	adds	r1, r3, #4
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	9103      	str	r1, [sp, #12]
 800a270:	2b00      	cmp	r3, #0
 800a272:	bfbb      	ittet	lt
 800a274:	425b      	neglt	r3, r3
 800a276:	f042 0202 	orrlt.w	r2, r2, #2
 800a27a:	9307      	strge	r3, [sp, #28]
 800a27c:	9307      	strlt	r3, [sp, #28]
 800a27e:	bfb8      	it	lt
 800a280:	9204      	strlt	r2, [sp, #16]
 800a282:	7823      	ldrb	r3, [r4, #0]
 800a284:	2b2e      	cmp	r3, #46	; 0x2e
 800a286:	d10c      	bne.n	800a2a2 <_vfiprintf_r+0x176>
 800a288:	7863      	ldrb	r3, [r4, #1]
 800a28a:	2b2a      	cmp	r3, #42	; 0x2a
 800a28c:	d135      	bne.n	800a2fa <_vfiprintf_r+0x1ce>
 800a28e:	9b03      	ldr	r3, [sp, #12]
 800a290:	3402      	adds	r4, #2
 800a292:	1d1a      	adds	r2, r3, #4
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	9203      	str	r2, [sp, #12]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	bfb8      	it	lt
 800a29c:	f04f 33ff 	movlt.w	r3, #4294967295
 800a2a0:	9305      	str	r3, [sp, #20]
 800a2a2:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800a37c <_vfiprintf_r+0x250>
 800a2a6:	2203      	movs	r2, #3
 800a2a8:	4650      	mov	r0, sl
 800a2aa:	7821      	ldrb	r1, [r4, #0]
 800a2ac:	f7fe ff3a 	bl	8009124 <memchr>
 800a2b0:	b140      	cbz	r0, 800a2c4 <_vfiprintf_r+0x198>
 800a2b2:	2340      	movs	r3, #64	; 0x40
 800a2b4:	eba0 000a 	sub.w	r0, r0, sl
 800a2b8:	fa03 f000 	lsl.w	r0, r3, r0
 800a2bc:	9b04      	ldr	r3, [sp, #16]
 800a2be:	3401      	adds	r4, #1
 800a2c0:	4303      	orrs	r3, r0
 800a2c2:	9304      	str	r3, [sp, #16]
 800a2c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2c8:	2206      	movs	r2, #6
 800a2ca:	482d      	ldr	r0, [pc, #180]	; (800a380 <_vfiprintf_r+0x254>)
 800a2cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a2d0:	f7fe ff28 	bl	8009124 <memchr>
 800a2d4:	2800      	cmp	r0, #0
 800a2d6:	d03f      	beq.n	800a358 <_vfiprintf_r+0x22c>
 800a2d8:	4b2a      	ldr	r3, [pc, #168]	; (800a384 <_vfiprintf_r+0x258>)
 800a2da:	bb1b      	cbnz	r3, 800a324 <_vfiprintf_r+0x1f8>
 800a2dc:	9b03      	ldr	r3, [sp, #12]
 800a2de:	3307      	adds	r3, #7
 800a2e0:	f023 0307 	bic.w	r3, r3, #7
 800a2e4:	3308      	adds	r3, #8
 800a2e6:	9303      	str	r3, [sp, #12]
 800a2e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2ea:	443b      	add	r3, r7
 800a2ec:	9309      	str	r3, [sp, #36]	; 0x24
 800a2ee:	e767      	b.n	800a1c0 <_vfiprintf_r+0x94>
 800a2f0:	460c      	mov	r4, r1
 800a2f2:	2001      	movs	r0, #1
 800a2f4:	fb0c 3202 	mla	r2, ip, r2, r3
 800a2f8:	e7a5      	b.n	800a246 <_vfiprintf_r+0x11a>
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	f04f 0c0a 	mov.w	ip, #10
 800a300:	4619      	mov	r1, r3
 800a302:	3401      	adds	r4, #1
 800a304:	9305      	str	r3, [sp, #20]
 800a306:	4620      	mov	r0, r4
 800a308:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a30c:	3a30      	subs	r2, #48	; 0x30
 800a30e:	2a09      	cmp	r2, #9
 800a310:	d903      	bls.n	800a31a <_vfiprintf_r+0x1ee>
 800a312:	2b00      	cmp	r3, #0
 800a314:	d0c5      	beq.n	800a2a2 <_vfiprintf_r+0x176>
 800a316:	9105      	str	r1, [sp, #20]
 800a318:	e7c3      	b.n	800a2a2 <_vfiprintf_r+0x176>
 800a31a:	4604      	mov	r4, r0
 800a31c:	2301      	movs	r3, #1
 800a31e:	fb0c 2101 	mla	r1, ip, r1, r2
 800a322:	e7f0      	b.n	800a306 <_vfiprintf_r+0x1da>
 800a324:	ab03      	add	r3, sp, #12
 800a326:	9300      	str	r3, [sp, #0]
 800a328:	462a      	mov	r2, r5
 800a32a:	4630      	mov	r0, r6
 800a32c:	4b16      	ldr	r3, [pc, #88]	; (800a388 <_vfiprintf_r+0x25c>)
 800a32e:	a904      	add	r1, sp, #16
 800a330:	f7fc f858 	bl	80063e4 <_printf_float>
 800a334:	4607      	mov	r7, r0
 800a336:	1c78      	adds	r0, r7, #1
 800a338:	d1d6      	bne.n	800a2e8 <_vfiprintf_r+0x1bc>
 800a33a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a33c:	07d9      	lsls	r1, r3, #31
 800a33e:	d405      	bmi.n	800a34c <_vfiprintf_r+0x220>
 800a340:	89ab      	ldrh	r3, [r5, #12]
 800a342:	059a      	lsls	r2, r3, #22
 800a344:	d402      	bmi.n	800a34c <_vfiprintf_r+0x220>
 800a346:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a348:	f000 fa9d 	bl	800a886 <__retarget_lock_release_recursive>
 800a34c:	89ab      	ldrh	r3, [r5, #12]
 800a34e:	065b      	lsls	r3, r3, #25
 800a350:	f53f af12 	bmi.w	800a178 <_vfiprintf_r+0x4c>
 800a354:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a356:	e711      	b.n	800a17c <_vfiprintf_r+0x50>
 800a358:	ab03      	add	r3, sp, #12
 800a35a:	9300      	str	r3, [sp, #0]
 800a35c:	462a      	mov	r2, r5
 800a35e:	4630      	mov	r0, r6
 800a360:	4b09      	ldr	r3, [pc, #36]	; (800a388 <_vfiprintf_r+0x25c>)
 800a362:	a904      	add	r1, sp, #16
 800a364:	f7fc fada 	bl	800691c <_printf_i>
 800a368:	e7e4      	b.n	800a334 <_vfiprintf_r+0x208>
 800a36a:	bf00      	nop
 800a36c:	0800b00c 	.word	0x0800b00c
 800a370:	0800b02c 	.word	0x0800b02c
 800a374:	0800afec 	.word	0x0800afec
 800a378:	0800af9c 	.word	0x0800af9c
 800a37c:	0800afa2 	.word	0x0800afa2
 800a380:	0800afa6 	.word	0x0800afa6
 800a384:	080063e5 	.word	0x080063e5
 800a388:	0800a109 	.word	0x0800a109

0800a38c <__swbuf_r>:
 800a38c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a38e:	460e      	mov	r6, r1
 800a390:	4614      	mov	r4, r2
 800a392:	4605      	mov	r5, r0
 800a394:	b118      	cbz	r0, 800a39e <__swbuf_r+0x12>
 800a396:	6983      	ldr	r3, [r0, #24]
 800a398:	b90b      	cbnz	r3, 800a39e <__swbuf_r+0x12>
 800a39a:	f000 f9d5 	bl	800a748 <__sinit>
 800a39e:	4b21      	ldr	r3, [pc, #132]	; (800a424 <__swbuf_r+0x98>)
 800a3a0:	429c      	cmp	r4, r3
 800a3a2:	d12b      	bne.n	800a3fc <__swbuf_r+0x70>
 800a3a4:	686c      	ldr	r4, [r5, #4]
 800a3a6:	69a3      	ldr	r3, [r4, #24]
 800a3a8:	60a3      	str	r3, [r4, #8]
 800a3aa:	89a3      	ldrh	r3, [r4, #12]
 800a3ac:	071a      	lsls	r2, r3, #28
 800a3ae:	d52f      	bpl.n	800a410 <__swbuf_r+0x84>
 800a3b0:	6923      	ldr	r3, [r4, #16]
 800a3b2:	b36b      	cbz	r3, 800a410 <__swbuf_r+0x84>
 800a3b4:	6923      	ldr	r3, [r4, #16]
 800a3b6:	6820      	ldr	r0, [r4, #0]
 800a3b8:	b2f6      	uxtb	r6, r6
 800a3ba:	1ac0      	subs	r0, r0, r3
 800a3bc:	6963      	ldr	r3, [r4, #20]
 800a3be:	4637      	mov	r7, r6
 800a3c0:	4283      	cmp	r3, r0
 800a3c2:	dc04      	bgt.n	800a3ce <__swbuf_r+0x42>
 800a3c4:	4621      	mov	r1, r4
 800a3c6:	4628      	mov	r0, r5
 800a3c8:	f000 f92a 	bl	800a620 <_fflush_r>
 800a3cc:	bb30      	cbnz	r0, 800a41c <__swbuf_r+0x90>
 800a3ce:	68a3      	ldr	r3, [r4, #8]
 800a3d0:	3001      	adds	r0, #1
 800a3d2:	3b01      	subs	r3, #1
 800a3d4:	60a3      	str	r3, [r4, #8]
 800a3d6:	6823      	ldr	r3, [r4, #0]
 800a3d8:	1c5a      	adds	r2, r3, #1
 800a3da:	6022      	str	r2, [r4, #0]
 800a3dc:	701e      	strb	r6, [r3, #0]
 800a3de:	6963      	ldr	r3, [r4, #20]
 800a3e0:	4283      	cmp	r3, r0
 800a3e2:	d004      	beq.n	800a3ee <__swbuf_r+0x62>
 800a3e4:	89a3      	ldrh	r3, [r4, #12]
 800a3e6:	07db      	lsls	r3, r3, #31
 800a3e8:	d506      	bpl.n	800a3f8 <__swbuf_r+0x6c>
 800a3ea:	2e0a      	cmp	r6, #10
 800a3ec:	d104      	bne.n	800a3f8 <__swbuf_r+0x6c>
 800a3ee:	4621      	mov	r1, r4
 800a3f0:	4628      	mov	r0, r5
 800a3f2:	f000 f915 	bl	800a620 <_fflush_r>
 800a3f6:	b988      	cbnz	r0, 800a41c <__swbuf_r+0x90>
 800a3f8:	4638      	mov	r0, r7
 800a3fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a3fc:	4b0a      	ldr	r3, [pc, #40]	; (800a428 <__swbuf_r+0x9c>)
 800a3fe:	429c      	cmp	r4, r3
 800a400:	d101      	bne.n	800a406 <__swbuf_r+0x7a>
 800a402:	68ac      	ldr	r4, [r5, #8]
 800a404:	e7cf      	b.n	800a3a6 <__swbuf_r+0x1a>
 800a406:	4b09      	ldr	r3, [pc, #36]	; (800a42c <__swbuf_r+0xa0>)
 800a408:	429c      	cmp	r4, r3
 800a40a:	bf08      	it	eq
 800a40c:	68ec      	ldreq	r4, [r5, #12]
 800a40e:	e7ca      	b.n	800a3a6 <__swbuf_r+0x1a>
 800a410:	4621      	mov	r1, r4
 800a412:	4628      	mov	r0, r5
 800a414:	f000 f80c 	bl	800a430 <__swsetup_r>
 800a418:	2800      	cmp	r0, #0
 800a41a:	d0cb      	beq.n	800a3b4 <__swbuf_r+0x28>
 800a41c:	f04f 37ff 	mov.w	r7, #4294967295
 800a420:	e7ea      	b.n	800a3f8 <__swbuf_r+0x6c>
 800a422:	bf00      	nop
 800a424:	0800b00c 	.word	0x0800b00c
 800a428:	0800b02c 	.word	0x0800b02c
 800a42c:	0800afec 	.word	0x0800afec

0800a430 <__swsetup_r>:
 800a430:	4b32      	ldr	r3, [pc, #200]	; (800a4fc <__swsetup_r+0xcc>)
 800a432:	b570      	push	{r4, r5, r6, lr}
 800a434:	681d      	ldr	r5, [r3, #0]
 800a436:	4606      	mov	r6, r0
 800a438:	460c      	mov	r4, r1
 800a43a:	b125      	cbz	r5, 800a446 <__swsetup_r+0x16>
 800a43c:	69ab      	ldr	r3, [r5, #24]
 800a43e:	b913      	cbnz	r3, 800a446 <__swsetup_r+0x16>
 800a440:	4628      	mov	r0, r5
 800a442:	f000 f981 	bl	800a748 <__sinit>
 800a446:	4b2e      	ldr	r3, [pc, #184]	; (800a500 <__swsetup_r+0xd0>)
 800a448:	429c      	cmp	r4, r3
 800a44a:	d10f      	bne.n	800a46c <__swsetup_r+0x3c>
 800a44c:	686c      	ldr	r4, [r5, #4]
 800a44e:	89a3      	ldrh	r3, [r4, #12]
 800a450:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a454:	0719      	lsls	r1, r3, #28
 800a456:	d42c      	bmi.n	800a4b2 <__swsetup_r+0x82>
 800a458:	06dd      	lsls	r5, r3, #27
 800a45a:	d411      	bmi.n	800a480 <__swsetup_r+0x50>
 800a45c:	2309      	movs	r3, #9
 800a45e:	6033      	str	r3, [r6, #0]
 800a460:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a464:	f04f 30ff 	mov.w	r0, #4294967295
 800a468:	81a3      	strh	r3, [r4, #12]
 800a46a:	e03e      	b.n	800a4ea <__swsetup_r+0xba>
 800a46c:	4b25      	ldr	r3, [pc, #148]	; (800a504 <__swsetup_r+0xd4>)
 800a46e:	429c      	cmp	r4, r3
 800a470:	d101      	bne.n	800a476 <__swsetup_r+0x46>
 800a472:	68ac      	ldr	r4, [r5, #8]
 800a474:	e7eb      	b.n	800a44e <__swsetup_r+0x1e>
 800a476:	4b24      	ldr	r3, [pc, #144]	; (800a508 <__swsetup_r+0xd8>)
 800a478:	429c      	cmp	r4, r3
 800a47a:	bf08      	it	eq
 800a47c:	68ec      	ldreq	r4, [r5, #12]
 800a47e:	e7e6      	b.n	800a44e <__swsetup_r+0x1e>
 800a480:	0758      	lsls	r0, r3, #29
 800a482:	d512      	bpl.n	800a4aa <__swsetup_r+0x7a>
 800a484:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a486:	b141      	cbz	r1, 800a49a <__swsetup_r+0x6a>
 800a488:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a48c:	4299      	cmp	r1, r3
 800a48e:	d002      	beq.n	800a496 <__swsetup_r+0x66>
 800a490:	4630      	mov	r0, r6
 800a492:	f7ff fb2f 	bl	8009af4 <_free_r>
 800a496:	2300      	movs	r3, #0
 800a498:	6363      	str	r3, [r4, #52]	; 0x34
 800a49a:	89a3      	ldrh	r3, [r4, #12]
 800a49c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a4a0:	81a3      	strh	r3, [r4, #12]
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	6063      	str	r3, [r4, #4]
 800a4a6:	6923      	ldr	r3, [r4, #16]
 800a4a8:	6023      	str	r3, [r4, #0]
 800a4aa:	89a3      	ldrh	r3, [r4, #12]
 800a4ac:	f043 0308 	orr.w	r3, r3, #8
 800a4b0:	81a3      	strh	r3, [r4, #12]
 800a4b2:	6923      	ldr	r3, [r4, #16]
 800a4b4:	b94b      	cbnz	r3, 800a4ca <__swsetup_r+0x9a>
 800a4b6:	89a3      	ldrh	r3, [r4, #12]
 800a4b8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a4bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a4c0:	d003      	beq.n	800a4ca <__swsetup_r+0x9a>
 800a4c2:	4621      	mov	r1, r4
 800a4c4:	4630      	mov	r0, r6
 800a4c6:	f000 fa05 	bl	800a8d4 <__smakebuf_r>
 800a4ca:	89a0      	ldrh	r0, [r4, #12]
 800a4cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a4d0:	f010 0301 	ands.w	r3, r0, #1
 800a4d4:	d00a      	beq.n	800a4ec <__swsetup_r+0xbc>
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	60a3      	str	r3, [r4, #8]
 800a4da:	6963      	ldr	r3, [r4, #20]
 800a4dc:	425b      	negs	r3, r3
 800a4de:	61a3      	str	r3, [r4, #24]
 800a4e0:	6923      	ldr	r3, [r4, #16]
 800a4e2:	b943      	cbnz	r3, 800a4f6 <__swsetup_r+0xc6>
 800a4e4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a4e8:	d1ba      	bne.n	800a460 <__swsetup_r+0x30>
 800a4ea:	bd70      	pop	{r4, r5, r6, pc}
 800a4ec:	0781      	lsls	r1, r0, #30
 800a4ee:	bf58      	it	pl
 800a4f0:	6963      	ldrpl	r3, [r4, #20]
 800a4f2:	60a3      	str	r3, [r4, #8]
 800a4f4:	e7f4      	b.n	800a4e0 <__swsetup_r+0xb0>
 800a4f6:	2000      	movs	r0, #0
 800a4f8:	e7f7      	b.n	800a4ea <__swsetup_r+0xba>
 800a4fa:	bf00      	nop
 800a4fc:	20000034 	.word	0x20000034
 800a500:	0800b00c 	.word	0x0800b00c
 800a504:	0800b02c 	.word	0x0800b02c
 800a508:	0800afec 	.word	0x0800afec

0800a50c <abort>:
 800a50c:	2006      	movs	r0, #6
 800a50e:	b508      	push	{r3, lr}
 800a510:	f000 fa50 	bl	800a9b4 <raise>
 800a514:	2001      	movs	r0, #1
 800a516:	f7f7 fd2e 	bl	8001f76 <_exit>
	...

0800a51c <__sflush_r>:
 800a51c:	898a      	ldrh	r2, [r1, #12]
 800a51e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a520:	4605      	mov	r5, r0
 800a522:	0710      	lsls	r0, r2, #28
 800a524:	460c      	mov	r4, r1
 800a526:	d457      	bmi.n	800a5d8 <__sflush_r+0xbc>
 800a528:	684b      	ldr	r3, [r1, #4]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	dc04      	bgt.n	800a538 <__sflush_r+0x1c>
 800a52e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a530:	2b00      	cmp	r3, #0
 800a532:	dc01      	bgt.n	800a538 <__sflush_r+0x1c>
 800a534:	2000      	movs	r0, #0
 800a536:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a538:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a53a:	2e00      	cmp	r6, #0
 800a53c:	d0fa      	beq.n	800a534 <__sflush_r+0x18>
 800a53e:	2300      	movs	r3, #0
 800a540:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a544:	682f      	ldr	r7, [r5, #0]
 800a546:	602b      	str	r3, [r5, #0]
 800a548:	d032      	beq.n	800a5b0 <__sflush_r+0x94>
 800a54a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a54c:	89a3      	ldrh	r3, [r4, #12]
 800a54e:	075a      	lsls	r2, r3, #29
 800a550:	d505      	bpl.n	800a55e <__sflush_r+0x42>
 800a552:	6863      	ldr	r3, [r4, #4]
 800a554:	1ac0      	subs	r0, r0, r3
 800a556:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a558:	b10b      	cbz	r3, 800a55e <__sflush_r+0x42>
 800a55a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a55c:	1ac0      	subs	r0, r0, r3
 800a55e:	2300      	movs	r3, #0
 800a560:	4602      	mov	r2, r0
 800a562:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a564:	4628      	mov	r0, r5
 800a566:	6a21      	ldr	r1, [r4, #32]
 800a568:	47b0      	blx	r6
 800a56a:	1c43      	adds	r3, r0, #1
 800a56c:	89a3      	ldrh	r3, [r4, #12]
 800a56e:	d106      	bne.n	800a57e <__sflush_r+0x62>
 800a570:	6829      	ldr	r1, [r5, #0]
 800a572:	291d      	cmp	r1, #29
 800a574:	d82c      	bhi.n	800a5d0 <__sflush_r+0xb4>
 800a576:	4a29      	ldr	r2, [pc, #164]	; (800a61c <__sflush_r+0x100>)
 800a578:	40ca      	lsrs	r2, r1
 800a57a:	07d6      	lsls	r6, r2, #31
 800a57c:	d528      	bpl.n	800a5d0 <__sflush_r+0xb4>
 800a57e:	2200      	movs	r2, #0
 800a580:	6062      	str	r2, [r4, #4]
 800a582:	6922      	ldr	r2, [r4, #16]
 800a584:	04d9      	lsls	r1, r3, #19
 800a586:	6022      	str	r2, [r4, #0]
 800a588:	d504      	bpl.n	800a594 <__sflush_r+0x78>
 800a58a:	1c42      	adds	r2, r0, #1
 800a58c:	d101      	bne.n	800a592 <__sflush_r+0x76>
 800a58e:	682b      	ldr	r3, [r5, #0]
 800a590:	b903      	cbnz	r3, 800a594 <__sflush_r+0x78>
 800a592:	6560      	str	r0, [r4, #84]	; 0x54
 800a594:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a596:	602f      	str	r7, [r5, #0]
 800a598:	2900      	cmp	r1, #0
 800a59a:	d0cb      	beq.n	800a534 <__sflush_r+0x18>
 800a59c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a5a0:	4299      	cmp	r1, r3
 800a5a2:	d002      	beq.n	800a5aa <__sflush_r+0x8e>
 800a5a4:	4628      	mov	r0, r5
 800a5a6:	f7ff faa5 	bl	8009af4 <_free_r>
 800a5aa:	2000      	movs	r0, #0
 800a5ac:	6360      	str	r0, [r4, #52]	; 0x34
 800a5ae:	e7c2      	b.n	800a536 <__sflush_r+0x1a>
 800a5b0:	6a21      	ldr	r1, [r4, #32]
 800a5b2:	2301      	movs	r3, #1
 800a5b4:	4628      	mov	r0, r5
 800a5b6:	47b0      	blx	r6
 800a5b8:	1c41      	adds	r1, r0, #1
 800a5ba:	d1c7      	bne.n	800a54c <__sflush_r+0x30>
 800a5bc:	682b      	ldr	r3, [r5, #0]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d0c4      	beq.n	800a54c <__sflush_r+0x30>
 800a5c2:	2b1d      	cmp	r3, #29
 800a5c4:	d001      	beq.n	800a5ca <__sflush_r+0xae>
 800a5c6:	2b16      	cmp	r3, #22
 800a5c8:	d101      	bne.n	800a5ce <__sflush_r+0xb2>
 800a5ca:	602f      	str	r7, [r5, #0]
 800a5cc:	e7b2      	b.n	800a534 <__sflush_r+0x18>
 800a5ce:	89a3      	ldrh	r3, [r4, #12]
 800a5d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a5d4:	81a3      	strh	r3, [r4, #12]
 800a5d6:	e7ae      	b.n	800a536 <__sflush_r+0x1a>
 800a5d8:	690f      	ldr	r7, [r1, #16]
 800a5da:	2f00      	cmp	r7, #0
 800a5dc:	d0aa      	beq.n	800a534 <__sflush_r+0x18>
 800a5de:	0793      	lsls	r3, r2, #30
 800a5e0:	bf18      	it	ne
 800a5e2:	2300      	movne	r3, #0
 800a5e4:	680e      	ldr	r6, [r1, #0]
 800a5e6:	bf08      	it	eq
 800a5e8:	694b      	ldreq	r3, [r1, #20]
 800a5ea:	1bf6      	subs	r6, r6, r7
 800a5ec:	600f      	str	r7, [r1, #0]
 800a5ee:	608b      	str	r3, [r1, #8]
 800a5f0:	2e00      	cmp	r6, #0
 800a5f2:	dd9f      	ble.n	800a534 <__sflush_r+0x18>
 800a5f4:	4633      	mov	r3, r6
 800a5f6:	463a      	mov	r2, r7
 800a5f8:	4628      	mov	r0, r5
 800a5fa:	6a21      	ldr	r1, [r4, #32]
 800a5fc:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800a600:	47e0      	blx	ip
 800a602:	2800      	cmp	r0, #0
 800a604:	dc06      	bgt.n	800a614 <__sflush_r+0xf8>
 800a606:	89a3      	ldrh	r3, [r4, #12]
 800a608:	f04f 30ff 	mov.w	r0, #4294967295
 800a60c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a610:	81a3      	strh	r3, [r4, #12]
 800a612:	e790      	b.n	800a536 <__sflush_r+0x1a>
 800a614:	4407      	add	r7, r0
 800a616:	1a36      	subs	r6, r6, r0
 800a618:	e7ea      	b.n	800a5f0 <__sflush_r+0xd4>
 800a61a:	bf00      	nop
 800a61c:	20400001 	.word	0x20400001

0800a620 <_fflush_r>:
 800a620:	b538      	push	{r3, r4, r5, lr}
 800a622:	690b      	ldr	r3, [r1, #16]
 800a624:	4605      	mov	r5, r0
 800a626:	460c      	mov	r4, r1
 800a628:	b913      	cbnz	r3, 800a630 <_fflush_r+0x10>
 800a62a:	2500      	movs	r5, #0
 800a62c:	4628      	mov	r0, r5
 800a62e:	bd38      	pop	{r3, r4, r5, pc}
 800a630:	b118      	cbz	r0, 800a63a <_fflush_r+0x1a>
 800a632:	6983      	ldr	r3, [r0, #24]
 800a634:	b90b      	cbnz	r3, 800a63a <_fflush_r+0x1a>
 800a636:	f000 f887 	bl	800a748 <__sinit>
 800a63a:	4b14      	ldr	r3, [pc, #80]	; (800a68c <_fflush_r+0x6c>)
 800a63c:	429c      	cmp	r4, r3
 800a63e:	d11b      	bne.n	800a678 <_fflush_r+0x58>
 800a640:	686c      	ldr	r4, [r5, #4]
 800a642:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a646:	2b00      	cmp	r3, #0
 800a648:	d0ef      	beq.n	800a62a <_fflush_r+0xa>
 800a64a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a64c:	07d0      	lsls	r0, r2, #31
 800a64e:	d404      	bmi.n	800a65a <_fflush_r+0x3a>
 800a650:	0599      	lsls	r1, r3, #22
 800a652:	d402      	bmi.n	800a65a <_fflush_r+0x3a>
 800a654:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a656:	f000 f915 	bl	800a884 <__retarget_lock_acquire_recursive>
 800a65a:	4628      	mov	r0, r5
 800a65c:	4621      	mov	r1, r4
 800a65e:	f7ff ff5d 	bl	800a51c <__sflush_r>
 800a662:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a664:	4605      	mov	r5, r0
 800a666:	07da      	lsls	r2, r3, #31
 800a668:	d4e0      	bmi.n	800a62c <_fflush_r+0xc>
 800a66a:	89a3      	ldrh	r3, [r4, #12]
 800a66c:	059b      	lsls	r3, r3, #22
 800a66e:	d4dd      	bmi.n	800a62c <_fflush_r+0xc>
 800a670:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a672:	f000 f908 	bl	800a886 <__retarget_lock_release_recursive>
 800a676:	e7d9      	b.n	800a62c <_fflush_r+0xc>
 800a678:	4b05      	ldr	r3, [pc, #20]	; (800a690 <_fflush_r+0x70>)
 800a67a:	429c      	cmp	r4, r3
 800a67c:	d101      	bne.n	800a682 <_fflush_r+0x62>
 800a67e:	68ac      	ldr	r4, [r5, #8]
 800a680:	e7df      	b.n	800a642 <_fflush_r+0x22>
 800a682:	4b04      	ldr	r3, [pc, #16]	; (800a694 <_fflush_r+0x74>)
 800a684:	429c      	cmp	r4, r3
 800a686:	bf08      	it	eq
 800a688:	68ec      	ldreq	r4, [r5, #12]
 800a68a:	e7da      	b.n	800a642 <_fflush_r+0x22>
 800a68c:	0800b00c 	.word	0x0800b00c
 800a690:	0800b02c 	.word	0x0800b02c
 800a694:	0800afec 	.word	0x0800afec

0800a698 <std>:
 800a698:	2300      	movs	r3, #0
 800a69a:	b510      	push	{r4, lr}
 800a69c:	4604      	mov	r4, r0
 800a69e:	e9c0 3300 	strd	r3, r3, [r0]
 800a6a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a6a6:	6083      	str	r3, [r0, #8]
 800a6a8:	8181      	strh	r1, [r0, #12]
 800a6aa:	6643      	str	r3, [r0, #100]	; 0x64
 800a6ac:	81c2      	strh	r2, [r0, #14]
 800a6ae:	6183      	str	r3, [r0, #24]
 800a6b0:	4619      	mov	r1, r3
 800a6b2:	2208      	movs	r2, #8
 800a6b4:	305c      	adds	r0, #92	; 0x5c
 800a6b6:	f7fb fdef 	bl	8006298 <memset>
 800a6ba:	4b05      	ldr	r3, [pc, #20]	; (800a6d0 <std+0x38>)
 800a6bc:	6224      	str	r4, [r4, #32]
 800a6be:	6263      	str	r3, [r4, #36]	; 0x24
 800a6c0:	4b04      	ldr	r3, [pc, #16]	; (800a6d4 <std+0x3c>)
 800a6c2:	62a3      	str	r3, [r4, #40]	; 0x28
 800a6c4:	4b04      	ldr	r3, [pc, #16]	; (800a6d8 <std+0x40>)
 800a6c6:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a6c8:	4b04      	ldr	r3, [pc, #16]	; (800a6dc <std+0x44>)
 800a6ca:	6323      	str	r3, [r4, #48]	; 0x30
 800a6cc:	bd10      	pop	{r4, pc}
 800a6ce:	bf00      	nop
 800a6d0:	0800a9ed 	.word	0x0800a9ed
 800a6d4:	0800aa0f 	.word	0x0800aa0f
 800a6d8:	0800aa47 	.word	0x0800aa47
 800a6dc:	0800aa6b 	.word	0x0800aa6b

0800a6e0 <_cleanup_r>:
 800a6e0:	4901      	ldr	r1, [pc, #4]	; (800a6e8 <_cleanup_r+0x8>)
 800a6e2:	f000 b8af 	b.w	800a844 <_fwalk_reent>
 800a6e6:	bf00      	nop
 800a6e8:	0800a621 	.word	0x0800a621

0800a6ec <__sfmoreglue>:
 800a6ec:	2268      	movs	r2, #104	; 0x68
 800a6ee:	b570      	push	{r4, r5, r6, lr}
 800a6f0:	1e4d      	subs	r5, r1, #1
 800a6f2:	4355      	muls	r5, r2
 800a6f4:	460e      	mov	r6, r1
 800a6f6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a6fa:	f7ff fa63 	bl	8009bc4 <_malloc_r>
 800a6fe:	4604      	mov	r4, r0
 800a700:	b140      	cbz	r0, 800a714 <__sfmoreglue+0x28>
 800a702:	2100      	movs	r1, #0
 800a704:	e9c0 1600 	strd	r1, r6, [r0]
 800a708:	300c      	adds	r0, #12
 800a70a:	60a0      	str	r0, [r4, #8]
 800a70c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a710:	f7fb fdc2 	bl	8006298 <memset>
 800a714:	4620      	mov	r0, r4
 800a716:	bd70      	pop	{r4, r5, r6, pc}

0800a718 <__sfp_lock_acquire>:
 800a718:	4801      	ldr	r0, [pc, #4]	; (800a720 <__sfp_lock_acquire+0x8>)
 800a71a:	f000 b8b3 	b.w	800a884 <__retarget_lock_acquire_recursive>
 800a71e:	bf00      	nop
 800a720:	2000042d 	.word	0x2000042d

0800a724 <__sfp_lock_release>:
 800a724:	4801      	ldr	r0, [pc, #4]	; (800a72c <__sfp_lock_release+0x8>)
 800a726:	f000 b8ae 	b.w	800a886 <__retarget_lock_release_recursive>
 800a72a:	bf00      	nop
 800a72c:	2000042d 	.word	0x2000042d

0800a730 <__sinit_lock_acquire>:
 800a730:	4801      	ldr	r0, [pc, #4]	; (800a738 <__sinit_lock_acquire+0x8>)
 800a732:	f000 b8a7 	b.w	800a884 <__retarget_lock_acquire_recursive>
 800a736:	bf00      	nop
 800a738:	2000042e 	.word	0x2000042e

0800a73c <__sinit_lock_release>:
 800a73c:	4801      	ldr	r0, [pc, #4]	; (800a744 <__sinit_lock_release+0x8>)
 800a73e:	f000 b8a2 	b.w	800a886 <__retarget_lock_release_recursive>
 800a742:	bf00      	nop
 800a744:	2000042e 	.word	0x2000042e

0800a748 <__sinit>:
 800a748:	b510      	push	{r4, lr}
 800a74a:	4604      	mov	r4, r0
 800a74c:	f7ff fff0 	bl	800a730 <__sinit_lock_acquire>
 800a750:	69a3      	ldr	r3, [r4, #24]
 800a752:	b11b      	cbz	r3, 800a75c <__sinit+0x14>
 800a754:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a758:	f7ff bff0 	b.w	800a73c <__sinit_lock_release>
 800a75c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a760:	6523      	str	r3, [r4, #80]	; 0x50
 800a762:	4b13      	ldr	r3, [pc, #76]	; (800a7b0 <__sinit+0x68>)
 800a764:	4a13      	ldr	r2, [pc, #76]	; (800a7b4 <__sinit+0x6c>)
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	62a2      	str	r2, [r4, #40]	; 0x28
 800a76a:	42a3      	cmp	r3, r4
 800a76c:	bf08      	it	eq
 800a76e:	2301      	moveq	r3, #1
 800a770:	4620      	mov	r0, r4
 800a772:	bf08      	it	eq
 800a774:	61a3      	streq	r3, [r4, #24]
 800a776:	f000 f81f 	bl	800a7b8 <__sfp>
 800a77a:	6060      	str	r0, [r4, #4]
 800a77c:	4620      	mov	r0, r4
 800a77e:	f000 f81b 	bl	800a7b8 <__sfp>
 800a782:	60a0      	str	r0, [r4, #8]
 800a784:	4620      	mov	r0, r4
 800a786:	f000 f817 	bl	800a7b8 <__sfp>
 800a78a:	2200      	movs	r2, #0
 800a78c:	2104      	movs	r1, #4
 800a78e:	60e0      	str	r0, [r4, #12]
 800a790:	6860      	ldr	r0, [r4, #4]
 800a792:	f7ff ff81 	bl	800a698 <std>
 800a796:	2201      	movs	r2, #1
 800a798:	2109      	movs	r1, #9
 800a79a:	68a0      	ldr	r0, [r4, #8]
 800a79c:	f7ff ff7c 	bl	800a698 <std>
 800a7a0:	2202      	movs	r2, #2
 800a7a2:	2112      	movs	r1, #18
 800a7a4:	68e0      	ldr	r0, [r4, #12]
 800a7a6:	f7ff ff77 	bl	800a698 <std>
 800a7aa:	2301      	movs	r3, #1
 800a7ac:	61a3      	str	r3, [r4, #24]
 800a7ae:	e7d1      	b.n	800a754 <__sinit+0xc>
 800a7b0:	0800aba8 	.word	0x0800aba8
 800a7b4:	0800a6e1 	.word	0x0800a6e1

0800a7b8 <__sfp>:
 800a7b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7ba:	4607      	mov	r7, r0
 800a7bc:	f7ff ffac 	bl	800a718 <__sfp_lock_acquire>
 800a7c0:	4b1e      	ldr	r3, [pc, #120]	; (800a83c <__sfp+0x84>)
 800a7c2:	681e      	ldr	r6, [r3, #0]
 800a7c4:	69b3      	ldr	r3, [r6, #24]
 800a7c6:	b913      	cbnz	r3, 800a7ce <__sfp+0x16>
 800a7c8:	4630      	mov	r0, r6
 800a7ca:	f7ff ffbd 	bl	800a748 <__sinit>
 800a7ce:	3648      	adds	r6, #72	; 0x48
 800a7d0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a7d4:	3b01      	subs	r3, #1
 800a7d6:	d503      	bpl.n	800a7e0 <__sfp+0x28>
 800a7d8:	6833      	ldr	r3, [r6, #0]
 800a7da:	b30b      	cbz	r3, 800a820 <__sfp+0x68>
 800a7dc:	6836      	ldr	r6, [r6, #0]
 800a7de:	e7f7      	b.n	800a7d0 <__sfp+0x18>
 800a7e0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a7e4:	b9d5      	cbnz	r5, 800a81c <__sfp+0x64>
 800a7e6:	4b16      	ldr	r3, [pc, #88]	; (800a840 <__sfp+0x88>)
 800a7e8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a7ec:	60e3      	str	r3, [r4, #12]
 800a7ee:	6665      	str	r5, [r4, #100]	; 0x64
 800a7f0:	f000 f847 	bl	800a882 <__retarget_lock_init_recursive>
 800a7f4:	f7ff ff96 	bl	800a724 <__sfp_lock_release>
 800a7f8:	2208      	movs	r2, #8
 800a7fa:	4629      	mov	r1, r5
 800a7fc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a800:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a804:	6025      	str	r5, [r4, #0]
 800a806:	61a5      	str	r5, [r4, #24]
 800a808:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a80c:	f7fb fd44 	bl	8006298 <memset>
 800a810:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a814:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a818:	4620      	mov	r0, r4
 800a81a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a81c:	3468      	adds	r4, #104	; 0x68
 800a81e:	e7d9      	b.n	800a7d4 <__sfp+0x1c>
 800a820:	2104      	movs	r1, #4
 800a822:	4638      	mov	r0, r7
 800a824:	f7ff ff62 	bl	800a6ec <__sfmoreglue>
 800a828:	4604      	mov	r4, r0
 800a82a:	6030      	str	r0, [r6, #0]
 800a82c:	2800      	cmp	r0, #0
 800a82e:	d1d5      	bne.n	800a7dc <__sfp+0x24>
 800a830:	f7ff ff78 	bl	800a724 <__sfp_lock_release>
 800a834:	230c      	movs	r3, #12
 800a836:	603b      	str	r3, [r7, #0]
 800a838:	e7ee      	b.n	800a818 <__sfp+0x60>
 800a83a:	bf00      	nop
 800a83c:	0800aba8 	.word	0x0800aba8
 800a840:	ffff0001 	.word	0xffff0001

0800a844 <_fwalk_reent>:
 800a844:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a848:	4606      	mov	r6, r0
 800a84a:	4688      	mov	r8, r1
 800a84c:	2700      	movs	r7, #0
 800a84e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a852:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a856:	f1b9 0901 	subs.w	r9, r9, #1
 800a85a:	d505      	bpl.n	800a868 <_fwalk_reent+0x24>
 800a85c:	6824      	ldr	r4, [r4, #0]
 800a85e:	2c00      	cmp	r4, #0
 800a860:	d1f7      	bne.n	800a852 <_fwalk_reent+0xe>
 800a862:	4638      	mov	r0, r7
 800a864:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a868:	89ab      	ldrh	r3, [r5, #12]
 800a86a:	2b01      	cmp	r3, #1
 800a86c:	d907      	bls.n	800a87e <_fwalk_reent+0x3a>
 800a86e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a872:	3301      	adds	r3, #1
 800a874:	d003      	beq.n	800a87e <_fwalk_reent+0x3a>
 800a876:	4629      	mov	r1, r5
 800a878:	4630      	mov	r0, r6
 800a87a:	47c0      	blx	r8
 800a87c:	4307      	orrs	r7, r0
 800a87e:	3568      	adds	r5, #104	; 0x68
 800a880:	e7e9      	b.n	800a856 <_fwalk_reent+0x12>

0800a882 <__retarget_lock_init_recursive>:
 800a882:	4770      	bx	lr

0800a884 <__retarget_lock_acquire_recursive>:
 800a884:	4770      	bx	lr

0800a886 <__retarget_lock_release_recursive>:
 800a886:	4770      	bx	lr

0800a888 <__swhatbuf_r>:
 800a888:	b570      	push	{r4, r5, r6, lr}
 800a88a:	460e      	mov	r6, r1
 800a88c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a890:	4614      	mov	r4, r2
 800a892:	2900      	cmp	r1, #0
 800a894:	461d      	mov	r5, r3
 800a896:	b096      	sub	sp, #88	; 0x58
 800a898:	da08      	bge.n	800a8ac <__swhatbuf_r+0x24>
 800a89a:	2200      	movs	r2, #0
 800a89c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a8a0:	602a      	str	r2, [r5, #0]
 800a8a2:	061a      	lsls	r2, r3, #24
 800a8a4:	d410      	bmi.n	800a8c8 <__swhatbuf_r+0x40>
 800a8a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a8aa:	e00e      	b.n	800a8ca <__swhatbuf_r+0x42>
 800a8ac:	466a      	mov	r2, sp
 800a8ae:	f000 f903 	bl	800aab8 <_fstat_r>
 800a8b2:	2800      	cmp	r0, #0
 800a8b4:	dbf1      	blt.n	800a89a <__swhatbuf_r+0x12>
 800a8b6:	9a01      	ldr	r2, [sp, #4]
 800a8b8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a8bc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a8c0:	425a      	negs	r2, r3
 800a8c2:	415a      	adcs	r2, r3
 800a8c4:	602a      	str	r2, [r5, #0]
 800a8c6:	e7ee      	b.n	800a8a6 <__swhatbuf_r+0x1e>
 800a8c8:	2340      	movs	r3, #64	; 0x40
 800a8ca:	2000      	movs	r0, #0
 800a8cc:	6023      	str	r3, [r4, #0]
 800a8ce:	b016      	add	sp, #88	; 0x58
 800a8d0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a8d4 <__smakebuf_r>:
 800a8d4:	898b      	ldrh	r3, [r1, #12]
 800a8d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a8d8:	079d      	lsls	r5, r3, #30
 800a8da:	4606      	mov	r6, r0
 800a8dc:	460c      	mov	r4, r1
 800a8de:	d507      	bpl.n	800a8f0 <__smakebuf_r+0x1c>
 800a8e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a8e4:	6023      	str	r3, [r4, #0]
 800a8e6:	6123      	str	r3, [r4, #16]
 800a8e8:	2301      	movs	r3, #1
 800a8ea:	6163      	str	r3, [r4, #20]
 800a8ec:	b002      	add	sp, #8
 800a8ee:	bd70      	pop	{r4, r5, r6, pc}
 800a8f0:	466a      	mov	r2, sp
 800a8f2:	ab01      	add	r3, sp, #4
 800a8f4:	f7ff ffc8 	bl	800a888 <__swhatbuf_r>
 800a8f8:	9900      	ldr	r1, [sp, #0]
 800a8fa:	4605      	mov	r5, r0
 800a8fc:	4630      	mov	r0, r6
 800a8fe:	f7ff f961 	bl	8009bc4 <_malloc_r>
 800a902:	b948      	cbnz	r0, 800a918 <__smakebuf_r+0x44>
 800a904:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a908:	059a      	lsls	r2, r3, #22
 800a90a:	d4ef      	bmi.n	800a8ec <__smakebuf_r+0x18>
 800a90c:	f023 0303 	bic.w	r3, r3, #3
 800a910:	f043 0302 	orr.w	r3, r3, #2
 800a914:	81a3      	strh	r3, [r4, #12]
 800a916:	e7e3      	b.n	800a8e0 <__smakebuf_r+0xc>
 800a918:	4b0d      	ldr	r3, [pc, #52]	; (800a950 <__smakebuf_r+0x7c>)
 800a91a:	62b3      	str	r3, [r6, #40]	; 0x28
 800a91c:	89a3      	ldrh	r3, [r4, #12]
 800a91e:	6020      	str	r0, [r4, #0]
 800a920:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a924:	81a3      	strh	r3, [r4, #12]
 800a926:	9b00      	ldr	r3, [sp, #0]
 800a928:	6120      	str	r0, [r4, #16]
 800a92a:	6163      	str	r3, [r4, #20]
 800a92c:	9b01      	ldr	r3, [sp, #4]
 800a92e:	b15b      	cbz	r3, 800a948 <__smakebuf_r+0x74>
 800a930:	4630      	mov	r0, r6
 800a932:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a936:	f000 f8d1 	bl	800aadc <_isatty_r>
 800a93a:	b128      	cbz	r0, 800a948 <__smakebuf_r+0x74>
 800a93c:	89a3      	ldrh	r3, [r4, #12]
 800a93e:	f023 0303 	bic.w	r3, r3, #3
 800a942:	f043 0301 	orr.w	r3, r3, #1
 800a946:	81a3      	strh	r3, [r4, #12]
 800a948:	89a0      	ldrh	r0, [r4, #12]
 800a94a:	4305      	orrs	r5, r0
 800a94c:	81a5      	strh	r5, [r4, #12]
 800a94e:	e7cd      	b.n	800a8ec <__smakebuf_r+0x18>
 800a950:	0800a6e1 	.word	0x0800a6e1

0800a954 <_malloc_usable_size_r>:
 800a954:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a958:	1f18      	subs	r0, r3, #4
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	bfbc      	itt	lt
 800a95e:	580b      	ldrlt	r3, [r1, r0]
 800a960:	18c0      	addlt	r0, r0, r3
 800a962:	4770      	bx	lr

0800a964 <_raise_r>:
 800a964:	291f      	cmp	r1, #31
 800a966:	b538      	push	{r3, r4, r5, lr}
 800a968:	4604      	mov	r4, r0
 800a96a:	460d      	mov	r5, r1
 800a96c:	d904      	bls.n	800a978 <_raise_r+0x14>
 800a96e:	2316      	movs	r3, #22
 800a970:	6003      	str	r3, [r0, #0]
 800a972:	f04f 30ff 	mov.w	r0, #4294967295
 800a976:	bd38      	pop	{r3, r4, r5, pc}
 800a978:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a97a:	b112      	cbz	r2, 800a982 <_raise_r+0x1e>
 800a97c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a980:	b94b      	cbnz	r3, 800a996 <_raise_r+0x32>
 800a982:	4620      	mov	r0, r4
 800a984:	f000 f830 	bl	800a9e8 <_getpid_r>
 800a988:	462a      	mov	r2, r5
 800a98a:	4601      	mov	r1, r0
 800a98c:	4620      	mov	r0, r4
 800a98e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a992:	f000 b817 	b.w	800a9c4 <_kill_r>
 800a996:	2b01      	cmp	r3, #1
 800a998:	d00a      	beq.n	800a9b0 <_raise_r+0x4c>
 800a99a:	1c59      	adds	r1, r3, #1
 800a99c:	d103      	bne.n	800a9a6 <_raise_r+0x42>
 800a99e:	2316      	movs	r3, #22
 800a9a0:	6003      	str	r3, [r0, #0]
 800a9a2:	2001      	movs	r0, #1
 800a9a4:	e7e7      	b.n	800a976 <_raise_r+0x12>
 800a9a6:	2400      	movs	r4, #0
 800a9a8:	4628      	mov	r0, r5
 800a9aa:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a9ae:	4798      	blx	r3
 800a9b0:	2000      	movs	r0, #0
 800a9b2:	e7e0      	b.n	800a976 <_raise_r+0x12>

0800a9b4 <raise>:
 800a9b4:	4b02      	ldr	r3, [pc, #8]	; (800a9c0 <raise+0xc>)
 800a9b6:	4601      	mov	r1, r0
 800a9b8:	6818      	ldr	r0, [r3, #0]
 800a9ba:	f7ff bfd3 	b.w	800a964 <_raise_r>
 800a9be:	bf00      	nop
 800a9c0:	20000034 	.word	0x20000034

0800a9c4 <_kill_r>:
 800a9c4:	b538      	push	{r3, r4, r5, lr}
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	4d06      	ldr	r5, [pc, #24]	; (800a9e4 <_kill_r+0x20>)
 800a9ca:	4604      	mov	r4, r0
 800a9cc:	4608      	mov	r0, r1
 800a9ce:	4611      	mov	r1, r2
 800a9d0:	602b      	str	r3, [r5, #0]
 800a9d2:	f7f7 fac0 	bl	8001f56 <_kill>
 800a9d6:	1c43      	adds	r3, r0, #1
 800a9d8:	d102      	bne.n	800a9e0 <_kill_r+0x1c>
 800a9da:	682b      	ldr	r3, [r5, #0]
 800a9dc:	b103      	cbz	r3, 800a9e0 <_kill_r+0x1c>
 800a9de:	6023      	str	r3, [r4, #0]
 800a9e0:	bd38      	pop	{r3, r4, r5, pc}
 800a9e2:	bf00      	nop
 800a9e4:	20000428 	.word	0x20000428

0800a9e8 <_getpid_r>:
 800a9e8:	f7f7 baae 	b.w	8001f48 <_getpid>

0800a9ec <__sread>:
 800a9ec:	b510      	push	{r4, lr}
 800a9ee:	460c      	mov	r4, r1
 800a9f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9f4:	f000 f894 	bl	800ab20 <_read_r>
 800a9f8:	2800      	cmp	r0, #0
 800a9fa:	bfab      	itete	ge
 800a9fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a9fe:	89a3      	ldrhlt	r3, [r4, #12]
 800aa00:	181b      	addge	r3, r3, r0
 800aa02:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800aa06:	bfac      	ite	ge
 800aa08:	6563      	strge	r3, [r4, #84]	; 0x54
 800aa0a:	81a3      	strhlt	r3, [r4, #12]
 800aa0c:	bd10      	pop	{r4, pc}

0800aa0e <__swrite>:
 800aa0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa12:	461f      	mov	r7, r3
 800aa14:	898b      	ldrh	r3, [r1, #12]
 800aa16:	4605      	mov	r5, r0
 800aa18:	05db      	lsls	r3, r3, #23
 800aa1a:	460c      	mov	r4, r1
 800aa1c:	4616      	mov	r6, r2
 800aa1e:	d505      	bpl.n	800aa2c <__swrite+0x1e>
 800aa20:	2302      	movs	r3, #2
 800aa22:	2200      	movs	r2, #0
 800aa24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa28:	f000 f868 	bl	800aafc <_lseek_r>
 800aa2c:	89a3      	ldrh	r3, [r4, #12]
 800aa2e:	4632      	mov	r2, r6
 800aa30:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aa34:	81a3      	strh	r3, [r4, #12]
 800aa36:	4628      	mov	r0, r5
 800aa38:	463b      	mov	r3, r7
 800aa3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aa3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aa42:	f000 b817 	b.w	800aa74 <_write_r>

0800aa46 <__sseek>:
 800aa46:	b510      	push	{r4, lr}
 800aa48:	460c      	mov	r4, r1
 800aa4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa4e:	f000 f855 	bl	800aafc <_lseek_r>
 800aa52:	1c43      	adds	r3, r0, #1
 800aa54:	89a3      	ldrh	r3, [r4, #12]
 800aa56:	bf15      	itete	ne
 800aa58:	6560      	strne	r0, [r4, #84]	; 0x54
 800aa5a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800aa5e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800aa62:	81a3      	strheq	r3, [r4, #12]
 800aa64:	bf18      	it	ne
 800aa66:	81a3      	strhne	r3, [r4, #12]
 800aa68:	bd10      	pop	{r4, pc}

0800aa6a <__sclose>:
 800aa6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa6e:	f000 b813 	b.w	800aa98 <_close_r>
	...

0800aa74 <_write_r>:
 800aa74:	b538      	push	{r3, r4, r5, lr}
 800aa76:	4604      	mov	r4, r0
 800aa78:	4608      	mov	r0, r1
 800aa7a:	4611      	mov	r1, r2
 800aa7c:	2200      	movs	r2, #0
 800aa7e:	4d05      	ldr	r5, [pc, #20]	; (800aa94 <_write_r+0x20>)
 800aa80:	602a      	str	r2, [r5, #0]
 800aa82:	461a      	mov	r2, r3
 800aa84:	f7f7 fa9e 	bl	8001fc4 <_write>
 800aa88:	1c43      	adds	r3, r0, #1
 800aa8a:	d102      	bne.n	800aa92 <_write_r+0x1e>
 800aa8c:	682b      	ldr	r3, [r5, #0]
 800aa8e:	b103      	cbz	r3, 800aa92 <_write_r+0x1e>
 800aa90:	6023      	str	r3, [r4, #0]
 800aa92:	bd38      	pop	{r3, r4, r5, pc}
 800aa94:	20000428 	.word	0x20000428

0800aa98 <_close_r>:
 800aa98:	b538      	push	{r3, r4, r5, lr}
 800aa9a:	2300      	movs	r3, #0
 800aa9c:	4d05      	ldr	r5, [pc, #20]	; (800aab4 <_close_r+0x1c>)
 800aa9e:	4604      	mov	r4, r0
 800aaa0:	4608      	mov	r0, r1
 800aaa2:	602b      	str	r3, [r5, #0]
 800aaa4:	f7f7 faaa 	bl	8001ffc <_close>
 800aaa8:	1c43      	adds	r3, r0, #1
 800aaaa:	d102      	bne.n	800aab2 <_close_r+0x1a>
 800aaac:	682b      	ldr	r3, [r5, #0]
 800aaae:	b103      	cbz	r3, 800aab2 <_close_r+0x1a>
 800aab0:	6023      	str	r3, [r4, #0]
 800aab2:	bd38      	pop	{r3, r4, r5, pc}
 800aab4:	20000428 	.word	0x20000428

0800aab8 <_fstat_r>:
 800aab8:	b538      	push	{r3, r4, r5, lr}
 800aaba:	2300      	movs	r3, #0
 800aabc:	4d06      	ldr	r5, [pc, #24]	; (800aad8 <_fstat_r+0x20>)
 800aabe:	4604      	mov	r4, r0
 800aac0:	4608      	mov	r0, r1
 800aac2:	4611      	mov	r1, r2
 800aac4:	602b      	str	r3, [r5, #0]
 800aac6:	f7f7 faa4 	bl	8002012 <_fstat>
 800aaca:	1c43      	adds	r3, r0, #1
 800aacc:	d102      	bne.n	800aad4 <_fstat_r+0x1c>
 800aace:	682b      	ldr	r3, [r5, #0]
 800aad0:	b103      	cbz	r3, 800aad4 <_fstat_r+0x1c>
 800aad2:	6023      	str	r3, [r4, #0]
 800aad4:	bd38      	pop	{r3, r4, r5, pc}
 800aad6:	bf00      	nop
 800aad8:	20000428 	.word	0x20000428

0800aadc <_isatty_r>:
 800aadc:	b538      	push	{r3, r4, r5, lr}
 800aade:	2300      	movs	r3, #0
 800aae0:	4d05      	ldr	r5, [pc, #20]	; (800aaf8 <_isatty_r+0x1c>)
 800aae2:	4604      	mov	r4, r0
 800aae4:	4608      	mov	r0, r1
 800aae6:	602b      	str	r3, [r5, #0]
 800aae8:	f7f7 faa2 	bl	8002030 <_isatty>
 800aaec:	1c43      	adds	r3, r0, #1
 800aaee:	d102      	bne.n	800aaf6 <_isatty_r+0x1a>
 800aaf0:	682b      	ldr	r3, [r5, #0]
 800aaf2:	b103      	cbz	r3, 800aaf6 <_isatty_r+0x1a>
 800aaf4:	6023      	str	r3, [r4, #0]
 800aaf6:	bd38      	pop	{r3, r4, r5, pc}
 800aaf8:	20000428 	.word	0x20000428

0800aafc <_lseek_r>:
 800aafc:	b538      	push	{r3, r4, r5, lr}
 800aafe:	4604      	mov	r4, r0
 800ab00:	4608      	mov	r0, r1
 800ab02:	4611      	mov	r1, r2
 800ab04:	2200      	movs	r2, #0
 800ab06:	4d05      	ldr	r5, [pc, #20]	; (800ab1c <_lseek_r+0x20>)
 800ab08:	602a      	str	r2, [r5, #0]
 800ab0a:	461a      	mov	r2, r3
 800ab0c:	f7f7 fa9a 	bl	8002044 <_lseek>
 800ab10:	1c43      	adds	r3, r0, #1
 800ab12:	d102      	bne.n	800ab1a <_lseek_r+0x1e>
 800ab14:	682b      	ldr	r3, [r5, #0]
 800ab16:	b103      	cbz	r3, 800ab1a <_lseek_r+0x1e>
 800ab18:	6023      	str	r3, [r4, #0]
 800ab1a:	bd38      	pop	{r3, r4, r5, pc}
 800ab1c:	20000428 	.word	0x20000428

0800ab20 <_read_r>:
 800ab20:	b538      	push	{r3, r4, r5, lr}
 800ab22:	4604      	mov	r4, r0
 800ab24:	4608      	mov	r0, r1
 800ab26:	4611      	mov	r1, r2
 800ab28:	2200      	movs	r2, #0
 800ab2a:	4d05      	ldr	r5, [pc, #20]	; (800ab40 <_read_r+0x20>)
 800ab2c:	602a      	str	r2, [r5, #0]
 800ab2e:	461a      	mov	r2, r3
 800ab30:	f7f7 fa2b 	bl	8001f8a <_read>
 800ab34:	1c43      	adds	r3, r0, #1
 800ab36:	d102      	bne.n	800ab3e <_read_r+0x1e>
 800ab38:	682b      	ldr	r3, [r5, #0]
 800ab3a:	b103      	cbz	r3, 800ab3e <_read_r+0x1e>
 800ab3c:	6023      	str	r3, [r4, #0]
 800ab3e:	bd38      	pop	{r3, r4, r5, pc}
 800ab40:	20000428 	.word	0x20000428

0800ab44 <_init>:
 800ab44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab46:	bf00      	nop
 800ab48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab4a:	bc08      	pop	{r3}
 800ab4c:	469e      	mov	lr, r3
 800ab4e:	4770      	bx	lr

0800ab50 <_fini>:
 800ab50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab52:	bf00      	nop
 800ab54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab56:	bc08      	pop	{r3}
 800ab58:	469e      	mov	lr, r3
 800ab5a:	4770      	bx	lr
